using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DiversityWorkbench.Archive
{
    public class Column
    {
        private string _ColumnName;
        private DiversityWorkbench.Archive.Table _Table;
        public Column(string ColumnName, DiversityWorkbench.Archive.Table Table)
        {
            this._ColumnName = ColumnName;
            this._Table = Table;
        }

        public string DataType;
        public int DataTypeLength;
        public bool IsNullable = false;

        private System.Collections.Generic.Dictionary<string, string> _ForeignRelations;
        /// <summary>
        /// The foreign relations for the column as defined in the database: Key = ForeignTable, Value = ForeignColumn
        /// </summary>
        public System.Collections.Generic.Dictionary<string, string> ForeignRelations
        {
            get
            {
                if (this._ForeignRelations == null)
                {
                    this._ForeignRelations = new Dictionary<string, string>();
                }
                return this._ForeignRelations;
            }
        }

        private string _ForeignRelationTable;
        /// <summary>
        /// The name of the parent table of a foreign relation as defined in the database and choosed by the user
        /// </summary>
        public string ForeignRelationTable
        {
            get
            {
                if (this._ForeignRelationTable == null)
                {
                    if (this.ForeignRelations.Count > 0)
                    {
                        foreach (System.Collections.Generic.KeyValuePair<string, string> KV in this.ForeignRelations)
                            this._ForeignRelationTable = KV.Key;
                    }
                }
                return _ForeignRelationTable;
            }
            set { _ForeignRelationTable = value; }
        }

        private string _ForeignRelationColumn;
        /// <summary>
        /// The name of the column in the foreign relation table as defined in the database and choosed by the user
        /// </summary>
        public string ForeignRelationColumn
        {
            get
            {
                if (this._ForeignRelationColumn == null)
                {
                    if (this.ForeignRelations.Count > 0)
                    {
                        foreach (System.Collections.Generic.KeyValuePair<string, string> KV in this.ForeignRelations)
                            this._ForeignRelationColumn = KV.Value;
                    }
                    else
                    {
                        this._ForeignRelationColumn = "";
                    }
                }
                return _ForeignRelationColumn;
            }
            set { _ForeignRelationColumn = value; }
        }

        private string _ParentColumn;

        public string ParentColumn
        {
            get { return _ParentColumn; }
            set { _ParentColumn = value; }
        }

        private bool? _IsIdentity;
        /// <summary>
        /// If the column is an identity column where the value will be automatically generated by the database
        /// </summary>
        public bool IsIdentity
        {
            get
            {
                if (this._IsIdentity == null)
                {
                    if (this.DataType != "int")
                        this._IsIdentity = false;
                    else
                    {
                        try
                        {
                            string SQL = "select case when min(c.name) is null then '' else min(c.name) end from sys.columns c, sys.tables t where c.is_identity = 1 " +
                            "and c.object_id = t.object_id and t.name = '" + this._Table.TableName() + "'";
                            string IdentityColumn = DiversityWorkbench.Forms.FormFunctions.SqlExecuteScalar(SQL);
                            if (IdentityColumn.Length > 0 && IdentityColumn == this._ColumnName)
                                this.IsIdentity = true;
                            else
                                this._IsIdentity = false;
                        }
                        catch (System.Exception ex)
                        {
                            this._IsIdentity = false;
                        }
                    }
                }
                return (bool)_IsIdentity;
            }
            set { _IsIdentity = value; }
        }

        private System.Data.DataTable _DtSource;
        public System.Data.DataTable DtSource()
        {
            if (this.ForeignRelations.Count == 1)
            {
                if (this._DtSource == null)
                {
                    this._DtSource = new System.Data.DataTable();
                    string SQL = "SELECT DISTINCT [" + this.ForeignRelationColumn + "] FROM [" + this.ForeignRelationTable + "] ORDER BY [" + this.ForeignRelationColumn + "]";
                    Microsoft.Data.SqlClient.SqlDataAdapter ad = new Microsoft.Data.SqlClient.SqlDataAdapter(SQL, DiversityWorkbench.Settings.ConnectionString);
                    ad.Fill(this._DtSource);
                }
                return this._DtSource;
            }
            else return null;
        }

        private string _Description;
        public string Description
        {
            get
            {
                if (this._Description == null)
                {
                    this._Description =  DiversityWorkbench.Forms.FormFunctions.getColumnDescription(this._Table.TableName(), this._ColumnName);
                }
                return this._Description;
            }
        }

    }
}
