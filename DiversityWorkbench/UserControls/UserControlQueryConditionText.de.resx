<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="bigger_than_the_given_value" xml:space="preserve">
    <value>größer als der angegebene Wert</value>
  </data>
  <data name="complete" xml:space="preserve">
    <value>vollständig</value>
  </data>
  <data name="containing_a_given_XML_node" xml:space="preserve">
    <value>die den angegebenen XML Knoten enthalten</value>
  </data>
  <data name="containing_the_given_value_and_all_subsidiary_values" xml:space="preserve">
    <value>die den angegebenen Wert und alle untergeordneten Werte enthalten</value>
  </data>
  <data name="exactly_like_the_given_value" xml:space="preserve">
    <value>exakt wie der angegebene Wert</value>
  </data>
  <data name="is_not_a_numeric_value" xml:space="preserve">
    <value>ist kein numerischer Wert</value>
  </data>
  <data name="is_not_a_valid_date" xml:space="preserve">
    <value>ist kein gültiges Datum</value>
  </data>
  <data name="is_not_a_valid_day" xml:space="preserve">
    <value>ist kein gültiger Tag</value>
  </data>
  <data name="is_not_a_valid_month" xml:space="preserve">
    <value>ist kein gültiger Monat</value>
  </data>
  <data name="is_not_a_valid_year" xml:space="preserve">
    <value>ist kein gültiges Jahr</value>
  </data>
  <data name="missing" xml:space="preserve">
    <value>fehlend</value>
  </data>
  <data name="not_containing_a_given_XML_node" xml:space="preserve">
    <value>die den angegebenen XML Knoten nicht enthalten</value>
  </data>
  <data name="Operator_for_comparision_between_the_given_value_and_the_values_in_the_database" xml:space="preserve">
    <value>Operator für den Vergleich zwischen dem angegebenen Wert und den Einträgen in der Datenbank</value>
  </data>
  <data name="present" xml:space="preserve">
    <value>vorhanden</value>
  </data>
  <data name="search_for_entries" xml:space="preserve">
    <value>Suche nach Einträgen</value>
  </data>
  <data name="similar_to_the_given_value" xml:space="preserve">
    <value>ähnlich dem angegebenen Wert</value>
  </data>
  <data name="smaller_than_the_given_value" xml:space="preserve">
    <value>kleiner als der angegebene Wert</value>
  </data>
  <data name="that_are_not_like_the_given_value" xml:space="preserve">
    <value>nicht ähnlich dem angegebenen Wert</value>
  </data>
  <data name="use_wildcard" xml:space="preserve">
    <value>benutzen Sie '_' oder '%' als Platzhalter bzw. [...] für eine Auswahl von Zeichen</value>
  </data>
  <data name="where_a_value_is_missing" xml:space="preserve">
    <value>in denen ein Eintrag fehlt</value>
  </data>
  <data name="where_a_value_is_present" xml:space="preserve">
    <value>in denen ein Eintrag vorhanden ist</value>
  </data>
  <data name="where_a_value_is_present_or_missing" xml:space="preserve">
    <value>in denen ein Eintrag vorhanden ist oder fehlt</value>
  </data>
  <data name="within_the_range_of_the_given_values" xml:space="preserve">
    <value>innerhalb des Bereichs der angegebenen Werte</value>
  </data>
  <data name="maximal_distance_to" xml:space="preserve">
    <value>mit maximalem Abstand von ...</value>
  </data>
  <data name="outside_an_area" xml:space="preserve">
    <value>außerhalb einer Fläche</value>
  </data>
  <data name="within_an_area" xml:space="preserve">
    <value>innerhalb einer Fläche</value>
  </data>
  <data name="use_separator" xml:space="preserve">
    <value>benutzen sie '|' als Trennung der Einzelwerte</value>
  </data>
  <data name="partial_available" xml:space="preserve">
    <value>teilw. vorhanden</value>
  </data>
  <data name="not_within_the_range_of_the_given_values" xml:space="preserve">
    <value>nicht innerhalb des Bereichs der angegebenen Werte</value>
  </data>
  <data name="including_lower_hierarchy" xml:space="preserve">
    <value>einschliesslich untergeordneter Hierarchie</value>
  </data>
  <data name="including_lower_hierarchy_and_synonyms" xml:space="preserve">
    <value>einschliesslich untergeordneter Hierarchie und Synonymen</value>
  </data>
  <data name="including_synonyms" xml:space="preserve">
    <value>einschliesslich Synonymen</value>
  </data>
  <data name="invalid" xml:space="preserve">
    <value>ungültig</value>
  </data>
  <data name="including_all_values" xml:space="preserve">
    <value>mit allen angegebenen Werten</value>
  </data>
</root>