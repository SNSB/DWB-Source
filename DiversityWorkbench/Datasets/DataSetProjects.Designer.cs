//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DiversityWorkbench.Datasets {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSetProjects")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetProjects : global::System.Data.DataSet {
        
        private ProjectDataTable tableProject;
        
        private global::System.Data.DataRelation relationFK_Project_Project;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public DataSetProjects() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
            " or extended by application code.", DiagnosticId="SYSLIB0051")]
        protected DataSetProjects(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Project"] != null)) {
                    base.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectDataTable Project {
            get {
                return this.tableProject;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DataSetProjects cln = ((DataSetProjects)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Project"] != null)) {
                    base.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableProject = ((ProjectDataTable)(base.Tables["Project"]));
            if ((initTable == true)) {
                if ((this.tableProject != null)) {
                    this.tableProject.InitVars();
                }
            }
            this.relationFK_Project_Project = this.Relations["FK_Project_Project"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DataSetProjects";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetProjects.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableProject = new ProjectDataTable();
            base.Tables.Add(this.tableProject);
            this.relationFK_Project_Project = new global::System.Data.DataRelation("FK_Project_Project", new global::System.Data.DataColumn[] {
                        this.tableProject.ProjectIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableProject.ProjectParentIDColumn}, false);
            this.Relations.Add(this.relationFK_Project_Project);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeProject() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSetProjects ds = new DataSetProjects();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void ProjectRowChangeEventHandler(object sender, ProjectRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectDataTable : global::System.Data.TypedTableBase<ProjectRow> {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProjectParentID;
            
            private global::System.Data.DataColumn columnProject;
            
            private global::System.Data.DataColumn columnProjectTitle;
            
            private global::System.Data.DataColumn columnProjectDescription;
            
            private global::System.Data.DataColumn columnProjectEditors;
            
            private global::System.Data.DataColumn columnProjectInstitution;
            
            private global::System.Data.DataColumn columnProjectNotes;
            
            private global::System.Data.DataColumn columnProjectCopyright;
            
            private global::System.Data.DataColumn columnProjectVersion;
            
            private global::System.Data.DataColumn columnProjectURL;
            
            private global::System.Data.DataColumn columnProjectSettings;
            
            private global::System.Data.DataColumn columnLogInsertedBy;
            
            private global::System.Data.DataColumn columnLogInsertedWhen;
            
            private global::System.Data.DataColumn columnLogUpdatedBy;
            
            private global::System.Data.DataColumn columnLogUpdatedWhen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectDataTable() {
                this.TableName = "Project";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ProjectDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected ProjectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectParentIDColumn {
                get {
                    return this.columnProjectParentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectTitleColumn {
                get {
                    return this.columnProjectTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectDescriptionColumn {
                get {
                    return this.columnProjectDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectEditorsColumn {
                get {
                    return this.columnProjectEditors;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectInstitutionColumn {
                get {
                    return this.columnProjectInstitution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectNotesColumn {
                get {
                    return this.columnProjectNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectCopyrightColumn {
                get {
                    return this.columnProjectCopyright;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectVersionColumn {
                get {
                    return this.columnProjectVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectURLColumn {
                get {
                    return this.columnProjectURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectSettingsColumn {
                get {
                    return this.columnProjectSettings;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LogInsertedByColumn {
                get {
                    return this.columnLogInsertedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LogInsertedWhenColumn {
                get {
                    return this.columnLogInsertedWhen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LogUpdatedByColumn {
                get {
                    return this.columnLogUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LogUpdatedWhenColumn {
                get {
                    return this.columnLogUpdatedWhen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectRow this[int index] {
                get {
                    return ((ProjectRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ProjectRowChangeEventHandler ProjectRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ProjectRowChangeEventHandler ProjectRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ProjectRowChangeEventHandler ProjectRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ProjectRowChangeEventHandler ProjectRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddProjectRow(ProjectRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectRow AddProjectRow(ProjectRow parentProjectRowByFK_Project_Project, string Project, string ProjectTitle, string ProjectDescription, string ProjectEditors, string ProjectInstitution, string ProjectNotes, string ProjectCopyright, string ProjectVersion, string ProjectURL, string ProjectSettings, string LogInsertedBy, System.DateTime LogInsertedWhen, string LogUpdatedBy, System.DateTime LogUpdatedWhen) {
                ProjectRow rowProjectRow = ((ProjectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Project,
                        ProjectTitle,
                        ProjectDescription,
                        ProjectEditors,
                        ProjectInstitution,
                        ProjectNotes,
                        ProjectCopyright,
                        ProjectVersion,
                        ProjectURL,
                        ProjectSettings,
                        LogInsertedBy,
                        LogInsertedWhen,
                        LogUpdatedBy,
                        LogUpdatedWhen};
                if ((parentProjectRowByFK_Project_Project != null)) {
                    columnValuesArray[1] = parentProjectRowByFK_Project_Project[0];
                }
                rowProjectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectRow);
                return rowProjectRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectRow FindByProjectID(int ProjectID) {
                return ((ProjectRow)(this.Rows.Find(new object[] {
                            ProjectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ProjectDataTable cln = ((ProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProjectParentID = base.Columns["ProjectParentID"];
                this.columnProject = base.Columns["Project"];
                this.columnProjectTitle = base.Columns["ProjectTitle"];
                this.columnProjectDescription = base.Columns["ProjectDescription"];
                this.columnProjectEditors = base.Columns["ProjectEditors"];
                this.columnProjectInstitution = base.Columns["ProjectInstitution"];
                this.columnProjectNotes = base.Columns["ProjectNotes"];
                this.columnProjectCopyright = base.Columns["ProjectCopyright"];
                this.columnProjectVersion = base.Columns["ProjectVersion"];
                this.columnProjectURL = base.Columns["ProjectURL"];
                this.columnProjectSettings = base.Columns["ProjectSettings"];
                this.columnLogInsertedBy = base.Columns["LogInsertedBy"];
                this.columnLogInsertedWhen = base.Columns["LogInsertedWhen"];
                this.columnLogUpdatedBy = base.Columns["LogUpdatedBy"];
                this.columnLogUpdatedWhen = base.Columns["LogUpdatedWhen"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProjectParentID = new global::System.Data.DataColumn("ProjectParentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectParentID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.columnProjectTitle = new global::System.Data.DataColumn("ProjectTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectTitle);
                this.columnProjectDescription = new global::System.Data.DataColumn("ProjectDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectDescription);
                this.columnProjectEditors = new global::System.Data.DataColumn("ProjectEditors", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectEditors);
                this.columnProjectInstitution = new global::System.Data.DataColumn("ProjectInstitution", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectInstitution);
                this.columnProjectNotes = new global::System.Data.DataColumn("ProjectNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectNotes);
                this.columnProjectCopyright = new global::System.Data.DataColumn("ProjectCopyright", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectCopyright);
                this.columnProjectVersion = new global::System.Data.DataColumn("ProjectVersion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectVersion);
                this.columnProjectURL = new global::System.Data.DataColumn("ProjectURL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectURL);
                this.columnProjectSettings = new global::System.Data.DataColumn("ProjectSettings", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectSettings);
                this.columnLogInsertedBy = new global::System.Data.DataColumn("LogInsertedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogInsertedBy);
                this.columnLogInsertedWhen = new global::System.Data.DataColumn("LogInsertedWhen", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogInsertedWhen);
                this.columnLogUpdatedBy = new global::System.Data.DataColumn("LogUpdatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogUpdatedBy);
                this.columnLogUpdatedWhen = new global::System.Data.DataColumn("LogUpdatedWhen", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogUpdatedWhen);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID}, true));
                this.columnProjectID.AutoIncrement = true;
                this.columnProjectID.AutoIncrementSeed = -1;
                this.columnProjectID.AutoIncrementStep = -1;
                this.columnProjectID.AllowDBNull = false;
                this.columnProjectID.ReadOnly = true;
                this.columnProjectID.Unique = true;
                this.columnProject.AllowDBNull = false;
                this.columnProject.MaxLength = 50;
                this.columnProjectTitle.MaxLength = 200;
                this.columnProjectDescription.MaxLength = 2000;
                this.columnProjectEditors.MaxLength = 255;
                this.columnProjectInstitution.MaxLength = 500;
                this.columnProjectNotes.MaxLength = 1000;
                this.columnProjectCopyright.MaxLength = 255;
                this.columnProjectVersion.MaxLength = 255;
                this.columnProjectURL.MaxLength = 255;
                this.columnProjectSettings.MaxLength = 2147483647;
                this.columnLogInsertedBy.MaxLength = 50;
                this.columnLogUpdatedBy.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectRow NewProjectRow() {
                return ((ProjectRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectRowChanged != null)) {
                    this.ProjectRowChanged(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectRowChanging != null)) {
                    this.ProjectRowChanging(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectRowDeleted != null)) {
                    this.ProjectRowDeleted(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectRowDeleting != null)) {
                    this.ProjectRowDeleting(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveProjectRow(ProjectRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetProjects ds = new DataSetProjects();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ProjectRow : global::System.Data.DataRow {
            
            private ProjectDataTable tableProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ProjectRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProject = ((ProjectDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProject.ProjectIDColumn]));
                }
                set {
                    this[this.tableProject.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int ProjectParentID {
                get {
                    try {
                        return ((int)(this[this.tableProject.ProjectParentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ProjectParentID in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.ProjectParentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Project {
                get {
                    return ((string)(this[this.tableProject.ProjectColumn]));
                }
                set {
                    this[this.tableProject.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectTitle {
                get {
                    try {
                        return ((string)(this[this.tableProject.ProjectTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ProjectTitle in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.ProjectTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectDescription {
                get {
                    try {
                        return ((string)(this[this.tableProject.ProjectDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ProjectDescription in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.ProjectDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectEditors {
                get {
                    try {
                        return ((string)(this[this.tableProject.ProjectEditorsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ProjectEditors in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.ProjectEditorsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectInstitution {
                get {
                    try {
                        return ((string)(this[this.tableProject.ProjectInstitutionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ProjectInstitution in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.ProjectInstitutionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectNotes {
                get {
                    try {
                        return ((string)(this[this.tableProject.ProjectNotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ProjectNotes in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.ProjectNotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectCopyright {
                get {
                    try {
                        return ((string)(this[this.tableProject.ProjectCopyrightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ProjectCopyright in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.ProjectCopyrightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectVersion {
                get {
                    try {
                        return ((string)(this[this.tableProject.ProjectVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ProjectVersion in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.ProjectVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectURL {
                get {
                    try {
                        return ((string)(this[this.tableProject.ProjectURLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ProjectURL in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.ProjectURLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectSettings {
                get {
                    try {
                        return ((string)(this[this.tableProject.ProjectSettingsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ProjectSettings in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.ProjectSettingsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LogInsertedBy {
                get {
                    try {
                        return ((string)(this[this.tableProject.LogInsertedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LogInsertedBy in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.LogInsertedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime LogInsertedWhen {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProject.LogInsertedWhenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LogInsertedWhen in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.LogInsertedWhenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LogUpdatedBy {
                get {
                    try {
                        return ((string)(this[this.tableProject.LogUpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LogUpdatedBy in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.LogUpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime LogUpdatedWhen {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProject.LogUpdatedWhenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LogUpdatedWhen in Tabelle Project ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.LogUpdatedWhenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectRow ProjectRowParent {
                get {
                    return ((ProjectRow)(this.GetParentRow(this.Table.ParentRelations["FK_Project_Project"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Project_Project"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectParentIDNull() {
                return this.IsNull(this.tableProject.ProjectParentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectParentIDNull() {
                this[this.tableProject.ProjectParentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectTitleNull() {
                return this.IsNull(this.tableProject.ProjectTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectTitleNull() {
                this[this.tableProject.ProjectTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectDescriptionNull() {
                return this.IsNull(this.tableProject.ProjectDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectDescriptionNull() {
                this[this.tableProject.ProjectDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectEditorsNull() {
                return this.IsNull(this.tableProject.ProjectEditorsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectEditorsNull() {
                this[this.tableProject.ProjectEditorsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectInstitutionNull() {
                return this.IsNull(this.tableProject.ProjectInstitutionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectInstitutionNull() {
                this[this.tableProject.ProjectInstitutionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectNotesNull() {
                return this.IsNull(this.tableProject.ProjectNotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectNotesNull() {
                this[this.tableProject.ProjectNotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectCopyrightNull() {
                return this.IsNull(this.tableProject.ProjectCopyrightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectCopyrightNull() {
                this[this.tableProject.ProjectCopyrightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectVersionNull() {
                return this.IsNull(this.tableProject.ProjectVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectVersionNull() {
                this[this.tableProject.ProjectVersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectURLNull() {
                return this.IsNull(this.tableProject.ProjectURLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectURLNull() {
                this[this.tableProject.ProjectURLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectSettingsNull() {
                return this.IsNull(this.tableProject.ProjectSettingsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectSettingsNull() {
                this[this.tableProject.ProjectSettingsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLogInsertedByNull() {
                return this.IsNull(this.tableProject.LogInsertedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLogInsertedByNull() {
                this[this.tableProject.LogInsertedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLogInsertedWhenNull() {
                return this.IsNull(this.tableProject.LogInsertedWhenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLogInsertedWhenNull() {
                this[this.tableProject.LogInsertedWhenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLogUpdatedByNull() {
                return this.IsNull(this.tableProject.LogUpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLogUpdatedByNull() {
                this[this.tableProject.LogUpdatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLogUpdatedWhenNull() {
                return this.IsNull(this.tableProject.LogUpdatedWhenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLogUpdatedWhenNull() {
                this[this.tableProject.LogUpdatedWhenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectRow[] GetProjectRows() {
                if ((this.Table.ChildRelations["FK_Project_Project"] == null)) {
                    return new ProjectRow[0];
                }
                else {
                    return ((ProjectRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Project_Project"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class ProjectRowChangeEvent : global::System.EventArgs {
            
            private ProjectRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectRowChangeEvent(ProjectRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DiversityWorkbench.Datasets.DataSetProjectsTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProjectTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public ProjectTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Project";
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            tableMapping.ColumnMappings.Add("ProjectParentID", "ProjectParentID");
            tableMapping.ColumnMappings.Add("Project", "Project");
            tableMapping.ColumnMappings.Add("ProjectTitle", "ProjectTitle");
            tableMapping.ColumnMappings.Add("ProjectDescription", "ProjectDescription");
            tableMapping.ColumnMappings.Add("ProjectEditors", "ProjectEditors");
            tableMapping.ColumnMappings.Add("ProjectInstitution", "ProjectInstitution");
            tableMapping.ColumnMappings.Add("ProjectNotes", "ProjectNotes");
            tableMapping.ColumnMappings.Add("ProjectCopyright", "ProjectCopyright");
            tableMapping.ColumnMappings.Add("ProjectVersion", "ProjectVersion");
            tableMapping.ColumnMappings.Add("ProjectURL", "ProjectURL");
            tableMapping.ColumnMappings.Add("ProjectSettings", "ProjectSettings");
            tableMapping.ColumnMappings.Add("LogInsertedBy", "LogInsertedBy");
            tableMapping.ColumnMappings.Add("LogInsertedWhen", "LogInsertedWhen");
            tableMapping.ColumnMappings.Add("LogUpdatedBy", "LogUpdatedBy");
            tableMapping.ColumnMappings.Add("LogUpdatedWhen", "LogUpdatedWhen");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Project] WHERE (([ProjectID] = @Original_ProjectID) AND ((@IsNull_Pr" +
                "ojectParentID = 1 AND [ProjectParentID] IS NULL) OR ([ProjectParentID] = @Origin" +
                "al_ProjectParentID)) AND ([Project] = @Original_Project) AND ((@IsNull_ProjectTi" +
                "tle = 1 AND [ProjectTitle] IS NULL) OR ([ProjectTitle] = @Original_ProjectTitle)" +
                ") AND ((@IsNull_ProjectDescription = 1 AND [ProjectDescription] IS NULL) OR ([Pr" +
                "ojectDescription] = @Original_ProjectDescription)) AND ((@IsNull_ProjectEditors " +
                "= 1 AND [ProjectEditors] IS NULL) OR ([ProjectEditors] = @Original_ProjectEditor" +
                "s)) AND ((@IsNull_ProjectInstitution = 1 AND [ProjectInstitution] IS NULL) OR ([" +
                "ProjectInstitution] = @Original_ProjectInstitution)) AND ((@IsNull_ProjectNotes " +
                "= 1 AND [ProjectNotes] IS NULL) OR ([ProjectNotes] = @Original_ProjectNotes)) AN" +
                "D ((@IsNull_ProjectCopyright = 1 AND [ProjectCopyright] IS NULL) OR ([ProjectCop" +
                "yright] = @Original_ProjectCopyright)) AND ((@IsNull_ProjectVersion = 1 AND [Pro" +
                "jectVersion] IS NULL) OR ([ProjectVersion] = @Original_ProjectVersion)) AND ((@I" +
                "sNull_ProjectURL = 1 AND [ProjectURL] IS NULL) OR ([ProjectURL] = @Original_Proj" +
                "ectURL)) AND ((@IsNull_LogInsertedBy = 1 AND [LogInsertedBy] IS NULL) OR ([LogIn" +
                "sertedBy] = @Original_LogInsertedBy)) AND ((@IsNull_LogInsertedWhen = 1 AND [Log" +
                "InsertedWhen] IS NULL) OR ([LogInsertedWhen] = @Original_LogInsertedWhen)) AND (" +
                "(@IsNull_LogUpdatedBy = 1 AND [LogUpdatedBy] IS NULL) OR ([LogUpdatedBy] = @Orig" +
                "inal_LogUpdatedBy)) AND ((@IsNull_LogUpdatedWhen = 1 AND [LogUpdatedWhen] IS NUL" +
                "L) OR ([LogUpdatedWhen] = @Original_LogUpdatedWhen)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectParentID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectParentID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectParentID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectParentID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Project";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Project";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectTitle";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectTitle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectTitle";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectTitle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectDescription";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectDescription";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectDescription";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectDescription";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectEditors";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectEditors";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectEditors";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectEditors";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectInstitution";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectInstitution";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectInstitution";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectInstitution";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectNotes";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectNotes";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectNotes";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectNotes";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectCopyright";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectCopyright";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectCopyright";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectCopyright";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectVersion";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectVersion";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectVersion";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectVersion";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectURL";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectURL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectURL";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectURL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LogInsertedBy";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LogInsertedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LogInsertedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LogInsertedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.SmallDateTime;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LogUpdatedBy";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LogUpdatedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LogUpdatedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LogUpdatedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LogUpdatedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LogUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LogUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.SmallDateTime;
            param.IsNullable = true;
            param.SourceColumn = "LogUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Project] ([ProjectParentID], [Project], [ProjectTitle], [ProjectDescription], [ProjectEditors], [ProjectInstitution], [ProjectNotes], [ProjectCopyright], [ProjectVersion], [ProjectURL], [ProjectSettings], [LogInsertedBy], [LogInsertedWhen], [LogUpdatedBy], [LogUpdatedWhen]) VALUES (@ProjectParentID, @Project, @ProjectTitle, @ProjectDescription, @ProjectEditors, @ProjectInstitution, @ProjectNotes, @ProjectCopyright, @ProjectVersion, @ProjectURL, @ProjectSettings, @LogInsertedBy, @LogInsertedWhen, @LogUpdatedBy, @LogUpdatedWhen);
SELECT ProjectID, ProjectParentID, Project, ProjectTitle, ProjectDescription, ProjectEditors, ProjectInstitution, ProjectNotes, ProjectCopyright, ProjectVersion, ProjectURL, ProjectSettings, LogInsertedBy, LogInsertedWhen, LogUpdatedBy, LogUpdatedWhen FROM Project WHERE (ProjectID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectParentID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectParentID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Project";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Project";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectTitle";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectTitle";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectDescription";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectDescription";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectEditors";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectEditors";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectInstitution";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectInstitution";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectNotes";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectNotes";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectCopyright";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectCopyright";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectVersion";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectVersion";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectURL";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectURL";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectSettings";
            param.DbType = global::System.Data.DbType.Xml;
            param.SqlDbType = global::System.Data.SqlDbType.Xml;
            param.IsNullable = true;
            param.SourceColumn = "ProjectSettings";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LogInsertedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedBy";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LogInsertedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.SmallDateTime;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedWhen";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LogUpdatedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LogUpdatedBy";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LogUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.SmallDateTime;
            param.IsNullable = true;
            param.SourceColumn = "LogUpdatedWhen";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Project] SET [ProjectParentID] = @ProjectParentID, [Project] = @Project, " +
                "[ProjectTitle] = @ProjectTitle, [ProjectDescription] = @ProjectDescription, [Pro" +
                "jectEditors] = @ProjectEditors, [ProjectInstitution] = @ProjectInstitution, [Pro" +
                "jectNotes] = @ProjectNotes, [ProjectCopyright] = @ProjectCopyright, [ProjectVers" +
                "ion] = @ProjectVersion, [ProjectURL] = @ProjectURL, [ProjectSettings] = @Project" +
                "Settings, [LogInsertedBy] = @LogInsertedBy, [LogInsertedWhen] = @LogInsertedWhen" +
                ", [LogUpdatedBy] = @LogUpdatedBy, [LogUpdatedWhen] = @LogUpdatedWhen WHERE (([Pr" +
                "ojectID] = @Original_ProjectID) AND ((@IsNull_ProjectParentID = 1 AND [ProjectPa" +
                "rentID] IS NULL) OR ([ProjectParentID] = @Original_ProjectParentID)) AND ([Proje" +
                "ct] = @Original_Project) AND ((@IsNull_ProjectTitle = 1 AND [ProjectTitle] IS NU" +
                "LL) OR ([ProjectTitle] = @Original_ProjectTitle)) AND ((@IsNull_ProjectDescripti" +
                "on = 1 AND [ProjectDescription] IS NULL) OR ([ProjectDescription] = @Original_Pr" +
                "ojectDescription)) AND ((@IsNull_ProjectEditors = 1 AND [ProjectEditors] IS NULL" +
                ") OR ([ProjectEditors] = @Original_ProjectEditors)) AND ((@IsNull_ProjectInstitu" +
                "tion = 1 AND [ProjectInstitution] IS NULL) OR ([ProjectInstitution] = @Original_" +
                "ProjectInstitution)) AND ((@IsNull_ProjectNotes = 1 AND [ProjectNotes] IS NULL) " +
                "OR ([ProjectNotes] = @Original_ProjectNotes)) AND ((@IsNull_ProjectCopyright = 1" +
                " AND [ProjectCopyright] IS NULL) OR ([ProjectCopyright] = @Original_ProjectCopyr" +
                "ight)) AND ((@IsNull_ProjectVersion = 1 AND [ProjectVersion] IS NULL) OR ([Proje" +
                "ctVersion] = @Original_ProjectVersion)) AND ((@IsNull_ProjectURL = 1 AND [Projec" +
                "tURL] IS NULL) OR ([ProjectURL] = @Original_ProjectURL)) AND ((@IsNull_LogInsert" +
                "edBy = 1 AND [LogInsertedBy] IS NULL) OR ([LogInsertedBy] = @Original_LogInserte" +
                "dBy)) AND ((@IsNull_LogInsertedWhen = 1 AND [LogInsertedWhen] IS NULL) OR ([LogI" +
                "nsertedWhen] = @Original_LogInsertedWhen)) AND ((@IsNull_LogUpdatedBy = 1 AND [L" +
                "ogUpdatedBy] IS NULL) OR ([LogUpdatedBy] = @Original_LogUpdatedBy)) AND ((@IsNul" +
                "l_LogUpdatedWhen = 1 AND [LogUpdatedWhen] IS NULL) OR ([LogUpdatedWhen] = @Origi" +
                "nal_LogUpdatedWhen)));\r\nSELECT ProjectID, ProjectParentID, Project, ProjectTitle" +
                ", ProjectDescription, ProjectEditors, ProjectInstitution, ProjectNotes, ProjectC" +
                "opyright, ProjectVersion, ProjectURL, ProjectSettings, LogInsertedBy, LogInserte" +
                "dWhen, LogUpdatedBy, LogUpdatedWhen FROM Project WHERE (ProjectID = @ProjectID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectParentID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectParentID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Project";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Project";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectTitle";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectTitle";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectDescription";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectDescription";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectEditors";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectEditors";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectInstitution";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectInstitution";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectNotes";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectNotes";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectCopyright";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectCopyright";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectVersion";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectVersion";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectURL";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectURL";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectSettings";
            param.DbType = global::System.Data.DbType.Xml;
            param.SqlDbType = global::System.Data.SqlDbType.Xml;
            param.IsNullable = true;
            param.SourceColumn = "ProjectSettings";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LogInsertedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedBy";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LogInsertedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.SmallDateTime;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedWhen";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LogUpdatedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LogUpdatedBy";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LogUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.SmallDateTime;
            param.IsNullable = true;
            param.SourceColumn = "LogUpdatedWhen";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectParentID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectParentID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectParentID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectParentID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Project";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Project";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectTitle";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectTitle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectTitle";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectTitle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectDescription";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectDescription";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectDescription";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectDescription";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectEditors";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectEditors";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectEditors";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectEditors";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectInstitution";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectInstitution";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectInstitution";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectInstitution";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectNotes";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectNotes";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectNotes";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectNotes";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectCopyright";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectCopyright";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectCopyright";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectCopyright";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectVersion";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectVersion";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectVersion";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectVersion";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectURL";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectURL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectURL";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectURL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LogInsertedBy";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LogInsertedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LogInsertedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LogInsertedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.SmallDateTime;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LogUpdatedBy";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LogUpdatedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LogUpdatedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LogUpdatedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LogUpdatedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LogUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LogUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.SmallDateTime;
            param.IsNullable = true;
            param.SourceColumn = "LogUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "ProjectID";
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityWorkbench.Properties.Settings.Default.DiversityProjects_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        ProjectID, ProjectParentID, Project, ProjectTitle, ProjectDescription, ProjectEditors, ProjectInstitution, ProjectNotes, ProjectCopyright, ProjectVersion, ProjectURL, 
                         ProjectSettings, LogInsertedBy, LogInsertedWhen, LogUpdatedBy, LogUpdatedWhen
FROM            Project";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetProjects.ProjectDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetProjects.ProjectDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetProjects.ProjectDataTable dataTable = new DataSetProjects.ProjectDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetProjects.ProjectDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetProjects dataSet) {
            return this.Adapter.Update(dataSet, "Project");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ProjectID, global::System.Nullable<int> Original_ProjectParentID, string Original_Project, string Original_ProjectTitle, string Original_ProjectDescription, string Original_ProjectEditors, string Original_ProjectInstitution, string Original_ProjectNotes, string Original_ProjectCopyright, string Original_ProjectVersion, string Original_ProjectURL, string Original_LogInsertedBy, global::System.Nullable<global::System.DateTime> Original_LogInsertedWhen, string Original_LogUpdatedBy, global::System.Nullable<global::System.DateTime> Original_LogUpdatedWhen) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ProjectID));
            if ((Original_ProjectParentID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ProjectParentID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_Project == null)) {
                throw new global::System.ArgumentNullException("Original_Project");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Project));
            }
            if ((Original_ProjectTitle == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_ProjectTitle));
            }
            if ((Original_ProjectDescription == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_ProjectDescription));
            }
            if ((Original_ProjectEditors == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_ProjectEditors));
            }
            if ((Original_ProjectInstitution == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_ProjectInstitution));
            }
            if ((Original_ProjectNotes == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_ProjectNotes));
            }
            if ((Original_ProjectCopyright == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_ProjectCopyright));
            }
            if ((Original_ProjectVersion == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_ProjectVersion));
            }
            if ((Original_ProjectURL == null)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_ProjectURL));
            }
            if ((Original_LogInsertedBy == null)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_LogInsertedBy));
            }
            if ((Original_LogInsertedWhen.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[23].Value = ((System.DateTime)(Original_LogInsertedWhen.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_LogUpdatedBy == null)) {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[25].Value = ((string)(Original_LogUpdatedBy));
            }
            if ((Original_LogUpdatedWhen.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[27].Value = ((System.DateTime)(Original_LogUpdatedWhen.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> ProjectParentID, string Project, string ProjectTitle, string ProjectDescription, string ProjectEditors, string ProjectInstitution, string ProjectNotes, string ProjectCopyright, string ProjectVersion, string ProjectURL, object ProjectSettings, string LogInsertedBy, global::System.Nullable<global::System.DateTime> LogInsertedWhen, string LogUpdatedBy, global::System.Nullable<global::System.DateTime> LogUpdatedWhen) {
            if ((ProjectParentID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ProjectParentID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Project == null)) {
                throw new global::System.ArgumentNullException("Project");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Project));
            }
            if ((ProjectTitle == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ProjectTitle));
            }
            if ((ProjectDescription == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ProjectDescription));
            }
            if ((ProjectEditors == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ProjectEditors));
            }
            if ((ProjectInstitution == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ProjectInstitution));
            }
            if ((ProjectNotes == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ProjectNotes));
            }
            if ((ProjectCopyright == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ProjectCopyright));
            }
            if ((ProjectVersion == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(ProjectVersion));
            }
            if ((ProjectURL == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ProjectURL));
            }
            if ((ProjectSettings == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((object)(ProjectSettings));
            }
            if ((LogInsertedBy == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(LogInsertedBy));
            }
            if ((LogInsertedWhen.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((System.DateTime)(LogInsertedWhen.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((LogUpdatedBy == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(LogUpdatedBy));
            }
            if ((LogUpdatedWhen.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(LogUpdatedWhen.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> ProjectParentID, 
                    string Project, 
                    string ProjectTitle, 
                    string ProjectDescription, 
                    string ProjectEditors, 
                    string ProjectInstitution, 
                    string ProjectNotes, 
                    string ProjectCopyright, 
                    string ProjectVersion, 
                    string ProjectURL, 
                    object ProjectSettings, 
                    string LogInsertedBy, 
                    global::System.Nullable<global::System.DateTime> LogInsertedWhen, 
                    string LogUpdatedBy, 
                    global::System.Nullable<global::System.DateTime> LogUpdatedWhen, 
                    int Original_ProjectID, 
                    global::System.Nullable<int> Original_ProjectParentID, 
                    string Original_Project, 
                    string Original_ProjectTitle, 
                    string Original_ProjectDescription, 
                    string Original_ProjectEditors, 
                    string Original_ProjectInstitution, 
                    string Original_ProjectNotes, 
                    string Original_ProjectCopyright, 
                    string Original_ProjectVersion, 
                    string Original_ProjectURL, 
                    string Original_LogInsertedBy, 
                    global::System.Nullable<global::System.DateTime> Original_LogInsertedWhen, 
                    string Original_LogUpdatedBy, 
                    global::System.Nullable<global::System.DateTime> Original_LogUpdatedWhen, 
                    int ProjectID) {
            if ((ProjectParentID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ProjectParentID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((Project == null)) {
                throw new global::System.ArgumentNullException("Project");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Project));
            }
            if ((ProjectTitle == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ProjectTitle));
            }
            if ((ProjectDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ProjectDescription));
            }
            if ((ProjectEditors == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ProjectEditors));
            }
            if ((ProjectInstitution == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ProjectInstitution));
            }
            if ((ProjectNotes == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ProjectNotes));
            }
            if ((ProjectCopyright == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ProjectCopyright));
            }
            if ((ProjectVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(ProjectVersion));
            }
            if ((ProjectURL == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ProjectURL));
            }
            if ((ProjectSettings == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(ProjectSettings));
            }
            if ((LogInsertedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(LogInsertedBy));
            }
            if ((LogInsertedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(LogInsertedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((LogUpdatedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(LogUpdatedBy));
            }
            if ((LogUpdatedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(LogUpdatedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_ProjectID));
            if ((Original_ProjectParentID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_ProjectParentID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_Project == null)) {
                throw new global::System.ArgumentNullException("Original_Project");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_Project));
            }
            if ((Original_ProjectTitle == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_ProjectTitle));
            }
            if ((Original_ProjectDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_ProjectDescription));
            }
            if ((Original_ProjectEditors == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_ProjectEditors));
            }
            if ((Original_ProjectInstitution == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_ProjectInstitution));
            }
            if ((Original_ProjectNotes == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_ProjectNotes));
            }
            if ((Original_ProjectCopyright == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_ProjectCopyright));
            }
            if ((Original_ProjectVersion == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_ProjectVersion));
            }
            if ((Original_ProjectURL == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_ProjectURL));
            }
            if ((Original_LogInsertedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_LogInsertedBy));
            }
            if ((Original_LogInsertedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((System.DateTime)(Original_LogInsertedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_LogUpdatedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_LogUpdatedBy));
            }
            if ((Original_LogUpdatedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((System.DateTime)(Original_LogUpdatedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[43].Value = ((int)(ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> ProjectParentID, 
                    string Project, 
                    string ProjectTitle, 
                    string ProjectDescription, 
                    string ProjectEditors, 
                    string ProjectInstitution, 
                    string ProjectNotes, 
                    string ProjectCopyright, 
                    string ProjectVersion, 
                    string ProjectURL, 
                    object ProjectSettings, 
                    string LogInsertedBy, 
                    global::System.Nullable<global::System.DateTime> LogInsertedWhen, 
                    string LogUpdatedBy, 
                    global::System.Nullable<global::System.DateTime> LogUpdatedWhen, 
                    int Original_ProjectID, 
                    global::System.Nullable<int> Original_ProjectParentID, 
                    string Original_Project, 
                    string Original_ProjectTitle, 
                    string Original_ProjectDescription, 
                    string Original_ProjectEditors, 
                    string Original_ProjectInstitution, 
                    string Original_ProjectNotes, 
                    string Original_ProjectCopyright, 
                    string Original_ProjectVersion, 
                    string Original_ProjectURL, 
                    string Original_LogInsertedBy, 
                    global::System.Nullable<global::System.DateTime> Original_LogInsertedWhen, 
                    string Original_LogUpdatedBy, 
                    global::System.Nullable<global::System.DateTime> Original_LogUpdatedWhen) {
            return this.Update(ProjectParentID, Project, ProjectTitle, ProjectDescription, ProjectEditors, ProjectInstitution, ProjectNotes, ProjectCopyright, ProjectVersion, ProjectURL, ProjectSettings, LogInsertedBy, LogInsertedWhen, LogUpdatedBy, LogUpdatedWhen, Original_ProjectID, Original_ProjectParentID, Original_Project, Original_ProjectTitle, Original_ProjectDescription, Original_ProjectEditors, Original_ProjectInstitution, Original_ProjectNotes, Original_ProjectCopyright, Original_ProjectVersion, Original_ProjectURL, Original_LogInsertedBy, Original_LogInsertedWhen, Original_LogUpdatedBy, Original_LogUpdatedWhen, Original_ProjectID);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private ProjectTableAdapter _projectTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ProjectTableAdapter ProjectTableAdapter {
            get {
                return this._projectTableAdapter;
            }
            set {
                this._projectTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._projectTableAdapter != null) 
                            && (this._projectTableAdapter.Connection != null))) {
                    return this._projectTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._projectTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(DataSetProjects dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._projectTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Project.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    this.SortSelfReferenceRows(updatedRows, dataSet.Relations["FK_Project_Project"], false);
                    result = (result + this._projectTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(DataSetProjects dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._projectTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Project.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    this.SortSelfReferenceRows(addedRows, dataSet.Relations["FK_Project_Project"], false);
                    result = (result + this._projectTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(DataSetProjects dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._projectTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Project.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    this.SortSelfReferenceRows(deletedRows, dataSet.Relations["FK_Project_Project"], true);
                    result = (result + this._projectTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(DataSetProjects dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._projectTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._projectTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager enthält keine Verbindungsinformationen. Legen Sie jede TableA" +
                        "dapterManager TableAdapter-Eigenschaft auf eine gültige TableAdapter-Instanz fes" +
                        "t.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("Die Transaktion kann nicht gestartet werden. Die aktuelle Datenverbindung unterst" +
                        "ützt keine Transaktionen, oder der aktuelle Zustand lässt den Start der Transakt" +
                        "ion nicht zu.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._projectTableAdapter != null)) {
                    revertConnections.Add(this._projectTableAdapter, this._projectTableAdapter.Connection);
                    this._projectTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._projectTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._projectTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._projectTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._projectTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._projectTableAdapter != null)) {
                    this._projectTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._projectTableAdapter]));
                    this._projectTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591