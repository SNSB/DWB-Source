//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DiversityCollection.CacheDatabase {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSetCacheDatabase")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetCacheDatabase : global::System.Data.DataSet {
        
        private CacheDatabaseDataTable tableCacheDatabase;
        
        private ProjectPublishedDataTable tableProjectPublished;
        
        private AnonymCollectorDataTable tableAnonymCollector;
        
        private ScientificTermSourceDataTable tableScientificTermSource;
        
        private TaxonSynonymySourceDataTable tableTaxonSynonymySource;
        
        private GazetteerSourceDataTable tableGazetteerSource;
        
        private AgentSourceDataTable tableAgentSource;
        
        private ReferenceTitleSourceDataTable tableReferenceTitleSource;
        
        private SamplingPlotSourceDataTable tableSamplingPlotSource;
        
        private TaxonSynonymySource_WebserviceDataTable tableTaxonSynonymySource_Webservice;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public DataSetCacheDatabase() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
            " or extended by application code.", DiagnosticId="SYSLIB0051")]
        protected DataSetCacheDatabase(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["CacheDatabase"] != null)) {
                    base.Tables.Add(new CacheDatabaseDataTable(ds.Tables["CacheDatabase"]));
                }
                if ((ds.Tables["ProjectPublished"] != null)) {
                    base.Tables.Add(new ProjectPublishedDataTable(ds.Tables["ProjectPublished"]));
                }
                if ((ds.Tables["AnonymCollector"] != null)) {
                    base.Tables.Add(new AnonymCollectorDataTable(ds.Tables["AnonymCollector"]));
                }
                if ((ds.Tables["ScientificTermSource"] != null)) {
                    base.Tables.Add(new ScientificTermSourceDataTable(ds.Tables["ScientificTermSource"]));
                }
                if ((ds.Tables["TaxonSynonymySource"] != null)) {
                    base.Tables.Add(new TaxonSynonymySourceDataTable(ds.Tables["TaxonSynonymySource"]));
                }
                if ((ds.Tables["GazetteerSource"] != null)) {
                    base.Tables.Add(new GazetteerSourceDataTable(ds.Tables["GazetteerSource"]));
                }
                if ((ds.Tables["AgentSource"] != null)) {
                    base.Tables.Add(new AgentSourceDataTable(ds.Tables["AgentSource"]));
                }
                if ((ds.Tables["ReferenceTitleSource"] != null)) {
                    base.Tables.Add(new ReferenceTitleSourceDataTable(ds.Tables["ReferenceTitleSource"]));
                }
                if ((ds.Tables["SamplingPlotSource"] != null)) {
                    base.Tables.Add(new SamplingPlotSourceDataTable(ds.Tables["SamplingPlotSource"]));
                }
                if ((ds.Tables["TaxonSynonymySource_Webservice"] != null)) {
                    base.Tables.Add(new TaxonSynonymySource_WebserviceDataTable(ds.Tables["TaxonSynonymySource_Webservice"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CacheDatabaseDataTable CacheDatabase {
            get {
                return this.tableCacheDatabase;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectPublishedDataTable ProjectPublished {
            get {
                return this.tableProjectPublished;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AnonymCollectorDataTable AnonymCollector {
            get {
                return this.tableAnonymCollector;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScientificTermSourceDataTable ScientificTermSource {
            get {
                return this.tableScientificTermSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TaxonSynonymySourceDataTable TaxonSynonymySource {
            get {
                return this.tableTaxonSynonymySource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GazetteerSourceDataTable GazetteerSource {
            get {
                return this.tableGazetteerSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AgentSourceDataTable AgentSource {
            get {
                return this.tableAgentSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReferenceTitleSourceDataTable ReferenceTitleSource {
            get {
                return this.tableReferenceTitleSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SamplingPlotSourceDataTable SamplingPlotSource {
            get {
                return this.tableSamplingPlotSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TaxonSynonymySource_WebserviceDataTable TaxonSynonymySource_Webservice {
            get {
                return this.tableTaxonSynonymySource_Webservice;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DataSetCacheDatabase cln = ((DataSetCacheDatabase)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CacheDatabase"] != null)) {
                    base.Tables.Add(new CacheDatabaseDataTable(ds.Tables["CacheDatabase"]));
                }
                if ((ds.Tables["ProjectPublished"] != null)) {
                    base.Tables.Add(new ProjectPublishedDataTable(ds.Tables["ProjectPublished"]));
                }
                if ((ds.Tables["AnonymCollector"] != null)) {
                    base.Tables.Add(new AnonymCollectorDataTable(ds.Tables["AnonymCollector"]));
                }
                if ((ds.Tables["ScientificTermSource"] != null)) {
                    base.Tables.Add(new ScientificTermSourceDataTable(ds.Tables["ScientificTermSource"]));
                }
                if ((ds.Tables["TaxonSynonymySource"] != null)) {
                    base.Tables.Add(new TaxonSynonymySourceDataTable(ds.Tables["TaxonSynonymySource"]));
                }
                if ((ds.Tables["GazetteerSource"] != null)) {
                    base.Tables.Add(new GazetteerSourceDataTable(ds.Tables["GazetteerSource"]));
                }
                if ((ds.Tables["AgentSource"] != null)) {
                    base.Tables.Add(new AgentSourceDataTable(ds.Tables["AgentSource"]));
                }
                if ((ds.Tables["ReferenceTitleSource"] != null)) {
                    base.Tables.Add(new ReferenceTitleSourceDataTable(ds.Tables["ReferenceTitleSource"]));
                }
                if ((ds.Tables["SamplingPlotSource"] != null)) {
                    base.Tables.Add(new SamplingPlotSourceDataTable(ds.Tables["SamplingPlotSource"]));
                }
                if ((ds.Tables["TaxonSynonymySource_Webservice"] != null)) {
                    base.Tables.Add(new TaxonSynonymySource_WebserviceDataTable(ds.Tables["TaxonSynonymySource_Webservice"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableCacheDatabase = ((CacheDatabaseDataTable)(base.Tables["CacheDatabase"]));
            if ((initTable == true)) {
                if ((this.tableCacheDatabase != null)) {
                    this.tableCacheDatabase.InitVars();
                }
            }
            this.tableProjectPublished = ((ProjectPublishedDataTable)(base.Tables["ProjectPublished"]));
            if ((initTable == true)) {
                if ((this.tableProjectPublished != null)) {
                    this.tableProjectPublished.InitVars();
                }
            }
            this.tableAnonymCollector = ((AnonymCollectorDataTable)(base.Tables["AnonymCollector"]));
            if ((initTable == true)) {
                if ((this.tableAnonymCollector != null)) {
                    this.tableAnonymCollector.InitVars();
                }
            }
            this.tableScientificTermSource = ((ScientificTermSourceDataTable)(base.Tables["ScientificTermSource"]));
            if ((initTable == true)) {
                if ((this.tableScientificTermSource != null)) {
                    this.tableScientificTermSource.InitVars();
                }
            }
            this.tableTaxonSynonymySource = ((TaxonSynonymySourceDataTable)(base.Tables["TaxonSynonymySource"]));
            if ((initTable == true)) {
                if ((this.tableTaxonSynonymySource != null)) {
                    this.tableTaxonSynonymySource.InitVars();
                }
            }
            this.tableGazetteerSource = ((GazetteerSourceDataTable)(base.Tables["GazetteerSource"]));
            if ((initTable == true)) {
                if ((this.tableGazetteerSource != null)) {
                    this.tableGazetteerSource.InitVars();
                }
            }
            this.tableAgentSource = ((AgentSourceDataTable)(base.Tables["AgentSource"]));
            if ((initTable == true)) {
                if ((this.tableAgentSource != null)) {
                    this.tableAgentSource.InitVars();
                }
            }
            this.tableReferenceTitleSource = ((ReferenceTitleSourceDataTable)(base.Tables["ReferenceTitleSource"]));
            if ((initTable == true)) {
                if ((this.tableReferenceTitleSource != null)) {
                    this.tableReferenceTitleSource.InitVars();
                }
            }
            this.tableSamplingPlotSource = ((SamplingPlotSourceDataTable)(base.Tables["SamplingPlotSource"]));
            if ((initTable == true)) {
                if ((this.tableSamplingPlotSource != null)) {
                    this.tableSamplingPlotSource.InitVars();
                }
            }
            this.tableTaxonSynonymySource_Webservice = ((TaxonSynonymySource_WebserviceDataTable)(base.Tables["TaxonSynonymySource_Webservice"]));
            if ((initTable == true)) {
                if ((this.tableTaxonSynonymySource_Webservice != null)) {
                    this.tableTaxonSynonymySource_Webservice.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DataSetCacheDatabase";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetCacheDatabase.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCacheDatabase = new CacheDatabaseDataTable();
            base.Tables.Add(this.tableCacheDatabase);
            this.tableProjectPublished = new ProjectPublishedDataTable();
            base.Tables.Add(this.tableProjectPublished);
            this.tableAnonymCollector = new AnonymCollectorDataTable();
            base.Tables.Add(this.tableAnonymCollector);
            this.tableScientificTermSource = new ScientificTermSourceDataTable();
            base.Tables.Add(this.tableScientificTermSource);
            this.tableTaxonSynonymySource = new TaxonSynonymySourceDataTable();
            base.Tables.Add(this.tableTaxonSynonymySource);
            this.tableGazetteerSource = new GazetteerSourceDataTable();
            base.Tables.Add(this.tableGazetteerSource);
            this.tableAgentSource = new AgentSourceDataTable();
            base.Tables.Add(this.tableAgentSource);
            this.tableReferenceTitleSource = new ReferenceTitleSourceDataTable();
            base.Tables.Add(this.tableReferenceTitleSource);
            this.tableSamplingPlotSource = new SamplingPlotSourceDataTable();
            base.Tables.Add(this.tableSamplingPlotSource);
            this.tableTaxonSynonymySource_Webservice = new TaxonSynonymySource_WebserviceDataTable();
            base.Tables.Add(this.tableTaxonSynonymySource_Webservice);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeCacheDatabase() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeProjectPublished() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeAnonymCollector() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeScientificTermSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeTaxonSynonymySource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeGazetteerSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeAgentSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeReferenceTitleSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeSamplingPlotSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeTaxonSynonymySource_Webservice() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSetCacheDatabase ds = new DataSetCacheDatabase();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void CacheDatabaseRowChangeEventHandler(object sender, CacheDatabaseRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void ProjectPublishedRowChangeEventHandler(object sender, ProjectPublishedRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void AnonymCollectorRowChangeEventHandler(object sender, AnonymCollectorRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void ScientificTermSourceRowChangeEventHandler(object sender, ScientificTermSourceRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void TaxonSynonymySourceRowChangeEventHandler(object sender, TaxonSynonymySourceRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void GazetteerSourceRowChangeEventHandler(object sender, GazetteerSourceRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void AgentSourceRowChangeEventHandler(object sender, AgentSourceRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void ReferenceTitleSourceRowChangeEventHandler(object sender, ReferenceTitleSourceRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void SamplingPlotSourceRowChangeEventHandler(object sender, SamplingPlotSourceRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void TaxonSynonymySource_WebserviceRowChangeEventHandler(object sender, TaxonSynonymySource_WebserviceRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CacheDatabaseDataTable : global::System.Data.TypedTableBase<CacheDatabaseRow> {
            
            private global::System.Data.DataColumn columnServer;
            
            private global::System.Data.DataColumn columnDatabaseName;
            
            private global::System.Data.DataColumn columnPort;
            
            private global::System.Data.DataColumn columnVersion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CacheDatabaseDataTable() {
                this.TableName = "CacheDatabase";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal CacheDatabaseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected CacheDatabaseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ServerColumn {
                get {
                    return this.columnServer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DatabaseNameColumn {
                get {
                    return this.columnDatabaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn PortColumn {
                get {
                    return this.columnPort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CacheDatabaseRow this[int index] {
                get {
                    return ((CacheDatabaseRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CacheDatabaseRowChangeEventHandler CacheDatabaseRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CacheDatabaseRowChangeEventHandler CacheDatabaseRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CacheDatabaseRowChangeEventHandler CacheDatabaseRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CacheDatabaseRowChangeEventHandler CacheDatabaseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddCacheDatabaseRow(CacheDatabaseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CacheDatabaseRow AddCacheDatabaseRow(string Server, string DatabaseName, short Port, string Version) {
                CacheDatabaseRow rowCacheDatabaseRow = ((CacheDatabaseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Server,
                        DatabaseName,
                        Port,
                        Version};
                rowCacheDatabaseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCacheDatabaseRow);
                return rowCacheDatabaseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CacheDatabaseRow FindByServerDatabaseNamePort(string Server, string DatabaseName, short Port) {
                return ((CacheDatabaseRow)(this.Rows.Find(new object[] {
                            Server,
                            DatabaseName,
                            Port})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                CacheDatabaseDataTable cln = ((CacheDatabaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CacheDatabaseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnServer = base.Columns["Server"];
                this.columnDatabaseName = base.Columns["DatabaseName"];
                this.columnPort = base.Columns["Port"];
                this.columnVersion = base.Columns["Version"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnServer = new global::System.Data.DataColumn("Server", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServer);
                this.columnDatabaseName = new global::System.Data.DataColumn("DatabaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabaseName);
                this.columnPort = new global::System.Data.DataColumn("Port", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPort);
                this.columnVersion = new global::System.Data.DataColumn("Version", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServer,
                                this.columnDatabaseName,
                                this.columnPort}, true));
                this.columnServer.AllowDBNull = false;
                this.columnServer.MaxLength = 50;
                this.columnDatabaseName.AllowDBNull = false;
                this.columnDatabaseName.MaxLength = 50;
                this.columnPort.AllowDBNull = false;
                this.columnVersion.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CacheDatabaseRow NewCacheDatabaseRow() {
                return ((CacheDatabaseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CacheDatabaseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(CacheDatabaseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CacheDatabaseRowChanged != null)) {
                    this.CacheDatabaseRowChanged(this, new CacheDatabaseRowChangeEvent(((CacheDatabaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CacheDatabaseRowChanging != null)) {
                    this.CacheDatabaseRowChanging(this, new CacheDatabaseRowChangeEvent(((CacheDatabaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CacheDatabaseRowDeleted != null)) {
                    this.CacheDatabaseRowDeleted(this, new CacheDatabaseRowChangeEvent(((CacheDatabaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CacheDatabaseRowDeleting != null)) {
                    this.CacheDatabaseRowDeleting(this, new CacheDatabaseRowChangeEvent(((CacheDatabaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveCacheDatabaseRow(CacheDatabaseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCacheDatabase ds = new DataSetCacheDatabase();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CacheDatabaseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectPublishedDataTable : global::System.Data.TypedTableBase<ProjectPublishedRow> {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProject;
            
            private global::System.Data.DataColumn columnCoordinatePrecision;
            
            private global::System.Data.DataColumn columnProjectURI;
            
            private global::System.Data.DataColumn columnLastUpdatedWhen;
            
            private global::System.Data.DataColumn columnLastUpdatedBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectPublishedDataTable() {
                this.TableName = "ProjectPublished";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ProjectPublishedDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected ProjectPublishedDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CoordinatePrecisionColumn {
                get {
                    return this.columnCoordinatePrecision;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ProjectURIColumn {
                get {
                    return this.columnProjectURI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LastUpdatedWhenColumn {
                get {
                    return this.columnLastUpdatedWhen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LastUpdatedByColumn {
                get {
                    return this.columnLastUpdatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectPublishedRow this[int index] {
                get {
                    return ((ProjectPublishedRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ProjectPublishedRowChangeEventHandler ProjectPublishedRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ProjectPublishedRowChangeEventHandler ProjectPublishedRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ProjectPublishedRowChangeEventHandler ProjectPublishedRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ProjectPublishedRowChangeEventHandler ProjectPublishedRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddProjectPublishedRow(ProjectPublishedRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectPublishedRow AddProjectPublishedRow(int ProjectID, string Project, byte CoordinatePrecision, string ProjectURI, System.DateTime LastUpdatedWhen, string LastUpdatedBy) {
                ProjectPublishedRow rowProjectPublishedRow = ((ProjectPublishedRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        Project,
                        CoordinatePrecision,
                        ProjectURI,
                        LastUpdatedWhen,
                        LastUpdatedBy};
                rowProjectPublishedRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectPublishedRow);
                return rowProjectPublishedRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectPublishedRow FindByProjectID(int ProjectID) {
                return ((ProjectPublishedRow)(this.Rows.Find(new object[] {
                            ProjectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ProjectPublishedDataTable cln = ((ProjectPublishedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectPublishedDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProject = base.Columns["Project"];
                this.columnCoordinatePrecision = base.Columns["CoordinatePrecision"];
                this.columnProjectURI = base.Columns["ProjectURI"];
                this.columnLastUpdatedWhen = base.Columns["LastUpdatedWhen"];
                this.columnLastUpdatedBy = base.Columns["LastUpdatedBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.columnCoordinatePrecision = new global::System.Data.DataColumn("CoordinatePrecision", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoordinatePrecision);
                this.columnProjectURI = new global::System.Data.DataColumn("ProjectURI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectURI);
                this.columnLastUpdatedWhen = new global::System.Data.DataColumn("LastUpdatedWhen", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastUpdatedWhen);
                this.columnLastUpdatedBy = new global::System.Data.DataColumn("LastUpdatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastUpdatedBy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnProjectID.Unique = true;
                this.columnProject.MaxLength = 50;
                this.columnProjectURI.MaxLength = 255;
                this.columnLastUpdatedBy.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectPublishedRow NewProjectPublishedRow() {
                return ((ProjectPublishedRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectPublishedRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectPublishedRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectPublishedRowChanged != null)) {
                    this.ProjectPublishedRowChanged(this, new ProjectPublishedRowChangeEvent(((ProjectPublishedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectPublishedRowChanging != null)) {
                    this.ProjectPublishedRowChanging(this, new ProjectPublishedRowChangeEvent(((ProjectPublishedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectPublishedRowDeleted != null)) {
                    this.ProjectPublishedRowDeleted(this, new ProjectPublishedRowChangeEvent(((ProjectPublishedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectPublishedRowDeleting != null)) {
                    this.ProjectPublishedRowDeleting(this, new ProjectPublishedRowChangeEvent(((ProjectPublishedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveProjectPublishedRow(ProjectPublishedRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCacheDatabase ds = new DataSetCacheDatabase();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectPublishedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AnonymCollectorDataTable : global::System.Data.TypedTableBase<AnonymCollectorRow> {
            
            private global::System.Data.DataColumn columnCollectorsName;
            
            private global::System.Data.DataColumn columnAnonymisation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AnonymCollectorDataTable() {
                this.TableName = "AnonymCollector";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal AnonymCollectorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected AnonymCollectorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CollectorsNameColumn {
                get {
                    return this.columnCollectorsName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn AnonymisationColumn {
                get {
                    return this.columnAnonymisation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AnonymCollectorRow this[int index] {
                get {
                    return ((AnonymCollectorRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AnonymCollectorRowChangeEventHandler AnonymCollectorRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AnonymCollectorRowChangeEventHandler AnonymCollectorRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AnonymCollectorRowChangeEventHandler AnonymCollectorRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AnonymCollectorRowChangeEventHandler AnonymCollectorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddAnonymCollectorRow(AnonymCollectorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AnonymCollectorRow AddAnonymCollectorRow(string CollectorsName, string Anonymisation) {
                AnonymCollectorRow rowAnonymCollectorRow = ((AnonymCollectorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CollectorsName,
                        Anonymisation};
                rowAnonymCollectorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAnonymCollectorRow);
                return rowAnonymCollectorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AnonymCollectorRow FindByCollectorsName(string CollectorsName) {
                return ((AnonymCollectorRow)(this.Rows.Find(new object[] {
                            CollectorsName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                AnonymCollectorDataTable cln = ((AnonymCollectorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AnonymCollectorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnCollectorsName = base.Columns["CollectorsName"];
                this.columnAnonymisation = base.Columns["Anonymisation"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnCollectorsName = new global::System.Data.DataColumn("CollectorsName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollectorsName);
                this.columnAnonymisation = new global::System.Data.DataColumn("Anonymisation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnonymisation);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCollectorsName}, true));
                this.columnCollectorsName.AllowDBNull = false;
                this.columnCollectorsName.Unique = true;
                this.columnCollectorsName.MaxLength = 400;
                this.columnAnonymisation.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AnonymCollectorRow NewAnonymCollectorRow() {
                return ((AnonymCollectorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AnonymCollectorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(AnonymCollectorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AnonymCollectorRowChanged != null)) {
                    this.AnonymCollectorRowChanged(this, new AnonymCollectorRowChangeEvent(((AnonymCollectorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AnonymCollectorRowChanging != null)) {
                    this.AnonymCollectorRowChanging(this, new AnonymCollectorRowChangeEvent(((AnonymCollectorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AnonymCollectorRowDeleted != null)) {
                    this.AnonymCollectorRowDeleted(this, new AnonymCollectorRowChangeEvent(((AnonymCollectorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AnonymCollectorRowDeleting != null)) {
                    this.AnonymCollectorRowDeleting(this, new AnonymCollectorRowChangeEvent(((AnonymCollectorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveAnonymCollectorRow(AnonymCollectorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCacheDatabase ds = new DataSetCacheDatabase();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AnonymCollectorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScientificTermSourceDataTable : global::System.Data.TypedTableBase<ScientificTermSourceRow> {
            
            private global::System.Data.DataColumn columnSourceView;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnSourceID;
            
            private global::System.Data.DataColumn columnLinkedServerName;
            
            private global::System.Data.DataColumn columnDatabaseName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ScientificTermSourceDataTable() {
                this.TableName = "ScientificTermSource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ScientificTermSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected ScientificTermSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceViewColumn {
                get {
                    return this.columnSourceView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceIDColumn {
                get {
                    return this.columnSourceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LinkedServerNameColumn {
                get {
                    return this.columnLinkedServerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DatabaseNameColumn {
                get {
                    return this.columnDatabaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ScientificTermSourceRow this[int index] {
                get {
                    return ((ScientificTermSourceRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ScientificTermSourceRowChangeEventHandler ScientificTermSourceRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ScientificTermSourceRowChangeEventHandler ScientificTermSourceRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ScientificTermSourceRowChangeEventHandler ScientificTermSourceRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ScientificTermSourceRowChangeEventHandler ScientificTermSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddScientificTermSourceRow(ScientificTermSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ScientificTermSourceRow AddScientificTermSourceRow(string SourceView, string Source, int SourceID, string LinkedServerName, string DatabaseName) {
                ScientificTermSourceRow rowScientificTermSourceRow = ((ScientificTermSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SourceView,
                        Source,
                        SourceID,
                        LinkedServerName,
                        DatabaseName};
                rowScientificTermSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScientificTermSourceRow);
                return rowScientificTermSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ScientificTermSourceRow FindBySourceView(string SourceView) {
                return ((ScientificTermSourceRow)(this.Rows.Find(new object[] {
                            SourceView})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ScientificTermSourceDataTable cln = ((ScientificTermSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScientificTermSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnSourceView = base.Columns["SourceView"];
                this.columnSource = base.Columns["Source"];
                this.columnSourceID = base.Columns["SourceID"];
                this.columnLinkedServerName = base.Columns["LinkedServerName"];
                this.columnDatabaseName = base.Columns["DatabaseName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnSourceView = new global::System.Data.DataColumn("SourceView", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceView);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnSourceID = new global::System.Data.DataColumn("SourceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceID);
                this.columnLinkedServerName = new global::System.Data.DataColumn("LinkedServerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkedServerName);
                this.columnDatabaseName = new global::System.Data.DataColumn("DatabaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabaseName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSourceView}, true));
                this.columnSourceView.AllowDBNull = false;
                this.columnSourceView.Unique = true;
                this.columnSourceView.MaxLength = 200;
                this.columnSource.MaxLength = 500;
                this.columnLinkedServerName.MaxLength = 500;
                this.columnDatabaseName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ScientificTermSourceRow NewScientificTermSourceRow() {
                return ((ScientificTermSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScientificTermSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ScientificTermSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScientificTermSourceRowChanged != null)) {
                    this.ScientificTermSourceRowChanged(this, new ScientificTermSourceRowChangeEvent(((ScientificTermSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScientificTermSourceRowChanging != null)) {
                    this.ScientificTermSourceRowChanging(this, new ScientificTermSourceRowChangeEvent(((ScientificTermSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScientificTermSourceRowDeleted != null)) {
                    this.ScientificTermSourceRowDeleted(this, new ScientificTermSourceRowChangeEvent(((ScientificTermSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScientificTermSourceRowDeleting != null)) {
                    this.ScientificTermSourceRowDeleting(this, new ScientificTermSourceRowChangeEvent(((ScientificTermSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveScientificTermSourceRow(ScientificTermSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCacheDatabase ds = new DataSetCacheDatabase();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScientificTermSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TaxonSynonymySourceDataTable : global::System.Data.TypedTableBase<TaxonSynonymySourceRow> {
            
            private global::System.Data.DataColumn columnSourceView;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnSourceID;
            
            private global::System.Data.DataColumn columnLinkedServerName;
            
            private global::System.Data.DataColumn columnDatabaseName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySourceDataTable() {
                this.TableName = "TaxonSynonymySource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal TaxonSynonymySourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected TaxonSynonymySourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceViewColumn {
                get {
                    return this.columnSourceView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceIDColumn {
                get {
                    return this.columnSourceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LinkedServerNameColumn {
                get {
                    return this.columnLinkedServerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DatabaseNameColumn {
                get {
                    return this.columnDatabaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySourceRow this[int index] {
                get {
                    return ((TaxonSynonymySourceRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event TaxonSynonymySourceRowChangeEventHandler TaxonSynonymySourceRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event TaxonSynonymySourceRowChangeEventHandler TaxonSynonymySourceRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event TaxonSynonymySourceRowChangeEventHandler TaxonSynonymySourceRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event TaxonSynonymySourceRowChangeEventHandler TaxonSynonymySourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddTaxonSynonymySourceRow(TaxonSynonymySourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySourceRow AddTaxonSynonymySourceRow(string SourceView, string Source, int SourceID, string LinkedServerName, string DatabaseName) {
                TaxonSynonymySourceRow rowTaxonSynonymySourceRow = ((TaxonSynonymySourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SourceView,
                        Source,
                        SourceID,
                        LinkedServerName,
                        DatabaseName};
                rowTaxonSynonymySourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTaxonSynonymySourceRow);
                return rowTaxonSynonymySourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySourceRow FindBySourceView(string SourceView) {
                return ((TaxonSynonymySourceRow)(this.Rows.Find(new object[] {
                            SourceView})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                TaxonSynonymySourceDataTable cln = ((TaxonSynonymySourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TaxonSynonymySourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnSourceView = base.Columns["SourceView"];
                this.columnSource = base.Columns["Source"];
                this.columnSourceID = base.Columns["SourceID"];
                this.columnLinkedServerName = base.Columns["LinkedServerName"];
                this.columnDatabaseName = base.Columns["DatabaseName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnSourceView = new global::System.Data.DataColumn("SourceView", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceView);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnSourceID = new global::System.Data.DataColumn("SourceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceID);
                this.columnLinkedServerName = new global::System.Data.DataColumn("LinkedServerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkedServerName);
                this.columnDatabaseName = new global::System.Data.DataColumn("DatabaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabaseName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSourceView}, true));
                this.columnSourceView.AllowDBNull = false;
                this.columnSourceView.Unique = true;
                this.columnSourceView.MaxLength = 200;
                this.columnSource.MaxLength = 500;
                this.columnLinkedServerName.MaxLength = 500;
                this.columnDatabaseName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySourceRow NewTaxonSynonymySourceRow() {
                return ((TaxonSynonymySourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TaxonSynonymySourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(TaxonSynonymySourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TaxonSynonymySourceRowChanged != null)) {
                    this.TaxonSynonymySourceRowChanged(this, new TaxonSynonymySourceRowChangeEvent(((TaxonSynonymySourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TaxonSynonymySourceRowChanging != null)) {
                    this.TaxonSynonymySourceRowChanging(this, new TaxonSynonymySourceRowChangeEvent(((TaxonSynonymySourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TaxonSynonymySourceRowDeleted != null)) {
                    this.TaxonSynonymySourceRowDeleted(this, new TaxonSynonymySourceRowChangeEvent(((TaxonSynonymySourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TaxonSynonymySourceRowDeleting != null)) {
                    this.TaxonSynonymySourceRowDeleting(this, new TaxonSynonymySourceRowChangeEvent(((TaxonSynonymySourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveTaxonSynonymySourceRow(TaxonSynonymySourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCacheDatabase ds = new DataSetCacheDatabase();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TaxonSynonymySourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GazetteerSourceDataTable : global::System.Data.TypedTableBase<GazetteerSourceRow> {
            
            private global::System.Data.DataColumn columnSourceView;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnSourceID;
            
            private global::System.Data.DataColumn columnLinkedServerName;
            
            private global::System.Data.DataColumn columnDatabaseName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GazetteerSourceDataTable() {
                this.TableName = "GazetteerSource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal GazetteerSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected GazetteerSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceViewColumn {
                get {
                    return this.columnSourceView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceIDColumn {
                get {
                    return this.columnSourceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LinkedServerNameColumn {
                get {
                    return this.columnLinkedServerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DatabaseNameColumn {
                get {
                    return this.columnDatabaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GazetteerSourceRow this[int index] {
                get {
                    return ((GazetteerSourceRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event GazetteerSourceRowChangeEventHandler GazetteerSourceRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event GazetteerSourceRowChangeEventHandler GazetteerSourceRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event GazetteerSourceRowChangeEventHandler GazetteerSourceRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event GazetteerSourceRowChangeEventHandler GazetteerSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddGazetteerSourceRow(GazetteerSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GazetteerSourceRow AddGazetteerSourceRow(string SourceView, string Source, int SourceID, string LinkedServerName, string DatabaseName) {
                GazetteerSourceRow rowGazetteerSourceRow = ((GazetteerSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SourceView,
                        Source,
                        SourceID,
                        LinkedServerName,
                        DatabaseName};
                rowGazetteerSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGazetteerSourceRow);
                return rowGazetteerSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GazetteerSourceRow FindBySourceView(string SourceView) {
                return ((GazetteerSourceRow)(this.Rows.Find(new object[] {
                            SourceView})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                GazetteerSourceDataTable cln = ((GazetteerSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GazetteerSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnSourceView = base.Columns["SourceView"];
                this.columnSource = base.Columns["Source"];
                this.columnSourceID = base.Columns["SourceID"];
                this.columnLinkedServerName = base.Columns["LinkedServerName"];
                this.columnDatabaseName = base.Columns["DatabaseName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnSourceView = new global::System.Data.DataColumn("SourceView", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceView);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnSourceID = new global::System.Data.DataColumn("SourceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceID);
                this.columnLinkedServerName = new global::System.Data.DataColumn("LinkedServerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkedServerName);
                this.columnDatabaseName = new global::System.Data.DataColumn("DatabaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabaseName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSourceView}, true));
                this.columnSourceView.AllowDBNull = false;
                this.columnSourceView.Unique = true;
                this.columnSourceView.MaxLength = 200;
                this.columnSource.MaxLength = 500;
                this.columnLinkedServerName.MaxLength = 500;
                this.columnDatabaseName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GazetteerSourceRow NewGazetteerSourceRow() {
                return ((GazetteerSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GazetteerSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(GazetteerSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GazetteerSourceRowChanged != null)) {
                    this.GazetteerSourceRowChanged(this, new GazetteerSourceRowChangeEvent(((GazetteerSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GazetteerSourceRowChanging != null)) {
                    this.GazetteerSourceRowChanging(this, new GazetteerSourceRowChangeEvent(((GazetteerSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GazetteerSourceRowDeleted != null)) {
                    this.GazetteerSourceRowDeleted(this, new GazetteerSourceRowChangeEvent(((GazetteerSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GazetteerSourceRowDeleting != null)) {
                    this.GazetteerSourceRowDeleting(this, new GazetteerSourceRowChangeEvent(((GazetteerSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveGazetteerSourceRow(GazetteerSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCacheDatabase ds = new DataSetCacheDatabase();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GazetteerSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AgentSourceDataTable : global::System.Data.TypedTableBase<AgentSourceRow> {
            
            private global::System.Data.DataColumn columnSourceView;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnSourceID;
            
            private global::System.Data.DataColumn columnLinkedServerName;
            
            private global::System.Data.DataColumn columnDatabaseName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AgentSourceDataTable() {
                this.TableName = "AgentSource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal AgentSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected AgentSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceViewColumn {
                get {
                    return this.columnSourceView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceIDColumn {
                get {
                    return this.columnSourceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LinkedServerNameColumn {
                get {
                    return this.columnLinkedServerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DatabaseNameColumn {
                get {
                    return this.columnDatabaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AgentSourceRow this[int index] {
                get {
                    return ((AgentSourceRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AgentSourceRowChangeEventHandler AgentSourceRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AgentSourceRowChangeEventHandler AgentSourceRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AgentSourceRowChangeEventHandler AgentSourceRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event AgentSourceRowChangeEventHandler AgentSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddAgentSourceRow(AgentSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AgentSourceRow AddAgentSourceRow(string SourceView, string Source, int SourceID, string LinkedServerName, string DatabaseName) {
                AgentSourceRow rowAgentSourceRow = ((AgentSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SourceView,
                        Source,
                        SourceID,
                        LinkedServerName,
                        DatabaseName};
                rowAgentSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAgentSourceRow);
                return rowAgentSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AgentSourceRow FindBySourceView(string SourceView) {
                return ((AgentSourceRow)(this.Rows.Find(new object[] {
                            SourceView})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                AgentSourceDataTable cln = ((AgentSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AgentSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnSourceView = base.Columns["SourceView"];
                this.columnSource = base.Columns["Source"];
                this.columnSourceID = base.Columns["SourceID"];
                this.columnLinkedServerName = base.Columns["LinkedServerName"];
                this.columnDatabaseName = base.Columns["DatabaseName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnSourceView = new global::System.Data.DataColumn("SourceView", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceView);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnSourceID = new global::System.Data.DataColumn("SourceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceID);
                this.columnLinkedServerName = new global::System.Data.DataColumn("LinkedServerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkedServerName);
                this.columnDatabaseName = new global::System.Data.DataColumn("DatabaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabaseName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSourceView}, true));
                this.columnSourceView.AllowDBNull = false;
                this.columnSourceView.Unique = true;
                this.columnSourceView.MaxLength = 200;
                this.columnSource.MaxLength = 500;
                this.columnLinkedServerName.MaxLength = 500;
                this.columnDatabaseName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AgentSourceRow NewAgentSourceRow() {
                return ((AgentSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AgentSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(AgentSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AgentSourceRowChanged != null)) {
                    this.AgentSourceRowChanged(this, new AgentSourceRowChangeEvent(((AgentSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AgentSourceRowChanging != null)) {
                    this.AgentSourceRowChanging(this, new AgentSourceRowChangeEvent(((AgentSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AgentSourceRowDeleted != null)) {
                    this.AgentSourceRowDeleted(this, new AgentSourceRowChangeEvent(((AgentSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AgentSourceRowDeleting != null)) {
                    this.AgentSourceRowDeleting(this, new AgentSourceRowChangeEvent(((AgentSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveAgentSourceRow(AgentSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCacheDatabase ds = new DataSetCacheDatabase();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AgentSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReferenceTitleSourceDataTable : global::System.Data.TypedTableBase<ReferenceTitleSourceRow> {
            
            private global::System.Data.DataColumn columnSourceView;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnSourceID;
            
            private global::System.Data.DataColumn columnLinkedServerName;
            
            private global::System.Data.DataColumn columnDatabaseName;
            
            private global::System.Data.DataColumn columnSubsets;
            
            private global::System.Data.DataColumn columnTransferProtocol;
            
            private global::System.Data.DataColumn columnIncludeInTransfer;
            
            private global::System.Data.DataColumn columnLastUpdatedWhen;
            
            private global::System.Data.DataColumn columnCompareLogDate;
            
            private global::System.Data.DataColumn columnTransferDays;
            
            private global::System.Data.DataColumn columnTransferTime;
            
            private global::System.Data.DataColumn columnTransferIsExecutedBy;
            
            private global::System.Data.DataColumn columnTransferErrors;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ReferenceTitleSourceDataTable() {
                this.TableName = "ReferenceTitleSource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ReferenceTitleSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected ReferenceTitleSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceViewColumn {
                get {
                    return this.columnSourceView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceIDColumn {
                get {
                    return this.columnSourceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LinkedServerNameColumn {
                get {
                    return this.columnLinkedServerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DatabaseNameColumn {
                get {
                    return this.columnDatabaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SubsetsColumn {
                get {
                    return this.columnSubsets;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransferProtocolColumn {
                get {
                    return this.columnTransferProtocol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn IncludeInTransferColumn {
                get {
                    return this.columnIncludeInTransfer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LastUpdatedWhenColumn {
                get {
                    return this.columnLastUpdatedWhen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CompareLogDateColumn {
                get {
                    return this.columnCompareLogDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransferDaysColumn {
                get {
                    return this.columnTransferDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransferTimeColumn {
                get {
                    return this.columnTransferTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransferIsExecutedByColumn {
                get {
                    return this.columnTransferIsExecutedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransferErrorsColumn {
                get {
                    return this.columnTransferErrors;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ReferenceTitleSourceRow this[int index] {
                get {
                    return ((ReferenceTitleSourceRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ReferenceTitleSourceRowChangeEventHandler ReferenceTitleSourceRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ReferenceTitleSourceRowChangeEventHandler ReferenceTitleSourceRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ReferenceTitleSourceRowChangeEventHandler ReferenceTitleSourceRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ReferenceTitleSourceRowChangeEventHandler ReferenceTitleSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddReferenceTitleSourceRow(ReferenceTitleSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ReferenceTitleSourceRow AddReferenceTitleSourceRow(string SourceView, string Source, int SourceID, string LinkedServerName, string DatabaseName, string Subsets, string TransferProtocol, bool IncludeInTransfer, System.DateTime LastUpdatedWhen, bool CompareLogDate, string TransferDays, System.TimeSpan TransferTime, string TransferIsExecutedBy, string TransferErrors) {
                ReferenceTitleSourceRow rowReferenceTitleSourceRow = ((ReferenceTitleSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SourceView,
                        Source,
                        SourceID,
                        LinkedServerName,
                        DatabaseName,
                        Subsets,
                        TransferProtocol,
                        IncludeInTransfer,
                        LastUpdatedWhen,
                        CompareLogDate,
                        TransferDays,
                        TransferTime,
                        TransferIsExecutedBy,
                        TransferErrors};
                rowReferenceTitleSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowReferenceTitleSourceRow);
                return rowReferenceTitleSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ReferenceTitleSourceRow FindBySourceView(string SourceView) {
                return ((ReferenceTitleSourceRow)(this.Rows.Find(new object[] {
                            SourceView})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ReferenceTitleSourceDataTable cln = ((ReferenceTitleSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ReferenceTitleSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnSourceView = base.Columns["SourceView"];
                this.columnSource = base.Columns["Source"];
                this.columnSourceID = base.Columns["SourceID"];
                this.columnLinkedServerName = base.Columns["LinkedServerName"];
                this.columnDatabaseName = base.Columns["DatabaseName"];
                this.columnSubsets = base.Columns["Subsets"];
                this.columnTransferProtocol = base.Columns["TransferProtocol"];
                this.columnIncludeInTransfer = base.Columns["IncludeInTransfer"];
                this.columnLastUpdatedWhen = base.Columns["LastUpdatedWhen"];
                this.columnCompareLogDate = base.Columns["CompareLogDate"];
                this.columnTransferDays = base.Columns["TransferDays"];
                this.columnTransferTime = base.Columns["TransferTime"];
                this.columnTransferIsExecutedBy = base.Columns["TransferIsExecutedBy"];
                this.columnTransferErrors = base.Columns["TransferErrors"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnSourceView = new global::System.Data.DataColumn("SourceView", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceView);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnSourceID = new global::System.Data.DataColumn("SourceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceID);
                this.columnLinkedServerName = new global::System.Data.DataColumn("LinkedServerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkedServerName);
                this.columnDatabaseName = new global::System.Data.DataColumn("DatabaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabaseName);
                this.columnSubsets = new global::System.Data.DataColumn("Subsets", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubsets);
                this.columnTransferProtocol = new global::System.Data.DataColumn("TransferProtocol", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferProtocol);
                this.columnIncludeInTransfer = new global::System.Data.DataColumn("IncludeInTransfer", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncludeInTransfer);
                this.columnLastUpdatedWhen = new global::System.Data.DataColumn("LastUpdatedWhen", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastUpdatedWhen);
                this.columnCompareLogDate = new global::System.Data.DataColumn("CompareLogDate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompareLogDate);
                this.columnTransferDays = new global::System.Data.DataColumn("TransferDays", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferDays);
                this.columnTransferTime = new global::System.Data.DataColumn("TransferTime", typeof(global::System.TimeSpan), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferTime);
                this.columnTransferIsExecutedBy = new global::System.Data.DataColumn("TransferIsExecutedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferIsExecutedBy);
                this.columnTransferErrors = new global::System.Data.DataColumn("TransferErrors", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferErrors);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSourceView}, true));
                this.columnSourceView.AllowDBNull = false;
                this.columnSourceView.Unique = true;
                this.columnSourceView.MaxLength = 200;
                this.columnSource.MaxLength = 500;
                this.columnLinkedServerName.MaxLength = 500;
                this.columnDatabaseName.MaxLength = 50;
                this.columnSubsets.MaxLength = 500;
                this.columnTransferProtocol.MaxLength = 2147483647;
                this.columnTransferDays.MaxLength = 7;
                this.columnTransferIsExecutedBy.MaxLength = 500;
                this.columnTransferErrors.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ReferenceTitleSourceRow NewReferenceTitleSourceRow() {
                return ((ReferenceTitleSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ReferenceTitleSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ReferenceTitleSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReferenceTitleSourceRowChanged != null)) {
                    this.ReferenceTitleSourceRowChanged(this, new ReferenceTitleSourceRowChangeEvent(((ReferenceTitleSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReferenceTitleSourceRowChanging != null)) {
                    this.ReferenceTitleSourceRowChanging(this, new ReferenceTitleSourceRowChangeEvent(((ReferenceTitleSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReferenceTitleSourceRowDeleted != null)) {
                    this.ReferenceTitleSourceRowDeleted(this, new ReferenceTitleSourceRowChangeEvent(((ReferenceTitleSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReferenceTitleSourceRowDeleting != null)) {
                    this.ReferenceTitleSourceRowDeleting(this, new ReferenceTitleSourceRowChangeEvent(((ReferenceTitleSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveReferenceTitleSourceRow(ReferenceTitleSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCacheDatabase ds = new DataSetCacheDatabase();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReferenceTitleSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SamplingPlotSourceDataTable : global::System.Data.TypedTableBase<SamplingPlotSourceRow> {
            
            private global::System.Data.DataColumn columnSourceView;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnSourceID;
            
            private global::System.Data.DataColumn columnLinkedServerName;
            
            private global::System.Data.DataColumn columnDatabaseName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public SamplingPlotSourceDataTable() {
                this.TableName = "SamplingPlotSource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SamplingPlotSourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected SamplingPlotSourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceViewColumn {
                get {
                    return this.columnSourceView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceIDColumn {
                get {
                    return this.columnSourceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LinkedServerNameColumn {
                get {
                    return this.columnLinkedServerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DatabaseNameColumn {
                get {
                    return this.columnDatabaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public SamplingPlotSourceRow this[int index] {
                get {
                    return ((SamplingPlotSourceRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event SamplingPlotSourceRowChangeEventHandler SamplingPlotSourceRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event SamplingPlotSourceRowChangeEventHandler SamplingPlotSourceRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event SamplingPlotSourceRowChangeEventHandler SamplingPlotSourceRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event SamplingPlotSourceRowChangeEventHandler SamplingPlotSourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddSamplingPlotSourceRow(SamplingPlotSourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public SamplingPlotSourceRow AddSamplingPlotSourceRow(string SourceView, string Source, int SourceID, string LinkedServerName, string DatabaseName) {
                SamplingPlotSourceRow rowSamplingPlotSourceRow = ((SamplingPlotSourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SourceView,
                        Source,
                        SourceID,
                        LinkedServerName,
                        DatabaseName};
                rowSamplingPlotSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSamplingPlotSourceRow);
                return rowSamplingPlotSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public SamplingPlotSourceRow FindBySourceView(string SourceView) {
                return ((SamplingPlotSourceRow)(this.Rows.Find(new object[] {
                            SourceView})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SamplingPlotSourceDataTable cln = ((SamplingPlotSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SamplingPlotSourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnSourceView = base.Columns["SourceView"];
                this.columnSource = base.Columns["Source"];
                this.columnSourceID = base.Columns["SourceID"];
                this.columnLinkedServerName = base.Columns["LinkedServerName"];
                this.columnDatabaseName = base.Columns["DatabaseName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnSourceView = new global::System.Data.DataColumn("SourceView", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceView);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnSourceID = new global::System.Data.DataColumn("SourceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceID);
                this.columnLinkedServerName = new global::System.Data.DataColumn("LinkedServerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkedServerName);
                this.columnDatabaseName = new global::System.Data.DataColumn("DatabaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabaseName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSourceView}, true));
                this.columnSourceView.AllowDBNull = false;
                this.columnSourceView.Unique = true;
                this.columnSourceView.MaxLength = 200;
                this.columnSource.MaxLength = 50;
                this.columnLinkedServerName.MaxLength = 400;
                this.columnDatabaseName.MaxLength = 400;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public SamplingPlotSourceRow NewSamplingPlotSourceRow() {
                return ((SamplingPlotSourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SamplingPlotSourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SamplingPlotSourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SamplingPlotSourceRowChanged != null)) {
                    this.SamplingPlotSourceRowChanged(this, new SamplingPlotSourceRowChangeEvent(((SamplingPlotSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SamplingPlotSourceRowChanging != null)) {
                    this.SamplingPlotSourceRowChanging(this, new SamplingPlotSourceRowChangeEvent(((SamplingPlotSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SamplingPlotSourceRowDeleted != null)) {
                    this.SamplingPlotSourceRowDeleted(this, new SamplingPlotSourceRowChangeEvent(((SamplingPlotSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SamplingPlotSourceRowDeleting != null)) {
                    this.SamplingPlotSourceRowDeleting(this, new SamplingPlotSourceRowChangeEvent(((SamplingPlotSourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveSamplingPlotSourceRow(SamplingPlotSourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCacheDatabase ds = new DataSetCacheDatabase();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SamplingPlotSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TaxonSynonymySource_WebserviceDataTable : global::System.Data.TypedTableBase<TaxonSynonymySource_WebserviceRow> {
            
            private global::System.Data.DataColumn columnSourceView;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnSourceID;
            
            private global::System.Data.DataColumn columnSubsets;
            
            private global::System.Data.DataColumn columnTransferProtocol;
            
            private global::System.Data.DataColumn columnIncludeInTransfer;
            
            private global::System.Data.DataColumn columnLastUpdatedWhen;
            
            private global::System.Data.DataColumn columnCompareLogDate;
            
            private global::System.Data.DataColumn columnTransferDays;
            
            private global::System.Data.DataColumn columnTransferTime;
            
            private global::System.Data.DataColumn columnTransferIsExecutedBy;
            
            private global::System.Data.DataColumn columnTransferErrors;
            
            private global::System.Data.DataColumn columnLastCheckedWhen;
            
            private global::System.Data.DataColumn columnVersion;
            
            private global::System.Data.DataColumn columnLinkedServerName;
            
            private global::System.Data.DataColumn columnDatabaseName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySource_WebserviceDataTable() {
                this.TableName = "TaxonSynonymySource_Webservice";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal TaxonSynonymySource_WebserviceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected TaxonSynonymySource_WebserviceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceViewColumn {
                get {
                    return this.columnSourceView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SourceIDColumn {
                get {
                    return this.columnSourceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SubsetsColumn {
                get {
                    return this.columnSubsets;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransferProtocolColumn {
                get {
                    return this.columnTransferProtocol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn IncludeInTransferColumn {
                get {
                    return this.columnIncludeInTransfer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LastUpdatedWhenColumn {
                get {
                    return this.columnLastUpdatedWhen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CompareLogDateColumn {
                get {
                    return this.columnCompareLogDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransferDaysColumn {
                get {
                    return this.columnTransferDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransferTimeColumn {
                get {
                    return this.columnTransferTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransferIsExecutedByColumn {
                get {
                    return this.columnTransferIsExecutedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransferErrorsColumn {
                get {
                    return this.columnTransferErrors;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LastCheckedWhenColumn {
                get {
                    return this.columnLastCheckedWhen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LinkedServerNameColumn {
                get {
                    return this.columnLinkedServerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DatabaseNameColumn {
                get {
                    return this.columnDatabaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySource_WebserviceRow this[int index] {
                get {
                    return ((TaxonSynonymySource_WebserviceRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event TaxonSynonymySource_WebserviceRowChangeEventHandler TaxonSynonymySource_WebserviceRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event TaxonSynonymySource_WebserviceRowChangeEventHandler TaxonSynonymySource_WebserviceRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event TaxonSynonymySource_WebserviceRowChangeEventHandler TaxonSynonymySource_WebserviceRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event TaxonSynonymySource_WebserviceRowChangeEventHandler TaxonSynonymySource_WebserviceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddTaxonSynonymySource_WebserviceRow(TaxonSynonymySource_WebserviceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySource_WebserviceRow AddTaxonSynonymySource_WebserviceRow(
                        string SourceView, 
                        string Source, 
                        int SourceID, 
                        string Subsets, 
                        string TransferProtocol, 
                        bool IncludeInTransfer, 
                        System.DateTime LastUpdatedWhen, 
                        bool CompareLogDate, 
                        string TransferDays, 
                        System.TimeSpan TransferTime, 
                        string TransferIsExecutedBy, 
                        string TransferErrors, 
                        System.DateTime LastCheckedWhen, 
                        int Version, 
                        string LinkedServerName, 
                        string DatabaseName) {
                TaxonSynonymySource_WebserviceRow rowTaxonSynonymySource_WebserviceRow = ((TaxonSynonymySource_WebserviceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SourceView,
                        Source,
                        SourceID,
                        Subsets,
                        TransferProtocol,
                        IncludeInTransfer,
                        LastUpdatedWhen,
                        CompareLogDate,
                        TransferDays,
                        TransferTime,
                        TransferIsExecutedBy,
                        TransferErrors,
                        LastCheckedWhen,
                        Version,
                        LinkedServerName,
                        DatabaseName};
                rowTaxonSynonymySource_WebserviceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTaxonSynonymySource_WebserviceRow);
                return rowTaxonSynonymySource_WebserviceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySource_WebserviceRow FindBySourceView(string SourceView) {
                return ((TaxonSynonymySource_WebserviceRow)(this.Rows.Find(new object[] {
                            SourceView})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                TaxonSynonymySource_WebserviceDataTable cln = ((TaxonSynonymySource_WebserviceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TaxonSynonymySource_WebserviceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnSourceView = base.Columns["SourceView"];
                this.columnSource = base.Columns["Source"];
                this.columnSourceID = base.Columns["SourceID"];
                this.columnSubsets = base.Columns["Subsets"];
                this.columnTransferProtocol = base.Columns["TransferProtocol"];
                this.columnIncludeInTransfer = base.Columns["IncludeInTransfer"];
                this.columnLastUpdatedWhen = base.Columns["LastUpdatedWhen"];
                this.columnCompareLogDate = base.Columns["CompareLogDate"];
                this.columnTransferDays = base.Columns["TransferDays"];
                this.columnTransferTime = base.Columns["TransferTime"];
                this.columnTransferIsExecutedBy = base.Columns["TransferIsExecutedBy"];
                this.columnTransferErrors = base.Columns["TransferErrors"];
                this.columnLastCheckedWhen = base.Columns["LastCheckedWhen"];
                this.columnVersion = base.Columns["Version"];
                this.columnLinkedServerName = base.Columns["LinkedServerName"];
                this.columnDatabaseName = base.Columns["DatabaseName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnSourceView = new global::System.Data.DataColumn("SourceView", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceView);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnSourceID = new global::System.Data.DataColumn("SourceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceID);
                this.columnSubsets = new global::System.Data.DataColumn("Subsets", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubsets);
                this.columnTransferProtocol = new global::System.Data.DataColumn("TransferProtocol", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferProtocol);
                this.columnIncludeInTransfer = new global::System.Data.DataColumn("IncludeInTransfer", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncludeInTransfer);
                this.columnLastUpdatedWhen = new global::System.Data.DataColumn("LastUpdatedWhen", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastUpdatedWhen);
                this.columnCompareLogDate = new global::System.Data.DataColumn("CompareLogDate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompareLogDate);
                this.columnTransferDays = new global::System.Data.DataColumn("TransferDays", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferDays);
                this.columnTransferTime = new global::System.Data.DataColumn("TransferTime", typeof(global::System.TimeSpan), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferTime);
                this.columnTransferIsExecutedBy = new global::System.Data.DataColumn("TransferIsExecutedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferIsExecutedBy);
                this.columnTransferErrors = new global::System.Data.DataColumn("TransferErrors", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferErrors);
                this.columnLastCheckedWhen = new global::System.Data.DataColumn("LastCheckedWhen", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastCheckedWhen);
                this.columnVersion = new global::System.Data.DataColumn("Version", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
                this.columnLinkedServerName = new global::System.Data.DataColumn("LinkedServerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinkedServerName);
                this.columnDatabaseName = new global::System.Data.DataColumn("DatabaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabaseName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSourceView}, true));
                this.columnSourceView.AllowDBNull = false;
                this.columnSourceView.Unique = true;
                this.columnSourceView.MaxLength = 200;
                this.columnSource.MaxLength = 500;
                this.columnSubsets.MaxLength = 500;
                this.columnTransferProtocol.MaxLength = 2147483647;
                this.columnTransferDays.MaxLength = 7;
                this.columnTransferIsExecutedBy.MaxLength = 500;
                this.columnTransferErrors.MaxLength = 2147483647;
                this.columnLinkedServerName.MaxLength = 500;
                this.columnDatabaseName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySource_WebserviceRow NewTaxonSynonymySource_WebserviceRow() {
                return ((TaxonSynonymySource_WebserviceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TaxonSynonymySource_WebserviceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(TaxonSynonymySource_WebserviceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TaxonSynonymySource_WebserviceRowChanged != null)) {
                    this.TaxonSynonymySource_WebserviceRowChanged(this, new TaxonSynonymySource_WebserviceRowChangeEvent(((TaxonSynonymySource_WebserviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TaxonSynonymySource_WebserviceRowChanging != null)) {
                    this.TaxonSynonymySource_WebserviceRowChanging(this, new TaxonSynonymySource_WebserviceRowChangeEvent(((TaxonSynonymySource_WebserviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TaxonSynonymySource_WebserviceRowDeleted != null)) {
                    this.TaxonSynonymySource_WebserviceRowDeleted(this, new TaxonSynonymySource_WebserviceRowChangeEvent(((TaxonSynonymySource_WebserviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TaxonSynonymySource_WebserviceRowDeleting != null)) {
                    this.TaxonSynonymySource_WebserviceRowDeleting(this, new TaxonSynonymySource_WebserviceRowChangeEvent(((TaxonSynonymySource_WebserviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveTaxonSynonymySource_WebserviceRow(TaxonSynonymySource_WebserviceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCacheDatabase ds = new DataSetCacheDatabase();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TaxonSynonymySource_WebserviceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CacheDatabaseRow : global::System.Data.DataRow {
            
            private CacheDatabaseDataTable tableCacheDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal CacheDatabaseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCacheDatabase = ((CacheDatabaseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Server {
                get {
                    return ((string)(this[this.tableCacheDatabase.ServerColumn]));
                }
                set {
                    this[this.tableCacheDatabase.ServerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string DatabaseName {
                get {
                    return ((string)(this[this.tableCacheDatabase.DatabaseNameColumn]));
                }
                set {
                    this[this.tableCacheDatabase.DatabaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short Port {
                get {
                    return ((short)(this[this.tableCacheDatabase.PortColumn]));
                }
                set {
                    this[this.tableCacheDatabase.PortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Version {
                get {
                    try {
                        return ((string)(this[this.tableCacheDatabase.VersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Version in Tabelle CacheDatabase ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCacheDatabase.VersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsVersionNull() {
                return this.IsNull(this.tableCacheDatabase.VersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetVersionNull() {
                this[this.tableCacheDatabase.VersionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ProjectPublishedRow : global::System.Data.DataRow {
            
            private ProjectPublishedDataTable tableProjectPublished;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ProjectPublishedRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectPublished = ((ProjectPublishedDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectPublished.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectPublished.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Project {
                get {
                    try {
                        return ((string)(this[this.tableProjectPublished.ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Project in Tabelle ProjectPublished ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectPublished.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public byte CoordinatePrecision {
                get {
                    try {
                        return ((byte)(this[this.tableProjectPublished.CoordinatePrecisionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte CoordinatePrecision in Tabelle ProjectPublished ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectPublished.CoordinatePrecisionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectURI {
                get {
                    try {
                        return ((string)(this[this.tableProjectPublished.ProjectURIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ProjectURI in Tabelle ProjectPublished ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectPublished.ProjectURIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime LastUpdatedWhen {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProjectPublished.LastUpdatedWhenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LastUpdatedWhen in Tabelle ProjectPublished ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectPublished.LastUpdatedWhenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LastUpdatedBy {
                get {
                    try {
                        return ((string)(this[this.tableProjectPublished.LastUpdatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LastUpdatedBy in Tabelle ProjectPublished ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectPublished.LastUpdatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectNull() {
                return this.IsNull(this.tableProjectPublished.ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectNull() {
                this[this.tableProjectPublished.ProjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCoordinatePrecisionNull() {
                return this.IsNull(this.tableProjectPublished.CoordinatePrecisionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCoordinatePrecisionNull() {
                this[this.tableProjectPublished.CoordinatePrecisionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectURINull() {
                return this.IsNull(this.tableProjectPublished.ProjectURIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectURINull() {
                this[this.tableProjectPublished.ProjectURIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLastUpdatedWhenNull() {
                return this.IsNull(this.tableProjectPublished.LastUpdatedWhenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLastUpdatedWhenNull() {
                this[this.tableProjectPublished.LastUpdatedWhenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLastUpdatedByNull() {
                return this.IsNull(this.tableProjectPublished.LastUpdatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLastUpdatedByNull() {
                this[this.tableProjectPublished.LastUpdatedByColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AnonymCollectorRow : global::System.Data.DataRow {
            
            private AnonymCollectorDataTable tableAnonymCollector;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal AnonymCollectorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAnonymCollector = ((AnonymCollectorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CollectorsName {
                get {
                    return ((string)(this[this.tableAnonymCollector.CollectorsNameColumn]));
                }
                set {
                    this[this.tableAnonymCollector.CollectorsNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Anonymisation {
                get {
                    try {
                        return ((string)(this[this.tableAnonymCollector.AnonymisationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Anonymisation in Tabelle AnonymCollector ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableAnonymCollector.AnonymisationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsAnonymisationNull() {
                return this.IsNull(this.tableAnonymCollector.AnonymisationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetAnonymisationNull() {
                this[this.tableAnonymCollector.AnonymisationColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ScientificTermSourceRow : global::System.Data.DataRow {
            
            private ScientificTermSourceDataTable tableScientificTermSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ScientificTermSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScientificTermSource = ((ScientificTermSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SourceView {
                get {
                    return ((string)(this[this.tableScientificTermSource.SourceViewColumn]));
                }
                set {
                    this[this.tableScientificTermSource.SourceViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableScientificTermSource.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Source in Tabelle ScientificTermSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableScientificTermSource.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SourceID {
                get {
                    try {
                        return ((int)(this[this.tableScientificTermSource.SourceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SourceID in Tabelle ScientificTermSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableScientificTermSource.SourceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LinkedServerName {
                get {
                    try {
                        return ((string)(this[this.tableScientificTermSource.LinkedServerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LinkedServerName in Tabelle ScientificTermSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableScientificTermSource.LinkedServerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string DatabaseName {
                get {
                    try {
                        return ((string)(this[this.tableScientificTermSource.DatabaseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DatabaseName in Tabelle ScientificTermSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableScientificTermSource.DatabaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceNull() {
                return this.IsNull(this.tableScientificTermSource.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceNull() {
                this[this.tableScientificTermSource.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceIDNull() {
                return this.IsNull(this.tableScientificTermSource.SourceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceIDNull() {
                this[this.tableScientificTermSource.SourceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLinkedServerNameNull() {
                return this.IsNull(this.tableScientificTermSource.LinkedServerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLinkedServerNameNull() {
                this[this.tableScientificTermSource.LinkedServerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDatabaseNameNull() {
                return this.IsNull(this.tableScientificTermSource.DatabaseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDatabaseNameNull() {
                this[this.tableScientificTermSource.DatabaseNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TaxonSynonymySourceRow : global::System.Data.DataRow {
            
            private TaxonSynonymySourceDataTable tableTaxonSynonymySource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal TaxonSynonymySourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTaxonSynonymySource = ((TaxonSynonymySourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SourceView {
                get {
                    return ((string)(this[this.tableTaxonSynonymySource.SourceViewColumn]));
                }
                set {
                    this[this.tableTaxonSynonymySource.SourceViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableTaxonSynonymySource.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Source in Tabelle TaxonSynonymySource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SourceID {
                get {
                    try {
                        return ((int)(this[this.tableTaxonSynonymySource.SourceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SourceID in Tabelle TaxonSynonymySource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource.SourceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LinkedServerName {
                get {
                    try {
                        return ((string)(this[this.tableTaxonSynonymySource.LinkedServerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LinkedServerName in Tabelle TaxonSynonymySource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource.LinkedServerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string DatabaseName {
                get {
                    try {
                        return ((string)(this[this.tableTaxonSynonymySource.DatabaseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DatabaseName in Tabelle TaxonSynonymySource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource.DatabaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceNull() {
                return this.IsNull(this.tableTaxonSynonymySource.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceNull() {
                this[this.tableTaxonSynonymySource.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceIDNull() {
                return this.IsNull(this.tableTaxonSynonymySource.SourceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceIDNull() {
                this[this.tableTaxonSynonymySource.SourceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLinkedServerNameNull() {
                return this.IsNull(this.tableTaxonSynonymySource.LinkedServerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLinkedServerNameNull() {
                this[this.tableTaxonSynonymySource.LinkedServerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDatabaseNameNull() {
                return this.IsNull(this.tableTaxonSynonymySource.DatabaseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDatabaseNameNull() {
                this[this.tableTaxonSynonymySource.DatabaseNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class GazetteerSourceRow : global::System.Data.DataRow {
            
            private GazetteerSourceDataTable tableGazetteerSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal GazetteerSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGazetteerSource = ((GazetteerSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SourceView {
                get {
                    return ((string)(this[this.tableGazetteerSource.SourceViewColumn]));
                }
                set {
                    this[this.tableGazetteerSource.SourceViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableGazetteerSource.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Source in Tabelle GazetteerSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableGazetteerSource.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SourceID {
                get {
                    try {
                        return ((int)(this[this.tableGazetteerSource.SourceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SourceID in Tabelle GazetteerSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableGazetteerSource.SourceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LinkedServerName {
                get {
                    try {
                        return ((string)(this[this.tableGazetteerSource.LinkedServerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LinkedServerName in Tabelle GazetteerSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableGazetteerSource.LinkedServerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string DatabaseName {
                get {
                    try {
                        return ((string)(this[this.tableGazetteerSource.DatabaseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DatabaseName in Tabelle GazetteerSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableGazetteerSource.DatabaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceNull() {
                return this.IsNull(this.tableGazetteerSource.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceNull() {
                this[this.tableGazetteerSource.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceIDNull() {
                return this.IsNull(this.tableGazetteerSource.SourceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceIDNull() {
                this[this.tableGazetteerSource.SourceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLinkedServerNameNull() {
                return this.IsNull(this.tableGazetteerSource.LinkedServerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLinkedServerNameNull() {
                this[this.tableGazetteerSource.LinkedServerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDatabaseNameNull() {
                return this.IsNull(this.tableGazetteerSource.DatabaseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDatabaseNameNull() {
                this[this.tableGazetteerSource.DatabaseNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AgentSourceRow : global::System.Data.DataRow {
            
            private AgentSourceDataTable tableAgentSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal AgentSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAgentSource = ((AgentSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SourceView {
                get {
                    return ((string)(this[this.tableAgentSource.SourceViewColumn]));
                }
                set {
                    this[this.tableAgentSource.SourceViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableAgentSource.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Source in Tabelle AgentSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentSource.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SourceID {
                get {
                    try {
                        return ((int)(this[this.tableAgentSource.SourceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SourceID in Tabelle AgentSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentSource.SourceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LinkedServerName {
                get {
                    try {
                        return ((string)(this[this.tableAgentSource.LinkedServerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LinkedServerName in Tabelle AgentSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentSource.LinkedServerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string DatabaseName {
                get {
                    try {
                        return ((string)(this[this.tableAgentSource.DatabaseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DatabaseName in Tabelle AgentSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgentSource.DatabaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceNull() {
                return this.IsNull(this.tableAgentSource.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceNull() {
                this[this.tableAgentSource.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceIDNull() {
                return this.IsNull(this.tableAgentSource.SourceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceIDNull() {
                this[this.tableAgentSource.SourceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLinkedServerNameNull() {
                return this.IsNull(this.tableAgentSource.LinkedServerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLinkedServerNameNull() {
                this[this.tableAgentSource.LinkedServerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDatabaseNameNull() {
                return this.IsNull(this.tableAgentSource.DatabaseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDatabaseNameNull() {
                this[this.tableAgentSource.DatabaseNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ReferenceTitleSourceRow : global::System.Data.DataRow {
            
            private ReferenceTitleSourceDataTable tableReferenceTitleSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ReferenceTitleSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReferenceTitleSource = ((ReferenceTitleSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SourceView {
                get {
                    return ((string)(this[this.tableReferenceTitleSource.SourceViewColumn]));
                }
                set {
                    this[this.tableReferenceTitleSource.SourceViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableReferenceTitleSource.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Source in Tabelle ReferenceTitleSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceTitleSource.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SourceID {
                get {
                    try {
                        return ((int)(this[this.tableReferenceTitleSource.SourceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SourceID in Tabelle ReferenceTitleSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceTitleSource.SourceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LinkedServerName {
                get {
                    try {
                        return ((string)(this[this.tableReferenceTitleSource.LinkedServerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LinkedServerName in Tabelle ReferenceTitleSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceTitleSource.LinkedServerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string DatabaseName {
                get {
                    try {
                        return ((string)(this[this.tableReferenceTitleSource.DatabaseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DatabaseName in Tabelle ReferenceTitleSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceTitleSource.DatabaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Subsets {
                get {
                    try {
                        return ((string)(this[this.tableReferenceTitleSource.SubsetsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Subsets in Tabelle ReferenceTitleSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceTitleSource.SubsetsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TransferProtocol {
                get {
                    try {
                        return ((string)(this[this.tableReferenceTitleSource.TransferProtocolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TransferProtocol in Tabelle ReferenceTitleSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceTitleSource.TransferProtocolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IncludeInTransfer {
                get {
                    try {
                        return ((bool)(this[this.tableReferenceTitleSource.IncludeInTransferColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte IncludeInTransfer in Tabelle ReferenceTitleSource ist DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableReferenceTitleSource.IncludeInTransferColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime LastUpdatedWhen {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableReferenceTitleSource.LastUpdatedWhenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LastUpdatedWhen in Tabelle ReferenceTitleSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceTitleSource.LastUpdatedWhenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool CompareLogDate {
                get {
                    try {
                        return ((bool)(this[this.tableReferenceTitleSource.CompareLogDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte CompareLogDate in Tabelle ReferenceTitleSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceTitleSource.CompareLogDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TransferDays {
                get {
                    try {
                        return ((string)(this[this.tableReferenceTitleSource.TransferDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TransferDays in Tabelle ReferenceTitleSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceTitleSource.TransferDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.TimeSpan TransferTime {
                get {
                    try {
                        return ((global::System.TimeSpan)(this[this.tableReferenceTitleSource.TransferTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TransferTime in Tabelle ReferenceTitleSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceTitleSource.TransferTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TransferIsExecutedBy {
                get {
                    try {
                        return ((string)(this[this.tableReferenceTitleSource.TransferIsExecutedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TransferIsExecutedBy in Tabelle ReferenceTitleSource ist DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableReferenceTitleSource.TransferIsExecutedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TransferErrors {
                get {
                    try {
                        return ((string)(this[this.tableReferenceTitleSource.TransferErrorsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TransferErrors in Tabelle ReferenceTitleSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableReferenceTitleSource.TransferErrorsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceNull() {
                return this.IsNull(this.tableReferenceTitleSource.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceNull() {
                this[this.tableReferenceTitleSource.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceIDNull() {
                return this.IsNull(this.tableReferenceTitleSource.SourceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceIDNull() {
                this[this.tableReferenceTitleSource.SourceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLinkedServerNameNull() {
                return this.IsNull(this.tableReferenceTitleSource.LinkedServerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLinkedServerNameNull() {
                this[this.tableReferenceTitleSource.LinkedServerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDatabaseNameNull() {
                return this.IsNull(this.tableReferenceTitleSource.DatabaseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDatabaseNameNull() {
                this[this.tableReferenceTitleSource.DatabaseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSubsetsNull() {
                return this.IsNull(this.tableReferenceTitleSource.SubsetsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSubsetsNull() {
                this[this.tableReferenceTitleSource.SubsetsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTransferProtocolNull() {
                return this.IsNull(this.tableReferenceTitleSource.TransferProtocolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTransferProtocolNull() {
                this[this.tableReferenceTitleSource.TransferProtocolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsIncludeInTransferNull() {
                return this.IsNull(this.tableReferenceTitleSource.IncludeInTransferColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetIncludeInTransferNull() {
                this[this.tableReferenceTitleSource.IncludeInTransferColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLastUpdatedWhenNull() {
                return this.IsNull(this.tableReferenceTitleSource.LastUpdatedWhenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLastUpdatedWhenNull() {
                this[this.tableReferenceTitleSource.LastUpdatedWhenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCompareLogDateNull() {
                return this.IsNull(this.tableReferenceTitleSource.CompareLogDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCompareLogDateNull() {
                this[this.tableReferenceTitleSource.CompareLogDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTransferDaysNull() {
                return this.IsNull(this.tableReferenceTitleSource.TransferDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTransferDaysNull() {
                this[this.tableReferenceTitleSource.TransferDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTransferTimeNull() {
                return this.IsNull(this.tableReferenceTitleSource.TransferTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTransferTimeNull() {
                this[this.tableReferenceTitleSource.TransferTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTransferIsExecutedByNull() {
                return this.IsNull(this.tableReferenceTitleSource.TransferIsExecutedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTransferIsExecutedByNull() {
                this[this.tableReferenceTitleSource.TransferIsExecutedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTransferErrorsNull() {
                return this.IsNull(this.tableReferenceTitleSource.TransferErrorsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTransferErrorsNull() {
                this[this.tableReferenceTitleSource.TransferErrorsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SamplingPlotSourceRow : global::System.Data.DataRow {
            
            private SamplingPlotSourceDataTable tableSamplingPlotSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SamplingPlotSourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSamplingPlotSource = ((SamplingPlotSourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SourceView {
                get {
                    return ((string)(this[this.tableSamplingPlotSource.SourceViewColumn]));
                }
                set {
                    this[this.tableSamplingPlotSource.SourceViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableSamplingPlotSource.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Source in Tabelle SamplingPlotSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableSamplingPlotSource.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SourceID {
                get {
                    try {
                        return ((int)(this[this.tableSamplingPlotSource.SourceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SourceID in Tabelle SamplingPlotSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableSamplingPlotSource.SourceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LinkedServerName {
                get {
                    try {
                        return ((string)(this[this.tableSamplingPlotSource.LinkedServerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LinkedServerName in Tabelle SamplingPlotSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableSamplingPlotSource.LinkedServerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string DatabaseName {
                get {
                    try {
                        return ((string)(this[this.tableSamplingPlotSource.DatabaseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DatabaseName in Tabelle SamplingPlotSource ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableSamplingPlotSource.DatabaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceNull() {
                return this.IsNull(this.tableSamplingPlotSource.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceNull() {
                this[this.tableSamplingPlotSource.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceIDNull() {
                return this.IsNull(this.tableSamplingPlotSource.SourceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceIDNull() {
                this[this.tableSamplingPlotSource.SourceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLinkedServerNameNull() {
                return this.IsNull(this.tableSamplingPlotSource.LinkedServerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLinkedServerNameNull() {
                this[this.tableSamplingPlotSource.LinkedServerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDatabaseNameNull() {
                return this.IsNull(this.tableSamplingPlotSource.DatabaseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDatabaseNameNull() {
                this[this.tableSamplingPlotSource.DatabaseNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TaxonSynonymySource_WebserviceRow : global::System.Data.DataRow {
            
            private TaxonSynonymySource_WebserviceDataTable tableTaxonSynonymySource_Webservice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal TaxonSynonymySource_WebserviceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTaxonSynonymySource_Webservice = ((TaxonSynonymySource_WebserviceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SourceView {
                get {
                    return ((string)(this[this.tableTaxonSynonymySource_Webservice.SourceViewColumn]));
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.SourceViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Source {
                get {
                    try {
                        return ((string)(this[this.tableTaxonSynonymySource_Webservice.SourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Source in Tabelle TaxonSynonymySource_Webservice ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SourceID {
                get {
                    try {
                        return ((int)(this[this.tableTaxonSynonymySource_Webservice.SourceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SourceID in Tabelle TaxonSynonymySource_Webservice ist DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.SourceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Subsets {
                get {
                    try {
                        return ((string)(this[this.tableTaxonSynonymySource_Webservice.SubsetsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Subsets in Tabelle TaxonSynonymySource_Webservice ist DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.SubsetsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TransferProtocol {
                get {
                    try {
                        return ((string)(this[this.tableTaxonSynonymySource_Webservice.TransferProtocolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TransferProtocol in Tabelle TaxonSynonymySource_Webservice is" +
                                "t DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.TransferProtocolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IncludeInTransfer {
                get {
                    try {
                        return ((bool)(this[this.tableTaxonSynonymySource_Webservice.IncludeInTransferColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte IncludeInTransfer in Tabelle TaxonSynonymySource_Webservice i" +
                                "st DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.IncludeInTransferColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime LastUpdatedWhen {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTaxonSynonymySource_Webservice.LastUpdatedWhenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LastUpdatedWhen in Tabelle TaxonSynonymySource_Webservice ist" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.LastUpdatedWhenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool CompareLogDate {
                get {
                    try {
                        return ((bool)(this[this.tableTaxonSynonymySource_Webservice.CompareLogDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte CompareLogDate in Tabelle TaxonSynonymySource_Webservice ist " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.CompareLogDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TransferDays {
                get {
                    try {
                        return ((string)(this[this.tableTaxonSynonymySource_Webservice.TransferDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TransferDays in Tabelle TaxonSynonymySource_Webservice ist DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.TransferDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.TimeSpan TransferTime {
                get {
                    try {
                        return ((global::System.TimeSpan)(this[this.tableTaxonSynonymySource_Webservice.TransferTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TransferTime in Tabelle TaxonSynonymySource_Webservice ist DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.TransferTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TransferIsExecutedBy {
                get {
                    try {
                        return ((string)(this[this.tableTaxonSynonymySource_Webservice.TransferIsExecutedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TransferIsExecutedBy in Tabelle TaxonSynonymySource_Webservic" +
                                "e ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.TransferIsExecutedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TransferErrors {
                get {
                    try {
                        return ((string)(this[this.tableTaxonSynonymySource_Webservice.TransferErrorsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TransferErrors in Tabelle TaxonSynonymySource_Webservice ist " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.TransferErrorsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime LastCheckedWhen {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTaxonSynonymySource_Webservice.LastCheckedWhenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LastCheckedWhen in Tabelle TaxonSynonymySource_Webservice ist" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.LastCheckedWhenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Version {
                get {
                    try {
                        return ((int)(this[this.tableTaxonSynonymySource_Webservice.VersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Version in Tabelle TaxonSynonymySource_Webservice ist DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.VersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LinkedServerName {
                get {
                    try {
                        return ((string)(this[this.tableTaxonSynonymySource_Webservice.LinkedServerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LinkedServerName in Tabelle TaxonSynonymySource_Webservice is" +
                                "t DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.LinkedServerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string DatabaseName {
                get {
                    try {
                        return ((string)(this[this.tableTaxonSynonymySource_Webservice.DatabaseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DatabaseName in Tabelle TaxonSynonymySource_Webservice ist DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableTaxonSynonymySource_Webservice.DatabaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.SourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceNull() {
                this[this.tableTaxonSynonymySource_Webservice.SourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSourceIDNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.SourceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSourceIDNull() {
                this[this.tableTaxonSynonymySource_Webservice.SourceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSubsetsNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.SubsetsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSubsetsNull() {
                this[this.tableTaxonSynonymySource_Webservice.SubsetsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTransferProtocolNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.TransferProtocolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTransferProtocolNull() {
                this[this.tableTaxonSynonymySource_Webservice.TransferProtocolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsIncludeInTransferNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.IncludeInTransferColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetIncludeInTransferNull() {
                this[this.tableTaxonSynonymySource_Webservice.IncludeInTransferColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLastUpdatedWhenNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.LastUpdatedWhenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLastUpdatedWhenNull() {
                this[this.tableTaxonSynonymySource_Webservice.LastUpdatedWhenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCompareLogDateNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.CompareLogDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCompareLogDateNull() {
                this[this.tableTaxonSynonymySource_Webservice.CompareLogDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTransferDaysNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.TransferDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTransferDaysNull() {
                this[this.tableTaxonSynonymySource_Webservice.TransferDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTransferTimeNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.TransferTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTransferTimeNull() {
                this[this.tableTaxonSynonymySource_Webservice.TransferTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTransferIsExecutedByNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.TransferIsExecutedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTransferIsExecutedByNull() {
                this[this.tableTaxonSynonymySource_Webservice.TransferIsExecutedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTransferErrorsNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.TransferErrorsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTransferErrorsNull() {
                this[this.tableTaxonSynonymySource_Webservice.TransferErrorsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLastCheckedWhenNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.LastCheckedWhenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLastCheckedWhenNull() {
                this[this.tableTaxonSynonymySource_Webservice.LastCheckedWhenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsVersionNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.VersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetVersionNull() {
                this[this.tableTaxonSynonymySource_Webservice.VersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLinkedServerNameNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.LinkedServerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLinkedServerNameNull() {
                this[this.tableTaxonSynonymySource_Webservice.LinkedServerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDatabaseNameNull() {
                return this.IsNull(this.tableTaxonSynonymySource_Webservice.DatabaseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDatabaseNameNull() {
                this[this.tableTaxonSynonymySource_Webservice.DatabaseNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class CacheDatabaseRowChangeEvent : global::System.EventArgs {
            
            private CacheDatabaseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CacheDatabaseRowChangeEvent(CacheDatabaseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CacheDatabaseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class ProjectPublishedRowChangeEvent : global::System.EventArgs {
            
            private ProjectPublishedRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectPublishedRowChangeEvent(ProjectPublishedRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ProjectPublishedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class AnonymCollectorRowChangeEvent : global::System.EventArgs {
            
            private AnonymCollectorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AnonymCollectorRowChangeEvent(AnonymCollectorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AnonymCollectorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class ScientificTermSourceRowChangeEvent : global::System.EventArgs {
            
            private ScientificTermSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ScientificTermSourceRowChangeEvent(ScientificTermSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ScientificTermSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class TaxonSynonymySourceRowChangeEvent : global::System.EventArgs {
            
            private TaxonSynonymySourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySourceRowChangeEvent(TaxonSynonymySourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class GazetteerSourceRowChangeEvent : global::System.EventArgs {
            
            private GazetteerSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GazetteerSourceRowChangeEvent(GazetteerSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public GazetteerSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class AgentSourceRowChangeEvent : global::System.EventArgs {
            
            private AgentSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AgentSourceRowChangeEvent(AgentSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public AgentSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class ReferenceTitleSourceRowChangeEvent : global::System.EventArgs {
            
            private ReferenceTitleSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ReferenceTitleSourceRowChangeEvent(ReferenceTitleSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ReferenceTitleSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class SamplingPlotSourceRowChangeEvent : global::System.EventArgs {
            
            private SamplingPlotSourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public SamplingPlotSourceRowChangeEvent(SamplingPlotSourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public SamplingPlotSourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class TaxonSynonymySource_WebserviceRowChangeEvent : global::System.EventArgs {
            
            private TaxonSynonymySource_WebserviceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySource_WebserviceRowChangeEvent(TaxonSynonymySource_WebserviceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public TaxonSynonymySource_WebserviceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DiversityCollection.CacheDatabase.DataSetCacheDatabaseTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CacheDatabaseTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public CacheDatabaseTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CacheDatabase";
            tableMapping.ColumnMappings.Add("Server", "Server");
            tableMapping.ColumnMappings.Add("DatabaseName", "DatabaseName");
            tableMapping.ColumnMappings.Add("Port", "Port");
            tableMapping.ColumnMappings.Add("Version", "Version");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [CacheDatabase] WHERE (([Server] = @Original_Server) AND ([DatabaseNa" +
                "me] = @Original_DatabaseName) AND ([Port] = @Original_Port) AND ((@IsNull_Versio" +
                "n = 1 AND [Version] IS NULL) OR ([Version] = @Original_Version)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Server";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "Server";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Port";
            param.DbType = global::System.Data.DbType.Int16;
            param.SqlDbType = global::System.Data.SqlDbType.SmallInt;
            param.IsNullable = true;
            param.SourceColumn = "Port";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Version";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Version";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Version";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "Version";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [CacheDatabase] ([Server], [DatabaseName], [Port], [Version]) VALUES (@Server, @DatabaseName, @Port, @Version);
SELECT Server, DatabaseName, Port, Version FROM CacheDatabase WHERE (DatabaseName = @DatabaseName) AND (Port = @Port) AND (Server = @Server)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Server";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "Server";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Port";
            param.DbType = global::System.Data.DbType.Int16;
            param.SqlDbType = global::System.Data.SqlDbType.SmallInt;
            param.IsNullable = true;
            param.SourceColumn = "Port";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Version";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "Version";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [CacheDatabase] SET [Server] = @Server, [DatabaseName] = @DatabaseName, [Port] = @Port, [Version] = @Version WHERE (([Server] = @Original_Server) AND ([DatabaseName] = @Original_DatabaseName) AND ([Port] = @Original_Port) AND ((@IsNull_Version = 1 AND [Version] IS NULL) OR ([Version] = @Original_Version)));
SELECT Server, DatabaseName, Port, Version FROM CacheDatabase WHERE (DatabaseName = @DatabaseName) AND (Port = @Port) AND (Server = @Server)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Server";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "Server";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Port";
            param.DbType = global::System.Data.DbType.Int16;
            param.SqlDbType = global::System.Data.SqlDbType.SmallInt;
            param.IsNullable = true;
            param.SourceColumn = "Port";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Version";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "Version";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Server";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "Server";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Port";
            param.DbType = global::System.Data.DbType.Int16;
            param.SqlDbType = global::System.Data.SqlDbType.SmallInt;
            param.IsNullable = true;
            param.SourceColumn = "Port";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Version";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Version";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Version";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "Version";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollection_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        Server, DatabaseName, Port, Version\r\nFROM            CacheDatabase";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCacheDatabase.CacheDatabaseDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCacheDatabase.CacheDatabaseDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCacheDatabase.CacheDatabaseDataTable dataTable = new DataSetCacheDatabase.CacheDatabaseDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase.CacheDatabaseDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase dataSet) {
            return this.Adapter.Update(dataSet, "CacheDatabase");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_Server, string Original_DatabaseName, short Original_Port, string Original_Version) {
            if ((Original_Server == null)) {
                throw new global::System.ArgumentNullException("Original_Server");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Server));
            }
            if ((Original_DatabaseName == null)) {
                throw new global::System.ArgumentNullException("Original_DatabaseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_DatabaseName));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((short)(Original_Port));
            if ((Original_Version == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Version));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Server, string DatabaseName, short Port, string Version) {
            if ((Server == null)) {
                throw new global::System.ArgumentNullException("Server");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Server));
            }
            if ((DatabaseName == null)) {
                throw new global::System.ArgumentNullException("DatabaseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DatabaseName));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((short)(Port));
            if ((Version == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Version));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Server, string DatabaseName, short Port, string Version, string Original_Server, string Original_DatabaseName, short Original_Port, string Original_Version) {
            if ((Server == null)) {
                throw new global::System.ArgumentNullException("Server");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Server));
            }
            if ((DatabaseName == null)) {
                throw new global::System.ArgumentNullException("DatabaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DatabaseName));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((short)(Port));
            if ((Version == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Version));
            }
            if ((Original_Server == null)) {
                throw new global::System.ArgumentNullException("Original_Server");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Server));
            }
            if ((Original_DatabaseName == null)) {
                throw new global::System.ArgumentNullException("Original_DatabaseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_DatabaseName));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((short)(Original_Port));
            if ((Original_Version == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Version));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Version, string Original_Server, string Original_DatabaseName, short Original_Port, string Original_Version) {
            return this.Update(Original_Server, Original_DatabaseName, Original_Port, Version, Original_Server, Original_DatabaseName, Original_Port, Original_Version);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProjectPublishedTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public ProjectPublishedTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ProjectPublished";
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            tableMapping.ColumnMappings.Add("Project", "Project");
            tableMapping.ColumnMappings.Add("CoordinatePrecision", "CoordinatePrecision");
            tableMapping.ColumnMappings.Add("ProjectURI", "ProjectURI");
            tableMapping.ColumnMappings.Add("LastUpdatedWhen", "LastUpdatedWhen");
            tableMapping.ColumnMappings.Add("LastUpdatedBy", "LastUpdatedBy");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [ProjectPublished] WHERE (([ProjectID] = @Original_ProjectID) AND ((@IsNull_Project = 1 AND [Project] IS NULL) OR ([Project] = @Original_Project)) AND ((@IsNull_CoordinatePrecision = 1 AND [CoordinatePrecision] IS NULL) OR ([CoordinatePrecision] = @Original_CoordinatePrecision)) AND ((@IsNull_ProjectURI = 1 AND [ProjectURI] IS NULL) OR ([ProjectURI] = @Original_ProjectURI)) AND ((@IsNull_LastUpdatedWhen = 1 AND [LastUpdatedWhen] IS NULL) OR ([LastUpdatedWhen] = @Original_LastUpdatedWhen)) AND ((@IsNull_LastUpdatedBy = 1 AND [LastUpdatedBy] IS NULL) OR ([LastUpdatedBy] = @Original_LastUpdatedBy)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Project";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Project";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Project";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Project";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CoordinatePrecision";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CoordinatePrecision";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CoordinatePrecision";
            param.DbType = global::System.Data.DbType.Byte;
            param.SqlDbType = global::System.Data.SqlDbType.TinyInt;
            param.IsNullable = true;
            param.SourceColumn = "CoordinatePrecision";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectURI";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectURI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LastUpdatedBy";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LastUpdatedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ProjectPublished] ([ProjectID], [Project], [CoordinatePrecision], [ProjectURI], [LastUpdatedWhen], [LastUpdatedBy]) VALUES (@ProjectID, @Project, @CoordinatePrecision, @ProjectURI, @LastUpdatedWhen, @LastUpdatedBy);
SELECT ProjectID, Project, CoordinatePrecision, ProjectURI, LastUpdatedWhen, LastUpdatedBy FROM ProjectPublished WHERE (ProjectID = @ProjectID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Project";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Project";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CoordinatePrecision";
            param.DbType = global::System.Data.DbType.Byte;
            param.SqlDbType = global::System.Data.SqlDbType.TinyInt;
            param.IsNullable = true;
            param.SourceColumn = "CoordinatePrecision";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectURI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectURI";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LastUpdatedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedBy";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [ProjectPublished] SET [ProjectID] = @ProjectID, [Project] = @Project, [CoordinatePrecision] = @CoordinatePrecision, [ProjectURI] = @ProjectURI, [LastUpdatedWhen] = @LastUpdatedWhen, [LastUpdatedBy] = @LastUpdatedBy WHERE (([ProjectID] = @Original_ProjectID) AND ((@IsNull_Project = 1 AND [Project] IS NULL) OR ([Project] = @Original_Project)) AND ((@IsNull_CoordinatePrecision = 1 AND [CoordinatePrecision] IS NULL) OR ([CoordinatePrecision] = @Original_CoordinatePrecision)) AND ((@IsNull_ProjectURI = 1 AND [ProjectURI] IS NULL) OR ([ProjectURI] = @Original_ProjectURI)) AND ((@IsNull_LastUpdatedWhen = 1 AND [LastUpdatedWhen] IS NULL) OR ([LastUpdatedWhen] = @Original_LastUpdatedWhen)) AND ((@IsNull_LastUpdatedBy = 1 AND [LastUpdatedBy] IS NULL) OR ([LastUpdatedBy] = @Original_LastUpdatedBy)));
SELECT ProjectID, Project, CoordinatePrecision, ProjectURI, LastUpdatedWhen, LastUpdatedBy FROM ProjectPublished WHERE (ProjectID = @ProjectID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Project";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Project";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CoordinatePrecision";
            param.DbType = global::System.Data.DbType.Byte;
            param.SqlDbType = global::System.Data.SqlDbType.TinyInt;
            param.IsNullable = true;
            param.SourceColumn = "CoordinatePrecision";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ProjectURI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectURI";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LastUpdatedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedBy";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Project";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Project";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Project";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Project";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CoordinatePrecision";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CoordinatePrecision";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CoordinatePrecision";
            param.DbType = global::System.Data.DbType.Byte;
            param.SqlDbType = global::System.Data.SqlDbType.TinyInt;
            param.IsNullable = true;
            param.SourceColumn = "CoordinatePrecision";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ProjectURI";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ProjectURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ProjectURI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ProjectURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LastUpdatedBy";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LastUpdatedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollectionCache_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        ProjectID, Project, CoordinatePrecision, ProjectURI, LastUpdatedWhe" +
                "n, LastUpdatedBy\r\nFROM            ProjectPublished";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCacheDatabase.ProjectPublishedDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCacheDatabase.ProjectPublishedDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCacheDatabase.ProjectPublishedDataTable dataTable = new DataSetCacheDatabase.ProjectPublishedDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase.ProjectPublishedDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase dataSet) {
            return this.Adapter.Update(dataSet, "ProjectPublished");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ProjectID, string Original_Project, global::System.Nullable<byte> Original_CoordinatePrecision, string Original_ProjectURI, global::System.Nullable<global::System.DateTime> Original_LastUpdatedWhen, string Original_LastUpdatedBy) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ProjectID));
            if ((Original_Project == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Project));
            }
            if ((Original_CoordinatePrecision.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((byte)(Original_CoordinatePrecision.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_ProjectURI == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ProjectURI));
            }
            if ((Original_LastUpdatedWhen.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_LastUpdatedWhen.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_LastUpdatedBy == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_LastUpdatedBy));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ProjectID, string Project, global::System.Nullable<byte> CoordinatePrecision, string ProjectURI, global::System.Nullable<global::System.DateTime> LastUpdatedWhen, string LastUpdatedBy) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ProjectID));
            if ((Project == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Project));
            }
            if ((CoordinatePrecision.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((byte)(CoordinatePrecision.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ProjectURI == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ProjectURI));
            }
            if ((LastUpdatedWhen.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(LastUpdatedWhen.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((LastUpdatedBy == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(LastUpdatedBy));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ProjectID, string Project, global::System.Nullable<byte> CoordinatePrecision, string ProjectURI, global::System.Nullable<global::System.DateTime> LastUpdatedWhen, string LastUpdatedBy, int Original_ProjectID, string Original_Project, global::System.Nullable<byte> Original_CoordinatePrecision, string Original_ProjectURI, global::System.Nullable<global::System.DateTime> Original_LastUpdatedWhen, string Original_LastUpdatedBy) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ProjectID));
            if ((Project == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Project));
            }
            if ((CoordinatePrecision.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((byte)(CoordinatePrecision.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ProjectURI == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ProjectURI));
            }
            if ((LastUpdatedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(LastUpdatedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((LastUpdatedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(LastUpdatedBy));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_ProjectID));
            if ((Original_Project == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Project));
            }
            if ((Original_CoordinatePrecision.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((byte)(Original_CoordinatePrecision.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_ProjectURI == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_ProjectURI));
            }
            if ((Original_LastUpdatedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(Original_LastUpdatedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_LastUpdatedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_LastUpdatedBy));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Project, global::System.Nullable<byte> CoordinatePrecision, string ProjectURI, global::System.Nullable<global::System.DateTime> LastUpdatedWhen, string LastUpdatedBy, int Original_ProjectID, string Original_Project, global::System.Nullable<byte> Original_CoordinatePrecision, string Original_ProjectURI, global::System.Nullable<global::System.DateTime> Original_LastUpdatedWhen, string Original_LastUpdatedBy) {
            return this.Update(Original_ProjectID, Project, CoordinatePrecision, ProjectURI, LastUpdatedWhen, LastUpdatedBy, Original_ProjectID, Original_Project, Original_CoordinatePrecision, Original_ProjectURI, Original_LastUpdatedWhen, Original_LastUpdatedBy);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AnonymCollectorTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public AnonymCollectorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AnonymCollector";
            tableMapping.ColumnMappings.Add("CollectorsName", "CollectorsName");
            tableMapping.ColumnMappings.Add("Anonymisation", "Anonymisation");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [AnonymCollector] WHERE (([CollectorsName] = @Original_CollectorsName" +
                ") AND ((@IsNull_Anonymisation = 1 AND [Anonymisation] IS NULL) OR ([Anonymisatio" +
                "n] = @Original_Anonymisation)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectorsName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "CollectorsName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Anonymisation";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Anonymisation";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Anonymisation";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Anonymisation";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [AnonymCollector] ([CollectorsName], [Anonymisation]) VALUES (@Collec" +
                "torsName, @Anonymisation);\r\nSELECT CollectorsName, Anonymisation FROM AnonymColl" +
                "ector WHERE (CollectorsName = @CollectorsName)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CollectorsName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "CollectorsName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Anonymisation";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Anonymisation";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [AnonymCollector] SET [CollectorsName] = @CollectorsName, [Anonymisation] = @Anonymisation WHERE (([CollectorsName] = @Original_CollectorsName) AND ((@IsNull_Anonymisation = 1 AND [Anonymisation] IS NULL) OR ([Anonymisation] = @Original_Anonymisation)));
SELECT CollectorsName, Anonymisation FROM AnonymCollector WHERE (CollectorsName = @CollectorsName)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CollectorsName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "CollectorsName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Anonymisation";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Anonymisation";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectorsName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "CollectorsName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Anonymisation";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Anonymisation";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Anonymisation";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Anonymisation";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollectionCache_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        CollectorsName, Anonymisation\r\nFROM            AnonymCollector";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCacheDatabase.AnonymCollectorDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCacheDatabase.AnonymCollectorDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCacheDatabase.AnonymCollectorDataTable dataTable = new DataSetCacheDatabase.AnonymCollectorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase.AnonymCollectorDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase dataSet) {
            return this.Adapter.Update(dataSet, "AnonymCollector");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CollectorsName, string Original_Anonymisation) {
            if ((Original_CollectorsName == null)) {
                throw new global::System.ArgumentNullException("Original_CollectorsName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CollectorsName));
            }
            if ((Original_Anonymisation == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Anonymisation));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CollectorsName, string Anonymisation) {
            if ((CollectorsName == null)) {
                throw new global::System.ArgumentNullException("CollectorsName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CollectorsName));
            }
            if ((Anonymisation == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Anonymisation));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CollectorsName, string Anonymisation, string Original_CollectorsName, string Original_Anonymisation) {
            if ((CollectorsName == null)) {
                throw new global::System.ArgumentNullException("CollectorsName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CollectorsName));
            }
            if ((Anonymisation == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Anonymisation));
            }
            if ((Original_CollectorsName == null)) {
                throw new global::System.ArgumentNullException("Original_CollectorsName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_CollectorsName));
            }
            if ((Original_Anonymisation == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Anonymisation));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Anonymisation, string Original_CollectorsName, string Original_Anonymisation) {
            return this.Update(Original_CollectorsName, Anonymisation, Original_CollectorsName, Original_Anonymisation);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ScientificTermSourceTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public ScientificTermSourceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ScientificTermSource";
            tableMapping.ColumnMappings.Add("SourceView", "SourceView");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("SourceID", "SourceID");
            tableMapping.ColumnMappings.Add("LinkedServerName", "LinkedServerName");
            tableMapping.ColumnMappings.Add("DatabaseName", "DatabaseName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [ScientificTermSource] WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull_Source = 1 AND [Source] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNull_SourceID = 1 AND [SourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([LinkedServerName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ScientificTermSource] ([SourceView], [Source], [SourceID], [LinkedServerName], [DatabaseName]) VALUES (@SourceView, @Source, @SourceID, @LinkedServerName, @DatabaseName);
SELECT SourceView, Source, SourceID, LinkedServerName, DatabaseName FROM ScientificTermSource WHERE (SourceView = @SourceView)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [ScientificTermSource] SET [SourceView] = @SourceView, [Source] = @Source, [SourceID] = @SourceID, [LinkedServerName] = @LinkedServerName, [DatabaseName] = @DatabaseName WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull_Source = 1 AND [Source] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNull_SourceID = 1 AND [SourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([LinkedServerName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)));
SELECT SourceView, Source, SourceID, LinkedServerName, DatabaseName FROM ScientificTermSource WHERE (SourceView = @SourceView)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollectionCache_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        SourceView, Source, SourceID, LinkedServerName, DatabaseName\r\nFROM " +
                "           ScientificTermSource";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCacheDatabase.ScientificTermSourceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCacheDatabase.ScientificTermSourceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCacheDatabase.ScientificTermSourceDataTable dataTable = new DataSetCacheDatabase.ScientificTermSourceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase.ScientificTermSourceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase dataSet) {
            return this.Adapter.Update(dataSet, "ScientificTermSource");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string SourceView, string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string SourceView, string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName, string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DatabaseName));
            }
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName, string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            return this.Update(Original_SourceView, Source, SourceID, LinkedServerName, DatabaseName, Original_SourceView, Original_Source, Original_SourceID, Original_LinkedServerName, Original_DatabaseName);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TaxonSynonymySourceTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public TaxonSynonymySourceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TaxonSynonymySource";
            tableMapping.ColumnMappings.Add("SourceView", "SourceView");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("SourceID", "SourceID");
            tableMapping.ColumnMappings.Add("LinkedServerName", "LinkedServerName");
            tableMapping.ColumnMappings.Add("DatabaseName", "DatabaseName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [TaxonSynonymySource] WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull_Source = 1 AND [Source] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNull_SourceID = 1 AND [SourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([LinkedServerName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TaxonSynonymySource] ([SourceView], [Source], [SourceID], [LinkedServerName], [DatabaseName]) VALUES (@SourceView, @Source, @SourceID, @LinkedServerName, @DatabaseName);
SELECT SourceView, Source, SourceID, LinkedServerName, DatabaseName FROM TaxonSynonymySource WHERE (SourceView = @SourceView)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [TaxonSynonymySource] SET [SourceView] = @SourceView, [Source] = @Source, [SourceID] = @SourceID, [LinkedServerName] = @LinkedServerName, [DatabaseName] = @DatabaseName WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull_Source = 1 AND [Source] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNull_SourceID = 1 AND [SourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([LinkedServerName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)));
SELECT SourceView, Source, SourceID, LinkedServerName, DatabaseName FROM TaxonSynonymySource WHERE (SourceView = @SourceView)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollectionCache_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        SourceView, Source, SourceID, LinkedServerName, DatabaseName\r\nFROM " +
                "           TaxonSynonymySource";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCacheDatabase.TaxonSynonymySourceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCacheDatabase.TaxonSynonymySourceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCacheDatabase.TaxonSynonymySourceDataTable dataTable = new DataSetCacheDatabase.TaxonSynonymySourceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase.TaxonSynonymySourceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase dataSet) {
            return this.Adapter.Update(dataSet, "TaxonSynonymySource");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string SourceView, string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string SourceView, string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName, string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DatabaseName));
            }
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName, string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            return this.Update(Original_SourceView, Source, SourceID, LinkedServerName, DatabaseName, Original_SourceView, Original_Source, Original_SourceID, Original_LinkedServerName, Original_DatabaseName);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GazetteerSourceTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public GazetteerSourceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GazetteerSource";
            tableMapping.ColumnMappings.Add("SourceView", "SourceView");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("SourceID", "SourceID");
            tableMapping.ColumnMappings.Add("LinkedServerName", "LinkedServerName");
            tableMapping.ColumnMappings.Add("DatabaseName", "DatabaseName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [GazetteerSource] WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull_Source = 1 AND [Source] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNull_SourceID = 1 AND [SourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([LinkedServerName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [GazetteerSource] ([SourceView], [Source], [SourceID], [LinkedServerName], [DatabaseName]) VALUES (@SourceView, @Source, @SourceID, @LinkedServerName, @DatabaseName);
SELECT SourceView, Source, SourceID, LinkedServerName, DatabaseName FROM GazetteerSource WHERE (SourceView = @SourceView)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GazetteerSource] SET [SourceView] = @SourceView, [Source] = @Source, [SourceID] = @SourceID, [LinkedServerName] = @LinkedServerName, [DatabaseName] = @DatabaseName WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull_Source = 1 AND [Source] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNull_SourceID = 1 AND [SourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([LinkedServerName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)));
SELECT SourceView, Source, SourceID, LinkedServerName, DatabaseName FROM GazetteerSource WHERE (SourceView = @SourceView)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollectionCache_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        SourceView, Source, SourceID, LinkedServerName, DatabaseName\r\nFROM " +
                "           GazetteerSource";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCacheDatabase.GazetteerSourceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCacheDatabase.GazetteerSourceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCacheDatabase.GazetteerSourceDataTable dataTable = new DataSetCacheDatabase.GazetteerSourceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase.GazetteerSourceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase dataSet) {
            return this.Adapter.Update(dataSet, "GazetteerSource");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string SourceView, string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string SourceView, string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName, string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DatabaseName));
            }
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName, string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            return this.Update(Original_SourceView, Source, SourceID, LinkedServerName, DatabaseName, Original_SourceView, Original_Source, Original_SourceID, Original_LinkedServerName, Original_DatabaseName);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AgentSourceTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public AgentSourceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AgentSource";
            tableMapping.ColumnMappings.Add("SourceView", "SourceView");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("SourceID", "SourceID");
            tableMapping.ColumnMappings.Add("LinkedServerName", "LinkedServerName");
            tableMapping.ColumnMappings.Add("DatabaseName", "DatabaseName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [AgentSource] WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull_Source = 1 AND [Source] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNull_SourceID = 1 AND [SourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([LinkedServerName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [AgentSource] ([SourceView], [Source], [SourceID], [LinkedServerName], [DatabaseName]) VALUES (@SourceView, @Source, @SourceID, @LinkedServerName, @DatabaseName);
SELECT SourceView, Source, SourceID, LinkedServerName, DatabaseName FROM AgentSource WHERE (SourceView = @SourceView)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [AgentSource] SET [SourceView] = @SourceView, [Source] = @Source, [SourceID] = @SourceID, [LinkedServerName] = @LinkedServerName, [DatabaseName] = @DatabaseName WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull_Source = 1 AND [Source] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNull_SourceID = 1 AND [SourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([LinkedServerName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)));
SELECT SourceView, Source, SourceID, LinkedServerName, DatabaseName FROM AgentSource WHERE (SourceView = @SourceView)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollectionCache_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        SourceView, Source, SourceID, LinkedServerName, DatabaseName\r\nFROM " +
                "           AgentSource";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCacheDatabase.AgentSourceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCacheDatabase.AgentSourceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCacheDatabase.AgentSourceDataTable dataTable = new DataSetCacheDatabase.AgentSourceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase.AgentSourceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase dataSet) {
            return this.Adapter.Update(dataSet, "AgentSource");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string SourceView, string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string SourceView, string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName, string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DatabaseName));
            }
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName, string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            return this.Update(Original_SourceView, Source, SourceID, LinkedServerName, DatabaseName, Original_SourceView, Original_Source, Original_SourceID, Original_LinkedServerName, Original_DatabaseName);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReferenceTitleSourceTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public ReferenceTitleSourceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReferenceTitleSource";
            tableMapping.ColumnMappings.Add("SourceView", "SourceView");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("SourceID", "SourceID");
            tableMapping.ColumnMappings.Add("LinkedServerName", "LinkedServerName");
            tableMapping.ColumnMappings.Add("DatabaseName", "DatabaseName");
            tableMapping.ColumnMappings.Add("Subsets", "Subsets");
            tableMapping.ColumnMappings.Add("TransferProtocol", "TransferProtocol");
            tableMapping.ColumnMappings.Add("IncludeInTransfer", "IncludeInTransfer");
            tableMapping.ColumnMappings.Add("LastUpdatedWhen", "LastUpdatedWhen");
            tableMapping.ColumnMappings.Add("CompareLogDate", "CompareLogDate");
            tableMapping.ColumnMappings.Add("TransferDays", "TransferDays");
            tableMapping.ColumnMappings.Add("TransferTime", "TransferTime");
            tableMapping.ColumnMappings.Add("TransferIsExecutedBy", "TransferIsExecutedBy");
            tableMapping.ColumnMappings.Add("TransferErrors", "TransferErrors");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [ReferenceTitleSource] WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull_Source = 1 AND [Source] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNull_SourceID = 1 AND [SourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([LinkedServerName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)) AND ((@IsNull_Subsets = 1 AND [Subsets] IS NULL) OR ([Subsets] = @Original_Subsets)) AND ((@IsNull_IncludeInTransfer = 1 AND [IncludeInTransfer] IS NULL) OR ([IncludeInTransfer] = @Original_IncludeInTransfer)) AND ((@IsNull_LastUpdatedWhen = 1 AND [LastUpdatedWhen] IS NULL) OR ([LastUpdatedWhen] = @Original_LastUpdatedWhen)) AND ((@IsNull_CompareLogDate = 1 AND [CompareLogDate] IS NULL) OR ([CompareLogDate] = @Original_CompareLogDate)) AND ((@IsNull_TransferDays = 1 AND [TransferDays] IS NULL) OR ([TransferDays] = @Original_TransferDays)) AND ((@IsNull_TransferTime = 1 AND [TransferTime] IS NULL) OR ([TransferTime] = @Original_TransferTime)) AND ((@IsNull_TransferIsExecutedBy = 1 AND [TransferIsExecutedBy] IS NULL) OR ([TransferIsExecutedBy] = @Original_TransferIsExecutedBy)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Subsets";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Subsets";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Subsets";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Subsets";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_IncludeInTransfer";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "IncludeInTransfer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_IncludeInTransfer";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "IncludeInTransfer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CompareLogDate";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CompareLogDate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CompareLogDate";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "CompareLogDate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransferDays";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransferDays";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransferDays";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferDays";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransferTime";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransferTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransferTime";
            param.DbType = global::System.Data.DbType.Time;
            param.SqlDbType = global::System.Data.SqlDbType.Time;
            param.IsNullable = true;
            param.SourceColumn = "TransferTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransferIsExecutedBy";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransferIsExecutedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransferIsExecutedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferIsExecutedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [ReferenceTitleSource] ([SourceView], [Source], [SourceID], [LinkedServerName], [DatabaseName], [Subsets], [TransferProtocol], [IncludeInTransfer], [LastUpdatedWhen], [CompareLogDate], [TransferDays], [TransferTime], [TransferIsExecutedBy], [TransferErrors]) VALUES (@SourceView, @Source, @SourceID, @LinkedServerName, @DatabaseName, @Subsets, @TransferProtocol, @IncludeInTransfer, @LastUpdatedWhen, @CompareLogDate, @TransferDays, @TransferTime, @TransferIsExecutedBy, @TransferErrors);
SELECT SourceView, Source, SourceID, LinkedServerName, DatabaseName, Subsets, TransferProtocol, IncludeInTransfer, LastUpdatedWhen, CompareLogDate, TransferDays, TransferTime, TransferIsExecutedBy, TransferErrors FROM ReferenceTitleSource WHERE (SourceView = @SourceView)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Subsets";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Subsets";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferProtocol";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferProtocol";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IncludeInTransfer";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "IncludeInTransfer";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CompareLogDate";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "CompareLogDate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferDays";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferDays";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferTime";
            param.DbType = global::System.Data.DbType.Time;
            param.SqlDbType = global::System.Data.SqlDbType.Time;
            param.IsNullable = true;
            param.SourceColumn = "TransferTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferIsExecutedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferIsExecutedBy";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferErrors";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferErrors";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [ReferenceTitleSource] SET [SourceView] = @SourceView, [Source] = @Source," +
                " [SourceID] = @SourceID, [LinkedServerName] = @LinkedServerName, [DatabaseName] " +
                "= @DatabaseName, [Subsets] = @Subsets, [TransferProtocol] = @TransferProtocol, [" +
                "IncludeInTransfer] = @IncludeInTransfer, [LastUpdatedWhen] = @LastUpdatedWhen, [" +
                "CompareLogDate] = @CompareLogDate, [TransferDays] = @TransferDays, [TransferTime" +
                "] = @TransferTime, [TransferIsExecutedBy] = @TransferIsExecutedBy, [TransferErro" +
                "rs] = @TransferErrors WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull" +
                "_Source = 1 AND [Source] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNul" +
                "l_SourceID = 1 AND [SourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND" +
                " ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([LinkedServe" +
                "rName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND [Databa" +
                "seName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)) AND ((@IsNull_Sub" +
                "sets = 1 AND [Subsets] IS NULL) OR ([Subsets] = @Original_Subsets)) AND ((@IsNul" +
                "l_IncludeInTransfer = 1 AND [IncludeInTransfer] IS NULL) OR ([IncludeInTransfer]" +
                " = @Original_IncludeInTransfer)) AND ((@IsNull_LastUpdatedWhen = 1 AND [LastUpda" +
                "tedWhen] IS NULL) OR ([LastUpdatedWhen] = @Original_LastUpdatedWhen)) AND ((@IsN" +
                "ull_CompareLogDate = 1 AND [CompareLogDate] IS NULL) OR ([CompareLogDate] = @Ori" +
                "ginal_CompareLogDate)) AND ((@IsNull_TransferDays = 1 AND [TransferDays] IS NULL" +
                ") OR ([TransferDays] = @Original_TransferDays)) AND ((@IsNull_TransferTime = 1 A" +
                "ND [TransferTime] IS NULL) OR ([TransferTime] = @Original_TransferTime)) AND ((@" +
                "IsNull_TransferIsExecutedBy = 1 AND [TransferIsExecutedBy] IS NULL) OR ([Transfe" +
                "rIsExecutedBy] = @Original_TransferIsExecutedBy)));\r\nSELECT SourceView, Source, " +
                "SourceID, LinkedServerName, DatabaseName, Subsets, TransferProtocol, IncludeInTr" +
                "ansfer, LastUpdatedWhen, CompareLogDate, TransferDays, TransferTime, TransferIsE" +
                "xecutedBy, TransferErrors FROM ReferenceTitleSource WHERE (SourceView = @SourceV" +
                "iew)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Subsets";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Subsets";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferProtocol";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferProtocol";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IncludeInTransfer";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "IncludeInTransfer";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CompareLogDate";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "CompareLogDate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferDays";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferDays";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferTime";
            param.DbType = global::System.Data.DbType.Time;
            param.SqlDbType = global::System.Data.SqlDbType.Time;
            param.IsNullable = true;
            param.SourceColumn = "TransferTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferIsExecutedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferIsExecutedBy";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferErrors";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferErrors";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Subsets";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Subsets";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Subsets";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Subsets";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_IncludeInTransfer";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "IncludeInTransfer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_IncludeInTransfer";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "IncludeInTransfer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CompareLogDate";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CompareLogDate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CompareLogDate";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "CompareLogDate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransferDays";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransferDays";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransferDays";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferDays";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransferTime";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransferTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransferTime";
            param.DbType = global::System.Data.DbType.Time;
            param.SqlDbType = global::System.Data.SqlDbType.Time;
            param.IsNullable = true;
            param.SourceColumn = "TransferTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransferIsExecutedBy";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransferIsExecutedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransferIsExecutedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferIsExecutedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollectionCache_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        SourceView, Source, SourceID, LinkedServerName, DatabaseName, Subsets, TransferProtocol, IncludeInTransfer, LastUpdatedWhen, CompareLogDate, TransferDays, TransferTime, TransferIsExecutedBy, 
                         TransferErrors
FROM            ReferenceTitleSource";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCacheDatabase.ReferenceTitleSourceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCacheDatabase.ReferenceTitleSourceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCacheDatabase.ReferenceTitleSourceDataTable dataTable = new DataSetCacheDatabase.ReferenceTitleSourceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase.ReferenceTitleSourceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase dataSet) {
            return this.Adapter.Update(dataSet, "ReferenceTitleSource");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName, string Original_Subsets, global::System.Nullable<bool> Original_IncludeInTransfer, global::System.Nullable<global::System.DateTime> Original_LastUpdatedWhen, global::System.Nullable<bool> Original_CompareLogDate, string Original_TransferDays, global::System.Nullable<global::System.DateTime> Original_TransferTime, string Original_TransferIsExecutedBy) {
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_DatabaseName));
            }
            if ((Original_Subsets == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Subsets));
            }
            if ((Original_IncludeInTransfer.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_IncludeInTransfer.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_LastUpdatedWhen.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((System.DateTime)(Original_LastUpdatedWhen.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_CompareLogDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((bool)(Original_CompareLogDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_TransferDays == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_TransferDays));
            }
            if ((Original_TransferTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((System.DateTime)(Original_TransferTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_TransferIsExecutedBy == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_TransferIsExecutedBy));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string SourceView, string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName, string Subsets, string TransferProtocol, global::System.Nullable<bool> IncludeInTransfer, global::System.Nullable<global::System.DateTime> LastUpdatedWhen, global::System.Nullable<bool> CompareLogDate, string TransferDays, global::System.Nullable<global::System.DateTime> TransferTime, string TransferIsExecutedBy, string TransferErrors) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DatabaseName));
            }
            if ((Subsets == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Subsets));
            }
            if ((TransferProtocol == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(TransferProtocol));
            }
            if ((IncludeInTransfer.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(IncludeInTransfer.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((LastUpdatedWhen.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(LastUpdatedWhen.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((CompareLogDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(CompareLogDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((TransferDays == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(TransferDays));
            }
            if ((TransferTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(TransferTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((TransferIsExecutedBy == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(TransferIsExecutedBy));
            }
            if ((TransferErrors == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(TransferErrors));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string SourceView, 
                    string Source, 
                    global::System.Nullable<int> SourceID, 
                    string LinkedServerName, 
                    string DatabaseName, 
                    string Subsets, 
                    string TransferProtocol, 
                    global::System.Nullable<bool> IncludeInTransfer, 
                    global::System.Nullable<global::System.DateTime> LastUpdatedWhen, 
                    global::System.Nullable<bool> CompareLogDate, 
                    string TransferDays, 
                    global::System.Nullable<global::System.DateTime> TransferTime, 
                    string TransferIsExecutedBy, 
                    string TransferErrors, 
                    string Original_SourceView, 
                    string Original_Source, 
                    global::System.Nullable<int> Original_SourceID, 
                    string Original_LinkedServerName, 
                    string Original_DatabaseName, 
                    string Original_Subsets, 
                    global::System.Nullable<bool> Original_IncludeInTransfer, 
                    global::System.Nullable<global::System.DateTime> Original_LastUpdatedWhen, 
                    global::System.Nullable<bool> Original_CompareLogDate, 
                    string Original_TransferDays, 
                    global::System.Nullable<global::System.DateTime> Original_TransferTime, 
                    string Original_TransferIsExecutedBy) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DatabaseName));
            }
            if ((Subsets == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Subsets));
            }
            if ((TransferProtocol == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(TransferProtocol));
            }
            if ((IncludeInTransfer.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(IncludeInTransfer.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((LastUpdatedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(LastUpdatedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((CompareLogDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(CompareLogDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((TransferDays == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(TransferDays));
            }
            if ((TransferTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(TransferTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((TransferIsExecutedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(TransferIsExecutedBy));
            }
            if ((TransferErrors == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(TransferErrors));
            }
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_DatabaseName));
            }
            if ((Original_Subsets == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_Subsets));
            }
            if ((Original_IncludeInTransfer.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((bool)(Original_IncludeInTransfer.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_LastUpdatedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((System.DateTime)(Original_LastUpdatedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_CompareLogDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((bool)(Original_CompareLogDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_TransferDays == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_TransferDays));
            }
            if ((Original_TransferTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((System.DateTime)(Original_TransferTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_TransferIsExecutedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_TransferIsExecutedBy));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Source, 
                    global::System.Nullable<int> SourceID, 
                    string LinkedServerName, 
                    string DatabaseName, 
                    string Subsets, 
                    string TransferProtocol, 
                    global::System.Nullable<bool> IncludeInTransfer, 
                    global::System.Nullable<global::System.DateTime> LastUpdatedWhen, 
                    global::System.Nullable<bool> CompareLogDate, 
                    string TransferDays, 
                    global::System.Nullable<global::System.DateTime> TransferTime, 
                    string TransferIsExecutedBy, 
                    string TransferErrors, 
                    string Original_SourceView, 
                    string Original_Source, 
                    global::System.Nullable<int> Original_SourceID, 
                    string Original_LinkedServerName, 
                    string Original_DatabaseName, 
                    string Original_Subsets, 
                    global::System.Nullable<bool> Original_IncludeInTransfer, 
                    global::System.Nullable<global::System.DateTime> Original_LastUpdatedWhen, 
                    global::System.Nullable<bool> Original_CompareLogDate, 
                    string Original_TransferDays, 
                    global::System.Nullable<global::System.DateTime> Original_TransferTime, 
                    string Original_TransferIsExecutedBy) {
            return this.Update(Original_SourceView, Source, SourceID, LinkedServerName, DatabaseName, Subsets, TransferProtocol, IncludeInTransfer, LastUpdatedWhen, CompareLogDate, TransferDays, TransferTime, TransferIsExecutedBy, TransferErrors, Original_SourceView, Original_Source, Original_SourceID, Original_LinkedServerName, Original_DatabaseName, Original_Subsets, Original_IncludeInTransfer, Original_LastUpdatedWhen, Original_CompareLogDate, Original_TransferDays, Original_TransferTime, Original_TransferIsExecutedBy);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SamplingPlotSourceTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public SamplingPlotSourceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SamplingPlotSource";
            tableMapping.ColumnMappings.Add("SourceView", "SourceView");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("SourceID", "SourceID");
            tableMapping.ColumnMappings.Add("LinkedServerName", "LinkedServerName");
            tableMapping.ColumnMappings.Add("DatabaseName", "DatabaseName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [SamplingPlotSource] WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull_Source = 1 AND [Source] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNull_SourceID = 1 AND [SourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([LinkedServerName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [SamplingPlotSource] ([SourceView], [Source], [SourceID], [LinkedServerName], [DatabaseName]) VALUES (@SourceView, @Source, @SourceID, @LinkedServerName, @DatabaseName);
SELECT SourceView, Source, SourceID, LinkedServerName, DatabaseName FROM SamplingPlotSource WHERE (SourceView = @SourceView)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [SamplingPlotSource] SET [SourceView] = @SourceView, [Source] = @Source, [SourceID] = @SourceID, [LinkedServerName] = @LinkedServerName, [DatabaseName] = @DatabaseName WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull_Source = 1 AND [Source] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNull_SourceID = 1 AND [SourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([LinkedServerName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)));
SELECT SourceView, Source, SourceID, LinkedServerName, DatabaseName FROM SamplingPlotSource WHERE (SourceView = @SourceView)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollectionCache_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        SourceView, Source, SourceID, LinkedServerName, DatabaseName\r\nFROM " +
                "           SamplingPlotSource";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCacheDatabase.SamplingPlotSourceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCacheDatabase.SamplingPlotSourceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCacheDatabase.SamplingPlotSourceDataTable dataTable = new DataSetCacheDatabase.SamplingPlotSourceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase.SamplingPlotSourceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase dataSet) {
            return this.Adapter.Update(dataSet, "SamplingPlotSource");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string SourceView, string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string SourceView, string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName, string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DatabaseName));
            }
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Source, global::System.Nullable<int> SourceID, string LinkedServerName, string DatabaseName, string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_LinkedServerName, string Original_DatabaseName) {
            return this.Update(Original_SourceView, Source, SourceID, LinkedServerName, DatabaseName, Original_SourceView, Original_Source, Original_SourceID, Original_LinkedServerName, Original_DatabaseName);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TaxonSynonymySource_WebserviceTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public TaxonSynonymySource_WebserviceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TaxonSynonymySource_Webservice";
            tableMapping.ColumnMappings.Add("SourceView", "SourceView");
            tableMapping.ColumnMappings.Add("Source", "Source");
            tableMapping.ColumnMappings.Add("SourceID", "SourceID");
            tableMapping.ColumnMappings.Add("Subsets", "Subsets");
            tableMapping.ColumnMappings.Add("TransferProtocol", "TransferProtocol");
            tableMapping.ColumnMappings.Add("IncludeInTransfer", "IncludeInTransfer");
            tableMapping.ColumnMappings.Add("LastUpdatedWhen", "LastUpdatedWhen");
            tableMapping.ColumnMappings.Add("CompareLogDate", "CompareLogDate");
            tableMapping.ColumnMappings.Add("TransferDays", "TransferDays");
            tableMapping.ColumnMappings.Add("TransferTime", "TransferTime");
            tableMapping.ColumnMappings.Add("TransferIsExecutedBy", "TransferIsExecutedBy");
            tableMapping.ColumnMappings.Add("TransferErrors", "TransferErrors");
            tableMapping.ColumnMappings.Add("LastCheckedWhen", "LastCheckedWhen");
            tableMapping.ColumnMappings.Add("Version", "Version");
            tableMapping.ColumnMappings.Add("LinkedServerName", "LinkedServerName");
            tableMapping.ColumnMappings.Add("DatabaseName", "DatabaseName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [TaxonSynonymySource] WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull_Source = 1 AND [Source] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNull_SourceID = 1 AND [SourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND ((@IsNull_Subsets = 1 AND [Subsets] IS NULL) OR ([Subsets] = @Original_Subsets)) AND ((@IsNull_IncludeInTransfer = 1 AND [IncludeInTransfer] IS NULL) OR ([IncludeInTransfer] = @Original_IncludeInTransfer)) AND ((@IsNull_LastUpdatedWhen = 1 AND [LastUpdatedWhen] IS NULL) OR ([LastUpdatedWhen] = @Original_LastUpdatedWhen)) AND ((@IsNull_CompareLogDate = 1 AND [CompareLogDate] IS NULL) OR ([CompareLogDate] = @Original_CompareLogDate)) AND ((@IsNull_TransferDays = 1 AND [TransferDays] IS NULL) OR ([TransferDays] = @Original_TransferDays)) AND ((@IsNull_TransferTime = 1 AND [TransferTime] IS NULL) OR ([TransferTime] = @Original_TransferTime)) AND ((@IsNull_TransferIsExecutedBy = 1 AND [TransferIsExecutedBy] IS NULL) OR ([TransferIsExecutedBy] = @Original_TransferIsExecutedBy)) AND ((@IsNull_LastCheckedWhen = 1 AND [LastCheckedWhen] IS NULL) OR ([LastCheckedWhen] = @Original_LastCheckedWhen)) AND ((@IsNull_Version = 1 AND [Version] IS NULL) OR ([Version] = @Original_Version)) AND ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([LinkedServerName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Subsets";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Subsets";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Subsets";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Subsets";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_IncludeInTransfer";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "IncludeInTransfer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_IncludeInTransfer";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "IncludeInTransfer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CompareLogDate";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CompareLogDate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CompareLogDate";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "CompareLogDate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransferDays";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransferDays";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransferDays";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferDays";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransferTime";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransferTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransferTime";
            param.DbType = global::System.Data.DbType.Time;
            param.SqlDbType = global::System.Data.SqlDbType.Time;
            param.IsNullable = true;
            param.SourceColumn = "TransferTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransferIsExecutedBy";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransferIsExecutedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransferIsExecutedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferIsExecutedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LastCheckedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LastCheckedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LastCheckedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastCheckedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Version";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Version";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Version";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Version";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [TaxonSynonymySource] ([SourceView], [Source], [SourceID], [Subsets], [TransferProtocol], [IncludeInTransfer], [LastUpdatedWhen], [CompareLogDate], [TransferDays], [TransferTime], [TransferIsExecutedBy], [TransferErrors], [LastCheckedWhen], [Version], [LinkedServerName], [DatabaseName]) VALUES (@SourceView, @Source, @SourceID, @Subsets, @TransferProtocol, @IncludeInTransfer, @LastUpdatedWhen, @CompareLogDate, @TransferDays, @TransferTime, @TransferIsExecutedBy, @TransferErrors, @LastCheckedWhen, @Version, @LinkedServerName, @DatabaseName);
SELECT SourceView, Source, SourceID, Subsets, TransferProtocol, IncludeInTransfer, LastUpdatedWhen, CompareLogDate, TransferDays, TransferTime, TransferIsExecutedBy, TransferErrors, LastCheckedWhen, Version, LinkedServerName, DatabaseName FROM TaxonSynonymySource WHERE (SourceView = @SourceView)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Subsets";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Subsets";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferProtocol";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferProtocol";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IncludeInTransfer";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "IncludeInTransfer";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CompareLogDate";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "CompareLogDate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferDays";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferDays";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferTime";
            param.DbType = global::System.Data.DbType.Time;
            param.SqlDbType = global::System.Data.SqlDbType.Time;
            param.IsNullable = true;
            param.SourceColumn = "TransferTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferIsExecutedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferIsExecutedBy";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferErrors";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferErrors";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LastCheckedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastCheckedWhen";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Version";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Version";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [TaxonSynonymySource] SET [SourceView] = @SourceView, [Source] = @Source, " +
                "[SourceID] = @SourceID, [Subsets] = @Subsets, [TransferProtocol] = @TransferProt" +
                "ocol, [IncludeInTransfer] = @IncludeInTransfer, [LastUpdatedWhen] = @LastUpdated" +
                "When, [CompareLogDate] = @CompareLogDate, [TransferDays] = @TransferDays, [Trans" +
                "ferTime] = @TransferTime, [TransferIsExecutedBy] = @TransferIsExecutedBy, [Trans" +
                "ferErrors] = @TransferErrors, [LastCheckedWhen] = @LastCheckedWhen, [Version] = " +
                "@Version, [LinkedServerName] = @LinkedServerName, [DatabaseName] = @DatabaseName" +
                " WHERE (([SourceView] = @Original_SourceView) AND ((@IsNull_Source = 1 AND [Sour" +
                "ce] IS NULL) OR ([Source] = @Original_Source)) AND ((@IsNull_SourceID = 1 AND [S" +
                "ourceID] IS NULL) OR ([SourceID] = @Original_SourceID)) AND ((@IsNull_Subsets = " +
                "1 AND [Subsets] IS NULL) OR ([Subsets] = @Original_Subsets)) AND ((@IsNull_Inclu" +
                "deInTransfer = 1 AND [IncludeInTransfer] IS NULL) OR ([IncludeInTransfer] = @Ori" +
                "ginal_IncludeInTransfer)) AND ((@IsNull_LastUpdatedWhen = 1 AND [LastUpdatedWhen" +
                "] IS NULL) OR ([LastUpdatedWhen] = @Original_LastUpdatedWhen)) AND ((@IsNull_Com" +
                "pareLogDate = 1 AND [CompareLogDate] IS NULL) OR ([CompareLogDate] = @Original_C" +
                "ompareLogDate)) AND ((@IsNull_TransferDays = 1 AND [TransferDays] IS NULL) OR ([" +
                "TransferDays] = @Original_TransferDays)) AND ((@IsNull_TransferTime = 1 AND [Tra" +
                "nsferTime] IS NULL) OR ([TransferTime] = @Original_TransferTime)) AND ((@IsNull_" +
                "TransferIsExecutedBy = 1 AND [TransferIsExecutedBy] IS NULL) OR ([TransferIsExec" +
                "utedBy] = @Original_TransferIsExecutedBy)) AND ((@IsNull_LastCheckedWhen = 1 AND" +
                " [LastCheckedWhen] IS NULL) OR ([LastCheckedWhen] = @Original_LastCheckedWhen)) " +
                "AND ((@IsNull_Version = 1 AND [Version] IS NULL) OR ([Version] = @Original_Versi" +
                "on)) AND ((@IsNull_LinkedServerName = 1 AND [LinkedServerName] IS NULL) OR ([Lin" +
                "kedServerName] = @Original_LinkedServerName)) AND ((@IsNull_DatabaseName = 1 AND" +
                " [DatabaseName] IS NULL) OR ([DatabaseName] = @Original_DatabaseName)));\r\nSELECT" +
                " SourceView, Source, SourceID, Subsets, TransferProtocol, IncludeInTransfer, Las" +
                "tUpdatedWhen, CompareLogDate, TransferDays, TransferTime, TransferIsExecutedBy, " +
                "TransferErrors, LastCheckedWhen, Version, LinkedServerName, DatabaseName FROM Ta" +
                "xonSynonymySource WHERE (SourceView = @SourceView)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Subsets";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Subsets";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferProtocol";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferProtocol";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IncludeInTransfer";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "IncludeInTransfer";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CompareLogDate";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "CompareLogDate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferDays";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferDays";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferTime";
            param.DbType = global::System.Data.DbType.Time;
            param.SqlDbType = global::System.Data.SqlDbType.Time;
            param.IsNullable = true;
            param.SourceColumn = "TransferTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferIsExecutedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferIsExecutedBy";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransferErrors";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferErrors";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LastCheckedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastCheckedWhen";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Version";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Version";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceView";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "SourceView";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Source";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Source";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Source";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SourceID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SourceID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Subsets";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Subsets";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Subsets";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Subsets";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_IncludeInTransfer";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "IncludeInTransfer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_IncludeInTransfer";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "IncludeInTransfer";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LastUpdatedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastUpdatedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CompareLogDate";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CompareLogDate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CompareLogDate";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "CompareLogDate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransferDays";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransferDays";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransferDays";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferDays";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransferTime";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransferTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransferTime";
            param.DbType = global::System.Data.DbType.Time;
            param.SqlDbType = global::System.Data.SqlDbType.Time;
            param.IsNullable = true;
            param.SourceColumn = "TransferTime";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransferIsExecutedBy";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransferIsExecutedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransferIsExecutedBy";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "TransferIsExecutedBy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LastCheckedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LastCheckedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LastCheckedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LastCheckedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Version";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Version";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Version";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Version";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LinkedServerName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LinkedServerName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LinkedServerName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DatabaseName";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DatabaseName";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DatabaseName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollectionCache_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        SourceView, Source, SourceID, Subsets, TransferProtocol, IncludeInTransfer, LastUpdatedWhen, CompareLogDate, TransferDays, TransferTime, TransferIsExecutedBy, TransferErrors, LastCheckedWhen, Version, 
                         LinkedServerName, DatabaseName
FROM            TaxonSynonymySource";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCacheDatabase.TaxonSynonymySource_WebserviceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCacheDatabase.TaxonSynonymySource_WebserviceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCacheDatabase.TaxonSynonymySource_WebserviceDataTable dataTable = new DataSetCacheDatabase.TaxonSynonymySource_WebserviceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase.TaxonSynonymySource_WebserviceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCacheDatabase dataSet) {
            return this.Adapter.Update(dataSet, "TaxonSynonymySource_Webservice");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_SourceView, string Original_Source, global::System.Nullable<int> Original_SourceID, string Original_Subsets, global::System.Nullable<bool> Original_IncludeInTransfer, global::System.Nullable<global::System.DateTime> Original_LastUpdatedWhen, global::System.Nullable<bool> Original_CompareLogDate, string Original_TransferDays, global::System.Nullable<global::System.DateTime> Original_TransferTime, string Original_TransferIsExecutedBy, global::System.Nullable<global::System.DateTime> Original_LastCheckedWhen, global::System.Nullable<int> Original_Version, string Original_LinkedServerName, string Original_DatabaseName) {
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_Subsets == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Subsets));
            }
            if ((Original_IncludeInTransfer.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((bool)(Original_IncludeInTransfer.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_LastUpdatedWhen.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_LastUpdatedWhen.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_CompareLogDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_CompareLogDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_TransferDays == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_TransferDays));
            }
            if ((Original_TransferTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((System.DateTime)(Original_TransferTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_TransferIsExecutedBy == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_TransferIsExecutedBy));
            }
            if ((Original_LastCheckedWhen.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((System.DateTime)(Original_LastCheckedWhen.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_Version.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((int)(Original_Version.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string SourceView, 
                    string Source, 
                    global::System.Nullable<int> SourceID, 
                    string Subsets, 
                    string TransferProtocol, 
                    global::System.Nullable<bool> IncludeInTransfer, 
                    global::System.Nullable<global::System.DateTime> LastUpdatedWhen, 
                    global::System.Nullable<bool> CompareLogDate, 
                    string TransferDays, 
                    global::System.Nullable<global::System.DateTime> TransferTime, 
                    string TransferIsExecutedBy, 
                    string TransferErrors, 
                    global::System.Nullable<global::System.DateTime> LastCheckedWhen, 
                    global::System.Nullable<int> Version, 
                    string LinkedServerName, 
                    string DatabaseName) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Subsets == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Subsets));
            }
            if ((TransferProtocol == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(TransferProtocol));
            }
            if ((IncludeInTransfer.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(IncludeInTransfer.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((LastUpdatedWhen.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(LastUpdatedWhen.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((CompareLogDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(CompareLogDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((TransferDays == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(TransferDays));
            }
            if ((TransferTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(TransferTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((TransferIsExecutedBy == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(TransferIsExecutedBy));
            }
            if ((TransferErrors == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(TransferErrors));
            }
            if ((LastCheckedWhen.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((System.DateTime)(LastCheckedWhen.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Version.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(Version.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string SourceView, 
                    string Source, 
                    global::System.Nullable<int> SourceID, 
                    string Subsets, 
                    string TransferProtocol, 
                    global::System.Nullable<bool> IncludeInTransfer, 
                    global::System.Nullable<global::System.DateTime> LastUpdatedWhen, 
                    global::System.Nullable<bool> CompareLogDate, 
                    string TransferDays, 
                    global::System.Nullable<global::System.DateTime> TransferTime, 
                    string TransferIsExecutedBy, 
                    string TransferErrors, 
                    global::System.Nullable<global::System.DateTime> LastCheckedWhen, 
                    global::System.Nullable<int> Version, 
                    string LinkedServerName, 
                    string DatabaseName, 
                    string Original_SourceView, 
                    string Original_Source, 
                    global::System.Nullable<int> Original_SourceID, 
                    string Original_Subsets, 
                    global::System.Nullable<bool> Original_IncludeInTransfer, 
                    global::System.Nullable<global::System.DateTime> Original_LastUpdatedWhen, 
                    global::System.Nullable<bool> Original_CompareLogDate, 
                    string Original_TransferDays, 
                    global::System.Nullable<global::System.DateTime> Original_TransferTime, 
                    string Original_TransferIsExecutedBy, 
                    global::System.Nullable<global::System.DateTime> Original_LastCheckedWhen, 
                    global::System.Nullable<int> Original_Version, 
                    string Original_LinkedServerName, 
                    string Original_DatabaseName) {
            if ((SourceView == null)) {
                throw new global::System.ArgumentNullException("SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SourceView));
            }
            if ((Source == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Source));
            }
            if ((SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Subsets == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Subsets));
            }
            if ((TransferProtocol == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(TransferProtocol));
            }
            if ((IncludeInTransfer.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(IncludeInTransfer.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((LastUpdatedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(LastUpdatedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((CompareLogDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(CompareLogDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((TransferDays == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(TransferDays));
            }
            if ((TransferTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(TransferTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((TransferIsExecutedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(TransferIsExecutedBy));
            }
            if ((TransferErrors == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(TransferErrors));
            }
            if ((LastCheckedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(LastCheckedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Version.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Version.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(LinkedServerName));
            }
            if ((DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(DatabaseName));
            }
            if ((Original_SourceView == null)) {
                throw new global::System.ArgumentNullException("Original_SourceView");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_SourceView));
            }
            if ((Original_Source == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_Source));
            }
            if ((Original_SourceID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_SourceID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_Subsets == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_Subsets));
            }
            if ((Original_IncludeInTransfer.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((bool)(Original_IncludeInTransfer.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_LastUpdatedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((System.DateTime)(Original_LastUpdatedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_CompareLogDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((bool)(Original_CompareLogDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_TransferDays == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_TransferDays));
            }
            if ((Original_TransferTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((System.DateTime)(Original_TransferTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_TransferIsExecutedBy == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_TransferIsExecutedBy));
            }
            if ((Original_LastCheckedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((System.DateTime)(Original_LastCheckedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_Version.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((int)(Original_Version.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_LinkedServerName == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_LinkedServerName));
            }
            if ((Original_DatabaseName == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_DatabaseName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Source, 
                    global::System.Nullable<int> SourceID, 
                    string Subsets, 
                    string TransferProtocol, 
                    global::System.Nullable<bool> IncludeInTransfer, 
                    global::System.Nullable<global::System.DateTime> LastUpdatedWhen, 
                    global::System.Nullable<bool> CompareLogDate, 
                    string TransferDays, 
                    global::System.Nullable<global::System.DateTime> TransferTime, 
                    string TransferIsExecutedBy, 
                    string TransferErrors, 
                    global::System.Nullable<global::System.DateTime> LastCheckedWhen, 
                    global::System.Nullable<int> Version, 
                    string LinkedServerName, 
                    string DatabaseName, 
                    string Original_SourceView, 
                    string Original_Source, 
                    global::System.Nullable<int> Original_SourceID, 
                    string Original_Subsets, 
                    global::System.Nullable<bool> Original_IncludeInTransfer, 
                    global::System.Nullable<global::System.DateTime> Original_LastUpdatedWhen, 
                    global::System.Nullable<bool> Original_CompareLogDate, 
                    string Original_TransferDays, 
                    global::System.Nullable<global::System.DateTime> Original_TransferTime, 
                    string Original_TransferIsExecutedBy, 
                    global::System.Nullable<global::System.DateTime> Original_LastCheckedWhen, 
                    global::System.Nullable<int> Original_Version, 
                    string Original_LinkedServerName, 
                    string Original_DatabaseName) {
            return this.Update(Original_SourceView, Source, SourceID, Subsets, TransferProtocol, IncludeInTransfer, LastUpdatedWhen, CompareLogDate, TransferDays, TransferTime, TransferIsExecutedBy, TransferErrors, LastCheckedWhen, Version, LinkedServerName, DatabaseName, Original_SourceView, Original_Source, Original_SourceID, Original_Subsets, Original_IncludeInTransfer, Original_LastUpdatedWhen, Original_CompareLogDate, Original_TransferDays, Original_TransferTime, Original_TransferIsExecutedBy, Original_LastCheckedWhen, Original_Version, Original_LinkedServerName, Original_DatabaseName);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private CacheDatabaseTableAdapter _cacheDatabaseTableAdapter;
        
        private ProjectPublishedTableAdapter _projectPublishedTableAdapter;
        
        private AnonymCollectorTableAdapter _anonymCollectorTableAdapter;
        
        private ScientificTermSourceTableAdapter _scientificTermSourceTableAdapter;
        
        private TaxonSynonymySourceTableAdapter _taxonSynonymySourceTableAdapter;
        
        private GazetteerSourceTableAdapter _gazetteerSourceTableAdapter;
        
        private AgentSourceTableAdapter _agentSourceTableAdapter;
        
        private ReferenceTitleSourceTableAdapter _referenceTitleSourceTableAdapter;
        
        private SamplingPlotSourceTableAdapter _samplingPlotSourceTableAdapter;
        
        private TaxonSynonymySource_WebserviceTableAdapter _taxonSynonymySource_WebserviceTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public CacheDatabaseTableAdapter CacheDatabaseTableAdapter {
            get {
                return this._cacheDatabaseTableAdapter;
            }
            set {
                this._cacheDatabaseTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ProjectPublishedTableAdapter ProjectPublishedTableAdapter {
            get {
                return this._projectPublishedTableAdapter;
            }
            set {
                this._projectPublishedTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public AnonymCollectorTableAdapter AnonymCollectorTableAdapter {
            get {
                return this._anonymCollectorTableAdapter;
            }
            set {
                this._anonymCollectorTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ScientificTermSourceTableAdapter ScientificTermSourceTableAdapter {
            get {
                return this._scientificTermSourceTableAdapter;
            }
            set {
                this._scientificTermSourceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public TaxonSynonymySourceTableAdapter TaxonSynonymySourceTableAdapter {
            get {
                return this._taxonSynonymySourceTableAdapter;
            }
            set {
                this._taxonSynonymySourceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public GazetteerSourceTableAdapter GazetteerSourceTableAdapter {
            get {
                return this._gazetteerSourceTableAdapter;
            }
            set {
                this._gazetteerSourceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public AgentSourceTableAdapter AgentSourceTableAdapter {
            get {
                return this._agentSourceTableAdapter;
            }
            set {
                this._agentSourceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ReferenceTitleSourceTableAdapter ReferenceTitleSourceTableAdapter {
            get {
                return this._referenceTitleSourceTableAdapter;
            }
            set {
                this._referenceTitleSourceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public SamplingPlotSourceTableAdapter SamplingPlotSourceTableAdapter {
            get {
                return this._samplingPlotSourceTableAdapter;
            }
            set {
                this._samplingPlotSourceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public TaxonSynonymySource_WebserviceTableAdapter TaxonSynonymySource_WebserviceTableAdapter {
            get {
                return this._taxonSynonymySource_WebserviceTableAdapter;
            }
            set {
                this._taxonSynonymySource_WebserviceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._cacheDatabaseTableAdapter != null) 
                            && (this._cacheDatabaseTableAdapter.Connection != null))) {
                    return this._cacheDatabaseTableAdapter.Connection;
                }
                if (((this._projectPublishedTableAdapter != null) 
                            && (this._projectPublishedTableAdapter.Connection != null))) {
                    return this._projectPublishedTableAdapter.Connection;
                }
                if (((this._anonymCollectorTableAdapter != null) 
                            && (this._anonymCollectorTableAdapter.Connection != null))) {
                    return this._anonymCollectorTableAdapter.Connection;
                }
                if (((this._scientificTermSourceTableAdapter != null) 
                            && (this._scientificTermSourceTableAdapter.Connection != null))) {
                    return this._scientificTermSourceTableAdapter.Connection;
                }
                if (((this._taxonSynonymySourceTableAdapter != null) 
                            && (this._taxonSynonymySourceTableAdapter.Connection != null))) {
                    return this._taxonSynonymySourceTableAdapter.Connection;
                }
                if (((this._gazetteerSourceTableAdapter != null) 
                            && (this._gazetteerSourceTableAdapter.Connection != null))) {
                    return this._gazetteerSourceTableAdapter.Connection;
                }
                if (((this._agentSourceTableAdapter != null) 
                            && (this._agentSourceTableAdapter.Connection != null))) {
                    return this._agentSourceTableAdapter.Connection;
                }
                if (((this._referenceTitleSourceTableAdapter != null) 
                            && (this._referenceTitleSourceTableAdapter.Connection != null))) {
                    return this._referenceTitleSourceTableAdapter.Connection;
                }
                if (((this._samplingPlotSourceTableAdapter != null) 
                            && (this._samplingPlotSourceTableAdapter.Connection != null))) {
                    return this._samplingPlotSourceTableAdapter.Connection;
                }
                if (((this._taxonSynonymySource_WebserviceTableAdapter != null) 
                            && (this._taxonSynonymySource_WebserviceTableAdapter.Connection != null))) {
                    return this._taxonSynonymySource_WebserviceTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._cacheDatabaseTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._projectPublishedTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._anonymCollectorTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._scientificTermSourceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._taxonSynonymySourceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._gazetteerSourceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._agentSourceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._referenceTitleSourceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._samplingPlotSourceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._taxonSynonymySource_WebserviceTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(DataSetCacheDatabase dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._cacheDatabaseTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CacheDatabase.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cacheDatabaseTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._projectPublishedTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ProjectPublished.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._projectPublishedTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._anonymCollectorTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AnonymCollector.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._anonymCollectorTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._scientificTermSourceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ScientificTermSource.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._scientificTermSourceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._taxonSynonymySourceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TaxonSynonymySource.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._taxonSynonymySourceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._gazetteerSourceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GazetteerSource.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._gazetteerSourceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._agentSourceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AgentSource.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._agentSourceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._referenceTitleSourceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ReferenceTitleSource.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._referenceTitleSourceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._samplingPlotSourceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SamplingPlotSource.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._samplingPlotSourceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._taxonSynonymySource_WebserviceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TaxonSynonymySource_Webservice.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._taxonSynonymySource_WebserviceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(DataSetCacheDatabase dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._cacheDatabaseTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CacheDatabase.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cacheDatabaseTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._projectPublishedTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ProjectPublished.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._projectPublishedTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._anonymCollectorTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AnonymCollector.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._anonymCollectorTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._scientificTermSourceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ScientificTermSource.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._scientificTermSourceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._taxonSynonymySourceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TaxonSynonymySource.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._taxonSynonymySourceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._gazetteerSourceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GazetteerSource.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._gazetteerSourceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._agentSourceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AgentSource.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._agentSourceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._referenceTitleSourceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ReferenceTitleSource.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._referenceTitleSourceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._samplingPlotSourceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SamplingPlotSource.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._samplingPlotSourceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._taxonSynonymySource_WebserviceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TaxonSynonymySource_Webservice.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._taxonSynonymySource_WebserviceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(DataSetCacheDatabase dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._taxonSynonymySource_WebserviceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TaxonSynonymySource_Webservice.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._taxonSynonymySource_WebserviceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._samplingPlotSourceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SamplingPlotSource.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._samplingPlotSourceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._referenceTitleSourceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ReferenceTitleSource.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._referenceTitleSourceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._agentSourceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AgentSource.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._agentSourceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._gazetteerSourceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GazetteerSource.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._gazetteerSourceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._taxonSynonymySourceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TaxonSynonymySource.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._taxonSynonymySourceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._scientificTermSourceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ScientificTermSource.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._scientificTermSourceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._anonymCollectorTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AnonymCollector.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._anonymCollectorTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._projectPublishedTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ProjectPublished.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._projectPublishedTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cacheDatabaseTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CacheDatabase.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cacheDatabaseTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(DataSetCacheDatabase dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._cacheDatabaseTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cacheDatabaseTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            if (((this._projectPublishedTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._projectPublishedTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            if (((this._anonymCollectorTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._anonymCollectorTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            if (((this._scientificTermSourceTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._scientificTermSourceTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            if (((this._taxonSynonymySourceTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._taxonSynonymySourceTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            if (((this._gazetteerSourceTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._gazetteerSourceTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            if (((this._agentSourceTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._agentSourceTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            if (((this._referenceTitleSourceTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._referenceTitleSourceTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            if (((this._samplingPlotSourceTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._samplingPlotSourceTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            if (((this._taxonSynonymySource_WebserviceTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._taxonSynonymySource_WebserviceTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager enthält keine Verbindungsinformationen. Legen Sie jede TableA" +
                        "dapterManager TableAdapter-Eigenschaft auf eine gültige TableAdapter-Instanz fes" +
                        "t.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("Die Transaktion kann nicht gestartet werden. Die aktuelle Datenverbindung unterst" +
                        "ützt keine Transaktionen, oder der aktuelle Zustand lässt den Start der Transakt" +
                        "ion nicht zu.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._cacheDatabaseTableAdapter != null)) {
                    revertConnections.Add(this._cacheDatabaseTableAdapter, this._cacheDatabaseTableAdapter.Connection);
                    this._cacheDatabaseTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._cacheDatabaseTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cacheDatabaseTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cacheDatabaseTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cacheDatabaseTableAdapter.Adapter);
                    }
                }
                if ((this._projectPublishedTableAdapter != null)) {
                    revertConnections.Add(this._projectPublishedTableAdapter, this._projectPublishedTableAdapter.Connection);
                    this._projectPublishedTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._projectPublishedTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._projectPublishedTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._projectPublishedTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._projectPublishedTableAdapter.Adapter);
                    }
                }
                if ((this._anonymCollectorTableAdapter != null)) {
                    revertConnections.Add(this._anonymCollectorTableAdapter, this._anonymCollectorTableAdapter.Connection);
                    this._anonymCollectorTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._anonymCollectorTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._anonymCollectorTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._anonymCollectorTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._anonymCollectorTableAdapter.Adapter);
                    }
                }
                if ((this._scientificTermSourceTableAdapter != null)) {
                    revertConnections.Add(this._scientificTermSourceTableAdapter, this._scientificTermSourceTableAdapter.Connection);
                    this._scientificTermSourceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._scientificTermSourceTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._scientificTermSourceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._scientificTermSourceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._scientificTermSourceTableAdapter.Adapter);
                    }
                }
                if ((this._taxonSynonymySourceTableAdapter != null)) {
                    revertConnections.Add(this._taxonSynonymySourceTableAdapter, this._taxonSynonymySourceTableAdapter.Connection);
                    this._taxonSynonymySourceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._taxonSynonymySourceTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._taxonSynonymySourceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._taxonSynonymySourceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._taxonSynonymySourceTableAdapter.Adapter);
                    }
                }
                if ((this._gazetteerSourceTableAdapter != null)) {
                    revertConnections.Add(this._gazetteerSourceTableAdapter, this._gazetteerSourceTableAdapter.Connection);
                    this._gazetteerSourceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._gazetteerSourceTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._gazetteerSourceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._gazetteerSourceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._gazetteerSourceTableAdapter.Adapter);
                    }
                }
                if ((this._agentSourceTableAdapter != null)) {
                    revertConnections.Add(this._agentSourceTableAdapter, this._agentSourceTableAdapter.Connection);
                    this._agentSourceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._agentSourceTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._agentSourceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._agentSourceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._agentSourceTableAdapter.Adapter);
                    }
                }
                if ((this._referenceTitleSourceTableAdapter != null)) {
                    revertConnections.Add(this._referenceTitleSourceTableAdapter, this._referenceTitleSourceTableAdapter.Connection);
                    this._referenceTitleSourceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._referenceTitleSourceTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._referenceTitleSourceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._referenceTitleSourceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._referenceTitleSourceTableAdapter.Adapter);
                    }
                }
                if ((this._samplingPlotSourceTableAdapter != null)) {
                    revertConnections.Add(this._samplingPlotSourceTableAdapter, this._samplingPlotSourceTableAdapter.Connection);
                    this._samplingPlotSourceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._samplingPlotSourceTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._samplingPlotSourceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._samplingPlotSourceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._samplingPlotSourceTableAdapter.Adapter);
                    }
                }
                if ((this._taxonSynonymySource_WebserviceTableAdapter != null)) {
                    revertConnections.Add(this._taxonSynonymySource_WebserviceTableAdapter, this._taxonSynonymySource_WebserviceTableAdapter.Connection);
                    this._taxonSynonymySource_WebserviceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._taxonSynonymySource_WebserviceTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._taxonSynonymySource_WebserviceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._taxonSynonymySource_WebserviceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._taxonSynonymySource_WebserviceTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._cacheDatabaseTableAdapter != null)) {
                    this._cacheDatabaseTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._cacheDatabaseTableAdapter]));
                    this._cacheDatabaseTableAdapter.Transaction = null;
                }
                if ((this._projectPublishedTableAdapter != null)) {
                    this._projectPublishedTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._projectPublishedTableAdapter]));
                    this._projectPublishedTableAdapter.Transaction = null;
                }
                if ((this._anonymCollectorTableAdapter != null)) {
                    this._anonymCollectorTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._anonymCollectorTableAdapter]));
                    this._anonymCollectorTableAdapter.Transaction = null;
                }
                if ((this._scientificTermSourceTableAdapter != null)) {
                    this._scientificTermSourceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._scientificTermSourceTableAdapter]));
                    this._scientificTermSourceTableAdapter.Transaction = null;
                }
                if ((this._taxonSynonymySourceTableAdapter != null)) {
                    this._taxonSynonymySourceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._taxonSynonymySourceTableAdapter]));
                    this._taxonSynonymySourceTableAdapter.Transaction = null;
                }
                if ((this._gazetteerSourceTableAdapter != null)) {
                    this._gazetteerSourceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._gazetteerSourceTableAdapter]));
                    this._gazetteerSourceTableAdapter.Transaction = null;
                }
                if ((this._agentSourceTableAdapter != null)) {
                    this._agentSourceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._agentSourceTableAdapter]));
                    this._agentSourceTableAdapter.Transaction = null;
                }
                if ((this._referenceTitleSourceTableAdapter != null)) {
                    this._referenceTitleSourceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._referenceTitleSourceTableAdapter]));
                    this._referenceTitleSourceTableAdapter.Transaction = null;
                }
                if ((this._samplingPlotSourceTableAdapter != null)) {
                    this._samplingPlotSourceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._samplingPlotSourceTableAdapter]));
                    this._samplingPlotSourceTableAdapter.Transaction = null;
                }
                if ((this._taxonSynonymySource_WebserviceTableAdapter != null)) {
                    this._taxonSynonymySource_WebserviceTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._taxonSynonymySource_WebserviceTableAdapter]));
                    this._taxonSynonymySource_WebserviceTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591