//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DiversityCollection.Tasks {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSetCollectionTask")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetCollectionTask : global::System.Data.DataSet {
        
        private CollectionTaskDataTable tableCollectionTask;
        
        private CollectionTaskImageDataTable tableCollectionTaskImage;
        
        private CollectionTaskMetricDataTable tableCollectionTaskMetric;
        
        private ChartDataTable tableChart;
        
        private global::System.Data.DataRelation relationFK_CollectionTask_CollectionTask;
        
        private global::System.Data.DataRelation relationFK_CollectionTaskImage_CollectionTask;
        
        private global::System.Data.DataRelation relationFK_CollectionTaskMetric_CollectionTask;
        
        private global::System.Data.DataRelation relationFK_CollectionTaskMetric_CollectionTask1;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public DataSetCollectionTask() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
            " or extended by application code.", DiagnosticId="SYSLIB0051")]
        protected DataSetCollectionTask(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["CollectionTask"] != null)) {
                    base.Tables.Add(new CollectionTaskDataTable(ds.Tables["CollectionTask"]));
                }
                if ((ds.Tables["CollectionTaskImage"] != null)) {
                    base.Tables.Add(new CollectionTaskImageDataTable(ds.Tables["CollectionTaskImage"]));
                }
                if ((ds.Tables["CollectionTaskMetric"] != null)) {
                    base.Tables.Add(new CollectionTaskMetricDataTable(ds.Tables["CollectionTaskMetric"]));
                }
                if ((ds.Tables["Chart"] != null)) {
                    base.Tables.Add(new ChartDataTable(ds.Tables["Chart"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CollectionTaskDataTable CollectionTask {
            get {
                return this.tableCollectionTask;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CollectionTaskImageDataTable CollectionTaskImage {
            get {
                return this.tableCollectionTaskImage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CollectionTaskMetricDataTable CollectionTaskMetric {
            get {
                return this.tableCollectionTaskMetric;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ChartDataTable Chart {
            get {
                return this.tableChart;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DataSetCollectionTask cln = ((DataSetCollectionTask)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CollectionTask"] != null)) {
                    base.Tables.Add(new CollectionTaskDataTable(ds.Tables["CollectionTask"]));
                }
                if ((ds.Tables["CollectionTaskImage"] != null)) {
                    base.Tables.Add(new CollectionTaskImageDataTable(ds.Tables["CollectionTaskImage"]));
                }
                if ((ds.Tables["CollectionTaskMetric"] != null)) {
                    base.Tables.Add(new CollectionTaskMetricDataTable(ds.Tables["CollectionTaskMetric"]));
                }
                if ((ds.Tables["Chart"] != null)) {
                    base.Tables.Add(new ChartDataTable(ds.Tables["Chart"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableCollectionTask = ((CollectionTaskDataTable)(base.Tables["CollectionTask"]));
            if ((initTable == true)) {
                if ((this.tableCollectionTask != null)) {
                    this.tableCollectionTask.InitVars();
                }
            }
            this.tableCollectionTaskImage = ((CollectionTaskImageDataTable)(base.Tables["CollectionTaskImage"]));
            if ((initTable == true)) {
                if ((this.tableCollectionTaskImage != null)) {
                    this.tableCollectionTaskImage.InitVars();
                }
            }
            this.tableCollectionTaskMetric = ((CollectionTaskMetricDataTable)(base.Tables["CollectionTaskMetric"]));
            if ((initTable == true)) {
                if ((this.tableCollectionTaskMetric != null)) {
                    this.tableCollectionTaskMetric.InitVars();
                }
            }
            this.tableChart = ((ChartDataTable)(base.Tables["Chart"]));
            if ((initTable == true)) {
                if ((this.tableChart != null)) {
                    this.tableChart.InitVars();
                }
            }
            this.relationFK_CollectionTask_CollectionTask = this.Relations["FK_CollectionTask_CollectionTask"];
            this.relationFK_CollectionTaskImage_CollectionTask = this.Relations["FK_CollectionTaskImage_CollectionTask"];
            this.relationFK_CollectionTaskMetric_CollectionTask = this.Relations["FK_CollectionTaskMetric_CollectionTask"];
            this.relationFK_CollectionTaskMetric_CollectionTask1 = this.Relations["FK_CollectionTaskMetric_CollectionTask1"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DataSetCollectionTask";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetCollectionTask.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCollectionTask = new CollectionTaskDataTable();
            base.Tables.Add(this.tableCollectionTask);
            this.tableCollectionTaskImage = new CollectionTaskImageDataTable();
            base.Tables.Add(this.tableCollectionTaskImage);
            this.tableCollectionTaskMetric = new CollectionTaskMetricDataTable();
            base.Tables.Add(this.tableCollectionTaskMetric);
            this.tableChart = new ChartDataTable();
            base.Tables.Add(this.tableChart);
            this.relationFK_CollectionTask_CollectionTask = new global::System.Data.DataRelation("FK_CollectionTask_CollectionTask", new global::System.Data.DataColumn[] {
                        this.tableCollectionTask.CollectionTaskIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCollectionTask.CollectionTaskParentIDColumn}, false);
            this.Relations.Add(this.relationFK_CollectionTask_CollectionTask);
            this.relationFK_CollectionTaskImage_CollectionTask = new global::System.Data.DataRelation("FK_CollectionTaskImage_CollectionTask", new global::System.Data.DataColumn[] {
                        this.tableCollectionTask.CollectionTaskIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCollectionTaskImage.CollectionTaskIDColumn}, false);
            this.Relations.Add(this.relationFK_CollectionTaskImage_CollectionTask);
            this.relationFK_CollectionTaskMetric_CollectionTask = new global::System.Data.DataRelation("FK_CollectionTaskMetric_CollectionTask", new global::System.Data.DataColumn[] {
                        this.tableCollectionTask.CollectionTaskIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCollectionTaskMetric.CollectionTaskIDColumn}, false);
            this.Relations.Add(this.relationFK_CollectionTaskMetric_CollectionTask);
            this.relationFK_CollectionTaskMetric_CollectionTask1 = new global::System.Data.DataRelation("FK_CollectionTaskMetric_CollectionTask1", new global::System.Data.DataColumn[] {
                        this.tableCollectionTask.CollectionTaskIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableChart.CollectionTaskIDColumn}, false);
            this.Relations.Add(this.relationFK_CollectionTaskMetric_CollectionTask1);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeCollectionTask() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeCollectionTaskImage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeCollectionTaskMetric() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeChart() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSetCollectionTask ds = new DataSetCollectionTask();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void CollectionTaskRowChangeEventHandler(object sender, CollectionTaskRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void CollectionTaskImageRowChangeEventHandler(object sender, CollectionTaskImageRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void CollectionTaskMetricRowChangeEventHandler(object sender, CollectionTaskMetricRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void ChartRowChangeEventHandler(object sender, ChartRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CollectionTaskDataTable : global::System.Data.TypedTableBase<CollectionTaskRow> {
            
            private global::System.Data.DataColumn columnCollectionTaskID;
            
            private global::System.Data.DataColumn columnCollectionTaskParentID;
            
            private global::System.Data.DataColumn columnCollectionID;
            
            private global::System.Data.DataColumn columnTaskID;
            
            private global::System.Data.DataColumn columnDisplayOrder;
            
            private global::System.Data.DataColumn columnDisplayText;
            
            private global::System.Data.DataColumn columnCollectionSpecimenID;
            
            private global::System.Data.DataColumn columnSpecimenPartID;
            
            private global::System.Data.DataColumn columnModuleUri;
            
            private global::System.Data.DataColumn columnTaskStart;
            
            private global::System.Data.DataColumn columnTaskEnd;
            
            private global::System.Data.DataColumn columnResult;
            
            private global::System.Data.DataColumn columnURI;
            
            private global::System.Data.DataColumn columnNumberValue;
            
            private global::System.Data.DataColumn columnBoolValue;
            
            private global::System.Data.DataColumn columnMetricDescription;
            
            private global::System.Data.DataColumn columnMetricSource;
            
            private global::System.Data.DataColumn columnMetricUnit;
            
            private global::System.Data.DataColumn columnResponsibleAgent;
            
            private global::System.Data.DataColumn columnResponsibleAgentURI;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnTransactionID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskDataTable() {
                this.TableName = "CollectionTask";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal CollectionTaskDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected CollectionTaskDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CollectionTaskIDColumn {
                get {
                    return this.columnCollectionTaskID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CollectionTaskParentIDColumn {
                get {
                    return this.columnCollectionTaskParentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CollectionIDColumn {
                get {
                    return this.columnCollectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TaskIDColumn {
                get {
                    return this.columnTaskID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DisplayOrderColumn {
                get {
                    return this.columnDisplayOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DisplayTextColumn {
                get {
                    return this.columnDisplayText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CollectionSpecimenIDColumn {
                get {
                    return this.columnCollectionSpecimenID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn SpecimenPartIDColumn {
                get {
                    return this.columnSpecimenPartID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ModuleUriColumn {
                get {
                    return this.columnModuleUri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TaskStartColumn {
                get {
                    return this.columnTaskStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TaskEndColumn {
                get {
                    return this.columnTaskEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ResultColumn {
                get {
                    return this.columnResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn URIColumn {
                get {
                    return this.columnURI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn NumberValueColumn {
                get {
                    return this.columnNumberValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn BoolValueColumn {
                get {
                    return this.columnBoolValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MetricDescriptionColumn {
                get {
                    return this.columnMetricDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MetricSourceColumn {
                get {
                    return this.columnMetricSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MetricUnitColumn {
                get {
                    return this.columnMetricUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ResponsibleAgentColumn {
                get {
                    return this.columnResponsibleAgent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ResponsibleAgentURIColumn {
                get {
                    return this.columnResponsibleAgentURI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TransactionIDColumn {
                get {
                    return this.columnTransactionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskRow this[int index] {
                get {
                    return ((CollectionTaskRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CollectionTaskRowChangeEventHandler CollectionTaskRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CollectionTaskRowChangeEventHandler CollectionTaskRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CollectionTaskRowChangeEventHandler CollectionTaskRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CollectionTaskRowChangeEventHandler CollectionTaskRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddCollectionTaskRow(CollectionTaskRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskRow AddCollectionTaskRow(
                        CollectionTaskRow parentCollectionTaskRowByFK_CollectionTask_CollectionTask, 
                        int CollectionID, 
                        int TaskID, 
                        int DisplayOrder, 
                        string DisplayText, 
                        int CollectionSpecimenID, 
                        int SpecimenPartID, 
                        string ModuleUri, 
                        System.DateTime TaskStart, 
                        System.DateTime TaskEnd, 
                        string Result, 
                        string URI, 
                        float NumberValue, 
                        bool BoolValue, 
                        string MetricDescription, 
                        string MetricSource, 
                        string MetricUnit, 
                        string ResponsibleAgent, 
                        string ResponsibleAgentURI, 
                        string Description, 
                        string Notes, 
                        int TransactionID) {
                CollectionTaskRow rowCollectionTaskRow = ((CollectionTaskRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        CollectionID,
                        TaskID,
                        DisplayOrder,
                        DisplayText,
                        CollectionSpecimenID,
                        SpecimenPartID,
                        ModuleUri,
                        TaskStart,
                        TaskEnd,
                        Result,
                        URI,
                        NumberValue,
                        BoolValue,
                        MetricDescription,
                        MetricSource,
                        MetricUnit,
                        ResponsibleAgent,
                        ResponsibleAgentURI,
                        Description,
                        Notes,
                        TransactionID};
                if ((parentCollectionTaskRowByFK_CollectionTask_CollectionTask != null)) {
                    columnValuesArray[1] = parentCollectionTaskRowByFK_CollectionTask_CollectionTask[0];
                }
                rowCollectionTaskRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCollectionTaskRow);
                return rowCollectionTaskRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskRow FindByCollectionTaskID(int CollectionTaskID) {
                return ((CollectionTaskRow)(this.Rows.Find(new object[] {
                            CollectionTaskID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                CollectionTaskDataTable cln = ((CollectionTaskDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CollectionTaskDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnCollectionTaskID = base.Columns["CollectionTaskID"];
                this.columnCollectionTaskParentID = base.Columns["CollectionTaskParentID"];
                this.columnCollectionID = base.Columns["CollectionID"];
                this.columnTaskID = base.Columns["TaskID"];
                this.columnDisplayOrder = base.Columns["DisplayOrder"];
                this.columnDisplayText = base.Columns["DisplayText"];
                this.columnCollectionSpecimenID = base.Columns["CollectionSpecimenID"];
                this.columnSpecimenPartID = base.Columns["SpecimenPartID"];
                this.columnModuleUri = base.Columns["ModuleUri"];
                this.columnTaskStart = base.Columns["TaskStart"];
                this.columnTaskEnd = base.Columns["TaskEnd"];
                this.columnResult = base.Columns["Result"];
                this.columnURI = base.Columns["URI"];
                this.columnNumberValue = base.Columns["NumberValue"];
                this.columnBoolValue = base.Columns["BoolValue"];
                this.columnMetricDescription = base.Columns["MetricDescription"];
                this.columnMetricSource = base.Columns["MetricSource"];
                this.columnMetricUnit = base.Columns["MetricUnit"];
                this.columnResponsibleAgent = base.Columns["ResponsibleAgent"];
                this.columnResponsibleAgentURI = base.Columns["ResponsibleAgentURI"];
                this.columnDescription = base.Columns["Description"];
                this.columnNotes = base.Columns["Notes"];
                this.columnTransactionID = base.Columns["TransactionID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnCollectionTaskID = new global::System.Data.DataColumn("CollectionTaskID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollectionTaskID);
                this.columnCollectionTaskParentID = new global::System.Data.DataColumn("CollectionTaskParentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollectionTaskParentID);
                this.columnCollectionID = new global::System.Data.DataColumn("CollectionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollectionID);
                this.columnTaskID = new global::System.Data.DataColumn("TaskID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaskID);
                this.columnDisplayOrder = new global::System.Data.DataColumn("DisplayOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayOrder);
                this.columnDisplayText = new global::System.Data.DataColumn("DisplayText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayText);
                this.columnCollectionSpecimenID = new global::System.Data.DataColumn("CollectionSpecimenID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollectionSpecimenID);
                this.columnSpecimenPartID = new global::System.Data.DataColumn("SpecimenPartID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecimenPartID);
                this.columnModuleUri = new global::System.Data.DataColumn("ModuleUri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleUri);
                this.columnTaskStart = new global::System.Data.DataColumn("TaskStart", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaskStart);
                this.columnTaskEnd = new global::System.Data.DataColumn("TaskEnd", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaskEnd);
                this.columnResult = new global::System.Data.DataColumn("Result", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResult);
                this.columnURI = new global::System.Data.DataColumn("URI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnURI);
                this.columnNumberValue = new global::System.Data.DataColumn("NumberValue", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberValue);
                this.columnBoolValue = new global::System.Data.DataColumn("BoolValue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoolValue);
                this.columnMetricDescription = new global::System.Data.DataColumn("MetricDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMetricDescription);
                this.columnMetricSource = new global::System.Data.DataColumn("MetricSource", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMetricSource);
                this.columnMetricUnit = new global::System.Data.DataColumn("MetricUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMetricUnit);
                this.columnResponsibleAgent = new global::System.Data.DataColumn("ResponsibleAgent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponsibleAgent);
                this.columnResponsibleAgentURI = new global::System.Data.DataColumn("ResponsibleAgentURI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponsibleAgentURI);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnTransactionID = new global::System.Data.DataColumn("TransactionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCollectionTaskID}, true));
                this.columnCollectionTaskID.AutoIncrement = true;
                this.columnCollectionTaskID.AutoIncrementSeed = -1;
                this.columnCollectionTaskID.AutoIncrementStep = -1;
                this.columnCollectionTaskID.AllowDBNull = false;
                this.columnCollectionTaskID.ReadOnly = true;
                this.columnCollectionTaskID.Unique = true;
                this.columnCollectionID.AllowDBNull = false;
                this.columnTaskID.AllowDBNull = false;
                this.columnDisplayText.MaxLength = 400;
                this.columnModuleUri.MaxLength = 500;
                this.columnResult.MaxLength = 400;
                this.columnURI.MaxLength = 500;
                this.columnMetricDescription.MaxLength = 500;
                this.columnMetricSource.MaxLength = 4000;
                this.columnMetricUnit.MaxLength = 50;
                this.columnResponsibleAgent.MaxLength = 500;
                this.columnResponsibleAgentURI.MaxLength = 500;
                this.columnDescription.MaxLength = 2147483647;
                this.columnNotes.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskRow NewCollectionTaskRow() {
                return ((CollectionTaskRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CollectionTaskRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(CollectionTaskRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CollectionTaskRowChanged != null)) {
                    this.CollectionTaskRowChanged(this, new CollectionTaskRowChangeEvent(((CollectionTaskRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CollectionTaskRowChanging != null)) {
                    this.CollectionTaskRowChanging(this, new CollectionTaskRowChangeEvent(((CollectionTaskRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CollectionTaskRowDeleted != null)) {
                    this.CollectionTaskRowDeleted(this, new CollectionTaskRowChangeEvent(((CollectionTaskRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CollectionTaskRowDeleting != null)) {
                    this.CollectionTaskRowDeleting(this, new CollectionTaskRowChangeEvent(((CollectionTaskRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveCollectionTaskRow(CollectionTaskRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCollectionTask ds = new DataSetCollectionTask();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CollectionTaskDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CollectionTaskImageDataTable : global::System.Data.TypedTableBase<CollectionTaskImageRow> {
            
            private global::System.Data.DataColumn columnCollectionTaskID;
            
            private global::System.Data.DataColumn columnURI;
            
            private global::System.Data.DataColumn columnImageType;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnIPR;
            
            private global::System.Data.DataColumn columnCreatorAgent;
            
            private global::System.Data.DataColumn columnCreatorAgentURI;
            
            private global::System.Data.DataColumn columnCopyrightStatement;
            
            private global::System.Data.DataColumn columnLicenseType;
            
            private global::System.Data.DataColumn columnInternalNotes;
            
            private global::System.Data.DataColumn columnLicenseHolder;
            
            private global::System.Data.DataColumn columnLicenseHolderAgentURI;
            
            private global::System.Data.DataColumn columnLicenseYear;
            
            private global::System.Data.DataColumn columnDisplayOrder;
            
            private global::System.Data.DataColumn columnDataWithholdingReason;
            
            private global::System.Data.DataColumn columnLogInsertedWhen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskImageDataTable() {
                this.TableName = "CollectionTaskImage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal CollectionTaskImageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected CollectionTaskImageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CollectionTaskIDColumn {
                get {
                    return this.columnCollectionTaskID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn URIColumn {
                get {
                    return this.columnURI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ImageTypeColumn {
                get {
                    return this.columnImageType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn IPRColumn {
                get {
                    return this.columnIPR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CreatorAgentColumn {
                get {
                    return this.columnCreatorAgent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CreatorAgentURIColumn {
                get {
                    return this.columnCreatorAgentURI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CopyrightStatementColumn {
                get {
                    return this.columnCopyrightStatement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LicenseTypeColumn {
                get {
                    return this.columnLicenseType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn InternalNotesColumn {
                get {
                    return this.columnInternalNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LicenseHolderColumn {
                get {
                    return this.columnLicenseHolder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LicenseHolderAgentURIColumn {
                get {
                    return this.columnLicenseHolderAgentURI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LicenseYearColumn {
                get {
                    return this.columnLicenseYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DisplayOrderColumn {
                get {
                    return this.columnDisplayOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn DataWithholdingReasonColumn {
                get {
                    return this.columnDataWithholdingReason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn LogInsertedWhenColumn {
                get {
                    return this.columnLogInsertedWhen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskImageRow this[int index] {
                get {
                    return ((CollectionTaskImageRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CollectionTaskImageRowChangeEventHandler CollectionTaskImageRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CollectionTaskImageRowChangeEventHandler CollectionTaskImageRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CollectionTaskImageRowChangeEventHandler CollectionTaskImageRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CollectionTaskImageRowChangeEventHandler CollectionTaskImageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddCollectionTaskImageRow(CollectionTaskImageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskImageRow AddCollectionTaskImageRow(
                        CollectionTaskRow parentCollectionTaskRowByFK_CollectionTaskImage_CollectionTask, 
                        string URI, 
                        string ImageType, 
                        string Notes, 
                        string Description, 
                        string Title, 
                        string IPR, 
                        string CreatorAgent, 
                        string CreatorAgentURI, 
                        string CopyrightStatement, 
                        string LicenseType, 
                        string InternalNotes, 
                        string LicenseHolder, 
                        string LicenseHolderAgentURI, 
                        string LicenseYear, 
                        short DisplayOrder, 
                        string DataWithholdingReason, 
                        System.DateTime LogInsertedWhen) {
                CollectionTaskImageRow rowCollectionTaskImageRow = ((CollectionTaskImageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        URI,
                        ImageType,
                        Notes,
                        Description,
                        Title,
                        IPR,
                        CreatorAgent,
                        CreatorAgentURI,
                        CopyrightStatement,
                        LicenseType,
                        InternalNotes,
                        LicenseHolder,
                        LicenseHolderAgentURI,
                        LicenseYear,
                        DisplayOrder,
                        DataWithholdingReason,
                        LogInsertedWhen};
                if ((parentCollectionTaskRowByFK_CollectionTaskImage_CollectionTask != null)) {
                    columnValuesArray[0] = parentCollectionTaskRowByFK_CollectionTaskImage_CollectionTask[0];
                }
                rowCollectionTaskImageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCollectionTaskImageRow);
                return rowCollectionTaskImageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskImageRow FindByCollectionTaskIDURI(int CollectionTaskID, string URI) {
                return ((CollectionTaskImageRow)(this.Rows.Find(new object[] {
                            CollectionTaskID,
                            URI})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                CollectionTaskImageDataTable cln = ((CollectionTaskImageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CollectionTaskImageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnCollectionTaskID = base.Columns["CollectionTaskID"];
                this.columnURI = base.Columns["URI"];
                this.columnImageType = base.Columns["ImageType"];
                this.columnNotes = base.Columns["Notes"];
                this.columnDescription = base.Columns["Description"];
                this.columnTitle = base.Columns["Title"];
                this.columnIPR = base.Columns["IPR"];
                this.columnCreatorAgent = base.Columns["CreatorAgent"];
                this.columnCreatorAgentURI = base.Columns["CreatorAgentURI"];
                this.columnCopyrightStatement = base.Columns["CopyrightStatement"];
                this.columnLicenseType = base.Columns["LicenseType"];
                this.columnInternalNotes = base.Columns["InternalNotes"];
                this.columnLicenseHolder = base.Columns["LicenseHolder"];
                this.columnLicenseHolderAgentURI = base.Columns["LicenseHolderAgentURI"];
                this.columnLicenseYear = base.Columns["LicenseYear"];
                this.columnDisplayOrder = base.Columns["DisplayOrder"];
                this.columnDataWithholdingReason = base.Columns["DataWithholdingReason"];
                this.columnLogInsertedWhen = base.Columns["LogInsertedWhen"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnCollectionTaskID = new global::System.Data.DataColumn("CollectionTaskID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollectionTaskID);
                this.columnURI = new global::System.Data.DataColumn("URI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnURI);
                this.columnImageType = new global::System.Data.DataColumn("ImageType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageType);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnIPR = new global::System.Data.DataColumn("IPR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIPR);
                this.columnCreatorAgent = new global::System.Data.DataColumn("CreatorAgent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatorAgent);
                this.columnCreatorAgentURI = new global::System.Data.DataColumn("CreatorAgentURI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatorAgentURI);
                this.columnCopyrightStatement = new global::System.Data.DataColumn("CopyrightStatement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCopyrightStatement);
                this.columnLicenseType = new global::System.Data.DataColumn("LicenseType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseType);
                this.columnInternalNotes = new global::System.Data.DataColumn("InternalNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInternalNotes);
                this.columnLicenseHolder = new global::System.Data.DataColumn("LicenseHolder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseHolder);
                this.columnLicenseHolderAgentURI = new global::System.Data.DataColumn("LicenseHolderAgentURI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseHolderAgentURI);
                this.columnLicenseYear = new global::System.Data.DataColumn("LicenseYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseYear);
                this.columnDisplayOrder = new global::System.Data.DataColumn("DisplayOrder", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayOrder);
                this.columnDataWithholdingReason = new global::System.Data.DataColumn("DataWithholdingReason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataWithholdingReason);
                this.columnLogInsertedWhen = new global::System.Data.DataColumn("LogInsertedWhen", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogInsertedWhen);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCollectionTaskID,
                                this.columnURI}, true));
                this.columnCollectionTaskID.AllowDBNull = false;
                this.columnURI.AllowDBNull = false;
                this.columnURI.MaxLength = 255;
                this.columnImageType.MaxLength = 50;
                this.columnNotes.MaxLength = 2147483647;
                this.columnDescription.MaxLength = 2147483647;
                this.columnTitle.MaxLength = 500;
                this.columnIPR.MaxLength = 500;
                this.columnCreatorAgent.MaxLength = 500;
                this.columnCreatorAgentURI.MaxLength = 255;
                this.columnCopyrightStatement.MaxLength = 500;
                this.columnLicenseType.MaxLength = 500;
                this.columnInternalNotes.MaxLength = 500;
                this.columnLicenseHolder.MaxLength = 500;
                this.columnLicenseHolderAgentURI.MaxLength = 500;
                this.columnLicenseYear.MaxLength = 50;
                this.columnDataWithholdingReason.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskImageRow NewCollectionTaskImageRow() {
                return ((CollectionTaskImageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CollectionTaskImageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(CollectionTaskImageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CollectionTaskImageRowChanged != null)) {
                    this.CollectionTaskImageRowChanged(this, new CollectionTaskImageRowChangeEvent(((CollectionTaskImageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CollectionTaskImageRowChanging != null)) {
                    this.CollectionTaskImageRowChanging(this, new CollectionTaskImageRowChangeEvent(((CollectionTaskImageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CollectionTaskImageRowDeleted != null)) {
                    this.CollectionTaskImageRowDeleted(this, new CollectionTaskImageRowChangeEvent(((CollectionTaskImageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CollectionTaskImageRowDeleting != null)) {
                    this.CollectionTaskImageRowDeleting(this, new CollectionTaskImageRowChangeEvent(((CollectionTaskImageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveCollectionTaskImageRow(CollectionTaskImageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCollectionTask ds = new DataSetCollectionTask();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CollectionTaskImageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CollectionTaskMetricDataTable : global::System.Data.TypedTableBase<CollectionTaskMetricRow> {
            
            private global::System.Data.DataColumn columnCollectionTaskID;
            
            private global::System.Data.DataColumn columnMetricDate;
            
            private global::System.Data.DataColumn columnMetricValue;
            
            private global::System.Data.DataColumn columnAggregation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskMetricDataTable() {
                this.TableName = "CollectionTaskMetric";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal CollectionTaskMetricDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected CollectionTaskMetricDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CollectionTaskIDColumn {
                get {
                    return this.columnCollectionTaskID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MetricDateColumn {
                get {
                    return this.columnMetricDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MetricValueColumn {
                get {
                    return this.columnMetricValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn AggregationColumn {
                get {
                    return this.columnAggregation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskMetricRow this[int index] {
                get {
                    return ((CollectionTaskMetricRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CollectionTaskMetricRowChangeEventHandler CollectionTaskMetricRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CollectionTaskMetricRowChangeEventHandler CollectionTaskMetricRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CollectionTaskMetricRowChangeEventHandler CollectionTaskMetricRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event CollectionTaskMetricRowChangeEventHandler CollectionTaskMetricRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddCollectionTaskMetricRow(CollectionTaskMetricRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskMetricRow AddCollectionTaskMetricRow(CollectionTaskRow parentCollectionTaskRowByFK_CollectionTaskMetric_CollectionTask, System.DateTime MetricDate, float MetricValue, string Aggregation) {
                CollectionTaskMetricRow rowCollectionTaskMetricRow = ((CollectionTaskMetricRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MetricDate,
                        MetricValue,
                        Aggregation};
                if ((parentCollectionTaskRowByFK_CollectionTaskMetric_CollectionTask != null)) {
                    columnValuesArray[0] = parentCollectionTaskRowByFK_CollectionTaskMetric_CollectionTask[0];
                }
                rowCollectionTaskMetricRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCollectionTaskMetricRow);
                return rowCollectionTaskMetricRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskMetricRow FindByCollectionTaskIDMetricDate(int CollectionTaskID, System.DateTime MetricDate) {
                return ((CollectionTaskMetricRow)(this.Rows.Find(new object[] {
                            CollectionTaskID,
                            MetricDate})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                CollectionTaskMetricDataTable cln = ((CollectionTaskMetricDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CollectionTaskMetricDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnCollectionTaskID = base.Columns["CollectionTaskID"];
                this.columnMetricDate = base.Columns["MetricDate"];
                this.columnMetricValue = base.Columns["MetricValue"];
                this.columnAggregation = base.Columns["Aggregation"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnCollectionTaskID = new global::System.Data.DataColumn("CollectionTaskID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollectionTaskID);
                this.columnMetricDate = new global::System.Data.DataColumn("MetricDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMetricDate);
                this.columnMetricValue = new global::System.Data.DataColumn("MetricValue", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMetricValue);
                this.columnAggregation = new global::System.Data.DataColumn("Aggregation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAggregation);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCollectionTaskID,
                                this.columnMetricDate}, true));
                this.columnCollectionTaskID.AllowDBNull = false;
                this.columnMetricDate.AllowDBNull = false;
                this.columnAggregation.AllowDBNull = false;
                this.columnAggregation.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskMetricRow NewCollectionTaskMetricRow() {
                return ((CollectionTaskMetricRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CollectionTaskMetricRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(CollectionTaskMetricRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CollectionTaskMetricRowChanged != null)) {
                    this.CollectionTaskMetricRowChanged(this, new CollectionTaskMetricRowChangeEvent(((CollectionTaskMetricRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CollectionTaskMetricRowChanging != null)) {
                    this.CollectionTaskMetricRowChanging(this, new CollectionTaskMetricRowChangeEvent(((CollectionTaskMetricRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CollectionTaskMetricRowDeleted != null)) {
                    this.CollectionTaskMetricRowDeleted(this, new CollectionTaskMetricRowChangeEvent(((CollectionTaskMetricRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CollectionTaskMetricRowDeleting != null)) {
                    this.CollectionTaskMetricRowDeleting(this, new CollectionTaskMetricRowChangeEvent(((CollectionTaskMetricRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveCollectionTaskMetricRow(CollectionTaskMetricRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCollectionTask ds = new DataSetCollectionTask();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CollectionTaskMetricDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ChartDataTable : global::System.Data.TypedTableBase<ChartRow> {
            
            private global::System.Data.DataColumn columnCollectionTaskID;
            
            private global::System.Data.DataColumn columnMetricDate;
            
            private global::System.Data.DataColumn columnMetricValue;
            
            private global::System.Data.DataColumn columnMetricType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ChartDataTable() {
                this.TableName = "Chart";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ChartDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called" +
                " or extended by application code.", DiagnosticId="SYSLIB0051")]
            protected ChartDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn CollectionTaskIDColumn {
                get {
                    return this.columnCollectionTaskID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MetricDateColumn {
                get {
                    return this.columnMetricDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MetricValueColumn {
                get {
                    return this.columnMetricValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn MetricTypeColumn {
                get {
                    return this.columnMetricType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ChartRow this[int index] {
                get {
                    return ((ChartRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ChartRowChangeEventHandler ChartRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ChartRowChangeEventHandler ChartRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ChartRowChangeEventHandler ChartRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ChartRowChangeEventHandler ChartRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddChartRow(ChartRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ChartRow AddChartRow(CollectionTaskRow parentCollectionTaskRowByFK_CollectionTaskMetric_CollectionTask1, System.DateTime MetricDate, float MetricValue, string MetricType) {
                ChartRow rowChartRow = ((ChartRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MetricDate,
                        MetricValue,
                        MetricType};
                if ((parentCollectionTaskRowByFK_CollectionTaskMetric_CollectionTask1 != null)) {
                    columnValuesArray[0] = parentCollectionTaskRowByFK_CollectionTaskMetric_CollectionTask1[0];
                }
                rowChartRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowChartRow);
                return rowChartRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ChartRow FindByCollectionTaskIDMetricDate(int CollectionTaskID, System.DateTime MetricDate) {
                return ((ChartRow)(this.Rows.Find(new object[] {
                            CollectionTaskID,
                            MetricDate})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ChartDataTable cln = ((ChartDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ChartDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnCollectionTaskID = base.Columns["CollectionTaskID"];
                this.columnMetricDate = base.Columns["MetricDate"];
                this.columnMetricValue = base.Columns["MetricValue"];
                this.columnMetricType = base.Columns["MetricType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnCollectionTaskID = new global::System.Data.DataColumn("CollectionTaskID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollectionTaskID);
                this.columnMetricDate = new global::System.Data.DataColumn("MetricDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMetricDate);
                this.columnMetricValue = new global::System.Data.DataColumn("MetricValue", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMetricValue);
                this.columnMetricType = new global::System.Data.DataColumn("MetricType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMetricType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCollectionTaskID,
                                this.columnMetricDate}, true));
                this.columnCollectionTaskID.AllowDBNull = false;
                this.columnMetricDate.AllowDBNull = false;
                this.columnMetricType.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ChartRow NewChartRow() {
                return ((ChartRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ChartRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ChartRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ChartRowChanged != null)) {
                    this.ChartRowChanged(this, new ChartRowChangeEvent(((ChartRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ChartRowChanging != null)) {
                    this.ChartRowChanging(this, new ChartRowChangeEvent(((ChartRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ChartRowDeleted != null)) {
                    this.ChartRowDeleted(this, new ChartRowChangeEvent(((ChartRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ChartRowDeleting != null)) {
                    this.ChartRowDeleting(this, new ChartRowChangeEvent(((ChartRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveChartRow(ChartRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetCollectionTask ds = new DataSetCollectionTask();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ChartDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CollectionTaskRow : global::System.Data.DataRow {
            
            private CollectionTaskDataTable tableCollectionTask;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal CollectionTaskRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCollectionTask = ((CollectionTaskDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int CollectionTaskID {
                get {
                    return ((int)(this[this.tableCollectionTask.CollectionTaskIDColumn]));
                }
                set {
                    this[this.tableCollectionTask.CollectionTaskIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int CollectionTaskParentID {
                get {
                    try {
                        return ((int)(this[this.tableCollectionTask.CollectionTaskParentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte CollectionTaskParentID in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.CollectionTaskParentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int CollectionID {
                get {
                    return ((int)(this[this.tableCollectionTask.CollectionIDColumn]));
                }
                set {
                    this[this.tableCollectionTask.CollectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int TaskID {
                get {
                    return ((int)(this[this.tableCollectionTask.TaskIDColumn]));
                }
                set {
                    this[this.tableCollectionTask.TaskIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int DisplayOrder {
                get {
                    try {
                        return ((int)(this[this.tableCollectionTask.DisplayOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DisplayOrder in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.DisplayOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string DisplayText {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTask.DisplayTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DisplayText in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.DisplayTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int CollectionSpecimenID {
                get {
                    try {
                        return ((int)(this[this.tableCollectionTask.CollectionSpecimenIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte CollectionSpecimenID in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.CollectionSpecimenIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SpecimenPartID {
                get {
                    try {
                        return ((int)(this[this.tableCollectionTask.SpecimenPartIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte SpecimenPartID in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.SpecimenPartIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ModuleUri {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTask.ModuleUriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ModuleUri in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.ModuleUriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime TaskStart {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCollectionTask.TaskStartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TaskStart in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.TaskStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime TaskEnd {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCollectionTask.TaskEndColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TaskEnd in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.TaskEndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Result {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTask.ResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Result in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.ResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string URI {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTask.URIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte URI in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.URIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public float NumberValue {
                get {
                    try {
                        return ((float)(this[this.tableCollectionTask.NumberValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte NumberValue in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.NumberValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool BoolValue {
                get {
                    try {
                        return ((bool)(this[this.tableCollectionTask.BoolValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte BoolValue in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.BoolValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string MetricDescription {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTask.MetricDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MetricDescription in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.MetricDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string MetricSource {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTask.MetricSourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MetricSource in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.MetricSourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string MetricUnit {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTask.MetricUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MetricUnit in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.MetricUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ResponsibleAgent {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTask.ResponsibleAgentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ResponsibleAgent in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.ResponsibleAgentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ResponsibleAgentURI {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTask.ResponsibleAgentURIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ResponsibleAgentURI in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.ResponsibleAgentURIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTask.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Description in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTask.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Notes in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int TransactionID {
                get {
                    try {
                        return ((int)(this[this.tableCollectionTask.TransactionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte TransactionID in Tabelle CollectionTask ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTask.TransactionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskRow CollectionTaskRowParent {
                get {
                    return ((CollectionTaskRow)(this.GetParentRow(this.Table.ParentRelations["FK_CollectionTask_CollectionTask"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CollectionTask_CollectionTask"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCollectionTaskParentIDNull() {
                return this.IsNull(this.tableCollectionTask.CollectionTaskParentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCollectionTaskParentIDNull() {
                this[this.tableCollectionTask.CollectionTaskParentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDisplayOrderNull() {
                return this.IsNull(this.tableCollectionTask.DisplayOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDisplayOrderNull() {
                this[this.tableCollectionTask.DisplayOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDisplayTextNull() {
                return this.IsNull(this.tableCollectionTask.DisplayTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDisplayTextNull() {
                this[this.tableCollectionTask.DisplayTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCollectionSpecimenIDNull() {
                return this.IsNull(this.tableCollectionTask.CollectionSpecimenIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCollectionSpecimenIDNull() {
                this[this.tableCollectionTask.CollectionSpecimenIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSpecimenPartIDNull() {
                return this.IsNull(this.tableCollectionTask.SpecimenPartIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSpecimenPartIDNull() {
                this[this.tableCollectionTask.SpecimenPartIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsModuleUriNull() {
                return this.IsNull(this.tableCollectionTask.ModuleUriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetModuleUriNull() {
                this[this.tableCollectionTask.ModuleUriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTaskStartNull() {
                return this.IsNull(this.tableCollectionTask.TaskStartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTaskStartNull() {
                this[this.tableCollectionTask.TaskStartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTaskEndNull() {
                return this.IsNull(this.tableCollectionTask.TaskEndColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTaskEndNull() {
                this[this.tableCollectionTask.TaskEndColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsResultNull() {
                return this.IsNull(this.tableCollectionTask.ResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetResultNull() {
                this[this.tableCollectionTask.ResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsURINull() {
                return this.IsNull(this.tableCollectionTask.URIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetURINull() {
                this[this.tableCollectionTask.URIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsNumberValueNull() {
                return this.IsNull(this.tableCollectionTask.NumberValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetNumberValueNull() {
                this[this.tableCollectionTask.NumberValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsBoolValueNull() {
                return this.IsNull(this.tableCollectionTask.BoolValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetBoolValueNull() {
                this[this.tableCollectionTask.BoolValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMetricDescriptionNull() {
                return this.IsNull(this.tableCollectionTask.MetricDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMetricDescriptionNull() {
                this[this.tableCollectionTask.MetricDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMetricSourceNull() {
                return this.IsNull(this.tableCollectionTask.MetricSourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMetricSourceNull() {
                this[this.tableCollectionTask.MetricSourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMetricUnitNull() {
                return this.IsNull(this.tableCollectionTask.MetricUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMetricUnitNull() {
                this[this.tableCollectionTask.MetricUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsResponsibleAgentNull() {
                return this.IsNull(this.tableCollectionTask.ResponsibleAgentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetResponsibleAgentNull() {
                this[this.tableCollectionTask.ResponsibleAgentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsResponsibleAgentURINull() {
                return this.IsNull(this.tableCollectionTask.ResponsibleAgentURIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetResponsibleAgentURINull() {
                this[this.tableCollectionTask.ResponsibleAgentURIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableCollectionTask.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDescriptionNull() {
                this[this.tableCollectionTask.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsNotesNull() {
                return this.IsNull(this.tableCollectionTask.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetNotesNull() {
                this[this.tableCollectionTask.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTransactionIDNull() {
                return this.IsNull(this.tableCollectionTask.TransactionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTransactionIDNull() {
                this[this.tableCollectionTask.TransactionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskRow[] GetCollectionTaskRows() {
                if ((this.Table.ChildRelations["FK_CollectionTask_CollectionTask"] == null)) {
                    return new CollectionTaskRow[0];
                }
                else {
                    return ((CollectionTaskRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CollectionTask_CollectionTask"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskImageRow[] GetCollectionTaskImageRows() {
                if ((this.Table.ChildRelations["FK_CollectionTaskImage_CollectionTask"] == null)) {
                    return new CollectionTaskImageRow[0];
                }
                else {
                    return ((CollectionTaskImageRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CollectionTaskImage_CollectionTask"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskMetricRow[] GetCollectionTaskMetricRows() {
                if ((this.Table.ChildRelations["FK_CollectionTaskMetric_CollectionTask"] == null)) {
                    return new CollectionTaskMetricRow[0];
                }
                else {
                    return ((CollectionTaskMetricRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CollectionTaskMetric_CollectionTask"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ChartRow[] GetChartRows() {
                if ((this.Table.ChildRelations["FK_CollectionTaskMetric_CollectionTask1"] == null)) {
                    return new ChartRow[0];
                }
                else {
                    return ((ChartRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CollectionTaskMetric_CollectionTask1"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CollectionTaskImageRow : global::System.Data.DataRow {
            
            private CollectionTaskImageDataTable tableCollectionTaskImage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal CollectionTaskImageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCollectionTaskImage = ((CollectionTaskImageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int CollectionTaskID {
                get {
                    return ((int)(this[this.tableCollectionTaskImage.CollectionTaskIDColumn]));
                }
                set {
                    this[this.tableCollectionTaskImage.CollectionTaskIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string URI {
                get {
                    return ((string)(this[this.tableCollectionTaskImage.URIColumn]));
                }
                set {
                    this[this.tableCollectionTaskImage.URIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ImageType {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.ImageTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte ImageType in Tabelle CollectionTaskImage ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.ImageTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Notes in Tabelle CollectionTaskImage ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Description in Tabelle CollectionTaskImage ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.TitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Title in Tabelle CollectionTaskImage ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string IPR {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.IPRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte IPR in Tabelle CollectionTaskImage ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.IPRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CreatorAgent {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.CreatorAgentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte CreatorAgent in Tabelle CollectionTaskImage ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.CreatorAgentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CreatorAgentURI {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.CreatorAgentURIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte CreatorAgentURI in Tabelle CollectionTaskImage ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.CreatorAgentURIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CopyrightStatement {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.CopyrightStatementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte CopyrightStatement in Tabelle CollectionTaskImage ist DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.CopyrightStatementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LicenseType {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.LicenseTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LicenseType in Tabelle CollectionTaskImage ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.LicenseTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string InternalNotes {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.InternalNotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte InternalNotes in Tabelle CollectionTaskImage ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.InternalNotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LicenseHolder {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.LicenseHolderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LicenseHolder in Tabelle CollectionTaskImage ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.LicenseHolderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LicenseHolderAgentURI {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.LicenseHolderAgentURIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LicenseHolderAgentURI in Tabelle CollectionTaskImage ist DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.LicenseHolderAgentURIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LicenseYear {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.LicenseYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LicenseYear in Tabelle CollectionTaskImage ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.LicenseYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public short DisplayOrder {
                get {
                    try {
                        return ((short)(this[this.tableCollectionTaskImage.DisplayOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DisplayOrder in Tabelle CollectionTaskImage ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.DisplayOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string DataWithholdingReason {
                get {
                    try {
                        return ((string)(this[this.tableCollectionTaskImage.DataWithholdingReasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte DataWithholdingReason in Tabelle CollectionTaskImage ist DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.DataWithholdingReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime LogInsertedWhen {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCollectionTaskImage.LogInsertedWhenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte LogInsertedWhen in Tabelle CollectionTaskImage ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskImage.LogInsertedWhenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskRow CollectionTaskRow {
                get {
                    return ((CollectionTaskRow)(this.GetParentRow(this.Table.ParentRelations["FK_CollectionTaskImage_CollectionTask"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CollectionTaskImage_CollectionTask"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsImageTypeNull() {
                return this.IsNull(this.tableCollectionTaskImage.ImageTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetImageTypeNull() {
                this[this.tableCollectionTaskImage.ImageTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsNotesNull() {
                return this.IsNull(this.tableCollectionTaskImage.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetNotesNull() {
                this[this.tableCollectionTaskImage.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableCollectionTaskImage.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDescriptionNull() {
                this[this.tableCollectionTaskImage.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTitleNull() {
                return this.IsNull(this.tableCollectionTaskImage.TitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTitleNull() {
                this[this.tableCollectionTaskImage.TitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsIPRNull() {
                return this.IsNull(this.tableCollectionTaskImage.IPRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetIPRNull() {
                this[this.tableCollectionTaskImage.IPRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCreatorAgentNull() {
                return this.IsNull(this.tableCollectionTaskImage.CreatorAgentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCreatorAgentNull() {
                this[this.tableCollectionTaskImage.CreatorAgentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCreatorAgentURINull() {
                return this.IsNull(this.tableCollectionTaskImage.CreatorAgentURIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCreatorAgentURINull() {
                this[this.tableCollectionTaskImage.CreatorAgentURIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCopyrightStatementNull() {
                return this.IsNull(this.tableCollectionTaskImage.CopyrightStatementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCopyrightStatementNull() {
                this[this.tableCollectionTaskImage.CopyrightStatementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLicenseTypeNull() {
                return this.IsNull(this.tableCollectionTaskImage.LicenseTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLicenseTypeNull() {
                this[this.tableCollectionTaskImage.LicenseTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsInternalNotesNull() {
                return this.IsNull(this.tableCollectionTaskImage.InternalNotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetInternalNotesNull() {
                this[this.tableCollectionTaskImage.InternalNotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLicenseHolderNull() {
                return this.IsNull(this.tableCollectionTaskImage.LicenseHolderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLicenseHolderNull() {
                this[this.tableCollectionTaskImage.LicenseHolderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLicenseHolderAgentURINull() {
                return this.IsNull(this.tableCollectionTaskImage.LicenseHolderAgentURIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLicenseHolderAgentURINull() {
                this[this.tableCollectionTaskImage.LicenseHolderAgentURIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLicenseYearNull() {
                return this.IsNull(this.tableCollectionTaskImage.LicenseYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLicenseYearNull() {
                this[this.tableCollectionTaskImage.LicenseYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDisplayOrderNull() {
                return this.IsNull(this.tableCollectionTaskImage.DisplayOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDisplayOrderNull() {
                this[this.tableCollectionTaskImage.DisplayOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDataWithholdingReasonNull() {
                return this.IsNull(this.tableCollectionTaskImage.DataWithholdingReasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDataWithholdingReasonNull() {
                this[this.tableCollectionTaskImage.DataWithholdingReasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLogInsertedWhenNull() {
                return this.IsNull(this.tableCollectionTaskImage.LogInsertedWhenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLogInsertedWhenNull() {
                this[this.tableCollectionTaskImage.LogInsertedWhenColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CollectionTaskMetricRow : global::System.Data.DataRow {
            
            private CollectionTaskMetricDataTable tableCollectionTaskMetric;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal CollectionTaskMetricRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCollectionTaskMetric = ((CollectionTaskMetricDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int CollectionTaskID {
                get {
                    return ((int)(this[this.tableCollectionTaskMetric.CollectionTaskIDColumn]));
                }
                set {
                    this[this.tableCollectionTaskMetric.CollectionTaskIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime MetricDate {
                get {
                    return ((global::System.DateTime)(this[this.tableCollectionTaskMetric.MetricDateColumn]));
                }
                set {
                    this[this.tableCollectionTaskMetric.MetricDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public float MetricValue {
                get {
                    try {
                        return ((float)(this[this.tableCollectionTaskMetric.MetricValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MetricValue in Tabelle CollectionTaskMetric ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollectionTaskMetric.MetricValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Aggregation {
                get {
                    return ((string)(this[this.tableCollectionTaskMetric.AggregationColumn]));
                }
                set {
                    this[this.tableCollectionTaskMetric.AggregationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskRow CollectionTaskRow {
                get {
                    return ((CollectionTaskRow)(this.GetParentRow(this.Table.ParentRelations["FK_CollectionTaskMetric_CollectionTask"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CollectionTaskMetric_CollectionTask"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMetricValueNull() {
                return this.IsNull(this.tableCollectionTaskMetric.MetricValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMetricValueNull() {
                this[this.tableCollectionTaskMetric.MetricValueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ChartRow : global::System.Data.DataRow {
            
            private ChartDataTable tableChart;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ChartRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableChart = ((ChartDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int CollectionTaskID {
                get {
                    return ((int)(this[this.tableChart.CollectionTaskIDColumn]));
                }
                set {
                    this[this.tableChart.CollectionTaskIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime MetricDate {
                get {
                    return ((global::System.DateTime)(this[this.tableChart.MetricDateColumn]));
                }
                set {
                    this[this.tableChart.MetricDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public float MetricValue {
                get {
                    try {
                        return ((float)(this[this.tableChart.MetricValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MetricValue in Tabelle Chart ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableChart.MetricValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string MetricType {
                get {
                    try {
                        return ((string)(this[this.tableChart.MetricTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte MetricType in Tabelle Chart ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableChart.MetricTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskRow CollectionTaskRow {
                get {
                    return ((CollectionTaskRow)(this.GetParentRow(this.Table.ParentRelations["FK_CollectionTaskMetric_CollectionTask1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CollectionTaskMetric_CollectionTask1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMetricValueNull() {
                return this.IsNull(this.tableChart.MetricValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMetricValueNull() {
                this[this.tableChart.MetricValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsMetricTypeNull() {
                return this.IsNull(this.tableChart.MetricTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetMetricTypeNull() {
                this[this.tableChart.MetricTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class CollectionTaskRowChangeEvent : global::System.EventArgs {
            
            private CollectionTaskRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskRowChangeEvent(CollectionTaskRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class CollectionTaskImageRowChangeEvent : global::System.EventArgs {
            
            private CollectionTaskImageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskImageRowChangeEvent(CollectionTaskImageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskImageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class CollectionTaskMetricRowChangeEvent : global::System.EventArgs {
            
            private CollectionTaskMetricRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskMetricRowChangeEvent(CollectionTaskMetricRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public CollectionTaskMetricRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class ChartRowChangeEvent : global::System.EventArgs {
            
            private ChartRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ChartRowChangeEvent(ChartRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ChartRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DiversityCollection.Tasks.DataSetCollectionTaskTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CollectionTaskTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public CollectionTaskTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CollectionTask";
            tableMapping.ColumnMappings.Add("CollectionTaskID", "CollectionTaskID");
            tableMapping.ColumnMappings.Add("CollectionTaskParentID", "CollectionTaskParentID");
            tableMapping.ColumnMappings.Add("CollectionID", "CollectionID");
            tableMapping.ColumnMappings.Add("TaskID", "TaskID");
            tableMapping.ColumnMappings.Add("DisplayOrder", "DisplayOrder");
            tableMapping.ColumnMappings.Add("DisplayText", "DisplayText");
            tableMapping.ColumnMappings.Add("CollectionSpecimenID", "CollectionSpecimenID");
            tableMapping.ColumnMappings.Add("SpecimenPartID", "SpecimenPartID");
            tableMapping.ColumnMappings.Add("ModuleUri", "ModuleUri");
            tableMapping.ColumnMappings.Add("TaskStart", "TaskStart");
            tableMapping.ColumnMappings.Add("TaskEnd", "TaskEnd");
            tableMapping.ColumnMappings.Add("Result", "Result");
            tableMapping.ColumnMappings.Add("URI", "URI");
            tableMapping.ColumnMappings.Add("NumberValue", "NumberValue");
            tableMapping.ColumnMappings.Add("BoolValue", "BoolValue");
            tableMapping.ColumnMappings.Add("MetricDescription", "MetricDescription");
            tableMapping.ColumnMappings.Add("MetricSource", "MetricSource");
            tableMapping.ColumnMappings.Add("MetricUnit", "MetricUnit");
            tableMapping.ColumnMappings.Add("ResponsibleAgent", "ResponsibleAgent");
            tableMapping.ColumnMappings.Add("ResponsibleAgentURI", "ResponsibleAgentURI");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("TransactionID", "TransactionID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [CollectionTask] WHERE (([CollectionTaskID] = @Original_CollectionTas" +
                "kID) AND ((@IsNull_CollectionTaskParentID = 1 AND [CollectionTaskParentID] IS NU" +
                "LL) OR ([CollectionTaskParentID] = @Original_CollectionTaskParentID)) AND ([Coll" +
                "ectionID] = @Original_CollectionID) AND ([TaskID] = @Original_TaskID) AND ((@IsN" +
                "ull_DisplayOrder = 1 AND [DisplayOrder] IS NULL) OR ([DisplayOrder] = @Original_" +
                "DisplayOrder)) AND ((@IsNull_DisplayText = 1 AND [DisplayText] IS NULL) OR ([Dis" +
                "playText] = @Original_DisplayText)) AND ((@IsNull_CollectionSpecimenID = 1 AND [" +
                "CollectionSpecimenID] IS NULL) OR ([CollectionSpecimenID] = @Original_Collection" +
                "SpecimenID)) AND ((@IsNull_SpecimenPartID = 1 AND [SpecimenPartID] IS NULL) OR (" +
                "[SpecimenPartID] = @Original_SpecimenPartID)) AND ((@IsNull_TransactionID = 1 AN" +
                "D [TransactionID] IS NULL) OR ([TransactionID] = @Original_TransactionID)) AND (" +
                "(@IsNull_ModuleUri = 1 AND [ModuleUri] IS NULL) OR ([ModuleUri] = @Original_Modu" +
                "leUri)) AND ((@IsNull_TaskStart = 1 AND [TaskStart] IS NULL) OR ([TaskStart] = @" +
                "Original_TaskStart)) AND ((@IsNull_TaskEnd = 1 AND [TaskEnd] IS NULL) OR ([TaskE" +
                "nd] = @Original_TaskEnd)) AND ((@IsNull_Result = 1 AND [Result] IS NULL) OR ([Re" +
                "sult] = @Original_Result)) AND ((@IsNull_URI = 1 AND [URI] IS NULL) OR ([URI] = " +
                "@Original_URI)) AND ((@IsNull_NumberValue = 1 AND [NumberValue] IS NULL) OR ([Nu" +
                "mberValue] = @Original_NumberValue)) AND ((@IsNull_BoolValue = 1 AND [BoolValue]" +
                " IS NULL) OR ([BoolValue] = @Original_BoolValue)) AND ((@IsNull_MetricDescriptio" +
                "n = 1 AND [MetricDescription] IS NULL) OR ([MetricDescription] = @Original_Metri" +
                "cDescription)) AND ((@IsNull_MetricSource = 1 AND [MetricSource] IS NULL) OR ([M" +
                "etricSource] = @Original_MetricSource)) AND ((@IsNull_MetricUnit = 1 AND [Metric" +
                "Unit] IS NULL) OR ([MetricUnit] = @Original_MetricUnit)) AND ((@IsNull_Responsib" +
                "leAgent = 1 AND [ResponsibleAgent] IS NULL) OR ([ResponsibleAgent] = @Original_R" +
                "esponsibleAgent)) AND ((@IsNull_ResponsibleAgentURI = 1 AND [ResponsibleAgentURI" +
                "] IS NULL) OR ([ResponsibleAgentURI] = @Original_ResponsibleAgentURI)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectionTaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CollectionTaskParentID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskParentID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectionTaskParentID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskParentID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectionID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TaskID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DisplayOrder";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DisplayOrder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DisplayOrder";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DisplayOrder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DisplayText";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DisplayText";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DisplayText";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DisplayText";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CollectionSpecimenID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionSpecimenID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectionSpecimenID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionSpecimenID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SpecimenPartID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SpecimenPartID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SpecimenPartID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SpecimenPartID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransactionID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransactionID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransactionID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransactionID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ModuleUri";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ModuleUri";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ModuleUri";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ModuleUri";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TaskStart";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TaskStart";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TaskStart";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "TaskStart";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TaskEnd";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TaskEnd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TaskEnd";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "TaskEnd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Result";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Result";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Result";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Result";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_URI";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "URI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_URI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "URI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_NumberValue";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "NumberValue";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_NumberValue";
            param.DbType = global::System.Data.DbType.Single;
            param.SqlDbType = global::System.Data.SqlDbType.Real;
            param.IsNullable = true;
            param.SourceColumn = "NumberValue";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_BoolValue";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "BoolValue";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_BoolValue";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "BoolValue";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_MetricDescription";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "MetricDescription";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_MetricDescription";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "MetricDescription";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_MetricSource";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "MetricSource";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_MetricSource";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "MetricSource";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_MetricUnit";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "MetricUnit";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_MetricUnit";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "MetricUnit";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ResponsibleAgent";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ResponsibleAgent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ResponsibleAgent";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ResponsibleAgent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ResponsibleAgentURI";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ResponsibleAgentURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ResponsibleAgentURI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ResponsibleAgentURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [CollectionTask] ([CollectionTaskParentID], [CollectionID], [TaskID], [DisplayOrder], [DisplayText], [CollectionSpecimenID], [SpecimenPartID], [TransactionID], [ModuleUri], [TaskStart], [TaskEnd], [Result], [URI], [NumberValue], [BoolValue], [MetricDescription], [MetricSource], [MetricUnit], [ResponsibleAgent], [ResponsibleAgentURI], [Description], [Notes]) VALUES (@CollectionTaskParentID, @CollectionID, @TaskID, @DisplayOrder, @DisplayText, @CollectionSpecimenID, @SpecimenPartID, @TransactionID, @ModuleUri, @TaskStart, @TaskEnd, @Result, @URI, @NumberValue, @BoolValue, @MetricDescription, @MetricSource, @MetricUnit, @ResponsibleAgent, @ResponsibleAgentURI, @Description, @Notes);
SELECT CollectionTaskID, CollectionTaskParentID, CollectionID, TaskID, DisplayOrder, DisplayText, CollectionSpecimenID, SpecimenPartID, TransactionID, ModuleUri, TaskStart, TaskEnd, Result, URI, NumberValue, BoolValue, MetricDescription, MetricSource, MetricUnit, ResponsibleAgent, ResponsibleAgentURI, Description, Notes FROM CollectionTask WHERE (CollectionTaskID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CollectionTaskParentID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskParentID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CollectionID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TaskID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DisplayOrder";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DisplayOrder";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DisplayText";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DisplayText";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CollectionSpecimenID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionSpecimenID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SpecimenPartID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SpecimenPartID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransactionID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransactionID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ModuleUri";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ModuleUri";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TaskStart";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "TaskStart";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TaskEnd";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "TaskEnd";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Result";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Result";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@URI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "URI";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@NumberValue";
            param.DbType = global::System.Data.DbType.Single;
            param.SqlDbType = global::System.Data.SqlDbType.Real;
            param.IsNullable = true;
            param.SourceColumn = "NumberValue";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@BoolValue";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "BoolValue";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@MetricDescription";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "MetricDescription";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@MetricSource";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "MetricSource";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@MetricUnit";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "MetricUnit";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ResponsibleAgent";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ResponsibleAgent";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ResponsibleAgentURI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ResponsibleAgentURI";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Description";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Description";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Notes";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Notes";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [CollectionTask] SET [CollectionTaskParentID] = @CollectionTaskParentID, [" +
                "CollectionID] = @CollectionID, [TaskID] = @TaskID, [DisplayOrder] = @DisplayOrde" +
                "r, [DisplayText] = @DisplayText, [CollectionSpecimenID] = @CollectionSpecimenID," +
                " [SpecimenPartID] = @SpecimenPartID, [TransactionID] = @TransactionID, [ModuleUr" +
                "i] = @ModuleUri, [TaskStart] = @TaskStart, [TaskEnd] = @TaskEnd, [Result] = @Res" +
                "ult, [URI] = @URI, [NumberValue] = @NumberValue, [BoolValue] = @BoolValue, [Metr" +
                "icDescription] = @MetricDescription, [MetricSource] = @MetricSource, [MetricUnit" +
                "] = @MetricUnit, [ResponsibleAgent] = @ResponsibleAgent, [ResponsibleAgentURI] =" +
                " @ResponsibleAgentURI, [Description] = @Description, [Notes] = @Notes WHERE (([C" +
                "ollectionTaskID] = @Original_CollectionTaskID) AND ((@IsNull_CollectionTaskParen" +
                "tID = 1 AND [CollectionTaskParentID] IS NULL) OR ([CollectionTaskParentID] = @Or" +
                "iginal_CollectionTaskParentID)) AND ([CollectionID] = @Original_CollectionID) AN" +
                "D ([TaskID] = @Original_TaskID) AND ((@IsNull_DisplayOrder = 1 AND [DisplayOrder" +
                "] IS NULL) OR ([DisplayOrder] = @Original_DisplayOrder)) AND ((@IsNull_DisplayTe" +
                "xt = 1 AND [DisplayText] IS NULL) OR ([DisplayText] = @Original_DisplayText)) AN" +
                "D ((@IsNull_CollectionSpecimenID = 1 AND [CollectionSpecimenID] IS NULL) OR ([Co" +
                "llectionSpecimenID] = @Original_CollectionSpecimenID)) AND ((@IsNull_SpecimenPar" +
                "tID = 1 AND [SpecimenPartID] IS NULL) OR ([SpecimenPartID] = @Original_SpecimenP" +
                "artID)) AND ((@IsNull_TransactionID = 1 AND [TransactionID] IS NULL) OR ([Transa" +
                "ctionID] = @Original_TransactionID)) AND ((@IsNull_ModuleUri = 1 AND [ModuleUri]" +
                " IS NULL) OR ([ModuleUri] = @Original_ModuleUri)) AND ((@IsNull_TaskStart = 1 AN" +
                "D [TaskStart] IS NULL) OR ([TaskStart] = @Original_TaskStart)) AND ((@IsNull_Tas" +
                "kEnd = 1 AND [TaskEnd] IS NULL) OR ([TaskEnd] = @Original_TaskEnd)) AND ((@IsNul" +
                "l_Result = 1 AND [Result] IS NULL) OR ([Result] = @Original_Result)) AND ((@IsNu" +
                "ll_URI = 1 AND [URI] IS NULL) OR ([URI] = @Original_URI)) AND ((@IsNull_NumberVa" +
                "lue = 1 AND [NumberValue] IS NULL) OR ([NumberValue] = @Original_NumberValue)) A" +
                "ND ((@IsNull_BoolValue = 1 AND [BoolValue] IS NULL) OR ([BoolValue] = @Original_" +
                "BoolValue)) AND ((@IsNull_MetricDescription = 1 AND [MetricDescription] IS NULL)" +
                " OR ([MetricDescription] = @Original_MetricDescription)) AND ((@IsNull_MetricSou" +
                "rce = 1 AND [MetricSource] IS NULL) OR ([MetricSource] = @Original_MetricSource)" +
                ") AND ((@IsNull_MetricUnit = 1 AND [MetricUnit] IS NULL) OR ([MetricUnit] = @Ori" +
                "ginal_MetricUnit)) AND ((@IsNull_ResponsibleAgent = 1 AND [ResponsibleAgent] IS " +
                "NULL) OR ([ResponsibleAgent] = @Original_ResponsibleAgent)) AND ((@IsNull_Respon" +
                "sibleAgentURI = 1 AND [ResponsibleAgentURI] IS NULL) OR ([ResponsibleAgentURI] =" +
                " @Original_ResponsibleAgentURI)));\r\nSELECT CollectionTaskID, CollectionTaskParen" +
                "tID, CollectionID, TaskID, DisplayOrder, DisplayText, CollectionSpecimenID, Spec" +
                "imenPartID, TransactionID, ModuleUri, TaskStart, TaskEnd, Result, URI, NumberVal" +
                "ue, BoolValue, MetricDescription, MetricSource, MetricUnit, ResponsibleAgent, Re" +
                "sponsibleAgentURI, Description, Notes FROM CollectionTask WHERE (CollectionTaskI" +
                "D = @CollectionTaskID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CollectionTaskParentID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskParentID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CollectionID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TaskID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DisplayOrder";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DisplayOrder";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DisplayText";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DisplayText";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CollectionSpecimenID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionSpecimenID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@SpecimenPartID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SpecimenPartID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TransactionID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransactionID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ModuleUri";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ModuleUri";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TaskStart";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "TaskStart";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@TaskEnd";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "TaskEnd";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Result";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Result";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@URI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "URI";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@NumberValue";
            param.DbType = global::System.Data.DbType.Single;
            param.SqlDbType = global::System.Data.SqlDbType.Real;
            param.IsNullable = true;
            param.SourceColumn = "NumberValue";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@BoolValue";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "BoolValue";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@MetricDescription";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "MetricDescription";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@MetricSource";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "MetricSource";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@MetricUnit";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "MetricUnit";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ResponsibleAgent";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ResponsibleAgent";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ResponsibleAgentURI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ResponsibleAgentURI";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Description";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Description";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Notes";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Notes";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectionTaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CollectionTaskParentID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskParentID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectionTaskParentID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskParentID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectionID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TaskID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DisplayOrder";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DisplayOrder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DisplayOrder";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DisplayOrder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DisplayText";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DisplayText";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DisplayText";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DisplayText";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CollectionSpecimenID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionSpecimenID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectionSpecimenID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionSpecimenID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_SpecimenPartID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SpecimenPartID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_SpecimenPartID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "SpecimenPartID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TransactionID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransactionID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TransactionID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TransactionID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ModuleUri";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ModuleUri";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ModuleUri";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ModuleUri";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TaskStart";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TaskStart";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TaskStart";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "TaskStart";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_TaskEnd";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "TaskEnd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_TaskEnd";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "TaskEnd";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Result";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Result";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Result";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Result";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_URI";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "URI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_URI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "URI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_NumberValue";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "NumberValue";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_NumberValue";
            param.DbType = global::System.Data.DbType.Single;
            param.SqlDbType = global::System.Data.SqlDbType.Real;
            param.IsNullable = true;
            param.SourceColumn = "NumberValue";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_BoolValue";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "BoolValue";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_BoolValue";
            param.DbType = global::System.Data.DbType.Boolean;
            param.SqlDbType = global::System.Data.SqlDbType.Bit;
            param.IsNullable = true;
            param.SourceColumn = "BoolValue";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_MetricDescription";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "MetricDescription";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_MetricDescription";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "MetricDescription";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_MetricSource";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "MetricSource";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_MetricSource";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "MetricSource";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_MetricUnit";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "MetricUnit";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_MetricUnit";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "MetricUnit";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ResponsibleAgent";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ResponsibleAgent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ResponsibleAgent";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ResponsibleAgent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ResponsibleAgentURI";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ResponsibleAgentURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ResponsibleAgentURI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "ResponsibleAgentURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CollectionTaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.Size = 4;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskID";
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollection_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        CollectionTaskID, CollectionTaskParentID, CollectionID, TaskID, DisplayOrder, DisplayText, CollectionSpecimenID, SpecimenPartID, TransactionID, ModuleUri, TaskStart, TaskEnd, Result, URI, NumberValue, BoolValue, 
                         MetricDescription, MetricSource, MetricUnit, ResponsibleAgent, ResponsibleAgentURI, Description, Notes
FROM            CollectionTask";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCollectionTask.CollectionTaskDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCollectionTask.CollectionTaskDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCollectionTask.CollectionTaskDataTable dataTable = new DataSetCollectionTask.CollectionTaskDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCollectionTask.CollectionTaskDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCollectionTask dataSet) {
            return this.Adapter.Update(dataSet, "CollectionTask");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_CollectionTaskID, 
                    global::System.Nullable<int> Original_CollectionTaskParentID, 
                    int Original_CollectionID, 
                    int Original_TaskID, 
                    global::System.Nullable<int> Original_DisplayOrder, 
                    string Original_DisplayText, 
                    global::System.Nullable<int> Original_CollectionSpecimenID, 
                    global::System.Nullable<int> Original_SpecimenPartID, 
                    global::System.Nullable<int> Original_TransactionID, 
                    string Original_ModuleUri, 
                    global::System.Nullable<global::System.DateTime> Original_TaskStart, 
                    global::System.Nullable<global::System.DateTime> Original_TaskEnd, 
                    string Original_Result, 
                    string Original_URI, 
                    global::System.Nullable<float> Original_NumberValue, 
                    global::System.Nullable<bool> Original_BoolValue, 
                    string Original_MetricDescription, 
                    string Original_MetricSource, 
                    string Original_MetricUnit, 
                    string Original_ResponsibleAgent, 
                    string Original_ResponsibleAgentURI) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CollectionTaskID));
            if ((Original_CollectionTaskParentID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_CollectionTaskParentID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_CollectionID));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_TaskID));
            if ((Original_DisplayOrder.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_DisplayOrder.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_DisplayText == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_DisplayText));
            }
            if ((Original_CollectionSpecimenID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_CollectionSpecimenID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_SpecimenPartID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_SpecimenPartID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_TransactionID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_TransactionID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_ModuleUri == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_ModuleUri));
            }
            if ((Original_TaskStart.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((System.DateTime)(Original_TaskStart.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_TaskEnd.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((System.DateTime)(Original_TaskEnd.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_Result == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_Result));
            }
            if ((Original_URI == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_URI));
            }
            if ((Original_NumberValue.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((float)(Original_NumberValue.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_BoolValue.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((bool)(Original_BoolValue.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_MetricDescription == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_MetricDescription));
            }
            if ((Original_MetricSource == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_MetricSource));
            }
            if ((Original_MetricUnit == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_MetricUnit));
            }
            if ((Original_ResponsibleAgent == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_ResponsibleAgent));
            }
            if ((Original_ResponsibleAgentURI == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_ResponsibleAgentURI));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> CollectionTaskParentID, 
                    int CollectionID, 
                    int TaskID, 
                    global::System.Nullable<int> DisplayOrder, 
                    string DisplayText, 
                    global::System.Nullable<int> CollectionSpecimenID, 
                    global::System.Nullable<int> SpecimenPartID, 
                    global::System.Nullable<int> TransactionID, 
                    string ModuleUri, 
                    global::System.Nullable<global::System.DateTime> TaskStart, 
                    global::System.Nullable<global::System.DateTime> TaskEnd, 
                    string Result, 
                    string URI, 
                    global::System.Nullable<float> NumberValue, 
                    global::System.Nullable<bool> BoolValue, 
                    string MetricDescription, 
                    string MetricSource, 
                    string MetricUnit, 
                    string ResponsibleAgent, 
                    string ResponsibleAgentURI, 
                    string Description, 
                    string Notes) {
            if ((CollectionTaskParentID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CollectionTaskParentID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(CollectionID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(TaskID));
            if ((DisplayOrder.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(DisplayOrder.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DisplayText == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DisplayText));
            }
            if ((CollectionSpecimenID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(CollectionSpecimenID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((SpecimenPartID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(SpecimenPartID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((TransactionID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(TransactionID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((ModuleUri == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(ModuleUri));
            }
            if ((TaskStart.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(TaskStart.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((TaskEnd.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((System.DateTime)(TaskEnd.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Result == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Result));
            }
            if ((URI == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(URI));
            }
            if ((NumberValue.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((float)(NumberValue.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((BoolValue.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((bool)(BoolValue.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((MetricDescription == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(MetricDescription));
            }
            if ((MetricSource == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(MetricSource));
            }
            if ((MetricUnit == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(MetricUnit));
            }
            if ((ResponsibleAgent == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(ResponsibleAgent));
            }
            if ((ResponsibleAgentURI == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(ResponsibleAgentURI));
            }
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Description));
            }
            if ((Notes == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(Notes));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> CollectionTaskParentID, 
                    int CollectionID, 
                    int TaskID, 
                    global::System.Nullable<int> DisplayOrder, 
                    string DisplayText, 
                    global::System.Nullable<int> CollectionSpecimenID, 
                    global::System.Nullable<int> SpecimenPartID, 
                    global::System.Nullable<int> TransactionID, 
                    string ModuleUri, 
                    global::System.Nullable<global::System.DateTime> TaskStart, 
                    global::System.Nullable<global::System.DateTime> TaskEnd, 
                    string Result, 
                    string URI, 
                    global::System.Nullable<float> NumberValue, 
                    global::System.Nullable<bool> BoolValue, 
                    string MetricDescription, 
                    string MetricSource, 
                    string MetricUnit, 
                    string ResponsibleAgent, 
                    string ResponsibleAgentURI, 
                    string Description, 
                    string Notes, 
                    int Original_CollectionTaskID, 
                    global::System.Nullable<int> Original_CollectionTaskParentID, 
                    int Original_CollectionID, 
                    int Original_TaskID, 
                    global::System.Nullable<int> Original_DisplayOrder, 
                    string Original_DisplayText, 
                    global::System.Nullable<int> Original_CollectionSpecimenID, 
                    global::System.Nullable<int> Original_SpecimenPartID, 
                    global::System.Nullable<int> Original_TransactionID, 
                    string Original_ModuleUri, 
                    global::System.Nullable<global::System.DateTime> Original_TaskStart, 
                    global::System.Nullable<global::System.DateTime> Original_TaskEnd, 
                    string Original_Result, 
                    string Original_URI, 
                    global::System.Nullable<float> Original_NumberValue, 
                    global::System.Nullable<bool> Original_BoolValue, 
                    string Original_MetricDescription, 
                    string Original_MetricSource, 
                    string Original_MetricUnit, 
                    string Original_ResponsibleAgent, 
                    string Original_ResponsibleAgentURI, 
                    int CollectionTaskID) {
            if ((CollectionTaskParentID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CollectionTaskParentID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(CollectionID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(TaskID));
            if ((DisplayOrder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(DisplayOrder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DisplayText == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DisplayText));
            }
            if ((CollectionSpecimenID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(CollectionSpecimenID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((SpecimenPartID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(SpecimenPartID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((TransactionID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(TransactionID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((ModuleUri == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(ModuleUri));
            }
            if ((TaskStart.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(TaskStart.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((TaskEnd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(TaskEnd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Result == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Result));
            }
            if ((URI == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(URI));
            }
            if ((NumberValue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((float)(NumberValue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((BoolValue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((bool)(BoolValue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((MetricDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(MetricDescription));
            }
            if ((MetricSource == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(MetricSource));
            }
            if ((MetricUnit == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(MetricUnit));
            }
            if ((ResponsibleAgent == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(ResponsibleAgent));
            }
            if ((ResponsibleAgentURI == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(ResponsibleAgentURI));
            }
            if ((Description == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Description));
            }
            if ((Notes == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Notes));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_CollectionTaskID));
            if ((Original_CollectionTaskParentID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_CollectionTaskParentID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(Original_CollectionID));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_TaskID));
            if ((Original_DisplayOrder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(Original_DisplayOrder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_DisplayText == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_DisplayText));
            }
            if ((Original_CollectionSpecimenID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_CollectionSpecimenID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_SpecimenPartID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_SpecimenPartID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_TransactionID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(Original_TransactionID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_ModuleUri == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_ModuleUri));
            }
            if ((Original_TaskStart.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((System.DateTime)(Original_TaskStart.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_TaskEnd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((System.DateTime)(Original_TaskEnd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_Result == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_Result));
            }
            if ((Original_URI == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_URI));
            }
            if ((Original_NumberValue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((float)(Original_NumberValue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_BoolValue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((bool)(Original_BoolValue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_MetricDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((string)(Original_MetricDescription));
            }
            if ((Original_MetricSource == null)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((string)(Original_MetricSource));
            }
            if ((Original_MetricUnit == null)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((string)(Original_MetricUnit));
            }
            if ((Original_ResponsibleAgent == null)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((string)(Original_ResponsibleAgent));
            }
            if ((Original_ResponsibleAgentURI == null)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((string)(Original_ResponsibleAgentURI));
            }
            this.Adapter.UpdateCommand.Parameters[61].Value = ((int)(CollectionTaskID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> CollectionTaskParentID, 
                    int CollectionID, 
                    int TaskID, 
                    global::System.Nullable<int> DisplayOrder, 
                    string DisplayText, 
                    global::System.Nullable<int> CollectionSpecimenID, 
                    global::System.Nullable<int> SpecimenPartID, 
                    global::System.Nullable<int> TransactionID, 
                    string ModuleUri, 
                    global::System.Nullable<global::System.DateTime> TaskStart, 
                    global::System.Nullable<global::System.DateTime> TaskEnd, 
                    string Result, 
                    string URI, 
                    global::System.Nullable<float> NumberValue, 
                    global::System.Nullable<bool> BoolValue, 
                    string MetricDescription, 
                    string MetricSource, 
                    string MetricUnit, 
                    string ResponsibleAgent, 
                    string ResponsibleAgentURI, 
                    string Description, 
                    string Notes, 
                    int Original_CollectionTaskID, 
                    global::System.Nullable<int> Original_CollectionTaskParentID, 
                    int Original_CollectionID, 
                    int Original_TaskID, 
                    global::System.Nullable<int> Original_DisplayOrder, 
                    string Original_DisplayText, 
                    global::System.Nullable<int> Original_CollectionSpecimenID, 
                    global::System.Nullable<int> Original_SpecimenPartID, 
                    global::System.Nullable<int> Original_TransactionID, 
                    string Original_ModuleUri, 
                    global::System.Nullable<global::System.DateTime> Original_TaskStart, 
                    global::System.Nullable<global::System.DateTime> Original_TaskEnd, 
                    string Original_Result, 
                    string Original_URI, 
                    global::System.Nullable<float> Original_NumberValue, 
                    global::System.Nullable<bool> Original_BoolValue, 
                    string Original_MetricDescription, 
                    string Original_MetricSource, 
                    string Original_MetricUnit, 
                    string Original_ResponsibleAgent, 
                    string Original_ResponsibleAgentURI) {
            return this.Update(CollectionTaskParentID, CollectionID, TaskID, DisplayOrder, DisplayText, CollectionSpecimenID, SpecimenPartID, TransactionID, ModuleUri, TaskStart, TaskEnd, Result, URI, NumberValue, BoolValue, MetricDescription, MetricSource, MetricUnit, ResponsibleAgent, ResponsibleAgentURI, Description, Notes, Original_CollectionTaskID, Original_CollectionTaskParentID, Original_CollectionID, Original_TaskID, Original_DisplayOrder, Original_DisplayText, Original_CollectionSpecimenID, Original_SpecimenPartID, Original_TransactionID, Original_ModuleUri, Original_TaskStart, Original_TaskEnd, Original_Result, Original_URI, Original_NumberValue, Original_BoolValue, Original_MetricDescription, Original_MetricSource, Original_MetricUnit, Original_ResponsibleAgent, Original_ResponsibleAgentURI, Original_CollectionTaskID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CollectionTaskImageTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public CollectionTaskImageTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CollectionTaskImage";
            tableMapping.ColumnMappings.Add("CollectionTaskID", "CollectionTaskID");
            tableMapping.ColumnMappings.Add("URI", "URI");
            tableMapping.ColumnMappings.Add("ImageType", "ImageType");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("IPR", "IPR");
            tableMapping.ColumnMappings.Add("CreatorAgent", "CreatorAgent");
            tableMapping.ColumnMappings.Add("CreatorAgentURI", "CreatorAgentURI");
            tableMapping.ColumnMappings.Add("CopyrightStatement", "CopyrightStatement");
            tableMapping.ColumnMappings.Add("LicenseType", "LicenseType");
            tableMapping.ColumnMappings.Add("InternalNotes", "InternalNotes");
            tableMapping.ColumnMappings.Add("LicenseHolder", "LicenseHolder");
            tableMapping.ColumnMappings.Add("LicenseHolderAgentURI", "LicenseHolderAgentURI");
            tableMapping.ColumnMappings.Add("LicenseYear", "LicenseYear");
            tableMapping.ColumnMappings.Add("DisplayOrder", "DisplayOrder");
            tableMapping.ColumnMappings.Add("DataWithholdingReason", "DataWithholdingReason");
            tableMapping.ColumnMappings.Add("LogInsertedWhen", "LogInsertedWhen");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [CollectionTaskImage] WHERE (([CollectionTaskID] = @Original_Collecti" +
                "onTaskID) AND ([URI] = @Original_URI) AND ((@IsNull_ImageType = 1 AND [ImageType" +
                "] IS NULL) OR ([ImageType] = @Original_ImageType)) AND ((@IsNull_Title = 1 AND [" +
                "Title] IS NULL) OR ([Title] = @Original_Title)) AND ((@IsNull_IPR = 1 AND [IPR] " +
                "IS NULL) OR ([IPR] = @Original_IPR)) AND ((@IsNull_CreatorAgent = 1 AND [Creator" +
                "Agent] IS NULL) OR ([CreatorAgent] = @Original_CreatorAgent)) AND ((@IsNull_Crea" +
                "torAgentURI = 1 AND [CreatorAgentURI] IS NULL) OR ([CreatorAgentURI] = @Original" +
                "_CreatorAgentURI)) AND ((@IsNull_CopyrightStatement = 1 AND [CopyrightStatement]" +
                " IS NULL) OR ([CopyrightStatement] = @Original_CopyrightStatement)) AND ((@IsNul" +
                "l_LicenseType = 1 AND [LicenseType] IS NULL) OR ([LicenseType] = @Original_Licen" +
                "seType)) AND ((@IsNull_InternalNotes = 1 AND [InternalNotes] IS NULL) OR ([Inter" +
                "nalNotes] = @Original_InternalNotes)) AND ((@IsNull_LicenseHolder = 1 AND [Licen" +
                "seHolder] IS NULL) OR ([LicenseHolder] = @Original_LicenseHolder)) AND ((@IsNull" +
                "_LicenseHolderAgentURI = 1 AND [LicenseHolderAgentURI] IS NULL) OR ([LicenseHold" +
                "erAgentURI] = @Original_LicenseHolderAgentURI)) AND ((@IsNull_LicenseYear = 1 AN" +
                "D [LicenseYear] IS NULL) OR ([LicenseYear] = @Original_LicenseYear)) AND ((@IsNu" +
                "ll_DisplayOrder = 1 AND [DisplayOrder] IS NULL) OR ([DisplayOrder] = @Original_D" +
                "isplayOrder)) AND ((@IsNull_DataWithholdingReason = 1 AND [DataWithholdingReason" +
                "] IS NULL) OR ([DataWithholdingReason] = @Original_DataWithholdingReason)) AND (" +
                "(@IsNull_LogInsertedWhen = 1 AND [LogInsertedWhen] IS NULL) OR ([LogInsertedWhen" +
                "] = @Original_LogInsertedWhen)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectionTaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_URI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "URI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ImageType";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ImageType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ImageType";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ImageType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Title";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Title";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Title";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Title";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_IPR";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "IPR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_IPR";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "IPR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CreatorAgent";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CreatorAgent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CreatorAgent";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "CreatorAgent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CreatorAgentURI";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CreatorAgentURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CreatorAgentURI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CreatorAgentURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CopyrightStatement";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CopyrightStatement";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CopyrightStatement";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "CopyrightStatement";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LicenseType";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LicenseType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LicenseType";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_InternalNotes";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "InternalNotes";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_InternalNotes";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "InternalNotes";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LicenseHolder";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LicenseHolder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LicenseHolder";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseHolder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LicenseHolderAgentURI";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LicenseHolderAgentURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LicenseHolderAgentURI";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseHolderAgentURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LicenseYear";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LicenseYear";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LicenseYear";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseYear";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DisplayOrder";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DisplayOrder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DisplayOrder";
            param.DbType = global::System.Data.DbType.Int16;
            param.SqlDbType = global::System.Data.SqlDbType.SmallInt;
            param.IsNullable = true;
            param.SourceColumn = "DisplayOrder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DataWithholdingReason";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DataWithholdingReason";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DataWithholdingReason";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DataWithholdingReason";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LogInsertedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LogInsertedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [CollectionTaskImage] ([CollectionTaskID], [URI], [ImageType], [Notes], [Description], [Title], [IPR], [CreatorAgent], [CreatorAgentURI], [CopyrightStatement], [LicenseType], [InternalNotes], [LicenseHolder], [LicenseHolderAgentURI], [LicenseYear], [DisplayOrder], [DataWithholdingReason], [LogInsertedWhen]) VALUES (@CollectionTaskID, @URI, @ImageType, @Notes, @Description, @Title, @IPR, @CreatorAgent, @CreatorAgentURI, @CopyrightStatement, @LicenseType, @InternalNotes, @LicenseHolder, @LicenseHolderAgentURI, @LicenseYear, @DisplayOrder, @DataWithholdingReason, @LogInsertedWhen);
SELECT CollectionTaskID, URI, ImageType, Notes, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, DataWithholdingReason, LogInsertedWhen FROM CollectionTaskImage WHERE (CollectionTaskID = @CollectionTaskID) AND (URI = @URI)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CollectionTaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@URI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "URI";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ImageType";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ImageType";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Notes";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Notes";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Description";
            param.DbType = global::System.Data.DbType.Xml;
            param.SqlDbType = global::System.Data.SqlDbType.Xml;
            param.IsNullable = true;
            param.SourceColumn = "Description";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Title";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Title";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IPR";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "IPR";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CreatorAgent";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "CreatorAgent";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CreatorAgentURI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CreatorAgentURI";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CopyrightStatement";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "CopyrightStatement";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LicenseType";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseType";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@InternalNotes";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "InternalNotes";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LicenseHolder";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseHolder";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LicenseHolderAgentURI";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseHolderAgentURI";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LicenseYear";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseYear";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DisplayOrder";
            param.DbType = global::System.Data.DbType.Int16;
            param.SqlDbType = global::System.Data.SqlDbType.SmallInt;
            param.IsNullable = true;
            param.SourceColumn = "DisplayOrder";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DataWithholdingReason";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DataWithholdingReason";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LogInsertedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedWhen";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [CollectionTaskImage] SET [CollectionTaskID] = @CollectionTaskID, [URI] = " +
                "@URI, [ImageType] = @ImageType, [Notes] = @Notes, [Description] = @Description, " +
                "[Title] = @Title, [IPR] = @IPR, [CreatorAgent] = @CreatorAgent, [CreatorAgentURI" +
                "] = @CreatorAgentURI, [CopyrightStatement] = @CopyrightStatement, [LicenseType] " +
                "= @LicenseType, [InternalNotes] = @InternalNotes, [LicenseHolder] = @LicenseHold" +
                "er, [LicenseHolderAgentURI] = @LicenseHolderAgentURI, [LicenseYear] = @LicenseYe" +
                "ar, [DisplayOrder] = @DisplayOrder, [DataWithholdingReason] = @DataWithholdingRe" +
                "ason, [LogInsertedWhen] = @LogInsertedWhen WHERE (([CollectionTaskID] = @Origina" +
                "l_CollectionTaskID) AND ([URI] = @Original_URI) AND ((@IsNull_ImageType = 1 AND " +
                "[ImageType] IS NULL) OR ([ImageType] = @Original_ImageType)) AND ((@IsNull_Title" +
                " = 1 AND [Title] IS NULL) OR ([Title] = @Original_Title)) AND ((@IsNull_IPR = 1 " +
                "AND [IPR] IS NULL) OR ([IPR] = @Original_IPR)) AND ((@IsNull_CreatorAgent = 1 AN" +
                "D [CreatorAgent] IS NULL) OR ([CreatorAgent] = @Original_CreatorAgent)) AND ((@I" +
                "sNull_CreatorAgentURI = 1 AND [CreatorAgentURI] IS NULL) OR ([CreatorAgentURI] =" +
                " @Original_CreatorAgentURI)) AND ((@IsNull_CopyrightStatement = 1 AND [Copyright" +
                "Statement] IS NULL) OR ([CopyrightStatement] = @Original_CopyrightStatement)) AN" +
                "D ((@IsNull_LicenseType = 1 AND [LicenseType] IS NULL) OR ([LicenseType] = @Orig" +
                "inal_LicenseType)) AND ((@IsNull_InternalNotes = 1 AND [InternalNotes] IS NULL) " +
                "OR ([InternalNotes] = @Original_InternalNotes)) AND ((@IsNull_LicenseHolder = 1 " +
                "AND [LicenseHolder] IS NULL) OR ([LicenseHolder] = @Original_LicenseHolder)) AND" +
                " ((@IsNull_LicenseHolderAgentURI = 1 AND [LicenseHolderAgentURI] IS NULL) OR ([L" +
                "icenseHolderAgentURI] = @Original_LicenseHolderAgentURI)) AND ((@IsNull_LicenseY" +
                "ear = 1 AND [LicenseYear] IS NULL) OR ([LicenseYear] = @Original_LicenseYear)) A" +
                "ND ((@IsNull_DisplayOrder = 1 AND [DisplayOrder] IS NULL) OR ([DisplayOrder] = @" +
                "Original_DisplayOrder)) AND ((@IsNull_DataWithholdingReason = 1 AND [DataWithhol" +
                "dingReason] IS NULL) OR ([DataWithholdingReason] = @Original_DataWithholdingReas" +
                "on)) AND ((@IsNull_LogInsertedWhen = 1 AND [LogInsertedWhen] IS NULL) OR ([LogIn" +
                "sertedWhen] = @Original_LogInsertedWhen)));\r\nSELECT CollectionTaskID, URI, Image" +
                "Type, Notes, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightSt" +
                "atement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, Licen" +
                "seYear, DisplayOrder, DataWithholdingReason, LogInsertedWhen FROM CollectionTask" +
                "Image WHERE (CollectionTaskID = @CollectionTaskID) AND (URI = @URI)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CollectionTaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@URI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "URI";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@ImageType";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ImageType";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Notes";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Notes";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Description";
            param.DbType = global::System.Data.DbType.Xml;
            param.SqlDbType = global::System.Data.SqlDbType.Xml;
            param.IsNullable = true;
            param.SourceColumn = "Description";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Title";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Title";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IPR";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "IPR";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CreatorAgent";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "CreatorAgent";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CreatorAgentURI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CreatorAgentURI";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CopyrightStatement";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "CopyrightStatement";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LicenseType";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseType";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@InternalNotes";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "InternalNotes";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LicenseHolder";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseHolder";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LicenseHolderAgentURI";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseHolderAgentURI";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LicenseYear";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseYear";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DisplayOrder";
            param.DbType = global::System.Data.DbType.Int16;
            param.SqlDbType = global::System.Data.SqlDbType.SmallInt;
            param.IsNullable = true;
            param.SourceColumn = "DisplayOrder";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@DataWithholdingReason";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DataWithholdingReason";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@LogInsertedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedWhen";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectionTaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_URI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "URI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_ImageType";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "ImageType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_ImageType";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "ImageType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_Title";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "Title";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_Title";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Title";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_IPR";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "IPR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_IPR";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "IPR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CreatorAgent";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CreatorAgent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CreatorAgent";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "CreatorAgent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CreatorAgentURI";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CreatorAgentURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CreatorAgentURI";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SqlDbType = global::System.Data.SqlDbType.VarChar;
            param.IsNullable = true;
            param.SourceColumn = "CreatorAgentURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_CopyrightStatement";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CopyrightStatement";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CopyrightStatement";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "CopyrightStatement";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LicenseType";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LicenseType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LicenseType";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_InternalNotes";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "InternalNotes";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_InternalNotes";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "InternalNotes";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LicenseHolder";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LicenseHolder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LicenseHolder";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseHolder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LicenseHolderAgentURI";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LicenseHolderAgentURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LicenseHolderAgentURI";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseHolderAgentURI";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LicenseYear";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LicenseYear";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LicenseYear";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "LicenseYear";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DisplayOrder";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DisplayOrder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DisplayOrder";
            param.DbType = global::System.Data.DbType.Int16;
            param.SqlDbType = global::System.Data.SqlDbType.SmallInt;
            param.IsNullable = true;
            param.SourceColumn = "DisplayOrder";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_DataWithholdingReason";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "DataWithholdingReason";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_DataWithholdingReason";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "DataWithholdingReason";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_LogInsertedWhen";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_LogInsertedWhen";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "LogInsertedWhen";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollection_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        CollectionTaskID, URI, ImageType, Notes, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, 
                         DataWithholdingReason, LogInsertedWhen
FROM            CollectionTaskImage";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCollectionTask.CollectionTaskImageDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCollectionTask.CollectionTaskImageDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCollectionTask.CollectionTaskImageDataTable dataTable = new DataSetCollectionTask.CollectionTaskImageDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCollectionTask.CollectionTaskImageDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCollectionTask dataSet) {
            return this.Adapter.Update(dataSet, "CollectionTaskImage");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_CollectionTaskID, 
                    string Original_URI, 
                    string Original_ImageType, 
                    string Original_Title, 
                    string Original_IPR, 
                    string Original_CreatorAgent, 
                    string Original_CreatorAgentURI, 
                    string Original_CopyrightStatement, 
                    string Original_LicenseType, 
                    string Original_InternalNotes, 
                    string Original_LicenseHolder, 
                    string Original_LicenseHolderAgentURI, 
                    string Original_LicenseYear, 
                    global::System.Nullable<short> Original_DisplayOrder, 
                    string Original_DataWithholdingReason, 
                    global::System.Nullable<global::System.DateTime> Original_LogInsertedWhen) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CollectionTaskID));
            if ((Original_URI == null)) {
                throw new global::System.ArgumentNullException("Original_URI");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_URI));
            }
            if ((Original_ImageType == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_ImageType));
            }
            if ((Original_Title == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Title));
            }
            if ((Original_IPR == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_IPR));
            }
            if ((Original_CreatorAgent == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_CreatorAgent));
            }
            if ((Original_CreatorAgentURI == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_CreatorAgentURI));
            }
            if ((Original_CopyrightStatement == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_CopyrightStatement));
            }
            if ((Original_LicenseType == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_LicenseType));
            }
            if ((Original_InternalNotes == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_InternalNotes));
            }
            if ((Original_LicenseHolder == null)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_LicenseHolder));
            }
            if ((Original_LicenseHolderAgentURI == null)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_LicenseHolderAgentURI));
            }
            if ((Original_LicenseYear == null)) {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_LicenseYear));
            }
            if ((Original_DisplayOrder.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[25].Value = ((short)(Original_DisplayOrder.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_DataWithholdingReason == null)) {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[27].Value = ((string)(Original_DataWithholdingReason));
            }
            if ((Original_LogInsertedWhen.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[29].Value = ((System.DateTime)(Original_LogInsertedWhen.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int CollectionTaskID, 
                    string URI, 
                    string ImageType, 
                    string Notes, 
                    object Description, 
                    string Title, 
                    string IPR, 
                    string CreatorAgent, 
                    string CreatorAgentURI, 
                    string CopyrightStatement, 
                    string LicenseType, 
                    string InternalNotes, 
                    string LicenseHolder, 
                    string LicenseHolderAgentURI, 
                    string LicenseYear, 
                    global::System.Nullable<short> DisplayOrder, 
                    string DataWithholdingReason, 
                    global::System.Nullable<global::System.DateTime> LogInsertedWhen) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CollectionTaskID));
            if ((URI == null)) {
                throw new global::System.ArgumentNullException("URI");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(URI));
            }
            if ((ImageType == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ImageType));
            }
            if ((Notes == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Notes));
            }
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((object)(Description));
            }
            if ((Title == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Title));
            }
            if ((IPR == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(IPR));
            }
            if ((CreatorAgent == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(CreatorAgent));
            }
            if ((CreatorAgentURI == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(CreatorAgentURI));
            }
            if ((CopyrightStatement == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(CopyrightStatement));
            }
            if ((LicenseType == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(LicenseType));
            }
            if ((InternalNotes == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(InternalNotes));
            }
            if ((LicenseHolder == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(LicenseHolder));
            }
            if ((LicenseHolderAgentURI == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(LicenseHolderAgentURI));
            }
            if ((LicenseYear == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(LicenseYear));
            }
            if ((DisplayOrder.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((short)(DisplayOrder.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((DataWithholdingReason == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(DataWithholdingReason));
            }
            if ((LogInsertedWhen.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((System.DateTime)(LogInsertedWhen.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int CollectionTaskID, 
                    string URI, 
                    string ImageType, 
                    string Notes, 
                    object Description, 
                    string Title, 
                    string IPR, 
                    string CreatorAgent, 
                    string CreatorAgentURI, 
                    string CopyrightStatement, 
                    string LicenseType, 
                    string InternalNotes, 
                    string LicenseHolder, 
                    string LicenseHolderAgentURI, 
                    string LicenseYear, 
                    global::System.Nullable<short> DisplayOrder, 
                    string DataWithholdingReason, 
                    global::System.Nullable<global::System.DateTime> LogInsertedWhen, 
                    int Original_CollectionTaskID, 
                    string Original_URI, 
                    string Original_ImageType, 
                    string Original_Title, 
                    string Original_IPR, 
                    string Original_CreatorAgent, 
                    string Original_CreatorAgentURI, 
                    string Original_CopyrightStatement, 
                    string Original_LicenseType, 
                    string Original_InternalNotes, 
                    string Original_LicenseHolder, 
                    string Original_LicenseHolderAgentURI, 
                    string Original_LicenseYear, 
                    global::System.Nullable<short> Original_DisplayOrder, 
                    string Original_DataWithholdingReason, 
                    global::System.Nullable<global::System.DateTime> Original_LogInsertedWhen) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CollectionTaskID));
            if ((URI == null)) {
                throw new global::System.ArgumentNullException("URI");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(URI));
            }
            if ((ImageType == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ImageType));
            }
            if ((Notes == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Notes));
            }
            if ((Description == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(Description));
            }
            if ((Title == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Title));
            }
            if ((IPR == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(IPR));
            }
            if ((CreatorAgent == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(CreatorAgent));
            }
            if ((CreatorAgentURI == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(CreatorAgentURI));
            }
            if ((CopyrightStatement == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(CopyrightStatement));
            }
            if ((LicenseType == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(LicenseType));
            }
            if ((InternalNotes == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(InternalNotes));
            }
            if ((LicenseHolder == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(LicenseHolder));
            }
            if ((LicenseHolderAgentURI == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(LicenseHolderAgentURI));
            }
            if ((LicenseYear == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(LicenseYear));
            }
            if ((DisplayOrder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((short)(DisplayOrder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((DataWithholdingReason == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(DataWithholdingReason));
            }
            if ((LogInsertedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(LogInsertedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_CollectionTaskID));
            if ((Original_URI == null)) {
                throw new global::System.ArgumentNullException("Original_URI");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_URI));
            }
            if ((Original_ImageType == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_ImageType));
            }
            if ((Original_Title == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_Title));
            }
            if ((Original_IPR == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_IPR));
            }
            if ((Original_CreatorAgent == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_CreatorAgent));
            }
            if ((Original_CreatorAgentURI == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_CreatorAgentURI));
            }
            if ((Original_CopyrightStatement == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_CopyrightStatement));
            }
            if ((Original_LicenseType == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_LicenseType));
            }
            if ((Original_InternalNotes == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_InternalNotes));
            }
            if ((Original_LicenseHolder == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_LicenseHolder));
            }
            if ((Original_LicenseHolderAgentURI == null)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_LicenseHolderAgentURI));
            }
            if ((Original_LicenseYear == null)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_LicenseYear));
            }
            if ((Original_DisplayOrder.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((short)(Original_DisplayOrder.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((Original_DataWithholdingReason == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_DataWithholdingReason));
            }
            if ((Original_LogInsertedWhen.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((System.DateTime)(Original_LogInsertedWhen.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ImageType, 
                    string Notes, 
                    object Description, 
                    string Title, 
                    string IPR, 
                    string CreatorAgent, 
                    string CreatorAgentURI, 
                    string CopyrightStatement, 
                    string LicenseType, 
                    string InternalNotes, 
                    string LicenseHolder, 
                    string LicenseHolderAgentURI, 
                    string LicenseYear, 
                    global::System.Nullable<short> DisplayOrder, 
                    string DataWithholdingReason, 
                    global::System.Nullable<global::System.DateTime> LogInsertedWhen, 
                    int Original_CollectionTaskID, 
                    string Original_URI, 
                    string Original_ImageType, 
                    string Original_Title, 
                    string Original_IPR, 
                    string Original_CreatorAgent, 
                    string Original_CreatorAgentURI, 
                    string Original_CopyrightStatement, 
                    string Original_LicenseType, 
                    string Original_InternalNotes, 
                    string Original_LicenseHolder, 
                    string Original_LicenseHolderAgentURI, 
                    string Original_LicenseYear, 
                    global::System.Nullable<short> Original_DisplayOrder, 
                    string Original_DataWithholdingReason, 
                    global::System.Nullable<global::System.DateTime> Original_LogInsertedWhen) {
            return this.Update(Original_CollectionTaskID, Original_URI, ImageType, Notes, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, DataWithholdingReason, LogInsertedWhen, Original_CollectionTaskID, Original_URI, Original_ImageType, Original_Title, Original_IPR, Original_CreatorAgent, Original_CreatorAgentURI, Original_CopyrightStatement, Original_LicenseType, Original_InternalNotes, Original_LicenseHolder, Original_LicenseHolderAgentURI, Original_LicenseYear, Original_DisplayOrder, Original_DataWithholdingReason, Original_LogInsertedWhen);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CollectionTaskMetricTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public CollectionTaskMetricTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CollectionTaskMetric";
            tableMapping.ColumnMappings.Add("CollectionTaskID", "CollectionTaskID");
            tableMapping.ColumnMappings.Add("MetricDate", "MetricDate");
            tableMapping.ColumnMappings.Add("MetricValue", "MetricValue");
            tableMapping.ColumnMappings.Add("Aggregation", "Aggregation");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [CollectionTaskMetric] WHERE (([CollectionTaskID] = @Original_Collect" +
                "ionTaskID) AND ([MetricDate] = @Original_MetricDate) AND ((@IsNull_MetricValue =" +
                " 1 AND [MetricValue] IS NULL) OR ([MetricValue] = @Original_MetricValue)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Microsoft.Data.SqlClient.SqlParameter param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectionTaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_MetricDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "MetricDate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_MetricValue";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "MetricValue";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_MetricValue";
            param.DbType = global::System.Data.DbType.Single;
            param.SqlDbType = global::System.Data.SqlDbType.Real;
            param.IsNullable = true;
            param.SourceColumn = "MetricValue";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [CollectionTaskMetric] ([CollectionTaskID], [MetricDate], [Aggregation], [MetricValue]) VALUES (@CollectionTaskID, @MetricDate, @Aggregation, @MetricValue);
SELECT CollectionTaskID, MetricDate, Aggregation, MetricValue FROM CollectionTaskMetric WHERE (Aggregation = @Aggregation) AND (CollectionTaskID = @CollectionTaskID) AND (MetricDate = @MetricDate)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CollectionTaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@MetricDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "MetricDate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Aggregation";
            param.SqlDbType = global::System.Data.SqlDbType.NVarChar;
            param.IsNullable = true;
            param.SourceColumn = "Aggregation";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@MetricValue";
            param.DbType = global::System.Data.DbType.Single;
            param.SqlDbType = global::System.Data.SqlDbType.Real;
            param.IsNullable = true;
            param.SourceColumn = "MetricValue";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [CollectionTaskMetric] SET [CollectionTaskID] = @CollectionTaskID, [MetricDate] = @MetricDate, [MetricValue] = @MetricValue WHERE (([CollectionTaskID] = @Original_CollectionTaskID) AND ([MetricDate] = @Original_MetricDate) AND ((@IsNull_MetricValue = 1 AND [MetricValue] IS NULL) OR ([MetricValue] = @Original_MetricValue)));
SELECT CollectionTaskID, MetricDate, MetricValue FROM CollectionTaskMetric WHERE (CollectionTaskID = @CollectionTaskID) AND (MetricDate = @MetricDate)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@CollectionTaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@MetricDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "MetricDate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@MetricValue";
            param.DbType = global::System.Data.DbType.Single;
            param.SqlDbType = global::System.Data.SqlDbType.Real;
            param.IsNullable = true;
            param.SourceColumn = "MetricValue";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_CollectionTaskID";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "CollectionTaskID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_MetricDate";
            param.DbType = global::System.Data.DbType.DateTime;
            param.SqlDbType = global::System.Data.SqlDbType.DateTime;
            param.IsNullable = true;
            param.SourceColumn = "MetricDate";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@IsNull_MetricValue";
            param.DbType = global::System.Data.DbType.Int32;
            param.SqlDbType = global::System.Data.SqlDbType.Int;
            param.IsNullable = true;
            param.SourceColumn = "MetricValue";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Microsoft.Data.SqlClient.SqlParameter();
            param.ParameterName = "@Original_MetricValue";
            param.DbType = global::System.Data.DbType.Single;
            param.SqlDbType = global::System.Data.SqlDbType.Real;
            param.IsNullable = true;
            param.SourceColumn = "MetricValue";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollection_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        CollectionTaskID, MetricDate, Aggregation, MetricValue\r\nFROM       " +
                "     CollectionTaskMetric";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCollectionTask.CollectionTaskMetricDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCollectionTask.CollectionTaskMetricDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCollectionTask.CollectionTaskMetricDataTable dataTable = new DataSetCollectionTask.CollectionTaskMetricDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCollectionTask.CollectionTaskMetricDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetCollectionTask dataSet) {
            return this.Adapter.Update(dataSet, "CollectionTaskMetric");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CollectionTaskID, System.DateTime Original_MetricDate, global::System.Nullable<float> Original_MetricValue) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CollectionTaskID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_MetricDate));
            if ((Original_MetricValue.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((float)(Original_MetricValue.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CollectionTaskID, System.DateTime MetricDate, string Aggregation, global::System.Nullable<float> MetricValue) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CollectionTaskID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(MetricDate));
            if ((Aggregation == null)) {
                throw new global::System.ArgumentNullException("Aggregation");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Aggregation));
            }
            if ((MetricValue.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((float)(MetricValue.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int CollectionTaskID, System.DateTime MetricDate, global::System.Nullable<float> MetricValue, int Original_CollectionTaskID, System.DateTime Original_MetricDate, global::System.Nullable<float> Original_MetricValue) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CollectionTaskID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(MetricDate));
            if ((MetricValue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((float)(MetricValue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_CollectionTaskID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(Original_MetricDate));
            if ((Original_MetricValue.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((float)(Original_MetricValue.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<float> MetricValue, int Original_CollectionTaskID, System.DateTime Original_MetricDate, global::System.Nullable<float> Original_MetricValue) {
            return this.Update(Original_CollectionTaskID, Original_MetricDate, MetricValue, Original_CollectionTaskID, Original_MetricDate, Original_MetricValue);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ChartTableAdapter : global::System.ComponentModel.Component {
        
        private global::Microsoft.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::Microsoft.Data.SqlClient.SqlConnection _connection;
        
        private global::Microsoft.Data.SqlClient.SqlTransaction _transaction;
        
        private global::Microsoft.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public ChartTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::Microsoft.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Microsoft.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::Microsoft.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Microsoft.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Chart";
            tableMapping.ColumnMappings.Add("CollectionTaskID", "CollectionTaskID");
            tableMapping.ColumnMappings.Add("MetricDate", "MetricDate");
            tableMapping.ColumnMappings.Add("MetricValue", "MetricValue");
            tableMapping.ColumnMappings.Add("MetricType", "MetricType");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Microsoft.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DiversityCollection.Properties.Settings.Default.DiversityCollection_TestConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Microsoft.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::Microsoft.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        M.CollectionTaskID, T.MetricType, M.MetricDate, M.MetricValue
FROM            CollectionTaskMetric AS M INNER JOIN
                         CollectionTask AS C ON M.CollectionTaskID = C.CollectionTaskID INNER JOIN
                         Task AS T ON C.TaskID = T.TaskID";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetCollectionTask.ChartDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetCollectionTask.ChartDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetCollectionTask.ChartDataTable dataTable = new DataSetCollectionTask.ChartDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private CollectionTaskTableAdapter _collectionTaskTableAdapter;
        
        private CollectionTaskImageTableAdapter _collectionTaskImageTableAdapter;
        
        private CollectionTaskMetricTableAdapter _collectionTaskMetricTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public CollectionTaskTableAdapter CollectionTaskTableAdapter {
            get {
                return this._collectionTaskTableAdapter;
            }
            set {
                this._collectionTaskTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public CollectionTaskImageTableAdapter CollectionTaskImageTableAdapter {
            get {
                return this._collectionTaskImageTableAdapter;
            }
            set {
                this._collectionTaskImageTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public CollectionTaskMetricTableAdapter CollectionTaskMetricTableAdapter {
            get {
                return this._collectionTaskMetricTableAdapter;
            }
            set {
                this._collectionTaskMetricTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._collectionTaskTableAdapter != null) 
                            && (this._collectionTaskTableAdapter.Connection != null))) {
                    return this._collectionTaskTableAdapter.Connection;
                }
                if (((this._collectionTaskImageTableAdapter != null) 
                            && (this._collectionTaskImageTableAdapter.Connection != null))) {
                    return this._collectionTaskImageTableAdapter.Connection;
                }
                if (((this._collectionTaskMetricTableAdapter != null) 
                            && (this._collectionTaskMetricTableAdapter.Connection != null))) {
                    return this._collectionTaskMetricTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._collectionTaskTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._collectionTaskImageTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._collectionTaskMetricTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(DataSetCollectionTask dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._collectionTaskTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CollectionTask.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    this.SortSelfReferenceRows(updatedRows, dataSet.Relations["FK_CollectionTask_CollectionTask"], false);
                    result = (result + this._collectionTaskTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._collectionTaskImageTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CollectionTaskImage.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._collectionTaskImageTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._collectionTaskMetricTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CollectionTaskMetric.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._collectionTaskMetricTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(DataSetCollectionTask dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._collectionTaskTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CollectionTask.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    this.SortSelfReferenceRows(addedRows, dataSet.Relations["FK_CollectionTask_CollectionTask"], false);
                    result = (result + this._collectionTaskTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._collectionTaskImageTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CollectionTaskImage.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._collectionTaskImageTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._collectionTaskMetricTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CollectionTaskMetric.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._collectionTaskMetricTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(DataSetCollectionTask dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._collectionTaskMetricTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CollectionTaskMetric.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._collectionTaskMetricTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._collectionTaskImageTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CollectionTaskImage.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._collectionTaskImageTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._collectionTaskTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CollectionTask.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    this.SortSelfReferenceRows(deletedRows, dataSet.Relations["FK_CollectionTask_CollectionTask"], true);
                    result = (result + this._collectionTaskTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(DataSetCollectionTask dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._collectionTaskTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._collectionTaskTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            if (((this._collectionTaskImageTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._collectionTaskImageTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            if (((this._collectionTaskMetricTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._collectionTaskMetricTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Für alle von einem TableAdapterManager verwalteten Instanzen von TableAdapter mus" +
                        "s die gleiche Verbindungszeichenfolge verwendet werden.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager enthält keine Verbindungsinformationen. Legen Sie jede TableA" +
                        "dapterManager TableAdapter-Eigenschaft auf eine gültige TableAdapter-Instanz fes" +
                        "t.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("Die Transaktion kann nicht gestartet werden. Die aktuelle Datenverbindung unterst" +
                        "ützt keine Transaktionen, oder der aktuelle Zustand lässt den Start der Transakt" +
                        "ion nicht zu.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._collectionTaskTableAdapter != null)) {
                    revertConnections.Add(this._collectionTaskTableAdapter, this._collectionTaskTableAdapter.Connection);
                    this._collectionTaskTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._collectionTaskTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._collectionTaskTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._collectionTaskTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._collectionTaskTableAdapter.Adapter);
                    }
                }
                if ((this._collectionTaskImageTableAdapter != null)) {
                    revertConnections.Add(this._collectionTaskImageTableAdapter, this._collectionTaskImageTableAdapter.Connection);
                    this._collectionTaskImageTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._collectionTaskImageTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._collectionTaskImageTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._collectionTaskImageTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._collectionTaskImageTableAdapter.Adapter);
                    }
                }
                if ((this._collectionTaskMetricTableAdapter != null)) {
                    revertConnections.Add(this._collectionTaskMetricTableAdapter, this._collectionTaskMetricTableAdapter.Connection);
                    this._collectionTaskMetricTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(workConnection));
                    this._collectionTaskMetricTableAdapter.Transaction = ((global::Microsoft.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._collectionTaskMetricTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._collectionTaskMetricTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._collectionTaskMetricTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._collectionTaskTableAdapter != null)) {
                    this._collectionTaskTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._collectionTaskTableAdapter]));
                    this._collectionTaskTableAdapter.Transaction = null;
                }
                if ((this._collectionTaskImageTableAdapter != null)) {
                    this._collectionTaskImageTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._collectionTaskImageTableAdapter]));
                    this._collectionTaskImageTableAdapter.Transaction = null;
                }
                if ((this._collectionTaskMetricTableAdapter != null)) {
                    this._collectionTaskMetricTableAdapter.Connection = ((global::Microsoft.Data.SqlClient.SqlConnection)(revertConnections[this._collectionTaskMetricTableAdapter]));
                    this._collectionTaskMetricTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591