/****** Object:  DatabaseRole [Administrator]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [Administrator]
GO
/****** Object:  DatabaseRole [CacheAdmin]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [CacheAdmin]
GO
/****** Object:  DatabaseRole [CacheUser]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [CacheUser]
GO
/****** Object:  DatabaseRole [CollectionManager]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [CollectionManager]
GO
/****** Object:  DatabaseRole [DataManager]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [DataManager]
GO
/****** Object:  DatabaseRole [DescriptionEditor]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [DescriptionEditor]
GO
/****** Object:  DatabaseRole [Editor]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [Editor]
GO
/****** Object:  DatabaseRole [RegulationManager]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [RegulationManager]
GO
/****** Object:  DatabaseRole [Replicator]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [Replicator]
GO
/****** Object:  DatabaseRole [Requester]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [Requester]
GO
/****** Object:  DatabaseRole [StorageManager]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [StorageManager]
GO
/****** Object:  DatabaseRole [TransactionUser]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [TransactionUser]
GO
/****** Object:  DatabaseRole [Typist]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [Typist]
GO
/****** Object:  DatabaseRole [User]    Script Date: 06.04.2021 17:13:29 ******/
CREATE ROLE [User]
GO
ALTER ROLE [Replicator] ADD MEMBER [Administrator]
GO
ALTER ROLE [DataManager] ADD MEMBER [Administrator]
GO
ALTER ROLE [CacheAdmin] ADD MEMBER [Administrator]
GO
ALTER ROLE [CollectionManager] ADD MEMBER [Administrator]
GO
ALTER ROLE [db_accessadmin] ADD MEMBER [Administrator]
GO
ALTER ROLE [db_securityadmin] ADD MEMBER [Administrator]
GO
ALTER ROLE [Editor] ADD MEMBER [Administrator]
GO
ALTER ROLE [CacheUser] ADD MEMBER [CacheAdmin]
GO
ALTER ROLE [User] ADD MEMBER [CacheUser]
GO
ALTER ROLE [StorageManager] ADD MEMBER [CollectionManager]
GO
ALTER ROLE [TransactionUser] ADD MEMBER [CollectionManager]
GO
ALTER ROLE [User] ADD MEMBER [CollectionManager]
GO
ALTER ROLE [Editor] ADD MEMBER [DataManager]
GO
ALTER ROLE [Typist] ADD MEMBER [Editor]
GO
ALTER ROLE [User] ADD MEMBER [Editor]
GO
ALTER ROLE [User] ADD MEMBER [StorageManager]
GO
ALTER ROLE [User] ADD MEMBER [Typist]
GO

--ALTER ROLE [Administrator] ADD MEMBER [dbo]
--GO

/****** Object:  Rule [ruleDay]    Script Date: 06.04.2021 17:13:29 ******/
CREATE RULE [dbo].[ruleDay] 
AS
@range >= 1 AND @range < 32
GO
/****** Object:  Rule [ruleMonth]    Script Date: 06.04.2021 17:13:29 ******/
CREATE RULE [dbo].[ruleMonth] 
AS
@range >= 1 AND @range < 13
GO
/****** Object:  Rule [ruleYear]    Script Date: 06.04.2021 17:13:29 ******/
CREATE RULE [dbo].[ruleYear] 
AS
@range >= 1 AND @range < getdate()+2
GO
/****** Object:  UserDefinedDataType [dbo].[dtDay]    Script Date: 06.04.2021 17:13:29 ******/
CREATE TYPE [dbo].[dtDay] FROM [tinyint] NOT NULL
GO
GRANT REFERENCES ON TYPE::[dbo].[dtDay] TO [public] AS [dbo]
GO
/****** Object:  UserDefinedDataType [dbo].[dtMonth]    Script Date: 06.04.2021 17:13:29 ******/
CREATE TYPE [dbo].[dtMonth] FROM [tinyint] NOT NULL
GO
GRANT REFERENCES ON TYPE::[dbo].[dtMonth] TO [public] AS [dbo]
GO
/****** Object:  UserDefinedDataType [dbo].[dtYear]    Script Date: 06.04.2021 17:13:29 ******/
CREATE TYPE [dbo].[dtYear] FROM [smallint] NOT NULL
GO
GRANT REFERENCES ON TYPE::[dbo].[dtYear] TO [public] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[AnalysisChildNodes]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   AnalysisChildNodes - Without using cursors  ################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[AnalysisChildNodes] (@ID int)  
RETURNS @ItemList TABLE (AnalysisID int primary key,
	AnalysisParentID int NULL ,
	DisplayText nvarchar (50)   NULL ,
	Description nvarchar  (500)   NULL ,
	MeasurementUnit nvarchar (50)   NULL ,
	Notes nvarchar  (1000)   NULL ,
	AnalysisURI varchar  (255)   NULL ,
	OnlyHierarchy [bit] NULL,
	RowGUID [uniqueidentifier] ROWGUIDCOL NULL)  

/*
Returns a result set that lists all the items within a hierarchy underneath the given item.
MW 14.05.2019
*/
AS
BEGIN
INSERT @ItemList (AnalysisID , AnalysisParentID, DisplayText , Description , MeasurementUnit, Notes , AnalysisURI, OnlyHierarchy, RowGUID) 
	SELECT AnalysisID , AnalysisParentID, DisplayText , Description , MeasurementUnit, Notes , AnalysisURI, OnlyHierarchy, RowGUID
	FROM Analysis WHERE AnalysisParentID = @ID 

declare @i int
set @i = (select count(*) from Analysis A, @ItemList T where A.AnalysisParentID = T.AnalysisID and A.AnalysisID not in (select AnalysisID from @ItemList))
while @i > 0
begin
	INSERT @ItemList (AnalysisID , AnalysisParentID, DisplayText , Description , MeasurementUnit, Notes , AnalysisURI, OnlyHierarchy, RowGUID) 
	SELECT A.AnalysisID , A.AnalysisParentID, A.DisplayText , A.Description , A.MeasurementUnit, A.Notes , A.AnalysisURI, A.OnlyHierarchy, A.RowGUID
	FROM Analysis A, @ItemList T WHERE A.AnalysisParentID = T.AnalysisID and A.AnalysisID not in (select AnalysisID from @ItemList)

	set @i = (select count(*) from Analysis A, @ItemList T where A.AnalysisParentID = T.AnalysisID and A.AnalysisID not in (select AnalysisID from @ItemList))
end
   RETURN
END

GO
GRANT SELECT ON [dbo].[AnalysisChildNodes] TO [User] AS [dbo]
GO


--#####################################################################################################################
--######   AnalysisHierarchy  #########################################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[AnalysisHierarchy] (@AnalysisID int)  
RETURNS @AnalysisList TABLE ([AnalysisID] [int] Primary key ,
	[AnalysisParentID] [int] NULL ,
	[DisplayText] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[Description] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL ,
	[MeasurementUnit] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[Notes] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL ,
	[AnalysisURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
	[OnlyHierarchy] [bit] NULL)  
/*
Returns a table that lists all the analysis items related to the given analysis.
MW 02.01.2006
Test
SELECT  *  FROM dbo.AnalysisHierarchy(82)
*/
AS
BEGIN
declare @TopID int
declare @i int
set @TopID = (select AnalysisParentID from Analysis where AnalysisID = @AnalysisID) 
set @i = (select count(*) from Analysis where AnalysisID = @AnalysisID)
if (@TopID is null )
	set @TopID =  @AnalysisID
else	
	begin
	while (@i > 0)
		begin
		set @AnalysisID = (select AnalysisParentID from Analysis where AnalysisID = @AnalysisID and not AnalysisParentID is null) 
		set @i = (select count(*) from Analysis where AnalysisID = @AnalysisID and not AnalysisParentID is null)
		end
	set @TopID = @AnalysisID
	end
   INSERT @AnalysisList
   SELECT DISTINCT AnalysisID, AnalysisParentID, DisplayText, cast(Description as nvarchar(1000)), MeasurementUnit, Notes, AnalysisURI, OnlyHierarchy
   FROM Analysis
   WHERE Analysis.AnalysisID = @TopID
   INSERT @AnalysisList
   SELECT AnalysisID, AnalysisParentID, DisplayText, cast(Description as nvarchar(1000)), MeasurementUnit, Notes, AnalysisURI, OnlyHierarchy 
   FROM dbo.AnalysisChildNodes (@TopID)
   /*DELETE A FROM @AnalysisList A
   WHERE A.OnlyHierarchy = 1*/
   RETURN
END
GO

GRANT SELECT ON [dbo].[AnalysisHierarchy] TO [User] AS [dbo]
GO



/****** Object:  UserDefinedFunction [dbo].[AnalysisHierarchyAll]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[AnalysisHierarchyAll] ()  
RETURNS @AnalysisList TABLE ([AnalysisID] [int] Primary key ,
	[AnalysisParentID] [int] NULL ,
	[DisplayText] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[MeasurementUnit] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[AnalysisURI] [varchar](255) NULL,
	[OnlyHierarchy] [bit] NULL,
	[HierarchyDisplayText] [varchar] (900) COLLATE Latin1_General_CI_AS NULL)
/*
Returns a table that lists all the analysis items related to the given analysis.
MW 02.01.2006
TEST:
SELECT * FROM DBO.AnalysisHierarchyAll()
*/
AS
BEGIN
INSERT @AnalysisList (AnalysisID, AnalysisParentID, DisplayText, Description, MeasurementUnit, Notes, AnalysisURI, OnlyHierarchy, HierarchyDisplayText)
SELECT DISTINCT AnalysisID, AnalysisParentID, DisplayText, Description, MeasurementUnit, Notes, AnalysisURI, OnlyHierarchy
, DisplayText
FROM Analysis
WHERE Analysis.AnalysisParentID IS NULL
declare @i int
set @i = (select count(*) from Analysis where AnalysisID not IN (select AnalysisID from  @AnalysisList))
while (@i > 0)
	begin
	INSERT @AnalysisList (AnalysisID, AnalysisParentID, DisplayText, Description, MeasurementUnit, Notes, AnalysisURI, OnlyHierarchy, HierarchyDisplayText)
	SELECT DISTINCT C.AnalysisID, C.AnalysisParentID, C.DisplayText, C.Description, C.MeasurementUnit, C.Notes, C.AnalysisURI, C.OnlyHierarchy, L.HierarchyDisplayText + ' | ' + C.DisplayText
	FROM Analysis C, @AnalysisList L
	WHERE C.AnalysisParentID = L.AnalysisID
	AND C.AnalysisID NOT IN (select AnalysisID from  @AnalysisList)
	set @i = (select count(*) from Analysis where AnalysisID not IN (select AnalysisID from  @AnalysisList))
end
   RETURN
END
GO
GRANT SELECT ON [dbo].[AnalysisHierarchyAll] TO [User] AS [dbo]
GO

/****** Object:  UserDefinedFunction [dbo].[AnalysisList]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--#####################################################################################################################
--################   AnalysisList   ###################################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[AnalysisList] 
(@ProjectID int, @TaxonomicGroup nvarchar(50))   
RETURNS @AnalysisList TABLE ([AnalysisID] [int] Primary key , 	
[AnalysisParentID] [int] NULL , 	
[DisplayText] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL , 	
[Description] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL , 	
[MeasurementUnit] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL , 	
[Notes] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL , 	
[AnalysisURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL, 	
[DisplayTextHierarchy] nvarchar (255),
[OnlyHierarchy] [bit] NULL)    
/* 
Returns a table that lists all the analysis items related to the given project. 
MW 08.08.2009 
TEST: Select * from AnalysisList(3, 'fungus')  
*/ 
AS 
BEGIN  
INSERT INTO @AnalysisList            
([AnalysisID]            
,[AnalysisParentID]            
,[DisplayText]            
,[Description]            
,[MeasurementUnit]            
,[Notes]            
,[AnalysisURI]            
,[DisplayTextHierarchy]
,[OnlyHierarchy]) 
SELECT A.AnalysisID, A.AnalysisParentID, A.DisplayText, A.Description, A.MeasurementUnit, 
A.Notes, A.AnalysisURI,  	
CASE WHEN Appp.DisplayText IS NULL  	
THEN '' ELSE Appp.DisplayText + ' - ' END 
+ CASE WHEN App.DisplayText IS NULL  	
THEN '' ELSE App.DisplayText + ' - ' END 
+ CASE WHEN Ap.DisplayText IS NULL  	
THEN '' ELSE Ap.DisplayText + ' - ' END + A.DisplayText  	
+ CASE WHEN A.MeasurementUnit IS NULL THEN '' ELSE ' [' + A.MeasurementUnit + ']' END  	
AS DisplayTextHierarchy, A.OnlyHierarchy
FROM Analysis AS Appp 
RIGHT OUTER JOIN Analysis AS App ON Appp.AnalysisID = App.AnalysisParentID 
RIGHT OUTER JOIN 	Analysis AS Ap ON App.AnalysisID = Ap.AnalysisParentID 
RIGHT OUTER JOIN 	Analysis AS A 
INNER JOIN 	AnalysisTaxonomicGroup AS T ON A.AnalysisID = T.AnalysisID 
INNER JOIN 	ProjectAnalysis AS P ON A.AnalysisID = P.AnalysisID ON Ap.AnalysisID = A.AnalysisParentID 
WHERE (T.TaxonomicGroup = @TaxonomicGroup)  AND (P.ProjectID = @ProjectID)  
DECLARE @TempItem TABLE (AnalysisID int primary key) 
INSERT INTO @TempItem ([AnalysisID]) 
SELECT AnalysisID FROM  @AnalysisList  
declare @ParentID int  
DECLARE HierarchyCursor  CURSOR for 	select AnalysisID from @TempItem 	
open HierarchyCursor 	
FETCH next from HierarchyCursor into @ParentID 	
WHILE @@FETCH_STATUS = 0 	
BEGIN 	
insert into @AnalysisList  	(AnalysisID , AnalysisParentID, DisplayText , Description , 
MeasurementUnit, Notes , AnalysisURI, DisplayTextHierarchy, OnlyHierarchy) 	
select A.AnalysisID , A.AnalysisParentID, A.DisplayText , A.Description , 
A.MeasurementUnit, A.Notes , A.AnalysisURI, 	
CASE WHEN Appp.DisplayText IS NULL  	
THEN '' ELSE Appp.DisplayText + ' - ' END + CASE WHEN App.DisplayText IS NULL  	
THEN '' ELSE App.DisplayText + ' - ' END + CASE WHEN Ap.DisplayText IS NULL  	
THEN '' ELSE Ap.DisplayText + ' - ' END + A.DisplayText  	
+ CASE WHEN A.MeasurementUnit IS NULL THEN '' ELSE ' [' + A.MeasurementUnit + ']' END  	
AS DisplayTextHierarchy, A.OnlyHierarchy 	
FROM Analysis AS Appp 
RIGHT OUTER JOIN Analysis AS App ON Appp.AnalysisID = App.AnalysisParentID 
RIGHT OUTER JOIN 	Analysis AS Ap ON App.AnalysisID = Ap.AnalysisParentID 
RIGHT OUTER JOIN 	dbo.AnalysisChildNodes (@ParentID) AS A  ON Ap.AnalysisID = A.AnalysisParentID 
where A.AnalysisID not in (select AnalysisID from @AnalysisList) 	
FETCH NEXT FROM HierarchyCursor into @ParentID 	
END 
CLOSE HierarchyCursor 
DEALLOCATE HierarchyCursor     

RETURN 
END   
GO
GRANT SELECT ON [dbo].[AnalysisList] TO [User] AS [dbo]
GO

/****** Object:  UserDefinedFunction [dbo].[AnalysisListForUnit]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   AnalysisListForUnit - Restrict length of text fields  ######################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[AnalysisListForUnit] (@IdentificationUnitID int)   
RETURNS @AnalysisList TABLE ([AnalysisID] [int] Primary key , 	
	[AnalysisParentID] [int] NULL , 	
	[DisplayText] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL , 	
	[Description] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL , 	
	[MeasurementUnit] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL , 	
	[Notes] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL , 	
	[AnalysisURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL, 	
	[DisplayTextHierarchy] nvarchar (255),  
	[OnlyHierarchy] [bit] NULL)    
/* 
Returns a table that lists all the analysis items related to the given unit. 
The list depends upon the analysis types available for a taxonomic group and the projects available for an analysis 
MW 14.05.2019 
TEST: Select * from AnalysisListForUnit(224404)  
SELECT * FROM dbo.AnalysisListForUnit(1330573) ORDER BY DisplayText

*/ 
AS 
BEGIN  

declare @TempList TABLE ([AnalysisID] [int] Primary key , 	
	[AnalysisParentID] [int] NULL , 	
	[DisplayText] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL , 	
	[Description] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL , 	
	[MeasurementUnit] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL , 	
	[Notes] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL , 	
	[AnalysisURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL, 	
	[DisplayTextHierarchy] nvarchar (1000),  
	[OnlyHierarchy] [bit] NULL);

DECLARE @AnalysisProject TABLE (AnalysisID int primary key) 
INSERT INTO @AnalysisProject (AnalysisID) 
SELECT DISTINCT A.AnalysisID 
	FROM  CollectionProject AS P 
	INNER JOIN ProjectAnalysis AS A ON P.ProjectID = A.ProjectID 
	INNER JOIN IdentificationUnit AS U ON P.CollectionSpecimenID = U.CollectionSpecimenID 
	WHERE (U.IdentificationUnitID = @IdentificationUnitID)  
 
DECLARE @AnalysisTaxa TABLE (AnalysisID int primary key) 
INSERT INTO @AnalysisTaxa (AnalysisID) 
SELECT DISTINCT  A.AnalysisID FROM IdentificationUnit AS U 
	INNER JOIN AnalysisTaxonomicGroup AS T ON U.TaxonomicGroup = T.TaxonomicGroup 
	INNER JOIN Analysis AS A ON T.AnalysisID = A.AnalysisID 
	WHERE (U.IdentificationUnitID = @IdentificationUnitID)  
 
INSERT INTO @TempList            
		([AnalysisID],[AnalysisParentID],[DisplayText]     
		,[Description],					   [MeasurementUnit],          [Notes]   ,       [AnalysisURI]    ,    [DisplayTextHierarchy],   OnlyHierarchy) 
SELECT A.[AnalysisID],[AnalysisParentID],[DisplayText]
		,SUBSTRING([Description], 1, 1000),[MeasurementUnit],SUBSTRING([Notes], 1, 1000),[AnalysisURI],SUBSTRING([DisplayText], 1, 1000),[OnlyHierarchy]
  FROM [dbo].[Analysis] A
, @AnalysisTaxa T
, @AnalysisProject P
WHERE A.AnalysisID = T.AnalysisID
and A.AnalysisID = P.AnalysisID

declare @i int;
set @i = (select count(*) from @TempList T, [Analysis] A WHERE T.AnalysisID = A.AnalysisParentID and A.AnalysisID not in (select L.AnalysisID from @TempList L))
WHILE @i > 0
begin
	INSERT INTO @TempList            
		(  [AnalysisID],   [AnalysisParentID] ,  [DisplayText],[Description]            
		,[MeasurementUnit]  ,[Notes]            
		,[AnalysisURI] ,[DisplayTextHierarchy]
		, OnlyHierarchy) 
	SELECT A.[AnalysisID],A.[AnalysisParentID],A.[DisplayText],SUBSTRING(A.[Description], 1, 1000)
		  ,A.[MeasurementUnit],SUBSTRING(A.[Notes], 1, 1000)
		  ,A.[AnalysisURI],SUBSTRING(T.DisplayTextHierarchy + ' | ' + A.[DisplayText], 1, 1000)
		  ,A.[OnlyHierarchy]
	  FROM [dbo].[Analysis] A
	, @TempList T
	WHERE A.AnalysisParentID = T.AnalysisID
	and A.AnalysisID not in (select L.AnalysisID from @TempList L)
	set @i = (select count(*) from @TempList T, [Analysis] A WHERE T.AnalysisID = A.AnalysisParentID and A.AnalysisID not in (select L.AnalysisID from @TempList L))
end

INSERT INTO @AnalysisList            
	([AnalysisID]   ,[AnalysisParentID] ,[DisplayText]  ,[Description]            
	,[MeasurementUnit]  ,[Notes]            
	,[AnalysisURI],[DisplayTextHierarchy]
	, OnlyHierarchy) 
SELECT [AnalysisID],[AnalysisParentID] ,[DisplayText] ,SUBSTRING([Description], 1, 1000)       
	,[MeasurementUnit],SUBSTRING([Notes], 1, 1000)       
	,[AnalysisURI],SUBSTRING([DisplayTextHierarchy], 1, 1000)
	, OnlyHierarchy
	from @TempList t where t.OnlyHierarchy = 0 

RETURN 
END    
GO
GRANT SELECT ON [dbo].[AnalysisListForUnit] TO [User] AS [dbo]
GO

/****** Object:  UserDefinedFunction [dbo].[AnalysisProjectList]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[AnalysisProjectList] (@ProjectID int)   
RETURNS @AnalysisList TABLE ([AnalysisID] [int] Primary key , 	
[AnalysisParentID] [int] NULL , 	
[DisplayText] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL , 	
[Description] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL , 	
[MeasurementUnit] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL , 	
[Notes] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL , 	
[AnalysisURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[OnlyHierarchy] [bit] NULL,
[RowGUID] [uniqueidentifier] ROWGUIDCOL NULL)  
/* 
Returns a table that lists all the analysis items related to the given project. 
MW 08.08.2009 
TEST: 
Select * from AnalysisProjectList(3)  
Select * from AnalysisProjectList(372)  
*/ 
AS BEGIN  
--ALTER TABLE @AnalysisList ADD  CONSTRAINT [DF__Analysis__RowGUI__29A2D696]  DEFAULT (newsequentialid()) FOR [RowGUID]

INSERT INTO @AnalysisList            
([AnalysisID]            
,[AnalysisParentID]            
,[DisplayText]            
,[Description]            
,[MeasurementUnit]            
,[Notes]            
,[AnalysisURI]
,[OnlyHierarchy]
,[RowGUID]) 
SELECT Analysis.AnalysisID, Analysis.AnalysisParentID, Analysis.DisplayText, Analysis.Description, 
Analysis.MeasurementUnit, Analysis.Notes,  Analysis.AnalysisURI, Analysis.OnlyHierarchy, Analysis.RowGUID
FROM  ProjectAnalysis 
INNER JOIN Analysis ON ProjectAnalysis.AnalysisID = Analysis.AnalysisID 
WHERE ProjectAnalysis.ProjectID = @ProjectID  

DECLARE @TempItem TABLE (AnalysisID int primary key) 

INSERT INTO @TempItem ([AnalysisID]) 
SELECT Analysis.AnalysisID 
FROM  ProjectAnalysis 
INNER JOIN Analysis ON ProjectAnalysis.AnalysisID = Analysis.AnalysisID 
WHERE ProjectAnalysis.ProjectID = @ProjectID  
declare @ParentID int  
DECLARE HierarchyCursor  CURSOR for 	select AnalysisID from @TempItem 	
open HierarchyCursor 	
FETCH next from HierarchyCursor into @ParentID 	
WHILE @@FETCH_STATUS = 0 	
BEGIN 	
insert into @AnalysisList ( AnalysisID , AnalysisParentID, DisplayText , Description , MeasurementUnit, 
Notes , AnalysisURI, OnlyHierarchy, RowGUID) 
select AnalysisID , AnalysisParentID, DisplayText , Description , MeasurementUnit, 
Notes , AnalysisURI, OnlyHierarchy, RowGUID
from dbo.AnalysisChildNodes (@ParentID) 
where AnalysisID not in (select AnalysisID from @AnalysisList) 	
FETCH NEXT FROM HierarchyCursor into @ParentID 	END 
CLOSE HierarchyCursor 
DEALLOCATE HierarchyCursor  
--DELETE FROM  @AnalysisList WHERE OnlyHierarchy = 1  
RETURN 
END  

GO
GRANT SELECT ON [dbo].[AnalysisProjectList] TO [User] AS [dbo]
GO

/****** Object:  UserDefinedFunction [dbo].[AnalysisTaxonomicGroupForProject]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE FUNCTION [dbo].[AnalysisTaxonomicGroupForProject] (@ProjectID int)  
	RETURNS @AnalysisTaxonomicGroup TABLE ([AnalysisID] [int] NOT NULL,
		[TaxonomicGroup] [nvarchar](50) NOT NULL,
		[RowGUID] [uniqueidentifier] ROWGUIDCOL NULL)
	/*
	Returns the contents of the table AnalysisTaxonomicGroup used in a project including the whole hierarchy.
	MW 15.07.2009
	Test:
	select * from [dbo].[AnalysisTaxonomicGroupForProject] (372)
	*/
	AS
	BEGIN
		declare @Temp TABLE (AnalysisID int NOT NULL
		, TaxonomicGroup [nvarchar](50) NOT NULL
		, ID int Identity NOT NULL
		, [RowGUID] [uniqueidentifier] ROWGUIDCOL NULL)
		insert @Temp (AnalysisID, TaxonomicGroup)
		SELECT A.AnalysisID, A.TaxonomicGroup
		FROM AnalysisTaxonomicGroup A 
		INNER JOIN ProjectAnalysis P ON A.AnalysisID = P.AnalysisID 
		WHERE     (P.ProjectID = @ProjectID)

		declare @TempID TABLE (ID int NOT NULL)
		INSERT @TempID (ID) SELECT ID FROM @Temp
		DECLARE @ID INT
		DECLARE @AnalysisID int
		DECLARE @TaxonomicGroup nvarchar(50)
		WHILE (SELECT COUNT(*) FROM @TempID) > 0
		BEGIN
			SET @ID = (SELECT MIN(ID) FROM @TempID)
			SET @AnalysisID = (SELECT AnalysisID FROM @Temp WHERE ID = @ID)
			SET @TaxonomicGroup = (SELECT TaxonomicGroup FROM @Temp WHERE ID = @ID)
			INSERT INTO @Temp (AnalysisID, TaxonomicGroup, RowGUID)
			SELECT A.AnalysisID, @TaxonomicGroup, A.RowGUID
			FROM [AnalysisList] (@ProjectID, @TaxonomicGroup) L, Analysis A
			WHERE A.AnalysisID = L.AnalysisID AND A.OnlyHierarchy = 0
			DELETE FROM @TempID WHERE ID = @ID
		END

		insert @AnalysisTaxonomicGroup (AnalysisID, TaxonomicGroup, RowGUID)
		SELECT DISTINCT AnalysisID, TaxonomicGroup, RowGUID
		FROM @Temp
		WHERE NOT RowGUID IS NULL
		
		RETURN
	END
GO

/****** Object:  UserDefinedFunction [dbo].[ApplicationSearchItemPrimaryKeyColumn]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[ApplicationSearchItemPrimaryKeyColumn] (@TableName varchar(50))  
/* returns the name of the first column of the primary key. Items in the database (e.g. Collection habe a IdentityColumn as primary key */
RETURNS nvarchar(300)
AS  
BEGIN 
DECLARE @ColumnName nvarchar(300)

set @ColumnName =
(
SELECT      MAX(c.Column_Name) 
FROM         INFORMATION_SCHEMA.TABLE_CONSTRAINTS t INNER JOIN
                      INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE c ON t.Constraint_Name = c.Constraint_Name
WHERE     (t.Constraint_Type = 'Primary key') 
AND (t.Table_Name = @TableName)
)

RETURN @ColumnName
END
GO
GRANT EXECUTE ON [dbo].[ApplicationSearchItemPrimaryKeyColumn] TO [User] AS [dbo]
GO

/****** Object:  UserDefinedFunction [dbo].[AverageAltitude]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[AverageAltitude] 
(
	@Geography geography
)
RETURNS float
AS
BEGIN
	/*
	Test:
	DECLARE @g geography;
	SET @g = geography::STGeomFromText('LINESTRING(-122.360 47.656, -122.343 47.656, -122.373 47.686 )', 4326);
	SET @g = geography::STGeomFromText('LINESTRING(-122.360 47.656 50, -122.343 47.656 60, -122.373 47.686 )', 4326);
	SELECT dbo.AverageAltitude(@g);
	*/
	-- Declare the return variable
	DECLARE @Alt float;
	
	SET @Alt = 0;
	DECLARE @AltPoint float;
	DECLARE @AltPoints int;
	SET @AltPoints = 0;
	DECLARE @Points int;
	SET @Points = @Geography.STNumPoints();
	DECLARE @i int;
	SET @i = 1;
	WHILE @i <= @Points 
	BEGIN
		SET @AltPoint = (SELECT @Geography.STPointN(@i).Z);
		IF NOT (SELECT @AltPoint) IS NULL
		BEGIN
			SET @Alt = @Alt + @AltPoint;
			SET @AltPoints = @AltPoints + 1;
		END
		SET @i = @i + 1;
	END
	IF @AltPoints > 0
	BEGIN
		SET @Alt = (SELECT @Alt / @AltPoints)
	END
	ELSE
	BEGIN
		SET @Alt = NULL
	END
	
	-- Return the result of the function
	RETURN @Alt

END
GO

/****** Object:  UserDefinedFunction [dbo].[BaseURL]    Script Date: 06.04.2021 17:13:29 ******/
GRANT EXECUTE ON [dbo].[BaseURL] TO [User] AS [dbo]
GO



/****** Object:  UserDefinedFunction [dbo].[CollectionChildNodes]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   CollectionChildNodes optimized   ###########################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[CollectionChildNodes] (@ID int)  
RETURNS @ItemList TABLE ([CollectionID] [int] Primary key ,
	[CollectionParentID] [int] NULL ,
	[CollectionName] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionAcronym] [nvarchar] (10) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactName] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactAgentURI] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[Description] [nvarchar] (max) COLLATE Latin1_General_CI_AS NULL ,
	[Location] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionOwner]  [nvarchar]  (255) COLLATE Latin1_General_CI_AS NULL ,
	[DisplayOrder] [smallint] NULL,
	[Type] [nvarchar](50) NULL)
/*
Returns a result set that lists all the items within a hierarchy starting at the topmost item related to the given item.
MW 03.12.2018
Test
select * from dbo.CollectionChildNodes(1)
*/
AS
BEGIN
   declare @ParentID int
   DECLARE @TempItem TABLE ([CollectionID] [int] Primary key ,
	[CollectionParentID] [int] NULL ,
	[CollectionName] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionAcronym] [nvarchar] (10) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactName] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactAgentURI] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[Description] [nvarchar] (max) COLLATE Latin1_General_CI_AS NULL ,
	[Location] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionOwner]  [nvarchar]  (255) COLLATE Latin1_General_CI_AS NULL ,
	[DisplayOrder] [smallint] NULL,
	[Type] [nvarchar](50) NULL)
INSERT @TempItem (CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type]) 
	SELECT CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type]
	FROM Collection WHERE CollectionParentID = @ID 

	declare @i int
	set @i = (select count(*) from @TempItem T, Collection C where C.CollectionParentID = T.CollectionID and C.CollectionID not in (select CollectionID from @TempItem))
	while @i > 0
	begin
		insert into @TempItem (CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type])
		select C.CollectionID, C.CollectionParentID, C.CollectionName, C.CollectionAcronym, C.AdministrativeContactName, C.AdministrativeContactAgentURI, C.Description, C.Location, C.CollectionOwner, C.DisplayOrder, C.[Type]
		from @TempItem T, Collection C where C.CollectionParentID = T.CollectionID and C.CollectionID not in (select CollectionID from @TempItem)
		set @i = (select count(*) from @TempItem T, Collection C where C.CollectionParentID = T.CollectionID and C.CollectionID not in (select CollectionID from @TempItem))
	end

 INSERT @ItemList (CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type]) 
   SELECT distinct CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type]
   FROM @TempItem ORDER BY CollectionName
   RETURN
END
GO
GRANT SELECT ON [dbo].[CollectionChildNodes] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[CollectionEventSeriesHierarchy]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   CollectionEventSeriesHierarchy   ######################################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[CollectionEventSeriesHierarchy] (@SeriesID int)  
RETURNS @EventSeriesList TABLE (SeriesID int primary key,
   SeriesParentID int NULL,
   DateStart datetime NULL,
   DateEnd datetime NULL,
   SeriesCode nvarchar(50) NULL,
   Description nvarchar(500) NULL,
   Notes nvarchar(500) NULL ,
   [Geography] geography)

/*
Returns a table that lists all the Series related to the given Series.
MW 02.01.2006
*/
AS
BEGIN

-- getting the TopID
declare @TopID int
declare @i int
set @TopID = (select dbo.EventSeriesTopID(@SeriesID) )

-- get the ID s of the child nodes
DECLARE @TempItem TABLE (SeriesID int primary key,
   SeriesParentID int NULL,
   DateStart datetime NULL,
   DateEnd datetime NULL,
   SeriesCode nvarchar(50) NULL,
   Description nvarchar(500) NULL,
   Notes nvarchar(500) NULL ,
   [Geography] geography)

	INSERT @TempItem (SeriesID, SeriesParentID, DateStart, DateEnd, SeriesCode, [Description], Notes, [Geography]) 
	SELECT * FROM dbo.EventSeriesChildNodes (@TopID)

-- copy the root node in the result list
   INSERT @EventSeriesList (SeriesID, SeriesParentID, DateStart, DateEnd, SeriesCode, [Description], Notes)
   SELECT DISTINCT SeriesID, SeriesParentID, DateStart, DateEnd, SeriesCode, [Description], Notes
   FROM CollectionEventSeries
   WHERE CollectionEventSeries.SeriesID = @TopID
   AND SeriesID NOT IN (SELECT SeriesID FROM @EventSeriesList)

   -- copy the child nodes into the result list
   INSERT @EventSeriesList (SeriesID, SeriesParentID, DateStart, DateEnd, SeriesCode, [Description], Notes)
   SELECT DISTINCT SeriesID, SeriesParentID, DateStart, DateEnd, SeriesCode, [Description], Notes
   FROM CollectionEventSeries
   WHERE CollectionEventSeries.SeriesID in (select SeriesID from @TempItem)
   AND SeriesID NOT IN (SELECT SeriesID FROM @EventSeriesList)
   ORDER BY DateStart
   
   -- set the geography
	UPDATE L SET [Geography] = E.[Geography]
	FROM @EventSeriesList L, CollectionEventSeries E
	WHERE E.SeriesID = L.SeriesID

   RETURN
END
GO
GRANT SELECT ON [dbo].[CollectionEventSeriesHierarchy] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[CollectionHierarchy]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   CollectionHierarchy - New column Type   ####################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[CollectionHierarchy] (@CollectionID int)  
RETURNS @CollectionList TABLE ([CollectionID] [int] Primary key ,
	[CollectionParentID] [int] NULL ,
	[CollectionName] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionAcronym] [nvarchar] (10) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactName] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactAgentURI] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[Description] [nvarchar] (max) COLLATE Latin1_General_CI_AS NULL ,
	[Location] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionOwner]  [nvarchar]  (255) COLLATE Latin1_General_CI_AS NULL ,
	[DisplayOrder] [smallint]  NULL,
	[Type] [nvarchar](50) NULL)
/*
Returns a table that lists all the analysis items related to the given analysis.
MW 02.01.2006
*/
AS
BEGIN
declare @TopID int
declare @i int
set @TopID = (select CollectionParentID from Collection where CollectionID = @CollectionID) 
set @i = (select count(*) from Collection where CollectionID = @CollectionID)
if (@TopID is null )
	set @TopID =  @CollectionID
else	
	begin
	while (@i > 0)
		begin
		set @CollectionID = (select CollectionParentID from Collection where CollectionID = @CollectionID and not CollectionParentID is null) 
		set @i = (select count(*) from Collection where CollectionID = @CollectionID and not CollectionParentID is null)
		end
	set @TopID = @CollectionID
	end
   INSERT @CollectionList
   SELECT DISTINCT CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type]
   FROM Collection
   WHERE Collection.CollectionID = @TopID
  INSERT @CollectionList
   SELECT * FROM dbo.CollectionChildNodes (@TopID)
   RETURN
END
GO
GRANT SELECT ON [dbo].[CollectionHierarchy] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[CollectionHierarchyAll]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   CollectionHierarchyAll - avoid blockage by loops  ##########################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[CollectionHierarchyAll] ()  
RETURNS @CollectionList TABLE ([CollectionID] [int] Primary key ,
	[CollectionParentID] [int] NULL ,
	[CollectionName] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionAcronym] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactName] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactAgentURI] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[Description] [nvarchar] (MAX) COLLATE Latin1_General_CI_AS NULL ,
	[Location] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionOwner]  [nvarchar]  (255) COLLATE Latin1_General_CI_AS NULL ,
	[DisplayOrder] [varchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[DisplayText] [varchar] (900) COLLATE Latin1_General_CI_AS NULL,
	[Type] [nvarchar](50) NULL)
/*
Returns a table that lists all the collections including a display text with the whole hierarchy.
MW 20.02.2012
TEST:
SELECT * FROM DBO.CollectionHierarchyAll()
*/
AS
BEGIN
declare @Temp TABLE ([CollectionID] [int] Primary key ,
	[CollectionParentID] [int] NULL ,
	[CollectionName] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionAcronym] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactName] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactAgentURI] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[Description] [nvarchar] (MAX) COLLATE Latin1_General_CI_AS NULL ,
	[Location] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionOwner]  [nvarchar]  (255) COLLATE Latin1_General_CI_AS NULL ,
	[DisplayOrder] [varchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[DisplayText] [varchar] (900) COLLATE Latin1_General_CI_AS NULL,
	[Type] [nvarchar](50) NULL)

	INSERT @Temp (CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type], DisplayText)
	SELECT DISTINCT CollectionID, case when CollectionParentID = CollectionID then null else CollectionParentID end, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type]
	, case when CollectionAcronym IS NULL OR CollectionAcronym = '' then CollectionName else CollectionAcronym end
	FROM Collection C
	WHERE C.CollectionParentID IS NULL
	declare @i int
	declare @i2 int
	set @i = (select count(*) from Collection where CollectionID not IN (select CollectionID from  @Temp))
	set @i2 = @i
	while (@i > 0)
		begin
		INSERT @Temp (CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type], DisplayText)
		SELECT DISTINCT C.CollectionID, case when C.CollectionParentID = C.CollectionID then null else C.CollectionParentID end, C.CollectionName, C.CollectionAcronym, C.AdministrativeContactName, C.AdministrativeContactAgentURI, C.Description, C.Location, C.CollectionOwner
		, C.DisplayOrder, C.[Type], L.DisplayText + ' | ' + C.CollectionName
		FROM Collection C, @Temp L
		WHERE C.CollectionParentID = L.CollectionID
		AND C.CollectionID NOT IN (select CollectionID from  @Temp)
		set @i = (select count(*) from Collection C where CollectionID not IN (select CollectionID from  @Temp))
		if @i2 > 0 and @i = @i2
		begin
			INSERT @Temp (CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type], DisplayText)
			SELECT DISTINCT C.CollectionID, NULL, C.CollectionName, C.CollectionAcronym, C.AdministrativeContactName, C.AdministrativeContactAgentURI, C.Description, C.Location, C.CollectionOwner, C.DisplayOrder, C.[Type], C.CollectionName
			FROM Collection C, @Temp L
			WHERE C.CollectionID NOT IN (select CollectionID from  @Temp)
			set @i = 0
		end
		set @i2 = @i
	end
	Declare @A int
	set @A = (select COUNT(*) 
	from sys.database_principals pR, sys.database_role_members, sys.database_principals pU  
	where sys.database_role_members.role_principal_id = pR.principal_id  
	and sys.database_role_members.member_principal_id = pU.principal_id 
	and pU.type <> 'R' 
	and pU.Name = User_Name()
	and pR.name = 'Administrator'
	)
	if (@A = 0 and User_Name() = 'dbo')
		begin 	
		INSERT @CollectionList (
			CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type], DisplayText)
		SELECT DISTINCT 
			CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type], DisplayText
		FROM @Temp L
		end
	else
	begin
		INSERT @CollectionList (
			CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type], DisplayText)
		SELECT DISTINCT 
			CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type], DisplayText
		FROM @Temp L WHERE L.CollectionID IN ( SELECT CollectionID FROM [dbo].[UserCollectionList] ())
	end
   RETURN
END

GO
GRANT SELECT ON [dbo].[CollectionHierarchyAll] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[CollectionHierarchyMulti]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   CollectionHierarchyMulti - New column Type   ###############################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[CollectionHierarchyMulti] (@CollectionIDs varchar(255))  
RETURNS @CollectionList TABLE ([CollectionID] [int] Primary key ,
	[CollectionParentID] [int] NULL ,
	[CollectionName] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionAcronym] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactName] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactAgentURI] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[Description] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[Location] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionOwner]  [nvarchar]  (255) COLLATE Latin1_General_CI_AS NULL ,
	[DisplayOrder] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
	[Type] [nvarchar](50) NULL)

/*
Returns a table that lists all the collections related to the given collection in the list.
MW 02.01.2006
*/

AS
BEGIN

SET @CollectionIDs = rtrim(ltrim(@CollectionIDs))
if @CollectionIDs = '' 
begin return end
else
while rtrim(@CollectionIDs) <> '' 
begin
	declare @CollectionID int
	if charindex(' ', @CollectionIDs) = 0
	begin
	set @CollectionID = cast(@CollectionIDs as int)
	set @CollectionIDs = ''
	end
	else
	begin
	set @CollectionID = cast(substring(@CollectionIDs, 1, charindex(' ', @CollectionIDs)) as int)
	end
	
	INSERT @CollectionList
	SELECT CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, 
	Description, Location, CollectionOwner, DisplayOrder, [Type]
	FROM Collection
	WHERE CollectionID NOT IN (SELECT CollectionID FROM @CollectionList)
	AND CollectionID = @CollectionID
	declare @TopID int
	set @TopID = (SELECT CollectionParentID FROM Collection WHERE CollectionID = @CollectionID)
	while not @TopID is null
	begin
		INSERT @CollectionList
		SELECT CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, 
		Description, Location, CollectionOwner, DisplayOrder, [Type]
		FROM Collection
		WHERE CollectionID NOT IN (SELECT CollectionID FROM @CollectionList)
		AND CollectionID = @TopID
		set @TopID = (SELECT CollectionParentID FROM Collection WHERE CollectionID = @TopID)
	end

	SET @CollectionIDs = ltrim(substring(@CollectionIDs, charindex(' ', @CollectionIDs), 255))
END

   RETURN
END
GO
GRANT SELECT ON [dbo].[CollectionHierarchyMulti] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[CollectionHierarchySuperior]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   CollectionHierarchySuperior   ##############################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[CollectionHierarchySuperior] (@CollectionID int)  
RETURNS @CollectionList TABLE ([CollectionID] [int] Primary key ,
	[CollectionParentID] [int] NULL ,
	[CollectionName] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionAcronym] [nvarchar] (10) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactName] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactAgentURI] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[Description] [nvarchar] (max) COLLATE Latin1_General_CI_AS NULL ,
	[Location] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionOwner]  [nvarchar]  (255) COLLATE Latin1_General_CI_AS NULL ,
	[DisplayOrder] [smallint]  NULL)
/*
Returns a table that lists the given and all the items superior to the given collection.
MW 02.09.2016
Test:
SELECT * FROM dbo.CollectionHierarchySuperior(3)
SELECT * FROM dbo.CollectionHierarchySuperior(1015)
SELECT * FROM dbo.CollectionHierarchySuperior(0)
*/
AS
BEGIN
declare @ParentID int
declare @i int

-- insert the given collection
   INSERT @CollectionList
   SELECT CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder
   FROM Collection
   WHERE Collection.CollectionID = @CollectionID

-- insert the superior collections
-- check if there is any superior collection
if (select count(*) from @CollectionList where CollectionID = @CollectionID and CollectionParentID is null) = 1
	RETURN

-- getting the superiors
set @ParentID = (select MAX(CollectionParentID) from @CollectionList where not CollectionParentID is null AND CollectionParentID NOT IN (SELECT CollectionID FROM @CollectionList)) 
set @i = 1
while (@i > 0)
begin
	set @ParentID = (select MAX(CollectionParentID) from @CollectionList where not CollectionParentID is null AND CollectionParentID NOT IN (SELECT CollectionID FROM @CollectionList)) 
	--set @ParentID = @CollectionID
	INSERT @CollectionList
	SELECT CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder
	FROM Collection
	WHERE Collection.CollectionID = @ParentID
	AND Collection.CollectionID NOT IN (SELECT CollectionID FROM @CollectionList)
	set @i = (select count(*) from @CollectionList where not CollectionParentID is null AND CollectionParentID NOT IN (SELECT CollectionID FROM @CollectionList))
end
RETURN

END

GO
GRANT SELECT ON [dbo].[CollectionHierarchySuperior] TO [User] AS [dbo]
GO



--#####################################################################################################################
--######   CurrentUser   ##############################################################################################
--#####################################################################################################################


CREATE FUNCTION [dbo].[CurrentUser] ()  
RETURNS @User TABLE ([LoginName] [nvarchar] (50) Primary key ,
	[CombinedNameCache] [nvarchar](255) NULL,
	[UserURI] [varchar](255) NULL,
	[AgentURI] [varchar](255) NULL,
	[UserName] [nvarchar](255) NULL)
/*
Returns the information for the current user.
MW 15.07.2009
Test:
select UserName from [dbo].[CurrentUser] ()
select AgentURI from [dbo].[CurrentUser] ()

*/

AS
BEGIN

-- fill the list with the basic data from the table UserProxy
INSERT INTO @User
	([LoginName]
	,[CombinedNameCache]
	,[UserName]
	,[UserURI]
	,[AgentURI])
SELECT TOP 1 [LoginName]
	,case when [CombinedNameCache] is null then [LoginName] else [CombinedNameCache] end
	,case when [CombinedNameCache] is null then [LoginName] else 
	case when [CombinedNameCache] like '%(%' then 
	RTRIM(substring([CombinedNameCache], 1, charindex('(', [CombinedNameCache]) - 1)) 
	else [CombinedNameCache] end end
	,[UserURI]
	,[AgentURI]
  FROM [UserProxy]
WHERE LoginName = User_Name()


   RETURN
END

GO
GRANT SELECT ON [dbo].[CurrentUser] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[CurrentUserName]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[CurrentUserName] ()  
RETURNS nvarchar (4000)
AS  
/*
retrieval of the name of the current user
test:
select dbo.CurrentUserName() 
*/
BEGIN 
declare @Name nvarchar (4000)
set @Name = (
SELECT    CASE WHEN CombinedNameCache IS NULL THEN LoginName ELSE CombinedNameCache END
FROM         UserProxy
WHERE     (LoginName = USER_NAME())
)
if (@Name = 'dbo' or @Name is null)
begin
	set @Name = null
end
return @Name
END
GO
GRANT EXECUTE ON [dbo].[CurrentUserName] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DefaultProjectID]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[DefaultProjectID] ()
RETURNS int
AS
BEGIN
declare @i int
set @i = (SELECT CurrentProjectID from UserProxy where LoginName = USER_NAME())
if @i is null
	begin set @i =(	SELECT min([ProjectID])
	  FROM [dbo].[ProjectUser] p where p.LoginName = USER_NAME())
	end
return @i
END
GO
GRANT EXECUTE ON [dbo].[DefaultProjectID] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityCollectionCacheDatabaseName]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[DiversityCollectionCacheDatabaseName] () RETURNS nvarchar(50) 
AS 
BEGIN 
/*
returns the name of the cache database containing the exported data for e.g. publication on the web
TEST
SELECT [dbo].[DiversityCollectionCacheDatabaseName] ()
*/
declare @CacheDatabaseName nvarchar(50) 
set @CacheDatabaseName = (select Db_name())
if (select charindex('_', @CacheDatabaseName)) > 0
begin
set @CacheDatabaseName = REPLACE(@CacheDatabaseName, '_', 'Cache_')
end
if (select COUNT(*) from master.sys.databases where name = @CacheDatabaseName and name <> Db_name()) = 0
begin
set @CacheDatabaseName = (select Db_name() + 'Cache')
end
if (select COUNT(*) from master.sys.databases where name = @CacheDatabaseName and name <> Db_name()) = 0
begin
set @CacheDatabaseName = (select substring(Db_name(), 1, charindex('_', Db_name()) - 1) + 'Cache')
end
if (select COUNT(*) from master.sys.databases where name = @CacheDatabaseName and name <> Db_name()) = 0
begin
set @CacheDatabaseName = ''
end
RETURN @CacheDatabaseName
END; 
GO
GRANT EXECUTE ON [dbo].[DiversityCollectionCacheDatabaseName] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_AnalysisProjectList]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[DiversityMobile_AnalysisProjectList] (@ProjectID int)   
RETURNS @AnalysisList TABLE ([AnalysisID] [int] Primary key , 	
[AnalysisParentID] [int] NULL , 	
[DisplayText] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL , 	
[Description] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL , 	
[MeasurementUnit] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL , 	
[Notes] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL , 	
[AnalysisURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[OnlyHierarchy] [bit] NULL,
[RowGUID] [uniqueidentifier] ROWGUIDCOL NULL)  
/* 
Returns a table that lists all the analysis items related to the given project. 
MW 08.08.2009 
TEST: 
Select * from DiversityMobile_AnalysisProjectList(3)  
Select * from DiversityMobile_AnalysisProjectList(372)  
*/ 
AS BEGIN  
INSERT INTO @AnalysisList            
([AnalysisID]            
,[AnalysisParentID]            
,[DisplayText]            
,[Description]            
,[MeasurementUnit]            
,[Notes]            
,[AnalysisURI]
,[OnlyHierarchy]
,[RowGUID]) 
SELECT Analysis.AnalysisID, Analysis.AnalysisParentID, Analysis.DisplayText, Analysis.Description, 
Analysis.MeasurementUnit, Analysis.Notes,  Analysis.AnalysisURI, Analysis.OnlyHierarchy, Analysis.RowGUID
FROM  ProjectAnalysis 
INNER JOIN Analysis ON ProjectAnalysis.AnalysisID = Analysis.AnalysisID 
WHERE ProjectAnalysis.ProjectID = @ProjectID  
DECLARE @TempItem TABLE (AnalysisID int primary key) 
INSERT INTO @TempItem ([AnalysisID]) 
SELECT Analysis.AnalysisID 
FROM  ProjectAnalysis 
INNER JOIN Analysis ON ProjectAnalysis.AnalysisID = Analysis.AnalysisID 
WHERE ProjectAnalysis.ProjectID = @ProjectID  
declare @ParentID int  
DECLARE HierarchyCursor  CURSOR for 	select AnalysisID from @TempItem 	
open HierarchyCursor 	
FETCH next from HierarchyCursor into @ParentID 	
WHILE @@FETCH_STATUS = 0 	
BEGIN 	
insert into @AnalysisList ( AnalysisID , AnalysisParentID, DisplayText , Description , MeasurementUnit, 
Notes , AnalysisURI, OnlyHierarchy, RowGUID) 
select AnalysisID , AnalysisParentID, DisplayText , Description , MeasurementUnit, 
Notes , AnalysisURI, OnlyHierarchy, RowGUID
from dbo.AnalysisChildNodes (@ParentID) 
where AnalysisID not in (select AnalysisID from @AnalysisList) 	
FETCH NEXT FROM HierarchyCursor into @ParentID 	END 
CLOSE HierarchyCursor 
DEALLOCATE HierarchyCursor  
RETURN 
END  
GO
GRANT SELECT ON [dbo].[DiversityMobile_AnalysisProjectList] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_AnalysisResultForProject]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[DiversityMobile_AnalysisResultForProject] (@ProjectID int)  
RETURNS @AnalysisResult TABLE (
	[AnalysisID] [int] NOT NULL,
	[AnalysisResult] [nvarchar](255) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[Notes] [nvarchar](500) NULL,
	[RowGUID] [int] Identity NOT NULL)
/*
Returns the contents of the table AnalysisResult used in a project.
MW 15.07.2009
Test:
select * from [dbo].[DiversityMobile_AnalysisResultForProject] (1100)
*/
AS
BEGIN
INSERT INTO @AnalysisResult (AnalysisID, AnalysisResult, [Description], DisplayText, DisplayOrder, Notes)
SELECT     AnalysisResult.AnalysisID, AnalysisResult.AnalysisResult, AnalysisResult.Description, AnalysisResult.DisplayText, AnalysisResult.DisplayOrder, 
AnalysisResult.Notes
FROM         AnalysisResult INNER JOIN
AnalysisProjectList(@ProjectID) P ON AnalysisResult.AnalysisID = P.AnalysisID
RETURN
END
GO
GRANT SELECT ON [dbo].[DiversityMobile_AnalysisResultForProject] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_AnalysisTaxonomicGroupsForProject]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[DiversityMobile_AnalysisTaxonomicGroupsForProject](@ProjectID int)  
RETURNS @AnalysisTaxonomicGroup TABLE ([AnalysisID] [int] NOT NULL,
	[TaxonomicGroup] [nvarchar](50) NOT NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL NULL)
/*
Returns the contents of the table AnalysisTaxonomicGroup used in a project including the whole hierarchy.
MW 15.07.2009
Test:
select * from [dbo].[AnalysisTaxonomicGroupForProject] (372)
*/
AS
BEGIN
	declare @Temp TABLE (AnalysisID int NOT NULL
	, TaxonomicGroup [nvarchar](50) NOT NULL
	, ID int Identity NOT NULL
	, [RowGUID] [uniqueidentifier] ROWGUIDCOL NULL)
	insert @Temp (AnalysisID, TaxonomicGroup)
	SELECT A.AnalysisID, A.TaxonomicGroup
	FROM AnalysisTaxonomicGroup A 
	INNER JOIN ProjectAnalysis P ON A.AnalysisID = P.AnalysisID 
	WHERE     (P.ProjectID = @ProjectID)
	declare @TempID TABLE (ID int NOT NULL)
	INSERT @TempID (ID) SELECT ID FROM @Temp
	DECLARE @ID INT
	DECLARE @AnalysisID int
	DECLARE @TaxonomicGroup nvarchar(50)
	WHILE (SELECT COUNT(*) FROM @TempID) > 0
	BEGIN
		SET @ID = (SELECT MIN(ID) FROM @TempID)
		SET @AnalysisID = (SELECT AnalysisID FROM @Temp WHERE ID = @ID)
		SET @TaxonomicGroup = (SELECT TaxonomicGroup FROM @Temp WHERE ID = @ID)
		INSERT INTO @Temp (AnalysisID, TaxonomicGroup, RowGUID)
		SELECT A.AnalysisID, @TaxonomicGroup, A.RowGUID
		FROM [AnalysisList] (@ProjectID, @TaxonomicGroup) L, Analysis A
		WHERE A.AnalysisID = L.AnalysisID AND A.OnlyHierarchy = 0
		DELETE FROM @TempID WHERE ID = @ID
	END
	insert @AnalysisTaxonomicGroup (AnalysisID, TaxonomicGroup, RowGUID)
	SELECT DISTINCT AnalysisID, TaxonomicGroup, RowGUID
	FROM @Temp
	WHERE NOT RowGUID IS NULL
	RETURN
END
GO
GRANT SELECT ON [dbo].[DiversityMobile_AnalysisTaxonomicGroupsForProject] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_EventImageTypes]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[DiversityMobile_EventImageTypes] ()  
RETURNS @Enum TABLE (
  "Code" character varying(50) NOT NULL,
  "DisplayText" character varying(50)
)
/*
Returns a table that lists all the entries from the table relevant for a mobile application.
MW 22.08.2011
Test:
select * from [dbo].[DiversityMobile_EventImageTypes] () 
 */
AS
BEGIN
	INSERT INTO @Enum ([Code], [DisplayText])
	SELECT [Code]
		  ,[DisplayText]
	FROM [CollEventImageType_Enum]
	t where t.DisplayEnable = 1
	and t.Code not in ('image')
   RETURN
END
GO
GRANT SELECT ON [dbo].[DiversityMobile_EventImageTypes] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_EventsForProject]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[DiversityMobile_EventsForProject] (@ProjectID int, @Locality nvarchar(500))   
RETURNS @Events TABLE (
	[CollectionEventID] [int] NOT NULL,
	[Version] [int] NOT NULL,
	[SeriesID] [int] NULL,
	[CollectorsEventNumber] [nvarchar](50) NULL,
	[CollectionDate] [datetime] NULL,
	[CollectionDay] [int] NULL,
	[CollectionMonth] [int] NULL,
	[CollectionYear] [int] NULL,
	[CollectionDateSupplement] [nvarchar](100) NULL,
	[CollectionDateCategory] [nvarchar](50) NULL,
	[CollectionTime] [varchar](50) NULL,
	[CollectionTimeSpan] [varchar](50) NULL,
	[LocalityDescription] [nvarchar](max) NULL,
	[HabitatDescription] [nvarchar](max) NULL,
	[ReferenceTitle] [nvarchar](255) NULL,
	[ReferenceURI] [varchar](255) NULL,
	[ReferenceDetails] [nvarchar](50) NULL,
	[CollectingMethod] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[CountryCache] [nvarchar](50) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL)
/* 
Returns a table that lists all the analysis items related to the given project. 
MW 08.08.2009 
TEST: 
Select * from DiversityMobile_AnalysisProjectList(3)  
Select * from DiversityMobile_AnalysisProjectList(372)  
*/ 
AS BEGIN  
INSERT INTO @Events
           ([CollectionEventID]
           ,[Version]
           ,[SeriesID]
           ,[CollectorsEventNumber]
           ,[CollectionDate]
           ,[CollectionDay]
           ,[CollectionMonth]
           ,[CollectionYear]
           ,[CollectionDateSupplement]
           ,[CollectionDateCategory]
           ,[CollectionTime]
           ,[CollectionTimeSpan]
           ,[LocalityDescription]
           ,[HabitatDescription]
           ,[ReferenceTitle]
           ,[ReferenceURI]
           ,[ReferenceDetails]
           ,[CollectingMethod]
           ,[Notes]
           ,[CountryCache]
           ,[DataWithholdingReason]
           ,[LogCreatedWhen]
           ,[LogCreatedBy]
           ,[LogUpdatedWhen]
           ,[LogUpdatedBy]
           ,[RowGUID])
SELECT DISTINCT    E.CollectionEventID, E.Version, E.SeriesID, E.CollectorsEventNumber, E.CollectionDate, E.CollectionDay, E.CollectionMonth, E.CollectionYear, 
      E.CollectionDateSupplement, E.CollectionDateCategory, E.CollectionTime, E.CollectionTimeSpan, E.LocalityDescription, E.HabitatDescription, E.ReferenceTitle, 
      E.ReferenceURI, E.ReferenceDetails, E.CollectingMethod, E.Notes, E.CountryCache, E.DataWithholdingReason, E.LogCreatedWhen, E.LogCreatedBy, 
      E.LogUpdatedWhen, E.LogUpdatedBy, E.RowGUID
FROM         CollectionEvent AS E INNER JOIN
      CollectionSpecimen AS S ON E.CollectionEventID = S.CollectionEventID INNER JOIN
      CollectionProject AS P ON S.CollectionSpecimenID = P.CollectionSpecimenID
WHERE     (P.ProjectID = @ProjectID)
AND E.LocalityDescription LIKE '%' + @Locality + '%'
RETURN 
END  
GO
GRANT SELECT ON [dbo].[DiversityMobile_EventsForProject] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_IdentificationCategories]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[DiversityMobile_IdentificationCategories] ()  
RETURNS @Enum TABLE (
  "Code" character varying(50) NOT NULL,
  "DisplayText" character varying(50)
)
/*
Returns a table that lists all the entries from the table relevant for a mobile application.
MW 22.08.2011
Test:
select * from [dbo].[DiversityMobile_IdentificationCategories] () 
 */
AS
BEGIN
	INSERT INTO @Enum ([Code], [DisplayText])
	SELECT [Code]
		  ,[DisplayText]
	FROM [CollIdentificationCategory_Enum]
	t where t.DisplayEnable = 1
	and t.Code in ('determination')
   RETURN
END
GO
GRANT SELECT ON [dbo].[DiversityMobile_IdentificationCategories] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_IdentificationQualifiers]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[DiversityMobile_IdentificationQualifiers] ()  
RETURNS @Enum TABLE (
  "Code" character varying(50) NOT NULL,
  "DisplayText" character varying(50)
)
/*
Returns a table that lists all the entries from the table relevant for a mobile application.
MW 22.08.2011
Test:
select * from [dbo].[DiversityMobile_IdentificationQualifiers] () 
 */
AS
BEGIN
	INSERT INTO @Enum ([Code], [DisplayText])
	SELECT [Code]
		  ,[DisplayText]
	FROM [CollIdentificationQualifier_Enum]
	t where t.DisplayEnable = 1
	and t.Code not in ('sp. nov.')
   RETURN
END
GO
GRANT SELECT ON [dbo].[DiversityMobile_IdentificationQualifiers] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_IdentificationUnitAltitude]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[DiversityMobile_IdentificationUnitAltitude] (@IdentificationUnitID int)   
RETURNS float
/* 
Returns the first latitude of a unit as stored in table IdentificationUnitGeoAnalysis. 
MW 08.08.2009 
TEST: 
Select dbo.[DiversityMobile_IdentificationUnitAltitude](236379)  
*/ 
AS BEGIN  
declare @F float
set @F = (select [Geography].EnvelopeCenter().Z from [IdentificationUnitGeoAnalysis]
where [IdentificationUnitID] = @IdentificationUnitID
and [AnalysisDate] = 
(
select max([AnalysisDate]) from [IdentificationUnitGeoAnalysis] where [IdentificationUnitID] = @IdentificationUnitID
))
RETURN @F
END  
GO
GRANT EXECUTE ON [dbo].[DiversityMobile_IdentificationUnitAltitude] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_IdentificationUnitLatitude]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[DiversityMobile_IdentificationUnitLatitude] (@IdentificationUnitID int)   
RETURNS float
/* 
Returns the first latitude of a unit as stored in table IdentificationUnitGeoAnalysis. 
MW 08.08.2009 
TEST: 
Select dbo.[DiversityMobile_IdentificationUnitLatitude](97586)  
*/ 
AS BEGIN  
declare @F float
set @F = (select [Geography].EnvelopeCenter().Lat from [IdentificationUnitGeoAnalysis]
where [IdentificationUnitID] = @IdentificationUnitID
and [AnalysisDate] = 
(
select max([AnalysisDate]) from [IdentificationUnitGeoAnalysis] where [IdentificationUnitID] = @IdentificationUnitID
))
RETURN @F
END  
GO
GRANT EXECUTE ON [dbo].[DiversityMobile_IdentificationUnitLatitude] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_IdentificationUnitLongitude]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[DiversityMobile_IdentificationUnitLongitude] (@IdentificationUnitID int)   
RETURNS float
/* 
Returns the first latitude of a unit as stored in table IdentificationUnitGeoAnalysis. 
MW 08.08.2009 
TEST: 
Select dbo.[DiversityMobile_IdentificationUnitLongitude](236379)  
*/ 
AS BEGIN  
declare @F float
set @F = (select [Geography].EnvelopeCenter().Long from [IdentificationUnitGeoAnalysis]
where [IdentificationUnitID] = @IdentificationUnitID
and [AnalysisDate] = 
(
select max([AnalysisDate]) from [IdentificationUnitGeoAnalysis] where [IdentificationUnitID] = @IdentificationUnitID
))
RETURN @F
END  
GO
GRANT EXECUTE ON [dbo].[DiversityMobile_IdentificationUnitLongitude] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_MaterialCategories]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[DiversityMobile_MaterialCategories] ()  
RETURNS @MaterialCategories TABLE (
  "Code" character varying(50) NOT NULL,
  "DisplayText" character varying(50)
)
/*
Returns a table that lists all the taxonomic groups as defined in the settings related to the given project as stored in DiversityProjects.
MW 20.01.2010
Test:
select * from [dbo].[DiversityMobile_MaterialCategories] () 
 */
AS
BEGIN
if (select U.Settings.query('/Settings/DiversityMobile/MaterialCategories') from UserProxy U where U.LoginName = USER_NAME()) is null
or (select cast(U.Settings.query('data(/Settings/DiversityMobile/MaterialCategories)') as nvarchar(50)) from UserProxy U where U.LoginName = USER_NAME()) = ''
begin
	INSERT INTO @MaterialCategories ([Code], [DisplayText])
	SELECT [Code]
		  ,[DisplayText]
	FROM [CollMaterialCategory_Enum]
	t where t.DisplayEnable = 1
end 
else
begin
	declare @GroupVisibile varchar(500);
	set @GroupVisibile = (
	select cast(U.Settings.query('data(/Settings/DiversityMobile/MaterialCategories)') as nvarchar(50))
		from UserProxy U
		where not U.Settings.query('/Settings/DiversityMobile/MaterialCategories') is null
		and U.LoginName = USER_NAME()
	)
	declare @Code nvarchar(50)
	declare @DisplayText nvarchar(50)
	while (len(@GroupVisibile) > 0)
	begin
		if (select CHARINDEX('|',@GroupVisibile)) > 0
		begin
			set @Code = (select SUBSTRING(@GroupVisibile, 1, CHARINDEX('|',@GroupVisibile) - 1 ))
		end
		else
		begin
			set @Code = @GroupVisibile
		end
		set @DisplayText = (select DisplayText from CollMaterialCategory_Enum e where e.Code = @Code)
		INSERT INTO @MaterialCategories (Code, DisplayText) values (@Code, @DisplayText)
		if (select CHARINDEX('|',@GroupVisibile)) > 0
		begin
			set @GroupVisibile = rtrim((select SUBSTRING(@GroupVisibile, CHARINDEX('|',@GroupVisibile)+1, 500)))
		end
		else 
		begin
			set @GroupVisibile = ''
		end
	end
end
   RETURN
END
GO
GRANT SELECT ON [dbo].[DiversityMobile_MaterialCategories] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_ProjectList]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[DiversityMobile_ProjectList] ()   
RETURNS @ProjectList TABLE ([ProjectID] [int] Primary key , 	
[DisplayText] [nvarchar] (50))  
/* 
Returns a table that lists all the project for a user
MW 08.08.2009 
TEST: 
Select * from [DiversityMobile_ProjectList]()
*/ 
AS BEGIN  
INSERT INTO @ProjectList            
([ProjectID]            
,[DisplayText]) 
SELECT  U.ProjectID ,   P.Project
FROM         ProjectUser AS U INNER JOIN
                      ProjectProxy AS P ON U.ProjectID = P.ProjectID
WHERE     (U.LoginName = USER_NAME())
ORDER BY P.Project
RETURN 
END  
GO
GRANT SELECT ON [dbo].[DiversityMobile_ProjectList] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_SpecimenImageTypes]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[DiversityMobile_SpecimenImageTypes] ()  
RETURNS @Enum TABLE (
  "Code" character varying(50) NOT NULL,
  "DisplayText" character varying(50)
)
/*
Returns a table that lists all the entries from the table relevant for a mobile application.
MW 22.08.2011
Test:
select * from [dbo].[DiversityMobile_SpecimenImageTypes] () 
 */
AS
BEGIN
	INSERT INTO @Enum ([Code], [DisplayText])
	SELECT [Code]
		  ,[DisplayText]
	FROM [CollSpecimenImageType_Enum]
	t where t.DisplayEnable = 1
	and t.Code not in ('drawing', 'image', 'label', 'SEM image','photography', 'TEM image')
   RETURN
END
GO
GRANT SELECT ON [dbo].[DiversityMobile_SpecimenImageTypes] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_TaxonomicGroups]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[DiversityMobile_TaxonomicGroups] ()  
RETURNS @TaxonomicGroups TABLE (
  "Code" character varying(50) NOT NULL,
  "DisplayText" character varying(50)
)
/*
Returns a table that lists all the taxonomic groups as defined in the settings related to the given project as stored in DiversityProjects.
MW 20.01.2010
Test:
select * from [dbo].[DiversityMobile_TaxonomicGroups] () 
 */
AS
BEGIN
if (select U.Settings.query('/Settings/DiversityMobile/TaxonomicGroups') from UserProxy U where U.LoginName = USER_NAME()) is null
or (select cast(U.Settings.query('data(/Settings/DiversityMobile/TaxonomicGroups)') as nvarchar(50)) from UserProxy U where U.LoginName = USER_NAME()) = ''
begin
	INSERT INTO @TaxonomicGroups ([Code], [DisplayText])
	SELECT [Code]
		  ,[DisplayText]
	FROM [CollTaxonomicGroup_Enum]
	t where t.DisplayEnable = 1
end 
else
begin
	declare @TaxGroupVisibile varchar(500);
	set @TaxGroupVisibile = (
	select cast(U.Settings.query('data(/Settings/DiversityMobile/TaxonomicGroups)') as nvarchar(50))
		from UserProxy U
		where not U.Settings.query('/Settings/DiversityMobile/TaxonomicGroups') is null
		and U.LoginName = USER_NAME()
	)
	declare @Code nvarchar(50)
	declare @DisplayText nvarchar(50)
	while (len(@TaxGroupVisibile) > 0)
	begin
		if (select CHARINDEX('|',@TaxGroupVisibile)) > 0
		begin
			set @Code = (select SUBSTRING(@TaxGroupVisibile, 1, CHARINDEX('|',@TaxGroupVisibile) - 1 ))
		end
		else
		begin
			set @Code = @TaxGroupVisibile
		end
		set @DisplayText = (select DisplayText from CollTaxonomicGroup_Enum e where e.Code = @Code)
		INSERT INTO @TaxonomicGroups (Code, DisplayText) values (@Code, @DisplayText)
		if (select CHARINDEX('|',@TaxGroupVisibile)) > 0
		begin
			set @TaxGroupVisibile = rtrim((select SUBSTRING(@TaxGroupVisibile, CHARINDEX('|',@TaxGroupVisibile)+1, 500)))
		end
		else 
		begin
			set @TaxGroupVisibile = ''
		end
	end
end
   RETURN
END
GO
GRANT SELECT ON [dbo].[DiversityMobile_TaxonomicGroups] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_UnitRelationTypes]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION [dbo].[DiversityMobile_UnitRelationTypes] ()  
RETURNS @Enum TABLE (
  "Code" character varying(50) NOT NULL,
  "DisplayText" character varying(50)
)
/*
Returns a table that lists all the entries from the table relevant for a mobile application.
MW 22.08.2011
Test:
select * from [dbo].[DiversityMobile_UnitRelationTypes] () 
 */
AS
BEGIN
	INSERT INTO @Enum ([Code], [DisplayText])
	SELECT [Code]
		  ,[DisplayText]
	FROM [CollUnitRelationType_Enum]
	t where t.DisplayEnable = 1
	and t.Code not in ('')
   RETURN
END
GO
GRANT SELECT ON [dbo].[DiversityMobile_UnitRelationTypes] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityMobile_UserInfo]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[DiversityMobile_UserInfo] ()   
RETURNS @UserInfo TABLE ([LoginName] [nvarchar] (50) Primary key , 	
[UserName] [nvarchar] (50),
[AgentUri] [varchar] (255))  
/* 
Returns a table that lists all the project for a user
MW 08.08.2009 
TEST: 
Select * from [DiversityMobile_UserInfo]()
*/ 
AS BEGIN  
INSERT INTO @UserInfo            
([LoginName]            
,[UserName]
,[AgentUri]) 
SELECT  U.LoginName,
case when U.CombinedNameCache like '%, % (%' then SUBSTRING(U.CombinedNameCache, 1, charindex(' ', U.CombinedNameCache ))
+  SUBSTRING(U.CombinedNameCache, charindex(' ', U.CombinedNameCache )+1, 1) + '.' else 
case when U.CombinedNameCache like '%, %' then SUBSTRING(U.CombinedNameCache, 1, charindex(' ', U.CombinedNameCache ))
+  SUBSTRING(U.CombinedNameCache, charindex(' ', U.CombinedNameCache )+1, 1) + '.' else U.CombinedNameCache end
end, 
u.AgentURI
FROM UserProxy AS U 
WHERE (U.LoginName = USER_NAME())
RETURN 
END  
GO
GRANT SELECT ON [dbo].[DiversityMobile_UserInfo] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[DiversityWorkbenchModule]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	
CREATE FUNCTION [dbo].[DiversityWorkbenchModule] ()   RETURNS nvarchar(50) AS BEGIN RETURN 'DiversityCollection' END  ; 
GO
GRANT EXECUTE ON [dbo].[DiversityWorkbenchModule] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[EntityInformation]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
        CREATE FUNCTION [dbo].[EntityInformation] (@Entity [varchar] (500), @Language nvarchar(50), @Context nvarchar(50))   RETURNS @EntityList TABLE ([Entity] [varchar] (500) Primary key , 	[DisplayGroup] [nvarchar](50) NULL, 	[DisplayText] [nvarchar](50) NULL, 	[Abbreviation] [nvarchar](20) NULL, 	[Description] [nvarchar](max) NULL, 	[RepresentationNotes] [nvarchar](MAX) NULL, 	[EntityUsage] [nvarchar](50) NULL, 	[PresetValue] [nvarchar](500) NULL, 	[UsageNotes] [nvarchar](MAX) NULL, 	[DoesExist] [bit] NULL, 	[DisplayTextOK] [bit] NULL, 	[AbbreviationOK] [bit] NULL, 	[DescriptionOK] [bit] NULL) /* Returns the information to an entity. MW 15.07.2009 Test: select * from [dbo].[EntityInformation] ('CollCircumstances_Enum.Code.bred', 'de-DE', 'General') select * from [dbo].[EntityInformation] ('CollectionEventProperty.DisplayText', 'de-DE', 'Observation.mobile') select * from [dbo].[EntityInformation] ('CollLabelType_Enum', 'de-DE', 'Observation.mobile') select * from [dbo].[EntityInformation] ('CollectionSpecimen', 'de-DE', 'Observation') select * from [dbo].[EntityInformation] ('CollectionSpecimen', 'de-DE', '') select * from [dbo].[EntityInformation] ('CollectionSpecimen', 'en-US', 'Observation') select * from [dbo].[EntityInformation] ('CollectionSpecimen', 'en-US', '') select * from [dbo].[EntityInformation] ('CollectionSpecimen', '', '') select * from [dbo].[EntityInformation] ('EntityUsage.PresetValue', '', '') select * from [dbo].[EntityInformation] ('Identification.CollectionSpecimenID', 'en-US', 'Observation') select * from [dbo].[EntityInformation] ('Identification.CollectionSpecimenID', 'en-US', 'General') select * from [dbo].[EntityInformation] ('CollectionSpecimen.CollectionSpecimenID', 'en-US', 'General') select * from [dbo].[EntityInformation] ('Identification.IdentificationDate', 'de-DE', 'Observation') select * from [dbo].[EntityInformation] ('IdentificationUnit.TaxonomicGroup', 'de-DE', 'Observation.Mobile') select * from [dbo].[EntityInformation] ('IdentificationUnit.TaxonomicGroup', 'en-US', 'Observation.Mobile') select * from [dbo].[EntityInformation] ('IdentificationUnit.TaxonomicGroup', 'en-US', 'Observation.Mobile') select * from [dbo].[EntityInformation] ('Test', 'en-US', 'Observation.Mobile') select * from [dbo].[EntityInformation] ('CollMaterialCategory_Enum.Code.drawing or photograph', 'de-DE', 'General') */  AS BEGIN  if @Context = '' begin set @Context = 'General' end   insert @EntityList (Entity, [DisplayGroup] 	, [DoesExist], [DisplayTextOK], [AbbreviationOK], [DescriptionOK])  SELECT TOP 1 [Entity]       ,[DisplayGroup]       ,1, 0, 0, 0   FROM [Entity] WHERE Entity = @Entity    if (select count(*) from @EntityList) = 0 begin 	insert @EntityList (Entity, DisplayText, Abbreviation, DoesExist, [DisplayTextOK], [AbbreviationOK], [DescriptionOK])  	Values (@Entity,  	case when @Entity like '%.%' then rtrim(substring(@Entity, charindex('.', @Entity)+1, 50)) else @Entity end,  	substring(case when @Entity like '%.%' then rtrim(substring(@Entity, charindex('.', @Entity)+1, 50)) else @Entity end, 1, 20) 	, 0, 0, 0, 0)  	declare @Table nvarchar(50) 	declare @Column nvarchar(50) 	if (@Entity not like '%.%') 	begin 	set @Table = @Entity 	update E set E.[Description] = (SELECT max(CONVERT(nvarchar(MAX), [value])) 	FROM ::fn_listextendedproperty(NULL, 'user', 'dbo', 'table', @Table, default, NULL) WHERE name =  'MS_Description') 	, E.[DescriptionOK] = 1 	from @EntityList E  	end 	 	if (@Entity like '%.%' and @Entity not like '%.%.%') 	begin 	set @Table = (select rtrim(substring(@Entity, 1, charindex('.', @Entity)-1))) 	set @Column = (select rtrim(substring(@Entity, charindex('.', @Entity)+1, 50))) 	update E set E.[Description] = (SELECT max(CONVERT(nvarchar(MAX), [value]))  	FROM ::fn_listextendedproperty(NULL, 'user', 'dbo', 'table', @Table, 'column', @Column) WHERE name =  'MS_Description') 	, E.[DescriptionOK] = 1 	from @EntityList E  	end 	 	if (select count(*) from @EntityList where len([Description]) > 0) = 0 	begin 	update E set E.[Description] = case when @Entity like '%.%' then rtrim(substring(@Entity, charindex('.', @Entity)+1, 50))  	+ case when @Entity like '%.%' then ' - ' + rtrim(substring(@Entity, 1, charindex('.', @Entity)-1)) else '' end 	else @Entity end 	from @EntityList E  	end 	 	if (@Entity like '%_Enum.Code.%') 	begin 	declare @EnumTable nvarchar(50) 	set @EnumTable = (select substring(@Entity, 1, charindex('.', @Entity) - 1)) 	declare @Value nvarchar(50) 	set @Value = (select rtrim(substring(@Entity, charindex('.', @Entity) + 6, 255))) 	update E set E.[Description] = @Value, E.DisplayText = substring(@Value, 1, 50), E.Abbreviation = substring(@Value, 1, 20) 	from @EntityList E  	end 	return end    declare @ParentContext nvarchar(50) declare @CurrentContext nvarchar(50)    update E set E.[EntityUsage] = U.EntityUsage, E.PresetValue = U.PresetValue, E.UsageNotes = U.Notes from dbo.EntityUsage U, @EntityList E where U.Entity = @Entity and U.EntityContext = @Context    set @CurrentContext = @Context set @ParentContext = @Context while not @ParentContext is null begin 	update E set  	E.EntityUsage = case when E.EntityUsage is null then U.EntityUsage else E.EntityUsage end, 	E.PresetValue = case when E.PresetValue is null then U.PresetValue else E.PresetValue end, 	E.UsageNotes = case when E.UsageNotes is null then U.Notes else E.UsageNotes end 	from dbo.EntityUsage U, @EntityList E 	where U.Entity = @Entity 	and U.EntityContext = @ParentContext 	 	set @CurrentContext = @ParentContext 	set @ParentContext = (select ParentCode from dbo.EntityContext_Enum where Code = @CurrentContext) 	 		if (@ParentContext = @CurrentContext) begin set @ParentContext = null end end    update E set E.[DisplayText] = R.DisplayText,  E.Abbreviation = R.Abbreviation,  E.[Description] = R.[Description], E.[RepresentationNotes] = R.[Notes], E.[DisplayTextOK] = case when R.DisplayText is null or R.DisplayText = '' then 0 else 1 end,  E.[AbbreviationOK] = case when R.Abbreviation is null or R.Abbreviation = '' then 0 else 1 end,  E.[DescriptionOK] = case when R.[Description] is null or R.[Description] = '' then 0 else 1 end from dbo.EntityRepresentation R, @EntityList E where R.Entity = @Entity and R.EntityContext = @Context and R.LanguageCode = @Language    set @ParentContext = (select ParentCode from dbo.EntityContext_Enum where Code = @Context) while not @ParentContext is null begin 	update E set  	E.[DisplayText] = case when E.DisplayText is null then R.DisplayText else E.DisplayText end,  	E.Abbreviation = case when E.Abbreviation is null then R.Abbreviation else E.Abbreviation end,  	E.[Description] = case when E.[Description] is null then R.[Description] else E.[Description] end, 	E.[RepresentationNotes] = case when E.[RepresentationNotes] is null then R.[Notes] else E.[RepresentationNotes] end, 	E.[DisplayTextOK] = case when E.[DisplayTextOK] = 0 and R.[DisplayText] <> '' then 1 else E.[DisplayTextOK] end,  	E.[AbbreviationOK] = case when E.[AbbreviationOK] = 0 and R.[Abbreviation] <> '' then 1 else E.[AbbreviationOK] end,  	E.[DescriptionOK] = case when E.[DescriptionOK] = 0 and R.[Description] <> '' then 1 else E.[DescriptionOK] end 	from dbo.EntityRepresentation R, @EntityList E 	where R.Entity = @Entity 	and R.EntityContext = @ParentContext 	and R.LanguageCode = @Language 	set @CurrentContext = @ParentContext 	set @ParentContext = (select ParentCode from dbo.EntityContext_Enum where Code = @CurrentContext) 	 		if (@ParentContext = @CurrentContext) begin set @ParentContext = null end end     set @ParentContext = @Context while not @ParentContext is null begin 	update E set  	E.[DisplayText] = case when E.DisplayText is null then R.DisplayText else E.DisplayText end,  	E.Abbreviation = case when E.Abbreviation is null then R.Abbreviation else E.Abbreviation end,  	E.[Description] = case when E.[Description] is null then R.[Description] else E.[Description] end, 	E.[DisplayTextOK] = case when E.[DisplayTextOK] = 0 and R.[DisplayText] <> '' then 1 else E.[DisplayTextOK] end,  	E.[AbbreviationOK] = case when E.[AbbreviationOK] = 0 and R.[Abbreviation] <> '' then 1 else E.[AbbreviationOK] end,  	E.[DescriptionOK] = case when E.[DescriptionOK] = 0 and R.[Description] <> '' then 1 else E.[DescriptionOK] end 	from dbo.EntityRepresentation R, @EntityList E 	where R.Entity = @Entity 	and R.EntityContext = @ParentContext 	and R.LanguageCode = 'en-US' 	 	set @CurrentContext = @ParentContext 	set @ParentContext = (select ParentCode from dbo.EntityContext_Enum where Code = @CurrentContext) 	 		if (@ParentContext = @CurrentContext) begin set @ParentContext = null end end  update E set E.[DisplayText] = substring(case when @Entity like '%.%' then rtrim(substring(@Entity, charindex('.', @Entity)+1, 50)) else @Entity end, 1, 20) from @EntityList E  where E.DisplayText is null  update E set E.Abbreviation = substring(case when @Entity like '%.%' then rtrim(substring(@Entity, charindex('.', @Entity)+1, 50)) else @Entity end, 1, 20) from @EntityList E  where E.Abbreviation is null      RETURN END  ; 
GO
GRANT SELECT ON [dbo].[EntityInformation] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[EntityInformation_2]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  EntityInformation_2: bugfix for entities with several "."  ##################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[EntityInformation_2] (@Entity [varchar] (500), @Language nvarchar(50), @Context nvarchar(50))  
RETURNS @EntityList TABLE ([Entity] [varchar] (500) Primary key ,
	[DisplayGroup] [nvarchar](50) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[Abbreviation] [nvarchar](20) NULL,
	[Description] [nvarchar](max) NULL,
	[Accessibility] [nvarchar](50) NULL,
	[Determination] [nvarchar](50) NULL,
	[Visibility] [nvarchar](50) NULL,
	[PresetValue] [nvarchar](500) NULL,
	[UsageNotes] [nvarchar](4000) NULL,
	[DoesExist] [bit] NULL,
	[DisplayTextOK] [bit] NULL,
	[AbbreviationOK] [bit] NULL,
	[DescriptionOK] [bit] NULL)
/*
Returns the information to an entity.
MW 26.09.2011
Test:
select * from [dbo].[EntityInformation_2] ('CollCircumstances_Enum.Code.bred', 'de-DE', 'General')
select * from [dbo].[EntityInformation_2] ('CollLabelType_Enum', 'de-DE', 'Observation.mobile')
select * from [dbo].[EntityInformation_2] ('CollectionSpecimen', 'de-DE', 'Observation')
select * from [dbo].[EntityInformation_2] ('CollectionSpecimen', 'de-DE', '')
select * from [dbo].[EntityInformation_2] ('CollectionSpecimen', 'en-US', 'Observation')
select * from [dbo].[EntityInformation_2] ('CollectionSpecimen', 'en-US', '')
select * from [dbo].[EntityInformation_2] ('CollectionSpecimen', '', '')
select * from [dbo].[EntityInformation_2] ('EntityUsage.PresetValue', '', '')
select * from [dbo].[EntityInformation_2] ('Identification.CollectionSpecimenID', 'en-US', 'Observation')
select * from [dbo].[EntityInformation_2] ('Identification.CollectionSpecimenID', 'en-US', 'General')
select * from [dbo].[EntityInformation_2] ('CollectionSpecimen.CollectionSpecimenID', 'en-US', 'General')
select * from [dbo].[EntityInformation_2] ('Identification.IdentificationDate', 'de-DE', 'Observation')
select * from [dbo].[EntityInformation_2] ('IdentificationUnit.TaxonomicGroup', 'de-DE', 'Observation.Mobile')
select * from [dbo].[EntityInformation_2] ('IdentificationUnit.TaxonomicGroup', 'en-US', 'Observation.Mobile')
select * from [dbo].[EntityInformation_2] ('IdentificationUnit.TaxonomicGroup', 'en-US', 'Observation.Mobile')
select * from [dbo].[EntityInformation_2] ('Test', 'en-US', 'Observation.Mobile')
select * from [dbo].[EntityInformation_2] ('CollMaterialCategory_Enum.Code.drawing or photograph', 'de-DE', 'General')
*/

AS
BEGIN

if @Context = '' begin set @Context = 'General' end

-- fill the list with the basic data from the table Entity

insert @EntityList (Entity, [DisplayGroup]
	, [DoesExist], [DisplayTextOK], [AbbreviationOK], [DescriptionOK]) 
SELECT TOP 1 [Entity]
      ,[DisplayGroup]
      ,1, 0, 0, 0
  FROM [Entity]
WHERE Entity = @Entity


-- if nothing is found, fill in the values according to the parameters of the function

if (select count(*) from @EntityList) = 0
begin
	insert @EntityList (Entity, DisplayText, Abbreviation, DoesExist, [DisplayTextOK], [AbbreviationOK], [DescriptionOK]) 
	Values (@Entity, 
	case when @Entity like '%.%' then rtrim(substring(@Entity, charindex('.', @Entity)+1, 50)) else @Entity end, 
	substring(case when @Entity like '%.%' then rtrim(substring(@Entity, charindex('.', @Entity)+1, 50)) else @Entity end, 1, 20)
	, 0, 0, 0, 0)

	declare @Table nvarchar(50)
	declare @Column nvarchar(50)
	if (@Entity not like '%.%')
	begin
	set @Table = @Entity
	update E set E.[Description] = (SELECT max(CONVERT(nvarchar(MAX), [value]))
	FROM ::fn_listextendedproperty(NULL, 'user', 'dbo', 'table', @Table, default, NULL) WHERE name =  'MS_Description')
	, E.[DescriptionOK] = 1
	from @EntityList E 
	end
	
	if (@Entity like '%.%' and @Entity not like '%.%.%')
	begin
	set @Table = (select rtrim(substring(@Entity, 1, charindex('.', @Entity)-1)))
	set @Column = (select rtrim(substring(@Entity, charindex('.', @Entity)+1, 50)))
	update E set E.[Description] = (SELECT max(CONVERT(nvarchar(MAX), [value])) 
	FROM ::fn_listextendedproperty(NULL, 'user', 'dbo', 'table', @Table, 'column', @Column) WHERE name =  'MS_Description')
	, E.[DescriptionOK] = 1
	from @EntityList E 
	end
	
	if (select count(*) from @EntityList where len([Description]) > 0) = 0
	begin
	update E set E.[Description] = case when @Entity like '%.%' then rtrim(substring(@Entity, charindex('.', @Entity)+1, 50)) 
	+ case when @Entity like '%.%' then ' - ' + rtrim(substring(@Entity, 1, charindex('.', @Entity)-1)) else '' end
	else @Entity end
	from @EntityList E 
	end
	
	if (@Entity like '%_Enum.Code.%')
	begin
	declare @EnumTable nvarchar(50)
	set @EnumTable = (select substring(@Entity, 1, charindex('.', @Entity) - 1))
	declare @Value nvarchar(50)
	set @Value = (select rtrim(substring(@Entity, charindex('.', @Entity) + 6, 255)))
	update E set E.[Description] = @Value, E.DisplayText = substring(@Value, 1, 50), E.Abbreviation = substring(@Value, 1, 20)
	from @EntityList E 
	end
	return
end


-- set the details for usage and representation of the entry

declare @ParentContext nvarchar(50)
declare @CurrentContext nvarchar(50)


-- set the Accessibility, Determination, Visibility and PresetValue if there is one --################################################################
update E set
E.Accessibility = U.Accessibility,
E.Determination = U.Determination, 
E.Visibility = U.Visibility, 
E.PresetValue = U.PresetValue, 
E.UsageNotes = U.Notes
from dbo.EntityUsage U, @EntityList E
where U.Entity = @Entity
and U.EntityContext = @Context

-- search for usage information in parent datasets
set @CurrentContext = @Context
set @ParentContext = @Context
while not @ParentContext is null
begin
	update E set 
	E.Accessibility = case when E.Accessibility is null then U.Accessibility else E.Accessibility end,
	E.Determination = case when E.Determination is null then U.Determination else E.Determination end,
	E.Visibility = case when E.Visibility is null then U.Visibility else E.Visibility end,
	E.PresetValue = case when E.PresetValue is null then U.PresetValue else E.PresetValue end,
	E.UsageNotes = case when E.UsageNotes is null then U.Notes else E.UsageNotes end
	from dbo.EntityUsage U, @EntityList E
	where U.Entity = @Entity
	and U.EntityContext = @ParentContext
	
	set @CurrentContext = @ParentContext
	set @ParentContext = (select ParentCode from dbo.EntityContext_Enum where Code = @CurrentContext)
	
	-- avoid loops on itself
	if (@ParentContext = @CurrentContext) begin set @ParentContext = null end
end


-- set the representation values --################################################################
update E set E.[DisplayText] = R.DisplayText, 
E.Abbreviation = R.Abbreviation, 
E.[Description] = R.[Description],
E.[DisplayTextOK] = case when R.DisplayText is null or R.DisplayText = '' then 0 else 1 end, 
E.[AbbreviationOK] = case when R.Abbreviation is null or R.Abbreviation = '' then 0 else 1 end, 
E.[DescriptionOK] = case when R.[Description] is null or R.[Description] = '' then 0 else 1 end
from dbo.EntityRepresentation R, @EntityList E
where R.Entity = @Entity
and R.EntityContext = @Context
and R.LanguageCode = @Language

-- search for representation values in parent datasets in the same language if nothing is found
set @ParentContext = (select ParentCode from dbo.EntityContext_Enum where Code = @Context)
while not @ParentContext is null
begin
	update E set 
	E.[DisplayText] = case when E.DisplayText is null then R.DisplayText else E.DisplayText end, 
	E.Abbreviation = case when E.Abbreviation is null then R.Abbreviation else E.Abbreviation end, 
	E.[Description] = case when E.[Description] is null then R.[Description] else E.[Description] end,
	E.[DisplayTextOK] = case when E.[DisplayTextOK] = 0 and R.[DisplayText] <> '' then 1 else E.[DisplayTextOK] end, 
	E.[AbbreviationOK] = case when E.[AbbreviationOK] = 0 and R.[Abbreviation] <> '' then 1 else E.[AbbreviationOK] end, 
	E.[DescriptionOK] = case when E.[DescriptionOK] = 0 and R.[Description] <> '' then 1 else E.[DescriptionOK] end
	from dbo.EntityRepresentation R, @EntityList E
	where R.Entity = @Entity
	and R.EntityContext = @ParentContext
	and R.LanguageCode = @Language
	set @CurrentContext = @ParentContext
	set @ParentContext = (select ParentCode from dbo.EntityContext_Enum where Code = @CurrentContext)
	
	-- avoid loops on itself
	if (@ParentContext = @CurrentContext) begin set @ParentContext = null end
end


-- search for representation values in parent datasets in the default language if nothing is found
set @ParentContext = @Context
while not @ParentContext is null
begin
	update E set 
	E.[DisplayText] = case when E.DisplayText is null then R.DisplayText else E.DisplayText end, 
	E.Abbreviation = case when E.Abbreviation is null then R.Abbreviation else E.Abbreviation end, 
	E.[Description] = case when E.[Description] is null then R.[Description] else E.[Description] end,
	E.[DisplayTextOK] = case when E.[DisplayTextOK] = 0 and R.[DisplayText] <> '' then 1 else E.[DisplayTextOK] end, 
	E.[AbbreviationOK] = case when E.[AbbreviationOK] = 0 and R.[Abbreviation] <> '' then 1 else E.[AbbreviationOK] end, 
	E.[DescriptionOK] = case when E.[DescriptionOK] = 0 and R.[Description] <> '' then 1 else E.[DescriptionOK] end
	from dbo.EntityRepresentation R, @EntityList E
	where R.Entity = @Entity
	and R.EntityContext = @ParentContext
	and R.LanguageCode = 'en-US'
	
	set @CurrentContext = @ParentContext
	set @ParentContext = (select ParentCode from dbo.EntityContext_Enum where Code = @CurrentContext)
	
	-- avoid loops on itself
	if (@ParentContext = @CurrentContext) begin set @ParentContext = null end
end

update E set E.[DisplayText] = substring(case when @Entity like '%.%' then rtrim(reverse(substring(reverse(@Entity), 1, charindex('.', reverse(@Entity))-1))) else @Entity end, 1, 20)
from @EntityList E 
where E.DisplayText is null

update E set E.Abbreviation = substring(case when @Entity like '%.%' then rtrim(reverse(substring(reverse(@Entity), 1, charindex('.', reverse(@Entity))-1))) else @Entity end, 1, 20)
from @EntityList E 
where E.Abbreviation is null

   RETURN
END

GO
GRANT SELECT ON [dbo].[EntityInformation_2] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[EventDescription]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[EventDescription] ( @CollectionEventID int)  
RETURNS nvarchar (4000)
AS  
/*retrieval of the description including all superior events*/
BEGIN 
declare @TopID int
declare @ID int
declare @Description nvarchar (4000)
declare @txt nvarchar (4000)
declare @txt2 nvarchar (4000)
set @ID = @CollectionEventID
set @TopID = (select CollectionEventParentID from CollectionEvent where CollectionEventID = @ID)
set @txt2 = (select 
	case when CollectionDay is null then '' else convert(nvarchar, CollectionDay) + '.' end +
	case when CollectionMonth is null then '' else convert(nvarchar, CollectionMonth) + '.' end +
	case when CollectionYear is null then '' else convert(nvarchar, CollectionYear) + ' ' end +
	case when not CollectionEndDay is null or not CollectionEndMonth is null or not CollectionEndYear is null then '- ' else '' end +
	case when CollectionEndDay is null then '' else convert(nvarchar, CollectionEndDay) + '.' end +
	case when CollectionEndMonth is null then '' else convert(nvarchar, CollectionEndMonth) + '.' end +
	case when CollectionEndYear is null then '' else convert(nvarchar, CollectionEndYear) + ' ' end +
	case when CollectionDateSupplement is null then '' else CollectionDateSupplement  + '. ' end + 
	case when LocalityDescription is null or len(LocalityDescription) = 0 then '' else LocalityDescription  + '. ' end + 
	case when HabitatDescription is null or len(HabitatDescription) = 0 then '' else HabitatDescription end +
	case when CollectorsEventNumber is null then '' else ' (Nr: ' + CollectorsEventNumber + ')' end 
	from dbo.CollectionEvent 
	where CollectionEventID = @ID)
if (@TopID <> null )
	begin
	set @txt = (select dbo.EventDescription (@TopID))
	set @Description = @txt + '. ' + CHAR(13) + CHAR(10) + @txt2
	end
else
	begin
	set @Description = @txt2
	end
return (@Description)
END
GO
GRANT EXECUTE ON [dbo].[EventDescription] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[EventDescriptionSuperior]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[EventDescriptionSuperior] ( @CollectionEventID int)  
RETURNS nvarchar (4000)
AS  
/*retrieval of the description of all superior events*/
BEGIN 
declare @TopID int
declare @Description nvarchar (4000)
declare @txt nvarchar (4000)
declare @txt2 nvarchar (4000)
set @TopID = (select CollectionEventParentID from CollectionEvent where CollectionEventID = @CollectionEventID)
if (@TopID <> null )
	begin
	set @txt2 = (select 
	case when CollectionDay is null then '' else convert(nvarchar, CollectionDay) + '.' end +
	case when CollectionMonth is null then '' else convert(nvarchar, CollectionMonth) + '.' end +
	case when CollectionYear is null then '' else convert(nvarchar, CollectionYear) + ' ' end +
	case when not CollectionEndDay is null or not CollectionEndMonth is null or not CollectionEndYear is null then '- ' else '' end +
	case when CollectionEndDay is null then '' else convert(nvarchar, CollectionEndDay) + '.' end +
	case when CollectionEndMonth is null then '' else convert(nvarchar, CollectionEndMonth) + '.' end +
	case when CollectionEndYear is null then '' else convert(nvarchar, CollectionEndYear) + ' ' end +
	case when CollectionDateSupplement is null then '' else CollectionDateSupplement  + '. ' end + 
	case when LocalityDescription is null or len(LocalityDescription) = 0 then '' else LocalityDescription  + '. ' end + 
	case when HabitatDescription is null or len(HabitatDescription) = 0 then '' else HabitatDescription end +
	case when CollectorsEventNumber is null then '' else ' (Nr: ' + CollectorsEventNumber + ')' end 
	from dbo.CollectionEvent 
	where CollectionEventID = @TopID)
	set @TopID = (select CollectionEventParentID from CollectionEvent where CollectionEventID = @TopID)
	if (@TopID <> null )
		begin
		set @txt = (select dbo.EventDescription (@TopID)) + '. '
		end
	else
		begin
		set @txt = ''
		end
	set @Description = @txt + CHAR(13) + CHAR(10) + @txt2
	end
else
	begin
	set @Description = ''
	end
return (@Description)
END
GO
GRANT EXECUTE ON [dbo].[EventDescriptionSuperior] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[EventSeriesChildNodes]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[EventSeriesChildNodes] (@ID int)  
RETURNS @ItemList TABLE (SeriesID int primary key,
   SeriesParentID int NULL,
   DateStart datetime NULL,
   DateEnd datetime NULL,
   SeriesCode nvarchar (50)  NULL ,
   Description nvarchar (500)  NULL ,
   Notes nvarchar (500) ,
   [Geography] geography)
/*
Returns a result set that lists all the items within a hierarchy starting at the topmost item related to the given item.
MW 09.06.2009
*/
AS
BEGIN
   declare @ParentID int
   DECLARE @TempItem TABLE (SeriesID int primary key,
   SeriesParentID int NULL,
   DateStart datetime NULL,
   DateEnd datetime NULL,
   SeriesCode nvarchar (50)  NULL ,
   Description nvarchar (500)  NULL ,
   Notes nvarchar (500)  ,
   [Geography] geography)

-- insert the first childs into the table
 INSERT @TempItem (SeriesID, SeriesParentID, DateStart, DateEnd, SeriesCode, [Description],  Notes, [Geography]) 
	SELECT SeriesID, SeriesParentID, DateStart, DateEnd, SeriesCode, [Description],  Notes, [Geography]
	FROM CollectionEventSeries WHERE SeriesParentID = @ID 

-- for each child get the childs
   DECLARE HierarchyCursor  CURSOR for
   select SeriesID from @TempItem
   open HierarchyCursor
   FETCH next from HierarchyCursor into @ParentID
   WHILE @@FETCH_STATUS = 0
   AND @ParentID not in (select SeriesID from @TempItem)
   AND @ParentID not in (select SeriesParentID from @TempItem)
   BEGIN
		insert into @TempItem select SeriesID, SeriesParentID, DateStart, DateEnd, SeriesCode, [Description],  Notes, [Geography] 
		from dbo.EventSeriesChildNodes (@ParentID) where SeriesID not in (select SeriesID from @TempItem)
   		FETCH NEXT FROM HierarchyCursor into @ParentID
   END
   CLOSE HierarchyCursor
   DEALLOCATE HierarchyCursor
 INSERT @ItemList (SeriesID, SeriesParentID, DateStart, DateEnd, SeriesCode, [Description],  Notes) 
   SELECT distinct SeriesID, SeriesParentID, DateStart, DateEnd, SeriesCode, [Description],  Notes
   FROM @TempItem ORDER BY DateStart
 UPDATE L SET [Geography] = E.[Geography]
 FROM @ItemList L, CollectionEventSeries E
 WHERE E.SeriesID = L.SeriesID

   RETURN
END


GO
GRANT SELECT ON [dbo].[EventSeriesChildNodes] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[EventSeriesHierarchy]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[EventSeriesHierarchy] (@SeriesID int)  
RETURNS @EventSeriesList TABLE (SeriesID int primary key,
   SeriesParentID int NULL,
   DateStart datetime NULL,
   DateEnd datetime NULL,
   SeriesCode nvarchar(50) NULL,
   Description nvarchar(500) NULL,
   Notes nvarchar(500) NULL ,
   [Geography] geography)

/*
Returns a table that lists all the Series related to the given Series.
MW 02.01.2006
Test
SELECT * FROM  dbo.EventSeriesHierarchy(-1733)
*/
AS
BEGIN

-- getting the TopID
declare @TopID int
declare @i int
set @TopID = (select dbo.EventSeriesTopID(@SeriesID) )

declare @List TABLE (SeriesID int primary key,
   SeriesParentID int NULL)
   
-- inserting the start values  
	INSERT @List (SeriesID) Values(@TopID)
	INSERT @List (SeriesID, SeriesParentID) SELECT SeriesID, SeriesParentID FROM dbo.EventSeriesChildNodes (@TopID)
	
-- getting the whole hierarchy	
	set @i = (select COUNT(*) from CollectionEventSeries E, @List L where L.SeriesID = E.SeriesParentID AND E.SeriesID NOT IN (Select P.SeriesID  from @List P))
	while @i > 0
	begin
		INSERT @List (SeriesID, SeriesParentID) 
			SELECT E.SeriesID, E.SeriesParentID from CollectionEventSeries E, @List L where L.SeriesID = E.SeriesParentID AND E.SeriesID NOT IN (Select P.SeriesID  from @List P)
		set @i = (select COUNT(*) from CollectionEventSeries E, @List L where L.SeriesID = E.SeriesParentID AND E.SeriesID NOT IN (Select P.SeriesID  from @List P))
	end

	INSERT @EventSeriesList (SeriesID, SeriesParentID, DateStart, DateEnd, SeriesCode, [Description], Notes)
	SELECT E.SeriesID, E.SeriesParentID, DateStart, DateEnd, SeriesCode, [Description], Notes
	FROM CollectionEventSeries E, @List L where L.SeriesID = E.SeriesID
   
-- set the geography
	UPDATE L SET [Geography] = E.[Geography]
	FROM @EventSeriesList L, CollectionEventSeries E
	WHERE E.SeriesID = L.SeriesID

   RETURN
END
GO
GRANT SELECT ON [dbo].[EventSeriesHierarchy] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[EventSeriesSuperiorList]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[EventSeriesSuperiorList] (@SeriesID int)  
RETURNS @EventSeriesList TABLE (SeriesID int primary key,
   SeriesParentID int NULL,
   DateStart datetime NULL,
   DateEnd datetime NULL,
   SeriesCode nvarchar(50) NULL,
   Description nvarchar(500) NULL,
   Notes nvarchar(500) NULL ,
   [Geography] geography)

/*
Returns a table that lists all the Series above the given Series.
MW 02.01.2006
*/
AS
BEGIN

	while (not @SeriesID is null)
		begin
		INSERT @EventSeriesList (SeriesID, SeriesParentID, DateStart, DateEnd, SeriesCode, [Description], Notes)
		SELECT DISTINCT SeriesID, SeriesParentID, DateStart, DateEnd, SeriesCode, [Description], Notes
		FROM CollectionEventSeries
		WHERE CollectionEventSeries.SeriesID = @SeriesID
		AND CollectionEventSeries.SeriesID NOT IN (SELECT SeriesID FROM @EventSeriesList)
		set @SeriesID = (select SeriesParentID from CollectionEventSeries where SeriesID = @SeriesID)
		IF @SeriesID = (select SeriesParentID from CollectionEventSeries where SeriesID = @SeriesID)
			begin 
			set @SeriesID = null
			end 
		end
		
	UPDATE L SET [Geography] = E.[Geography]
	FROM @EventSeriesList L, CollectionEventSeries E
	WHERE E.SeriesID = L.SeriesID

   RETURN
END


GO
GRANT SELECT ON [dbo].[EventSeriesSuperiorList] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[EventSeriesTopID]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE FUNCTION [dbo].[EventSeriesTopID] (@SeriesID int) 
 RETURNS int /* Returns the top ID within the hierarchy for a given ID from the table CollectionEventSeries. MW 03.01.2006 */ 
 AS 
 BEGIN 
 declare @TopID int declare @i int  
 set @TopID = (select SeriesParentID from CollectionEventSeries where SeriesID = @SeriesID)   
 set @i = (select count(*) from CollectionEventSeries where SeriesID = @SeriesID)  
 if (@TopID is null ) 	
	 set @TopID =  @SeriesID 
 else
 begin 	
	 while (@i > 0) 		
	 begin 		
		 set @SeriesID = (select SeriesParentID from CollectionEventSeries where SeriesID = @SeriesID and not SeriesParentID is null)  		
		 set @i = (select count(*) from CollectionEventSeries  		
		 where SeriesID = @SeriesID  		
		 and not SeriesParentID is null 		
		 and SeriesParentID <> @SeriesID) 		
	 end 	
	 set @TopID = @SeriesID 	
 end 
 return @TopID 
 END 
GO


/****** Object:  UserDefinedFunction [dbo].[EventSpecimenNumber]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [dbo].[EventSpecimenNumber] (@EventID int)  
RETURNS int 
AS  
BEGIN 
/* calculation of all specimen in the database that are assigned to this event, including the inferior events */
declare @SpecimenCount int
declare @InferiorEvent int
declare @Count int
/* getting the currents event */
set @SpecimenCount = ( select count(*) from CollectionSpecimen where CollectionEventID = @EventID)
/* getting all inferior events */
RETURN @SpecimenCount
END

GO
GRANT EXECUTE ON [dbo].[EventSpecimenNumber] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[EventSuperiorList]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[EventSuperiorList] (@EventID int)  
RETURNS @EventList TABLE (CollectionEventID int primary key,
   EventParentID int NULL,
   --Seq int NOT NULL,
   Event nchar(500) NULL,
   SpecimenCount int NULL)
/*Returns a result set that lists all the CollectionEventID's superior to a given event.*/
AS
BEGIN
   declare @depth int
   set @depth = 1
-- declare the variables
   declare @EventParentID int
   --declare @Seq int
   declare @SuperiorEvent int
   declare @EventName nvarchar(50) 
   declare @SpecimenCount int   
-- initialize the variables
   --set @Seq = 1
   set @EventParentID = ( select CollectionEventParentID from v_EventList where CollectionEventID = @EventID)
   set @EventName = ( select Event from v_EventList where CollectionEventID = @EventID)
   set @SpecimenCount = (select dbo.EventSpecimenNumber (@EventID))
-- table variable to hold accumulated results
   DECLARE @TempEvent TABLE (CollectionEventID int primary key,
   EventParentID int NULL,
   --Seq int NOT NULL,
   Event nchar(500) NULL,
   SpecimenCount int NULL)
-- initialize @TempEvent with direct event
   INSERT @TempEvent (CollectionEventID, EventParentID, Event, SpecimenCount) values (@EventID, @EventParentID, @EventName, @SpecimenCount)
set @SuperiorEvent = (select CollectionEventParentID from v_EventList where CollectionEventID = @EventID)
while @SuperiorEvent > 0 --and @depth < 2
begin
   	--set @depth = @depth + 1
	--set @Seq = @Seq + 1
	set @EventParentID = (select CollectionEventParentID  from v_EventList where CollectionEventID = @SuperiorEvent)
	set @EventName = (select Event  from v_EventList where CollectionEventID = @SuperiorEvent)
	set @SpecimenCount = (select dbo.EventSpecimenNumber (@SuperiorEvent))
	insert into @TempEvent (CollectionEventID, EventParentID, Event, SpecimenCount) values (@SuperiorEvent, @EventParentID, @EventName, @SpecimenCount)
	set @SuperiorEvent = (select CollectionEventParentID from v_EventList where CollectionEventID = @SuperiorEvent)
end
    
   -- copy to the result of the function the required columns
   INSERT @EventList
   SELECT CollectionEventID, EventParentID, Event, SpecimenCount 
   FROM @TempEvent
   RETURN
END
GO
GRANT SELECT ON [dbo].[EventSuperiorList] TO [User] AS [dbo]
GO

/****** Object:  UserDefinedFunction [dbo].[ExchangeChildNodes]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  FUNCTION [dbo].[ExchangeChildNodes] (@ID int)  
RETURNS @ItemList TABLE ([ExchangeID] [int] Primary key  NOT NULL ,
	[ExchangeParentID] [int] NULL ,
	[ExchangeGroup] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[MaterialCategory] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL DEFAULT (N'specimen'),
	[NumberOfUnits] [smallint] NULL ,
	[ExchangeTitle] [nvarchar] (100) COLLATE Latin1_General_CI_AS NOT NULL ,
	[ExchangeType] [nvarchar] (50) COLLATE Latin1_General_CI_AS NOT NULL DEFAULT (N'exchange'),
	[ExchangePartnerName] [nvarchar] (200) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangePartnerAgentURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeComment] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeNumber] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeDate] [datetime] NULL ,
	[InternalNotes] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[ResponsibleName] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[ResponsibleAgentURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL  )

/*
Returns a result set that lists all the items within a hierarchy starting at the topmost item related to the given item.
MW02.01.2006
*/
AS
BEGIN
   declare @ParentID int
   DECLARE @TempItem TABLE ([ExchangeID] [int] Primary key  NOT NULL ,
	[ExchangeParentID] [int] NULL ,
	[ExchangeGroup] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[MaterialCategory] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL DEFAULT (N'specimen'),
	[NumberOfUnits] [smallint] NULL ,
	[ExchangeTitle] [nvarchar] (100) COLLATE Latin1_General_CI_AS NOT NULL ,
	[ExchangeType] [nvarchar] (50) COLLATE Latin1_General_CI_AS NOT NULL DEFAULT (N'exchange'),
	[ExchangePartnerName] [nvarchar] (200) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangePartnerAgentURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeComment] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeNumber] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeDate] [datetime] NULL ,
	[InternalNotes] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[ResponsibleName] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[ResponsibleAgentURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL )

INSERT @TempItem (  ExchangeID, ExchangeParentID, ExchangeGroup, MaterialCategory, NumberOfUnits, ExchangeTitle, ExchangeType, ExchangePartnerName, 
                      ExchangePartnerAgentURI, ExchangeComment, ExchangeNumber, ExchangeDate, InternalNotes, ResponsibleName, ResponsibleAgentURI) 
	SELECT  ExchangeID, ExchangeParentID, ExchangeGroup, MaterialCategory, NumberOfUnits, ExchangeTitle, ExchangeType, ExchangePartnerName, 
                      ExchangePartnerAgentURI, ExchangeComment, ExchangeNumber, ExchangeDate, InternalNotes, ResponsibleName, ResponsibleAgentURI
	FROM Exchange WHERE ExchangeParentID = @ID 

   DECLARE HierarchyCursor  CURSOR for
   select ExchangeID from @TempItem
   open HierarchyCursor
   FETCH next from HierarchyCursor into @ParentID
   WHILE @@FETCH_STATUS = 0
   BEGIN
	insert into @TempItem select  ExchangeID, ExchangeParentID, ExchangeGroup, MaterialCategory, NumberOfUnits, ExchangeTitle, ExchangeType, ExchangePartnerName, 
                      ExchangePartnerAgentURI, ExchangeComment, ExchangeNumber, ExchangeDate, InternalNotes, ResponsibleName, ResponsibleAgentURI
	from dbo.ExchangeChildNodes (@ParentID) where ExchangeID not in (select ExchangeID from @TempItem)
   	FETCH NEXT FROM HierarchyCursor into @ParentID
   END
   CLOSE HierarchyCursor
   DEALLOCATE HierarchyCursor
 INSERT @ItemList ( ExchangeID, ExchangeParentID, ExchangeGroup, MaterialCategory, NumberOfUnits, ExchangeTitle, ExchangeType, ExchangePartnerName, 
                      ExchangePartnerAgentURI, ExchangeComment, ExchangeNumber, ExchangeDate, InternalNotes, ResponsibleName, ResponsibleAgentURI) 
   SELECT distinct  ExchangeID, ExchangeParentID, ExchangeGroup, MaterialCategory, NumberOfUnits, ExchangeTitle, ExchangeType, ExchangePartnerName, 
                      ExchangePartnerAgentURI, ExchangeComment, ExchangeNumber, ExchangeDate, InternalNotes, ResponsibleName, ResponsibleAgentURI
   FROM @TempItem ORDER BY ExchangeTitle
   RETURN
END
GO
GRANT SELECT ON [dbo].[ExchangeChildNodes] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[ExchangeHierarchy]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  FUNCTION [dbo].[ExchangeHierarchy] (@ExchangeID int)  
RETURNS @ExchangeList TABLE ([ExchangeID] [int] Primary key  NOT NULL ,
	[ExchangeParentID] [int] NULL ,
	[ExchangeGroup] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[MaterialCategory] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL DEFAULT (N'specimen'),
	[NumberOfUnits] [smallint] NULL ,
	[ExchangeTitle] [nvarchar] (100) COLLATE Latin1_General_CI_AS NOT NULL ,
	[ExchangeType] [nvarchar] (50) COLLATE Latin1_General_CI_AS NOT NULL DEFAULT (N'exchange'),
	[ExchangePartnerName] [nvarchar] (200) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangePartnerAgentURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeComment] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeNumber] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeDate] [datetime] NULL ,
	[InternalNotes] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[ResponsibleName] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[ResponsibleAgentURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL )

/*
Returns a table that lists all the analysis items related to the given analysis.
MW 02.01.2006
*/
AS
BEGIN

-- getting the TopID
declare @TopID int
declare @i int

set @TopID = (select ExchangeParentID from Exchange where ExchangeID = @ExchangeID) 

set @i = (select count(*) from Exchange where ExchangeID = @ExchangeID)

if (@TopID is null )
	set @TopID =  @ExchangeID
else	
	begin
	while (@i > 0)
		begin
		set @ExchangeID = (select ExchangeParentID from Exchange where ExchangeID = @ExchangeID and not ExchangeParentID is null) 
		set @i = (select count(*) from Exchange where ExchangeID = @ExchangeID and not ExchangeParentID is null)
		end
	set @TopID = @ExchangeID
	end

-- copy the root node in the result list
   INSERT @ExchangeList
   SELECT DISTINCT ExchangeID, ExchangeParentID, ExchangeGroup, MaterialCategory, NumberOfUnits, ExchangeTitle, ExchangeType, ExchangePartnerName, 
                      ExchangePartnerAgentURI, ExchangeComment, ExchangeNumber, ExchangeDate, InternalNotes, ResponsibleName, ResponsibleAgentURI
   FROM Exchange
   WHERE Exchange.ExchangeID = @TopID

-- copy the child nodes into the result list
   INSERT @ExchangeList
   SELECT * FROM dbo.ExchangeChildNodes (@TopID)

   RETURN
END
GO
GRANT SELECT ON [dbo].[ExchangeHierarchy] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[FirstLines]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--#####################################################################################################################
--######   Korrektur FirstLines   ######################################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[FirstLines] 
(@CollectionSpecimenIDs varchar(8000))   
RETURNS @List TABLE (
	[CollectionSpecimenID] [int] Primary key, --
	[Accession_number] [nvarchar](50) NULL, --
-- WITHHOLDINGREASONS
	[Data_withholding_reason] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collection_event] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collector] [nvarchar](255) NULL, --
--CollectionEvent
	[Collectors_event_number] [nvarchar](50) NULL, --
	[Collection_day] [tinyint] NULL, --
	[Collection_month] [tinyint] NULL, --
	[Collection_year] [smallint] NULL, --
	[Collection_date_supplement] [nvarchar](100) NULL, --
	[Collection_time] [varchar](50) NULL, --
	[Collection_time_span] [varchar](50) NULL, --
	[Country] [nvarchar](50) NULL, --
	[Locality_description] [nvarchar](max) NULL, --
	[Habitat_description] [nvarchar](max) NULL, -- 
	[Collecting_method] [nvarchar](max) NULL, --
	[Collection_event_notes] [nvarchar](max) NULL, --
--Localisation
	[Named_area] [nvarchar](255) NULL, -- 
	[NamedAreaLocation2] [nvarchar](255) NULL, --
	[Remove_link_to_gazetteer] [int] NULL,
	[Distance_to_location] [varchar](50) NULL, --
	[Direction_to_location] [varchar](50) NULL, --
	[Longitude] [nvarchar](255) NULL, --
	[Latitude] [nvarchar](255) NULL, --
	[Coordinates_accuracy] [nvarchar](50) NULL, --
	[Link_to_GoogleMaps] [int] NULL,
	[Altitude_from] [nvarchar](255) NULL, --
	[Altitude_to] [nvarchar](255) NULL, --
	[Altitude_accuracy] [nvarchar](50) NULL, --
	[MTB] [nvarchar](255) NULL, --
	[Quadrant] [nvarchar](255) NULL, --
	[Notes_for_MTB] [nvarchar](max) NULL, --
	[Sampling_plot] [nvarchar](255) NULL, --
	[Link_to_SamplingPlots] [nvarchar](255) NULL, --
	[Remove_link_to_SamplingPlots] [int] NULL,
	[Accuracy_of_sampling_plot] [nvarchar](50) NULL, --
	[Latitude_of_sampling_plot] [real] NULL, --
	[Longitude_of_sampling_plot] [real] NULL, --
--Properties
	[Geographic_region] [nvarchar](255) NULL, --
	[Lithostratigraphy] [nvarchar](255) NULL, --
	[Chronostratigraphy] [nvarchar](255) NULL, --
--Agent
	[Collectors_name] [nvarchar](255) NULL, --
	[Link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_collector] [int] NULL,
	[Collectors_number] [nvarchar](50) NULL, --
	[Notes_about_collector] [nvarchar](max) NULL, --
--Accession
	[Accession_day] [tinyint] NULL, --
	[Accession_month] [tinyint] NULL, --
	[Accession_year] [smallint] NULL, --
	[Accession_date_supplement] [nvarchar](255) NULL, --
--Depositor
	[Depositors_name] [nvarchar](255) NULL, --
	[Depositors_link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_Depositor] [int] NULL,
	[Depositors_accession_number] [nvarchar](50) NULL, --
--Exsiccate
	[Exsiccata_abbreviation] [nvarchar](255) NULL, --
	[Link_to_DiversityExsiccatae] [varchar](255) NULL, --
	[Remove_link_to_exsiccatae] [int] NULL,
	[Exsiccata_number] [nvarchar](50) NULL, --
--Notes
	[Original_notes] [nvarchar](max) NULL, --
	[Additional_notes] [nvarchar](max) NULL, --
	[Internal_notes] [nvarchar](max) NULL, --
--Label
	[Label_title] [nvarchar](255) NULL, --
	[Label_type] [nvarchar](50) NULL, --
	[Label_transcription_state] [nvarchar](50) NULL, --
	[Label_transcription_notes] [nvarchar](255) NULL, --
	[Problems] [nvarchar](255) NULL, --
--1. Organism
	[Taxonomic_group] [nvarchar](50) NULL, --
	[Relation_type] [nvarchar](50) NULL, --
	[Colonised_substrate_part] [nvarchar](255) NULL, --
	[Life_stage] [nvarchar](255) NULL, --
	[Gender] [nvarchar](50) NULL, --
	[Number_of_units] [smallint] NULL, --
	[Circumstances] [nvarchar](50) NULL, -- 
	[Order_of_taxon] [nvarchar](255) NULL, --
	[Family_of_taxon] [nvarchar](255) NULL, --
	[Identifier_of_organism] [nvarchar](50) NULL, --
	[Description_of_organism] [nvarchar](50) NULL, --
	[Only_observed] [bit] NULL, --
	[Notes_for_organism] [nvarchar](max) NULL, --
--1. Identification
	[Taxonomic_name] [nvarchar](255) NULL, --
	[Link_to_DiversityTaxonNames] [varchar](255) NULL, --
	[Remove_link_for_identification] [int] NULL, 
	[Vernacular_term] [nvarchar](255) NULL, --
	[Identification_day] [tinyint] NULL, -- 
	[Identification_month] [tinyint] NULL, --
	[Identification_year] [smallint] NULL, --
	[Identification_category] [nvarchar](50) NULL, --
	[Identification_qualifier] [nvarchar](50) NULL, --
	[Type_status] [nvarchar](50) NULL, --
	[Type_notes] [nvarchar](max) NULL, --
	[Notes_for_identification] [nvarchar](max) NULL, --
	[Reference_title] [nvarchar](255) NULL, --
	[Link_to_DiversityReferences] [varchar](255) NULL, --
	[Remove_link_for_reference] [int] NULL,
	[Responsible] [nvarchar](255) NULL,
	[Link_to_DiversityAgents_for_responsible] [varchar](255) NULL, --
	[Remove_link_for_determiner] [int] NULL,
	[Analysis] [nvarchar](50) NULL, --
	[AnalysisID] [int] NULL, --
	[Analysis_number] [nvarchar](50) NULL, --
	[Analysis_result] [nvarchar](max) NULL, --
--2. Organism	
	[Taxonomic_group_of_second_organism] [nvarchar](50) NULL, --
	[Life_stage_of_second_organism] [nvarchar](255) NULL, --
	[Gender_of_second_organism] [nvarchar](50) NULL, --
	[Number_of_units_of_second_organism] [smallint] NULL, --
	[Circumstances_of_second_organism] [nvarchar](50) NULL, -- 
	[Identifier_of_second_organism] [nvarchar](50) NULL, --
	[Description_of_second_organism] [nvarchar](50) NULL, --
	[Only_observed_of_second_organism] [bit] NULL, --
	[Notes_for_second_organism] [nvarchar](max) NULL, --
--2. Identification	
	[Taxonomic_name_of_second_organism] [nvarchar](255) NULL, --
	[Link_to_DiversityTaxonNames_of_second_organism] [varchar](255) NULL, --
	[Remove_link_for_second_organism] [int] NULL,
	[Vernacular_term_of_second_organism] [nvarchar](255) NULL, --
	[Identification_day_of_second_organism] [tinyint] NULL, -- 
	[Identification_month_of_second_organism] [tinyint] NULL, --
	[Identification_year_of_second_organism] [smallint] NULL, --
	[Identification_category_of_second_organism] [nvarchar](50) NULL, --
	[Identification_qualifier_of_second_organism] [nvarchar](50) NULL, --
	[Type_status_of_second_organism] [nvarchar](50) NULL, --
	[Type_notes_of_second_organism] [nvarchar](max) NULL, --
	[Notes_for_identification_of_second_organism] [nvarchar](max) NULL, --
	[Reference_title_of_second_organism] [nvarchar](255) NULL, --
	[Link_to_DiversityReferences_of_second_organism] [varchar](255) NULL, --
	[Remove_link_for_reference_of_second_organism] [int] NULL,
	[Responsible_of_second_organism] [nvarchar](255) NULL,
	[Link_to_DiversityAgents_for_responsible_of_second_organism] [varchar](255) NULL, --
	[Remove_link_for_responsible_of_second_organism] [int] NULL,
--Storage	
	[Collection] [int] NULL, --
	[Material_category] [nvarchar](50) NULL, --
	[Storage_location] [nvarchar](255) NULL, --
	[Stock] [tinyint] NULL, --
	[Preparation_method] [nvarchar](max) NULL, --
	[Preparation_date] [datetime] NULL, --
	[Notes_for_part] [nvarchar](max) NULL, --
--Transaction
	[_TransactionID] [int] NULL, --
	[_Transaction] [nvarchar](200) NULL, --
	[On_loan] [int] NULL, --
--Hidden fields
	[_CollectionEventID] [int] NULL, --
	[_IdentificationUnitID] [int] NULL, --
	[_IdentificationSequence] [smallint] NULL, --
	[_SecondUnitID] [int] NULL, --
	[_SecondSequence] [smallint] NULL, --
	[_SpecimenPartID] [int] NULL, --
	[_CoordinatesAverageLatitudeCache] [real] NULL, --
	[_CoordinatesAverageLongitudeCache] [real] NULL, --
	[_CoordinatesLocationNotes] [nvarchar](max) NULL, --
	[_GeographicRegionPropertyURI] [varchar](255) NULL, --
	[_LithostratigraphyPropertyURI] [varchar](255) NULL, --
	[_ChronostratigraphyPropertyURI] [varchar](255) NULL, --
	[_NamedAverageLatitudeCache] [real] NULL, --
	[_NamedAverageLongitudeCache] [real] NULL, --
	[_LithostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_ChronostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_SecondUnitFamilyCache] [nvarchar](255) NULL, --
	[_SecondUnitOrderCache] [nvarchar](255) NULL, --
	[_AverageAltitudeCache] [real] NULL)     --
/* 
Returns a table that lists all the specimen with the first entries of related tables. 
MW 18.11.2009 
TEST: 
Select * from dbo.FirstLines('189876, 189882, 189885, 189891, 189900, 189905, 189919, 189923, 189936, 189939, 189941, 189956, 189974, 189975, 189984, 189988, 189990, 189995, 190014, 190016, 190020, 190028, 190040, 190049, 190051, 190055, 190058, 190062, 190073, 190080, 190081, 190085, 190091, 190108, 190117, 190120, 190122, 190128, 190130, 190142')
Select * from dbo.FirstLines('3251, 3252')
*/ 
AS 
BEGIN 

declare @IDs table (ID int  Primary key)
declare @sID varchar(50)
while @CollectionSpecimenIDs <> ''
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
	begin
	set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
	set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 2, 8000)))
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
	else
	begin
	set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
	set @CollectionSpecimenIDs = ''
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
end

--- Specimen
insert into @List (CollectionSpecimenID
, Accession_number
, Data_withholding_reason
, _CollectionEventID
, Accession_day
, Accession_month
, Accession_year
, Accession_date_supplement
, Depositors_name
, Depositors_link_to_DiversityAgents
, Depositors_accession_number
, Exsiccata_abbreviation
, Link_to_DiversityExsiccatae
, Original_notes
, Additional_notes
, Internal_notes
, Label_title
, Label_type
, Label_transcription_state
, Label_transcription_notes
, Problems
)
select S.CollectionSpecimenID
, S.AccessionNumber
, S.DataWithholdingReason
, S.CollectionEventID 
, AccessionDay
, AccessionMonth
, AccessionYear
, AccessionDateSupplement
, DepositorsName
, DepositorsAgentURI
, DepositorsAccessionNumber
, ExsiccataAbbreviation
, ExsiccataURI
, OriginalNotes
, AdditionalNotes
, InternalNotes
, LabelTitle
, LabelType
, LabelTranscriptionState
, LabelTranscriptionNotes
, Problems
from dbo.CollectionSpecimen S
where S.CollectionSpecimenID in (select ID from @IDs)  



--- Event

update L
set L.Collection_day = E.CollectionDay
, L.Collection_month = E.CollectionMonth
, L.Collection_year = E.CollectionYear
, L.Collection_date_supplement = E.CollectionDateSupplement
, L.Collection_time = E.CollectionTime
, L.Collection_time_span = E.CollectionTimeSpan
, L.Country = E.CountryCache
, L.Locality_description = E.LocalityDescription
, L.Habitat_description = E.HabitatDescription
, L.Collecting_method = E.CollectingMethod
, L.Collection_event_notes = E.Notes
, L.Data_withholding_reason_for_collection_event = E.DataWithholdingReason
, L.Collectors_event_number = E.CollectorsEventNumber
from @List L,
CollectionEvent E
where L._CollectionEventID = E.CollectionEventID



--- Named Area

update L
set L.Named_area = E.Location1
, L.NamedAreaLocation2 = E.Location2
, L.Distance_to_location = E.DistanceToLocation
, L.Direction_to_location = E.DirectionToLocation
, L._NamedAverageLatitudeCache = E.AverageLatitudeCache
, L._NamedAverageLongitudeCache = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 7


--- Coordinates

update L
set L.Longitude = E.Location1
, L.Latitude = E.Location2
, L.Coordinates_accuracy = E.LocationAccuracy
, L._CoordinatesAverageLatitudeCache = E.AverageLatitudeCache
, L._CoordinatesAverageLongitudeCache = E.AverageLongitudeCache
, L._CoordinatesLocationNotes = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 8


--- Altitude

update L
set L.Altitude_from = E.Location1
, L.Altitude_to = E.Location2
, L.Altitude_accuracy = E.LocationAccuracy
, L._AverageAltitudeCache = E.AverageAltitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 4



--- MTB

update L
set L.MTB = E.Location1
, L.Quadrant = E.Location2
, L.Notes_for_MTB = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 3



--- SamplingPlots

update L
set L.Sampling_plot = E.Location1
, L.Link_to_SamplingPlots = E.Location2
, L.Accuracy_of_sampling_plot = E.LocationAccuracy
, L.Latitude_of_sampling_plot = E.AverageLatitudeCache
, L.Longitude_of_sampling_plot = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 13



--- GeographicRegions

update L
set L.Geographic_region = P.DisplayText
, L._GeographicRegionPropertyURI = P.PropertyURI
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 10


--- Lithostratigraphy

update L
set L.Lithostratigraphy = P.DisplayText
, L._LithostratigraphyPropertyURI = P.PropertyURI
, L._LithostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 30



--- Chronostratigraphy

update L
set L.Chronostratigraphy = P.DisplayText
, L._ChronostratigraphyPropertyURI = P.PropertyURI
, L._ChronostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 20



--- Collector

update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
--,dbo.CollectionAgent Amin
where L.CollectionSpecimenID = A.CollectionSpecimenID
--and A.CollectionSpecimenID = Amin.CollectionSpecimenID
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.CollectorsSequence) = A.CollectorsSequence))

update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and L.Collectors_name is null
and A.CollectorsSequence is null
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.LogCreatedWhen) = A.LogCreatedWhen))

--- IdentificationUnit
-- getting the unit IDs of the specimen
declare @AllUnitIDs table (UnitID int  Primary key, ID int, DisplayOrder smallint, RelatedUnitID int)
declare @UnitIDs table (UnitID int  Primary key, ID int, DisplayOrder smallint, RelatedUnitID int)

insert into @AllUnitIDs (UnitID, ID, DisplayOrder, RelatedUnitID)
select U.IdentificationUnitID, U.CollectionSpecimenID, U.DisplayOrder, U.RelatedUnitID
from IdentificationUnit as U, @IDs as IDs
where DisplayOrder > 0
and IDs.ID = U.CollectionSpecimenID 

insert into @UnitIDs (UnitID, ID, DisplayOrder, RelatedUnitID)
select U.UnitID, U.ID, U.DisplayOrder, U.RelatedUnitID
from @AllUnitIDs as U
where exists (select * from @AllUnitIDs aU group by aU.ID having min(aU.DisplayOrder) = U.DisplayOrder)

update L
set L.Taxonomic_group = I.TaxonomicGroup
, L._IdentificationUnitID = I.IdentificationUnitID
, L.Relation_type = I.RelationType
, L.Colonised_substrate_part = I.ColonisedSubstratePart
, L.Life_stage = I.LifeStage
, L.Gender = I.Gender
, L.Number_of_units = I.NumberOfUnits
, L.Circumstances = I.Circumstances
, L.Order_of_taxon = I.OrderCache
, L.Family_of_taxon = I.FamilyCache
, L.Identifier_of_organism = I.UnitIdentifier
, L.Description_of_organism = I.UnitDescription
, L.Only_observed = I.OnlyObserved
, L.Notes_for_organism = I.Notes
, L.Exsiccata_number = I.ExsiccataNumber
, L._SecondUnitID = U1.RelatedUnitID
from @List L,
@UnitIDs U1,
dbo.IdentificationUnit I
where L.CollectionSpecimenID = U1.ID
and L.CollectionSpecimenID = I.CollectionSpecimenID
and U1.ID = I.CollectionSpecimenID
and U1.UnitID = I.IdentificationUnitID



--- Identification

update L
set L._IdentificationSequence = I.IdentificationSequence
, L.Taxonomic_name = I.TaxonomicName
, L.Link_to_DiversityTaxonNames = I.NameURI
, L.Vernacular_term = I.VernacularTerm
, L.Identification_day = I.IdentificationDay
, L.Identification_month = I.IdentificationMonth
, L.Identification_year = I.IdentificationYear
, L.Identification_category = I.IdentificationCategory
, L.Identification_qualifier = I.IdentificationQualifier
, L.Type_status = I.TypeStatus
, L.Type_notes = I.TypeNotes
, L.Notes_for_identification = I.Notes
, L.Reference_title = I.ReferenceTitle
, L.Link_to_DiversityReferences = I.ReferenceURI
, L.Responsible = I.ResponsibleName
, L.Link_to_DiversityAgents_for_responsible = I.ResponsibleAgentURI
from @List L,
dbo.Identification I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.Identification AS Imax
	GROUP BY CollectionSpecimenID, IdentificationUnitID
	HAVING (Imax.CollectionSpecimenID = I.CollectionSpecimenID) AND (Imax.IdentificationUnitID = I.IdentificationUnitID) AND 
	(MAX(Imax.IdentificationSequence) = I.IdentificationSequence))



--- IdentificationUnitAnalysis

update L
set L.AnalysisID = I.AnalysisID
, L.Analysis_number = I.AnalysisNumber
, L.Analysis_result = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (MIN(Imin.AnalysisID) = I.AnalysisID) 
	AND (MIN(Imin.AnalysisNumber) = I.AnalysisNumber))

update L
set L.Analysis = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID = A.AnalysisID



--- SecondIdentificationUnit

update L

set L.Taxonomic_group_of_second_organism = I.TaxonomicGroup

--, L._IdentificationUnitID = I.IdentificationUnitID
, L.Life_stage_of_second_organism = I.LifeStage
, L.Gender_of_second_organism = I.Gender
, L.Number_of_units_of_second_organism = I.NumberOfUnits
, L.Circumstances_of_second_organism = I.Circumstances
, L.Identifier_of_second_organism = I.UnitIdentifier
, L.Description_of_second_organism = I.UnitDescription
, L.Only_observed_of_second_organism = I.OnlyObserved
, L.Notes_for_second_organism = I.Notes

, L._SecondUnitFamilyCache = I.FamilyCache
, L._SecondUnitOrderCache = I.OrderCache
from @List L,
dbo.IdentificationUnit I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._SecondUnitID = I.IdentificationUnitID


--- SecondIdentification

update L
set L._SecondSequence = I.IdentificationSequence
, L.Taxonomic_name_of_second_organism = I.TaxonomicName
, L.Link_to_DiversityTaxonNames_of_second_organism = I.NameURI
, L.Vernacular_term_of_second_organism = I.VernacularTerm

, L.Identification_day_of_second_organism = I.IdentificationDay
, L.Identification_month_of_second_organism = I.IdentificationMonth
, L.Identification_year_of_second_organism = I.IdentificationYear
, L.Identification_category_of_second_organism = I.IdentificationCategory
, L.Identification_qualifier_of_second_organism = I.IdentificationQualifier
, L.Type_status_of_second_organism = I.TypeStatus
, L.Type_notes_of_second_organism = I.TypeNotes
, L.Notes_for_identification_of_second_organism = I.Notes
, L.Reference_title_of_second_organism = I.ReferenceTitle
, L.Link_to_DiversityReferences_of_second_organism = I.ReferenceURI
, L.Responsible_of_second_organism = I.ResponsibleName
, L.Link_to_DiversityAgents_for_responsible_of_second_organism = I.ResponsibleAgentURI

from @List L,
dbo.Identification I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._SecondUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.Identification AS Imax
	GROUP BY CollectionSpecimenID, IdentificationUnitID
	HAVING (Imax.CollectionSpecimenID = I.CollectionSpecimenID) AND (Imax.IdentificationUnitID = I.IdentificationUnitID) AND 
	(MAX(Imax.IdentificationSequence) = I.IdentificationSequence))
	
	
--- CollectionSpecimenPart	

update L
set L._SpecimenPartID = P.SpecimenPartID
, L.Collection = P.CollectionID
, L.Material_category = P.MaterialCategory
, L.Storage_location = P.StorageLocation
, L.Stock = P.Stock
, L.Preparation_method = P.PreparationMethod
, L.Preparation_date = P.PreparationDate
, L.Notes_for_part = P.Notes
from @List L,
dbo.CollectionSpecimenPart P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and EXISTS
	(SELECT Pmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenPart AS Pmin
	GROUP BY Pmin.CollectionSpecimenID
	HAVING (Pmin.CollectionSpecimenID = P.CollectionSpecimenID) AND (MIN(Pmin.SpecimenPartID) = P.SpecimenPartID))



--- Transaction

update L
set L._TransactionID = P.TransactionID
, L.On_loan = P.IsOnLoan
from @List L,
dbo.CollectionSpecimenTransaction P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and L._SpecimenPartID = P.SpecimenPartID
and EXISTS
	(SELECT Tmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenTransaction AS Tmin
	GROUP BY Tmin.CollectionSpecimenID, Tmin.SpecimenPartID
	HAVING (Tmin.CollectionSpecimenID = P.CollectionSpecimenID) 
	AND Tmin.SpecimenPartID = P.SpecimenPartID
	AND (MIN(Tmin.TransactionID) = P.TransactionID))
	
	
update L
set L._Transaction = T.TransactionTitle
from @List L,
dbo.[Transaction] T
where L._TransactionID = T.TransactionID
                  
RETURN 
END   

GO
GRANT SELECT ON [dbo].[FirstLines] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[FirstLines_2]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FirstLines_2] 
(@CollectionSpecimenIDs varchar(8000))   
RETURNS @List TABLE (
	[CollectionSpecimenID] [int] Primary key, --
	[Accession_number] [nvarchar](50) NULL, --
	[Data_withholding_reason] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collection_event] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collector] [nvarchar](255) NULL, --
	[Collectors_event_number] [nvarchar](50) NULL, --
	[Collection_day] [tinyint] NULL, --
	[Collection_month] [tinyint] NULL, --
	[Collection_year] [smallint] NULL, --
	[Collection_date_supplement] [nvarchar](100) NULL, --
	[Collection_time] [varchar](50) NULL, --
	[Collection_time_span] [varchar](50) NULL, --
	[Country] [nvarchar](50) NULL, --
	[Locality_description] [nvarchar](max) NULL, --
	[Habitat_description] [nvarchar](max) NULL, -- 
	[Collecting_method] [nvarchar](max) NULL, --
	[Collection_event_notes] [nvarchar](max) NULL, --
	[Named_area] [nvarchar](255) NULL, -- 
	[NamedAreaLocation2] [nvarchar](255) NULL, --
	[Remove_link_to_gazetteer] [int] NULL,
	[Distance_to_location] [varchar](50) NULL, --
	[Direction_to_location] [varchar](50) NULL, --
	[Longitude] [nvarchar](255) NULL, --
	[Latitude] [nvarchar](255) NULL, --
	[Coordinates_accuracy] [nvarchar](50) NULL, --
	[Link_to_GoogleMaps] [int] NULL,
	[_CoordinatesLocationNotes] [nvarchar](max) NULL, --
	[Altitude_from] [nvarchar](255) NULL, --
	[Altitude_to] [nvarchar](255) NULL, --
	[Altitude_accuracy] [nvarchar](50) NULL, --
	[Notes_for_Altitude] [nvarchar](max) NULL, --
	[MTB] [nvarchar](255) NULL, --
	[Quadrant] [nvarchar](255) NULL, --
	[Notes_for_MTB] [nvarchar](max) NULL, --
	[Sampling_plot] [nvarchar](255) NULL, --
	[Link_to_SamplingPlots] [nvarchar](255) NULL, --
	[Remove_link_to_SamplingPlots] [int] NULL,
	[Accuracy_of_sampling_plot] [nvarchar](50) NULL, --
	[Latitude_of_sampling_plot] [real] NULL, --
	[Longitude_of_sampling_plot] [real] NULL, --
	[Geographic_region] [nvarchar](255) NULL, --
	[Lithostratigraphy] [nvarchar](255) NULL, --
	[Chronostratigraphy] [nvarchar](255) NULL, --
	[Collectors_name] [nvarchar](255) NULL, --
	[Link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_collector] [int] NULL,
	[Collectors_number] [nvarchar](50) NULL, --
	[Notes_about_collector] [nvarchar](max) NULL, --
	[Accession_day] [tinyint] NULL, --
	[Accession_month] [tinyint] NULL, --
	[Accession_year] [smallint] NULL, --
	[Accession_date_supplement] [nvarchar](255) NULL, --
	[Depositors_name] [nvarchar](255) NULL, --
	[Depositors_link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_Depositor] [int] NULL,
	[Depositors_accession_number] [nvarchar](50) NULL, --
	[Exsiccata_abbreviation] [nvarchar](255) NULL, --
	[Link_to_DiversityExsiccatae] [varchar](255) NULL, --
	[Remove_link_to_exsiccatae] [int] NULL,
	[Exsiccata_number] [nvarchar](50) NULL, --
	[Original_notes] [nvarchar](max) NULL, --
	[Additional_notes] [nvarchar](max) NULL, --
	[Internal_notes] [nvarchar](max) NULL, --
	[Label_title] [nvarchar](255) NULL, --
	[Label_type] [nvarchar](50) NULL, --
	[Label_transcription_state] [nvarchar](50) NULL, --
	[Label_transcription_notes] [nvarchar](255) NULL, --
	[Problems] [nvarchar](255) NULL, --
	[Taxonomic_group] [nvarchar](50) NULL, --
	[Relation_type] [nvarchar](50) NULL, --
	[Colonised_substrate_part] [nvarchar](255) NULL, --
	[Life_stage] [nvarchar](255) NULL, --
	[Gender] [nvarchar](50) NULL, --
	[Number_of_units] [smallint] NULL, --
	[Circumstances] [nvarchar](50) NULL, -- 
	[Order_of_taxon] [nvarchar](255) NULL, --
	[Family_of_taxon] [nvarchar](255) NULL, --
	[Identifier_of_organism] [nvarchar](50) NULL, --
	[Description_of_organism] [nvarchar](50) NULL, --
	[Only_observed] [bit] NULL, --
	[Notes_for_organism] [nvarchar](max) NULL, --
	[Taxonomic_name] [nvarchar](255) NULL, --
	[Link_to_DiversityTaxonNames] [varchar](255) NULL, --
	[Remove_link_for_identification] [int] NULL, 
	[Vernacular_term] [nvarchar](255) NULL, --
	[Identification_day] [tinyint] NULL, -- 
	[Identification_month] [tinyint] NULL, --
	[Identification_year] [smallint] NULL, --
	[Identification_category] [nvarchar](50) NULL, --
	[Identification_qualifier] [nvarchar](50) NULL, --
	[Type_status] [nvarchar](50) NULL, --
	[Type_notes] [nvarchar](max) NULL, --
	[Notes_for_identification] [nvarchar](max) NULL, --
	[Reference_title] [nvarchar](255) NULL, --
	[Link_to_DiversityReferences] [varchar](255) NULL, --
	[Remove_link_for_reference] [int] NULL,
	[Determiner] [nvarchar](255) NULL,
	[Link_to_DiversityAgents_for_determiner] [varchar](255) NULL, --
	[Remove_link_for_determiner] [int] NULL,
	[Analysis] [nvarchar](50) NULL, --
	[AnalysisID] [int] NULL, --
	[Analysis_number] [nvarchar](50) NULL, --
	[Analysis_result] [nvarchar](max) NULL, --
	[Taxonomic_group_of_second_organism] [nvarchar](50) NULL, --
	[Life_stage_of_second_organism] [nvarchar](255) NULL, --
	[Gender_of_second_organism] [nvarchar](50) NULL, --
	[Number_of_units_of_second_organism] [smallint] NULL, --
	[Circumstances_of_second_organism] [nvarchar](50) NULL, -- 
	[Identifier_of_second_organism] [nvarchar](50) NULL, --
	[Description_of_second_organism] [nvarchar](50) NULL, --
	[Only_observed_of_second_organism] [bit] NULL, --
	[Notes_for_second_organism] [nvarchar](max) NULL, --
	[Taxonomic_name_of_second_organism] [nvarchar](255) NULL, --
	[Link_to_DiversityTaxonNames_of_second_organism] [varchar](255) NULL, --
	[Remove_link_for_second_organism] [int] NULL,
	[Vernacular_term_of_second_organism] [nvarchar](255) NULL, --
	[Identification_day_of_second_organism] [tinyint] NULL, -- 
	[Identification_month_of_second_organism] [tinyint] NULL, --
	[Identification_year_of_second_organism] [smallint] NULL, --
	[Identification_category_of_second_organism] [nvarchar](50) NULL, --
	[Identification_qualifier_of_second_organism] [nvarchar](50) NULL, --
	[Type_status_of_second_organism] [nvarchar](50) NULL, --
	[Type_notes_of_second_organism] [nvarchar](max) NULL, --
	[Notes_for_identification_of_second_organism] [nvarchar](max) NULL, --
	[Reference_title_of_second_organism] [nvarchar](255) NULL, --
	[Link_to_DiversityReferences_of_second_organism] [varchar](255) NULL, --
	[Remove_link_for_reference_of_second_organism] [int] NULL,
	[Determiner_of_second_organism] [nvarchar](255) NULL,
	[Link_to_DiversityAgents_for_determiner_of_second_organism] [varchar](255) NULL, --
	[Remove_link_for_determiner_of_second_organism] [int] NULL,
	[Collection] [int] NULL, --
	[Material_category] [nvarchar](50) NULL, --
	[Storage_location] [nvarchar](255) NULL, --
	[Stock] [tinyint] NULL, --
	[Preparation_method] [nvarchar](max) NULL, --
	[Preparation_date] [datetime] NULL, --
	[Notes_for_part] [nvarchar](max) NULL, --
	[_TransactionID] [int] NULL, --
	[_Transaction] [nvarchar](200) NULL, --
	[On_loan] [int] NULL, --
	[_CollectionEventID] [int] NULL, --
	[_IdentificationUnitID] [int] NULL, --
	[_IdentificationSequence] [smallint] NULL, --
	[_SecondUnitID] [int] NULL, --
	[_SecondSequence] [smallint] NULL, --
	[_SpecimenPartID] [int] NULL, --
	[_CoordinatesAverageLatitudeCache] [real] NULL, --
	[_CoordinatesAverageLongitudeCache] [real] NULL, --
	[_GeographicRegionPropertyURI] [varchar](255) NULL, --
	[_LithostratigraphyPropertyURI] [varchar](255) NULL, --
	[_ChronostratigraphyPropertyURI] [varchar](255) NULL, --
	[_NamedAverageLatitudeCache] [real] NULL, --
	[_NamedAverageLongitudeCache] [real] NULL, --
	[_LithostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_ChronostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_SecondUnitFamilyCache] [nvarchar](255) NULL, --
	[_SecondUnitOrderCache] [nvarchar](255) NULL, --
	[_AverageAltitudeCache] [real] NULL)     --
/* 
Returns a table that lists all the specimen with the first entries of related tables. 
MW 18.11.2009 
TEST: 
Select * from dbo.FirstLines_2('189876, 189882, 189885, 189891, 189900, 189905, 189919, 189923, 189936, 189939, 189941, 189956, 189974, 189975, 189984, 189988, 189990, 189995, 190014, 190016, 190020, 190028, 190040, 190049, 190051, 190055, 190058, 190062, 190073, 190080, 190081, 190085, 190091, 190108, 190117, 190120, 190122, 190128, 190130, 190142')
Select 	[Altitude_from],
	[Altitude_to],
	[Altitude_accuracy],
	[Notes_for_Altitude],
	[MTB] [nvarchar],
	[Quadrant] [nvarchar],
	[Notes_for_MTB],
	[Sampling_plot],
	[Link_to_SamplingPlots],
	[Remove_link_to_SamplingPlots]
 from dbo.FirstLines_2('3251, 3252')
 Select *
 from dbo.FirstLines_2('3251,3252')
 Select *
 from dbo.FirstLines_2('3251, 3252')
 Select *
 from dbo.FirstLines_2('3251, 3252,')
 Select *
 from dbo.FirstLines_2('3251,')
 Select *
 from dbo.FirstLines_2('3251')
*/ 
AS 
BEGIN 
declare @IDs table (ID int  Primary key)
declare @sID varchar(50)
while @CollectionSpecimenIDs <> ''-- AND charindex(',',@CollectionSpecimenIDs) > 0
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
		begin
		set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
		set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 1, 8000)))
		if (isnumeric(@sID) = 1)
			begin
				insert into @IDs 
				values( @sID )
			end
		end
	else
		begin
		if (isnumeric(@CollectionSpecimenIDs) = 1 AND ((select count(*) from @IDs) = 0 OR len(rtrim(ltrim(@CollectionSpecimenIDs))) >= len(@sID)))
			begin
				set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
				insert into @IDs 
				values( @sID )
			end
		set @CollectionSpecimenIDs = ''
		end
end
insert into @List (CollectionSpecimenID
, Accession_number
, Data_withholding_reason
, _CollectionEventID
, Accession_day
, Accession_month
, Accession_year
, Accession_date_supplement
, Depositors_name
, Depositors_link_to_DiversityAgents
, Depositors_accession_number
, Exsiccata_abbreviation
, Link_to_DiversityExsiccatae
, Original_notes
, Additional_notes
, Internal_notes
, Label_title
, Label_type
, Label_transcription_state
, Label_transcription_notes
, Problems
)
select S.CollectionSpecimenID
, S.AccessionNumber
, S.DataWithholdingReason
, S.CollectionEventID 
, AccessionDay
, AccessionMonth
, AccessionYear
, AccessionDateSupplement
, DepositorsName
, DepositorsAgentURI
, DepositorsAccessionNumber
, ExsiccataAbbreviation
, ExsiccataURI
, OriginalNotes
, AdditionalNotes
, InternalNotes
, LabelTitle
, LabelType
, LabelTranscriptionState
, LabelTranscriptionNotes
, Problems
from dbo.CollectionSpecimen S, dbo.CollectionSpecimenID_UserAvailable U
where S.CollectionSpecimenID in (select ID from @IDs)  
and U.CollectionSpecimenID = S.CollectionSpecimenID
update L
set L.Collection_day = E.CollectionDay
, L.Collection_month = E.CollectionMonth
, L.Collection_year = E.CollectionYear
, L.Collection_date_supplement = E.CollectionDateSupplement
, L.Collection_time = E.CollectionTime
, L.Collection_time_span = E.CollectionTimeSpan
, L.Country = E.CountryCache
, L.Locality_description = E.LocalityDescription
, L.Habitat_description = E.HabitatDescription
, L.Collecting_method = E.CollectingMethod
, L.Collection_event_notes = E.Notes
, L.Data_withholding_reason_for_collection_event = E.DataWithholdingReason
, L.Collectors_event_number = E.CollectorsEventNumber
from @List L,
CollectionEvent E
where L._CollectionEventID = E.CollectionEventID
update L
set L.Named_area = E.Location1
, L.NamedAreaLocation2 = E.Location2
, L.Distance_to_location = E.DistanceToLocation
, L.Direction_to_location = E.DirectionToLocation
, L._NamedAverageLatitudeCache = E.AverageLatitudeCache
, L._NamedAverageLongitudeCache = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 7
update L
set L.Longitude = E.Location1
, L.Latitude = E.Location2
, L.Coordinates_accuracy = E.LocationAccuracy
, L._CoordinatesAverageLatitudeCache = E.AverageLatitudeCache
, L._CoordinatesAverageLongitudeCache = E.AverageLongitudeCache
, L._CoordinatesLocationNotes = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 8
update L
set L.Altitude_from = E.Location1
, L.Altitude_to = E.Location2
, L.Altitude_accuracy = E.LocationAccuracy
, L._AverageAltitudeCache = E.AverageAltitudeCache
, L.Notes_for_Altitude = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 4
update L
set L.MTB = E.Location1
, L.Quadrant = E.Location2
, L.Notes_for_MTB = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 3
update L
set L.Sampling_plot = E.Location1
, L.Link_to_SamplingPlots = E.Location2
, L.Accuracy_of_sampling_plot = E.LocationAccuracy
, L.Latitude_of_sampling_plot = E.AverageLatitudeCache
, L.Longitude_of_sampling_plot = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 13
update L
set L.Geographic_region = P.DisplayText
, L._GeographicRegionPropertyURI = P.PropertyURI
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 10
update L
set L.Lithostratigraphy = P.DisplayText
, L._LithostratigraphyPropertyURI = P.PropertyURI
, L._LithostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 30
update L
set L.Chronostratigraphy = P.DisplayText
, L._ChronostratigraphyPropertyURI = P.PropertyURI
, L._ChronostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 20
update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.CollectorsSequence) = A.CollectorsSequence))
update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and L.Collectors_name is null
and A.CollectorsSequence is null
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.LogCreatedWhen) = A.LogCreatedWhen))
declare @AllUnitIDs table (UnitID int  Primary key, ID int, DisplayOrder smallint, RelatedUnitID int)
declare @UnitIDs table (UnitID int  Primary key, ID int, DisplayOrder smallint, RelatedUnitID int)
insert into @AllUnitIDs (UnitID, ID, DisplayOrder, RelatedUnitID)
select U.IdentificationUnitID, U.CollectionSpecimenID, U.DisplayOrder, U.RelatedUnitID
from IdentificationUnit as U, @IDs as IDs
where DisplayOrder > 0
and IDs.ID = U.CollectionSpecimenID 
insert into @UnitIDs (UnitID, ID, DisplayOrder, RelatedUnitID)
select U.UnitID, U.ID, U.DisplayOrder, U.RelatedUnitID
from @AllUnitIDs as U,  @AllUnitIDs as M
where U.ID = M.ID
group by M.ID, U.DisplayOrder, U.ID, U.RelatedUnitID, U.UnitID
having U.DisplayOrder = MIN(M.DisplayOrder)
/*
select U.UnitID, U.ID, U.DisplayOrder, U.RelatedUnitID
from @AllUnitIDs as U
where exists (select * from @AllUnitIDs aU group by aU.ID having min(aU.DisplayOrder) = U.DisplayOrder)
*/
update L
set L.Taxonomic_group = I.TaxonomicGroup
, L._IdentificationUnitID = I.IdentificationUnitID
, L.Relation_type = I.RelationType
, L.Colonised_substrate_part = I.ColonisedSubstratePart
, L.Life_stage = I.LifeStage
, L.Gender = I.Gender
, L.Number_of_units = I.NumberOfUnits
, L.Circumstances = I.Circumstances
, L.Order_of_taxon = I.OrderCache
, L.Family_of_taxon = I.FamilyCache
, L.Identifier_of_organism = I.UnitIdentifier
, L.Description_of_organism = I.UnitDescription
, L.Only_observed = I.OnlyObserved
, L.Notes_for_organism = I.Notes
, L.Exsiccata_number = I.ExsiccataNumber
, L._SecondUnitID = U1.RelatedUnitID
from @List L,
@UnitIDs U1,
dbo.IdentificationUnit I
where L.CollectionSpecimenID = U1.ID
and L.CollectionSpecimenID = I.CollectionSpecimenID
and U1.ID = I.CollectionSpecimenID
and U1.UnitID = I.IdentificationUnitID
update L
set L._IdentificationSequence = I.IdentificationSequence
, L.Taxonomic_name = I.TaxonomicName
, L.Link_to_DiversityTaxonNames = I.NameURI
, L.Vernacular_term = I.VernacularTerm
, L.Identification_day = I.IdentificationDay
, L.Identification_month = I.IdentificationMonth
, L.Identification_year = I.IdentificationYear
, L.Identification_category = I.IdentificationCategory
, L.Identification_qualifier = I.IdentificationQualifier
, L.Type_status = I.TypeStatus
, L.Type_notes = I.TypeNotes
, L.Notes_for_identification = I.Notes
, L.Reference_title = I.ReferenceTitle
, L.Link_to_DiversityReferences = I.ReferenceURI
, L.Determiner = I.ResponsibleName
, L.Link_to_DiversityAgents_for_determiner = I.ResponsibleAgentURI
from @List L,
dbo.Identification I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.Identification AS Imax
	GROUP BY CollectionSpecimenID, IdentificationUnitID
	HAVING (Imax.CollectionSpecimenID = I.CollectionSpecimenID) AND (Imax.IdentificationUnitID = I.IdentificationUnitID) AND 
	(MAX(Imax.IdentificationSequence) = I.IdentificationSequence))
update L
set L.AnalysisID = I.AnalysisID
, L.Analysis_number = I.AnalysisNumber
, L.Analysis_result = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (MIN(Imin.AnalysisID) = I.AnalysisID) 
	AND (MIN(Imin.AnalysisNumber) = I.AnalysisNumber))
update L
set L.Analysis = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID = A.AnalysisID
update L
set L.Taxonomic_group_of_second_organism = I.TaxonomicGroup
, L.Life_stage_of_second_organism = I.LifeStage
, L.Gender_of_second_organism = I.Gender
, L.Number_of_units_of_second_organism = I.NumberOfUnits
, L.Circumstances_of_second_organism = I.Circumstances
, L.Identifier_of_second_organism = I.UnitIdentifier
, L.Description_of_second_organism = I.UnitDescription
, L.Only_observed_of_second_organism = I.OnlyObserved
, L.Notes_for_second_organism = I.Notes
, L._SecondUnitFamilyCache = I.FamilyCache
, L._SecondUnitOrderCache = I.OrderCache
from @List L,
dbo.IdentificationUnit I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._SecondUnitID = I.IdentificationUnitID
update L
set L._SecondSequence = I.IdentificationSequence
, L.Taxonomic_name_of_second_organism = I.TaxonomicName
, L.Link_to_DiversityTaxonNames_of_second_organism = I.NameURI
, L.Vernacular_term_of_second_organism = I.VernacularTerm
, L.Identification_day_of_second_organism = I.IdentificationDay
, L.Identification_month_of_second_organism = I.IdentificationMonth
, L.Identification_year_of_second_organism = I.IdentificationYear
, L.Identification_category_of_second_organism = I.IdentificationCategory
, L.Identification_qualifier_of_second_organism = I.IdentificationQualifier
, L.Type_status_of_second_organism = I.TypeStatus
, L.Type_notes_of_second_organism = I.TypeNotes
, L.Notes_for_identification_of_second_organism = I.Notes
, L.Reference_title_of_second_organism = I.ReferenceTitle
, L.Link_to_DiversityReferences_of_second_organism = I.ReferenceURI
, L.Determiner_of_second_organism = I.ResponsibleName
, L.Link_to_DiversityAgents_for_determiner_of_second_organism = I.ResponsibleAgentURI
from @List L,
dbo.Identification I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._SecondUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.Identification AS Imax
	GROUP BY CollectionSpecimenID, IdentificationUnitID
	HAVING (Imax.CollectionSpecimenID = I.CollectionSpecimenID) AND (Imax.IdentificationUnitID = I.IdentificationUnitID) AND 
	(MAX(Imax.IdentificationSequence) = I.IdentificationSequence))
update L
set L._SpecimenPartID = P.SpecimenPartID
, L.Collection = P.CollectionID
, L.Material_category = P.MaterialCategory
, L.Storage_location = P.StorageLocation
, L.Stock = P.Stock
, L.Preparation_method = P.PreparationMethod
, L.Preparation_date = P.PreparationDate
, L.Notes_for_part = P.Notes
from @List L,
dbo.CollectionSpecimenPart P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and EXISTS
	(SELECT Pmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenPart AS Pmin
	GROUP BY Pmin.CollectionSpecimenID
	HAVING (Pmin.CollectionSpecimenID = P.CollectionSpecimenID) AND (MIN(Pmin.SpecimenPartID) = P.SpecimenPartID))
update L
set L._TransactionID = P.TransactionID
, L.On_loan = P.IsOnLoan
from @List L,
dbo.CollectionSpecimenTransaction P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and L._SpecimenPartID = P.SpecimenPartID
and EXISTS
	(SELECT Tmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenTransaction AS Tmin
	GROUP BY Tmin.CollectionSpecimenID, Tmin.SpecimenPartID
	HAVING (Tmin.CollectionSpecimenID = P.CollectionSpecimenID) 
	AND Tmin.SpecimenPartID = P.SpecimenPartID
	AND (MIN(Tmin.TransactionID) = P.TransactionID))
update L
set L._Transaction = T.TransactionTitle
from @List L,
dbo.[Transaction] T
where L._TransactionID = T.TransactionID
RETURN 
END   
GO
GRANT SELECT ON [dbo].[FirstLines_2] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[FirstLines_3]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   FirstLines_3: Stock -> float   #############################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[FirstLines_3] 
(@CollectionSpecimenIDs varchar(8000))   
RETURNS @List TABLE (
	--Specimen
	[CollectionSpecimenID] [int] Primary key, --
	[Accession_number] [nvarchar](50) NULL, --
	-- withholding
	[Data_withholding_reason] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collection_event] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collector] [nvarchar](255) NULL, --
	[Collectors_event_number] [nvarchar](50) NULL, --
	-- event
	[Collection_day] [tinyint] NULL, --
	[Collection_month] [tinyint] NULL, --
	[Collection_year] [smallint] NULL, --
	[Collection_date_supplement] [nvarchar](100) NULL, --
	[Collection_time] [varchar](50) NULL, --
	[Collection_time_span] [varchar](50) NULL, --
	[Country] [nvarchar](50) NULL, --
	[Locality_description] [nvarchar](max) NULL, --
	[Habitat_description] [nvarchar](max) NULL, -- 
	[Collecting_method] [nvarchar](max) NULL, --
	[Collection_event_notes] [nvarchar](max) NULL, --
	--localisation
	[Named_area] [nvarchar](255) NULL, -- 
	[NamedAreaLocation2] [nvarchar](255) NULL, --
	[Remove_link_to_gazetteer] [int] NULL,
	[Distance_to_location] [varchar](50) NULL, --
	[Direction_to_location] [varchar](50) NULL, --
	[Longitude] [nvarchar](255) NULL, --
	[Latitude] [nvarchar](255) NULL, --
	[Coordinates_accuracy] [nvarchar](50) NULL, --
	[Link_to_GoogleMaps] [int] NULL,
	[_CoordinatesLocationNotes] [nvarchar](max) NULL, --
	[Altitude_from] [nvarchar](255) NULL, --
	[Altitude_to] [nvarchar](255) NULL, --
	[Altitude_accuracy] [nvarchar](50) NULL, --
	[Notes_for_Altitude] [nvarchar](max) NULL, --
	[MTB] [nvarchar](255) NULL, --
	[Quadrant] [nvarchar](255) NULL, --
	[Notes_for_MTB] [nvarchar](max) NULL, --
	[Sampling_plot] [nvarchar](255) NULL, --
	[Link_to_SamplingPlots] [nvarchar](255) NULL, --
	[Remove_link_to_SamplingPlots] [int] NULL,
	[Accuracy_of_sampling_plot] [nvarchar](50) NULL, --
	[Latitude_of_sampling_plot] [real] NULL, --
	[Longitude_of_sampling_plot] [real] NULL, --
	--site properties
	[Geographic_region] [nvarchar](255) NULL, --
	[Lithostratigraphy] [nvarchar](255) NULL, --
	[Chronostratigraphy] [nvarchar](255) NULL, --
	[Biostratigraphy] [nvarchar](255) NULL, --
	--collector
	[Collectors_name] [nvarchar](255) NULL, --
	[Link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_collector] [int] NULL,
	[Collectors_number] [nvarchar](50) NULL, --
	[Notes_about_collector] [nvarchar](max) NULL, --
	--Accession etc.
	[Accession_day] [tinyint] NULL, --
	[Accession_month] [tinyint] NULL, --
	[Accession_year] [smallint] NULL, --
	[Accession_date_supplement] [nvarchar](255) NULL, --
	[Depositors_name] [nvarchar](255) NULL, --
	[Depositors_link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_Depositor] [int] NULL,
	[Depositors_accession_number] [nvarchar](50) NULL, --
	[Exsiccata_abbreviation] [nvarchar](255) NULL, --
	[Link_to_DiversityExsiccatae] [varchar](255) NULL, --
	[Remove_link_to_exsiccatae] [int] NULL,
	[Exsiccata_number] [nvarchar](50) NULL, --
	[Original_notes] [nvarchar](max) NULL, --
	[Additional_notes] [nvarchar](max) NULL, --
	[Internal_notes] [nvarchar](max) NULL, --
	[Label_title] [nvarchar](255) NULL, --
	[Label_type] [nvarchar](50) NULL, --
	[Label_transcription_state] [nvarchar](50) NULL, --
	[Label_transcription_notes] [nvarchar](255) NULL, --
	[Problems] [nvarchar](255) NULL, --
	[External_datasource] [int] NULL, --
	[External_identifier] [nvarchar](100) NULL, --
	[Reference_title_for_specimen] [nvarchar](255) NULL, --
	[Link_to_DiversityReferences_for_specimen] [varchar](255) NULL, --
	[Remove_link_of_reference_for_specimen] [int] NULL,
	-- unit
	[Taxonomic_group] [nvarchar](50) NULL, --
	[Relation_type] [nvarchar](50) NULL, --
	[Colonised_substrate_part] [nvarchar](255) NULL, --
	[Life_stage] [nvarchar](255) NULL, --
	[Gender] [nvarchar](50) NULL, --
	[Number_of_units] [smallint] NULL, --
	[Circumstances] [nvarchar](50) NULL, -- 
	[Order_of_taxon] [nvarchar](255) NULL, --
	[Family_of_taxon] [nvarchar](255) NULL, --
	[Identifier_of_organism] [nvarchar](50) NULL, --
	[Description_of_organism] [nvarchar](50) NULL, --
	[Only_observed] [bit] NULL, --
	[Notes_for_organism] [nvarchar](max) NULL, --
	-- identification
	[Taxonomic_name] [nvarchar](255) NULL, --
	[Link_to_DiversityTaxonNames] [varchar](255) NULL, --
	[Remove_link_for_identification] [int] NULL, 
	[Vernacular_term] [nvarchar](255) NULL, --
	[Identification_day] [tinyint] NULL, -- 
	[Identification_month] [tinyint] NULL, --
	[Identification_year] [smallint] NULL, --
	[Identification_category] [nvarchar](50) NULL, --
	[Identification_qualifier] [nvarchar](50) NULL, --
	[Type_status] [nvarchar](50) NULL, --
	[Type_notes] [nvarchar](max) NULL, --
	[Notes_for_identification] [nvarchar](max) NULL, --
	[Reference_title] [nvarchar](255) NULL, --
	[Link_to_DiversityReferences] [varchar](255) NULL, --
	[Remove_link_for_reference] [int] NULL,
	[Determiner] [nvarchar](255) NULL,
	[Link_to_DiversityAgents_for_determiner] [varchar](255) NULL, --
	[Remove_link_for_determiner] [int] NULL,
	-- analysis
	[Analysis] [nvarchar](50) NULL, --
	[AnalysisID] [int] NULL, --
	[Analysis_number] [nvarchar](50) NULL, --
	[Analysis_result] [nvarchar](max) NULL, --
	-- 2. unit
	[Taxonomic_group_of_second_organism] [nvarchar](50) NULL, --
	[Life_stage_of_second_organism] [nvarchar](255) NULL, --
	[Gender_of_second_organism] [nvarchar](50) NULL, --
	[Number_of_units_of_second_organism] [smallint] NULL, --
	[Circumstances_of_second_organism] [nvarchar](50) NULL, -- 
	[Identifier_of_second_organism] [nvarchar](50) NULL, --
	[Description_of_second_organism] [nvarchar](50) NULL, --
	[Only_observed_of_second_organism] [bit] NULL, --
	[Notes_for_second_organism] [nvarchar](max) NULL, --
	-- 2. indent
	[Taxonomic_name_of_second_organism] [nvarchar](255) NULL, --
	[Link_to_DiversityTaxonNames_of_second_organism] [varchar](255) NULL, --
	[Remove_link_for_second_organism] [int] NULL,
	[Vernacular_term_of_second_organism] [nvarchar](255) NULL, --
	[Identification_day_of_second_organism] [tinyint] NULL, -- 
	[Identification_month_of_second_organism] [tinyint] NULL, --
	[Identification_year_of_second_organism] [smallint] NULL, --
	[Identification_category_of_second_organism] [nvarchar](50) NULL, --
	[Identification_qualifier_of_second_organism] [nvarchar](50) NULL, --
	[Type_status_of_second_organism] [nvarchar](50) NULL, --
	[Type_notes_of_second_organism] [nvarchar](max) NULL, --
	[Notes_for_identification_of_second_organism] [nvarchar](max) NULL, --
	[Reference_title_of_second_organism] [nvarchar](255) NULL, --
	[Link_to_DiversityReferences_of_second_organism] [varchar](255) NULL, --
	[Remove_link_for_reference_of_second_organism] [int] NULL,
	[Determiner_of_second_organism] [nvarchar](255) NULL,
	[Link_to_DiversityAgents_for_determiner_of_second_organism] [varchar](255) NULL, --
	[Remove_link_for_determiner_of_second_organism] [int] NULL,
	-- part
	[Collection] [int] NULL, --
	[Material_category] [nvarchar](50) NULL, --
	[Storage_location] [nvarchar](255) NULL, --
	[Stock] [float] NULL, --
	[Part_accession_number] [nvarchar](50) NULL, --
	[Storage_container] [nvarchar](500) NULL, --
	[Preparation_method] [nvarchar](max) NULL, --
	[Preparation_date] [datetime] NULL, --
	[Notes_for_part] [nvarchar](max) NULL, --
	--relation
	[Related_specimen_URL] [varchar](255) NULL, --
	[Related_specimen_display_text] [varchar](255) NULL, --
	[Link_to_DiversityCollection_for_relation] [varchar](255) NULL, --
	[Type_of_relation] [nvarchar](50) NULL, --
	[Related_specimen_description] [nvarchar](max) NULL, --
	[Related_specimen_notes] [nvarchar](max) NULL, --
	[Relation_is_internal] [bit] NULL, --
	-- hidden columns
	[_TransactionID] [int] NULL, --
	[_Transaction] [nvarchar](200) NULL, --
	--[On_loan] [int] NULL, --
	[_CollectionEventID] [int] NULL, --
	[_IdentificationUnitID] [int] NULL, --
	[_IdentificationSequence] [smallint] NULL, --
	[_SecondUnitID] [int] NULL, --
	[_SecondSequence] [smallint] NULL, --
	[_SpecimenPartID] [int] NULL, --
	[_CoordinatesAverageLatitudeCache] [real] NULL, --
	[_CoordinatesAverageLongitudeCache] [real] NULL, --
	[_GeographicRegionPropertyURI] [varchar](255) NULL, --
	[_LithostratigraphyPropertyURI] [varchar](255) NULL, --
	[_ChronostratigraphyPropertyURI] [varchar](255) NULL, --
	[_BiostratigraphyPropertyURI] [varchar](255) NULL, --
	[_NamedAverageLatitudeCache] [real] NULL, --
	[_NamedAverageLongitudeCache] [real] NULL, --
	[_LithostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_ChronostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_BiostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_SecondUnitFamilyCache] [nvarchar](255) NULL, --
	[_SecondUnitOrderCache] [nvarchar](255) NULL, --
	[_AverageAltitudeCache] [real] NULL)     --
/* 
Returns a table that lists all the specimen with the first entries of related tables. 
Adding Relations, 
Specimen: Reference, ExternalSource
Part: Container, Description
Biostratigraphy


MW 18.03.2015 
TEST: 
Select * from dbo.FirstLines_3('189876, 189882, 189885, 189891, 189900, 189905, 189919, 189923, 189936, 189939, 189941, 189956, 189974, 189975, 189984, 189988, 189990, 189995, 190014, 190016, 190020, 190028, 190040, 190049, 190051, 190055, 190058, 190062, 190073, 190080, 190081, 190085, 190091, 190108, 190117, 190120, 190122, 190128, 190130, 190142')
Select 	[Altitude_from],
	[Altitude_to],
	[Altitude_accuracy],
	[Notes_for_Altitude],
	[MTB] [nvarchar],
	[Quadrant] [nvarchar],
	[Notes_for_MTB],
	[Sampling_plot],
	[Link_to_SamplingPlots],
	[Remove_link_to_SamplingPlots]
 from dbo.FirstLines_3('3251, 3252')
 Select *
 from dbo.FirstLines_3('3251,3252')
 Select *
 from dbo.FirstLines_3('3251, 3252')
 Select *
 from dbo.FirstLines_3('3251, 3252,')
 Select *
 from dbo.FirstLines_3('3251,')
 Select *
 from dbo.FirstLines_3('3251')
*/ 
AS 
BEGIN 
declare @IDs table (ID int  Primary key)
declare @sID varchar(50)
declare @sLenth int
set @sLenth = len(@CollectionSpecimenIDs)
while @CollectionSpecimenIDs <> ''-- AND charindex(',',@CollectionSpecimenIDs) > 0
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
		begin
		set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
		set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 1, 8000)))
		if (isnumeric(@sID) = 1)
			begin
				insert into @IDs 
				values( @sID )
			end
		end
	else
		begin
		if (isnumeric(@CollectionSpecimenIDs) = 1 AND ((select count(*) from @IDs) = 0 OR len(rtrim(ltrim(@CollectionSpecimenIDs))) >= len(@sID) OR @sLenth < 8000))
			begin
				set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
				insert into @IDs 
				values( @sID )
			end
		set @CollectionSpecimenIDs = ''
		end
end

-- insert basic informations to specimen
insert into @List (CollectionSpecimenID
, Accession_number
, Data_withholding_reason
, _CollectionEventID
, Accession_day
, Accession_month
, Accession_year
, Accession_date_supplement
, Depositors_name
, Depositors_link_to_DiversityAgents
, Depositors_accession_number
, Exsiccata_abbreviation
, Link_to_DiversityExsiccatae
, Original_notes
, Additional_notes
, Internal_notes
, Label_title
, Label_type
, Label_transcription_state
, Label_transcription_notes
, Problems
, External_datasource
, External_identifier
, Reference_title_for_specimen
, Link_to_DiversityReferences_for_specimen
)
select S.CollectionSpecimenID
, S.AccessionNumber
, S.DataWithholdingReason
, S.CollectionEventID 
, AccessionDay
, AccessionMonth
, AccessionYear
, AccessionDateSupplement
, DepositorsName
, DepositorsAgentURI
, DepositorsAccessionNumber
, ExsiccataAbbreviation
, ExsiccataURI
, OriginalNotes
, AdditionalNotes
, InternalNotes
, LabelTitle
, LabelType
, LabelTranscriptionState
, LabelTranscriptionNotes
, Problems
, ExternalDatasourceID
, ExternalIdentifier
, ReferenceTitle
, ReferenceURI
from dbo.CollectionSpecimen S, dbo.CollectionSpecimenID_UserAvailable U
where S.CollectionSpecimenID in (select ID from @IDs)  
and U.CollectionSpecimenID = S.CollectionSpecimenID

-- insert information about collection event
update L
set L.Collection_day = E.CollectionDay
, L.Collection_month = E.CollectionMonth
, L.Collection_year = E.CollectionYear
, L.Collection_date_supplement = E.CollectionDateSupplement
, L.Collection_time = E.CollectionTime
, L.Collection_time_span = E.CollectionTimeSpan
, L.Country = E.CountryCache
, L.Locality_description = E.LocalityDescription
, L.Habitat_description = E.HabitatDescription
, L.Collecting_method = E.CollectingMethod
, L.Collection_event_notes = E.Notes
, L.Data_withholding_reason_for_collection_event = E.DataWithholdingReason
, L.Collectors_event_number = E.CollectorsEventNumber
from @List L,
CollectionEvent E
where L._CollectionEventID = E.CollectionEventID

-- insert gazetteer infos
update L
set L.Named_area = E.Location1
, L.NamedAreaLocation2 = E.Location2
, L.Distance_to_location = E.DistanceToLocation
, L.Direction_to_location = E.DirectionToLocation
, L._NamedAverageLatitudeCache = E.AverageLatitudeCache
, L._NamedAverageLongitudeCache = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 7

-- insert Coordinates 
update L
set L.Longitude = E.Location1
, L.Latitude = E.Location2
, L.Coordinates_accuracy = E.LocationAccuracy
, L._CoordinatesAverageLatitudeCache = E.AverageLatitudeCache
, L._CoordinatesAverageLongitudeCache = E.AverageLongitudeCache
, L._CoordinatesLocationNotes = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 8

-- Altitide
update L
set L.Altitude_from = E.Location1
, L.Altitude_to = E.Location2
, L.Altitude_accuracy = E.LocationAccuracy
, L._AverageAltitudeCache = E.AverageAltitudeCache
, L.Notes_for_Altitude = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 4

--MTB
update L
set L.MTB = E.Location1
, L.Quadrant = E.Location2
, L.Notes_for_MTB = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 3

--Sampling Plot
update L
set L.Sampling_plot = E.Location1
, L.Link_to_SamplingPlots = E.Location2
, L.Accuracy_of_sampling_plot = E.LocationAccuracy
, L.Latitude_of_sampling_plot = E.AverageLatitudeCache
, L.Longitude_of_sampling_plot = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 13

--Geographic_region
update L
set L.Geographic_region = P.DisplayText
, L._GeographicRegionPropertyURI = P.PropertyURI
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 10

--Lithostratigraphy
update L
set L.Lithostratigraphy = P.DisplayText
, L._LithostratigraphyPropertyURI = P.PropertyURI
, L._LithostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 30

--Chronostratigraphy
update L
set L.Chronostratigraphy = P.DisplayText
, L._ChronostratigraphyPropertyURI = P.PropertyURI
, L._ChronostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 20

--Chronostratigraphy
update L
set L.Biostratigraphy = P.DisplayText
, L._BiostratigraphyPropertyURI = P.PropertyURI
, L._BiostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 60

--Collector
update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.CollectorsSequence) = A.CollectorsSequence))
update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and L.Collectors_name is null
and A.CollectorsSequence is null
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.LogCreatedWhen) = A.LogCreatedWhen))

-- getting the units
declare @AllUnitIDs table (UnitID int  Primary key, ID int, DisplayOrder smallint, RelatedUnitID int)
declare @UnitIDs table (UnitID int  Primary key, ID int, DisplayOrder smallint, RelatedUnitID int)
insert into @AllUnitIDs (UnitID, ID, DisplayOrder, RelatedUnitID)
select U.IdentificationUnitID, U.CollectionSpecimenID, U.DisplayOrder, U.RelatedUnitID
from IdentificationUnit as U, @IDs as IDs
where DisplayOrder > 0
and IDs.ID = U.CollectionSpecimenID 
insert into @UnitIDs (UnitID, ID, DisplayOrder, RelatedUnitID)
select U.UnitID, U.ID, U.DisplayOrder, U.RelatedUnitID
from @AllUnitIDs as U,  @AllUnitIDs as M
where U.ID = M.ID
group by M.ID, U.DisplayOrder, U.ID, U.RelatedUnitID, U.UnitID
having U.DisplayOrder = MIN(M.DisplayOrder)

--Unit
update L
set L.Taxonomic_group = I.TaxonomicGroup
, L._IdentificationUnitID = I.IdentificationUnitID
, L.Relation_type = I.RelationType
, L.Colonised_substrate_part = I.ColonisedSubstratePart
, L.Life_stage = I.LifeStage
, L.Gender = I.Gender
, L.Number_of_units = I.NumberOfUnits
, L.Circumstances = I.Circumstances
, L.Order_of_taxon = I.OrderCache
, L.Family_of_taxon = I.FamilyCache
, L.Identifier_of_organism = I.UnitIdentifier
, L.Description_of_organism = I.UnitDescription
, L.Only_observed = I.OnlyObserved
, L.Notes_for_organism = I.Notes
, L.Exsiccata_number = I.ExsiccataNumber
, L._SecondUnitID = U1.RelatedUnitID
from @List L,
@UnitIDs U1,
dbo.IdentificationUnit I
where L.CollectionSpecimenID = U1.ID
and L.CollectionSpecimenID = I.CollectionSpecimenID
and U1.ID = I.CollectionSpecimenID
and U1.UnitID = I.IdentificationUnitID

--Identification
update L
set L._IdentificationSequence = I.IdentificationSequence
, L.Taxonomic_name = I.TaxonomicName
, L.Link_to_DiversityTaxonNames = I.NameURI
, L.Vernacular_term = I.VernacularTerm
, L.Identification_day = I.IdentificationDay
, L.Identification_month = I.IdentificationMonth
, L.Identification_year = I.IdentificationYear
, L.Identification_category = I.IdentificationCategory
, L.Identification_qualifier = I.IdentificationQualifier
, L.Type_status = I.TypeStatus
, L.Type_notes = I.TypeNotes
, L.Notes_for_identification = I.Notes
, L.Reference_title = I.ReferenceTitle
, L.Link_to_DiversityReferences = I.ReferenceURI
, L.Determiner = I.ResponsibleName
, L.Link_to_DiversityAgents_for_determiner = I.ResponsibleAgentURI
from @List L,
dbo.Identification I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.Identification AS Imax
	GROUP BY CollectionSpecimenID, IdentificationUnitID
	HAVING (Imax.CollectionSpecimenID = I.CollectionSpecimenID) AND (Imax.IdentificationUnitID = I.IdentificationUnitID) AND 
	(MAX(Imax.IdentificationSequence) = I.IdentificationSequence))

--Analysis
update L
set L.AnalysisID = I.AnalysisID
, L.Analysis_number = I.AnalysisNumber
, L.Analysis_result = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (MIN(Imin.AnalysisID) = I.AnalysisID) 
	AND (MIN(Imin.AnalysisNumber) = I.AnalysisNumber))

update L
set L.Analysis = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID = A.AnalysisID

-- 2. Unit
update L
set L.Taxonomic_group_of_second_organism = I.TaxonomicGroup
, L.Life_stage_of_second_organism = I.LifeStage
, L.Gender_of_second_organism = I.Gender
, L.Number_of_units_of_second_organism = I.NumberOfUnits
, L.Circumstances_of_second_organism = I.Circumstances
, L.Identifier_of_second_organism = I.UnitIdentifier
, L.Description_of_second_organism = I.UnitDescription
, L.Only_observed_of_second_organism = I.OnlyObserved
, L.Notes_for_second_organism = I.Notes
, L._SecondUnitFamilyCache = I.FamilyCache
, L._SecondUnitOrderCache = I.OrderCache
from @List L,
dbo.IdentificationUnit I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._SecondUnitID = I.IdentificationUnitID

-- 2. Ident
update L
set L._SecondSequence = I.IdentificationSequence
, L.Taxonomic_name_of_second_organism = I.TaxonomicName
, L.Link_to_DiversityTaxonNames_of_second_organism = I.NameURI
, L.Vernacular_term_of_second_organism = I.VernacularTerm
, L.Identification_day_of_second_organism = I.IdentificationDay
, L.Identification_month_of_second_organism = I.IdentificationMonth
, L.Identification_year_of_second_organism = I.IdentificationYear
, L.Identification_category_of_second_organism = I.IdentificationCategory
, L.Identification_qualifier_of_second_organism = I.IdentificationQualifier
, L.Type_status_of_second_organism = I.TypeStatus
, L.Type_notes_of_second_organism = I.TypeNotes
, L.Notes_for_identification_of_second_organism = I.Notes
, L.Reference_title_of_second_organism = I.ReferenceTitle
, L.Link_to_DiversityReferences_of_second_organism = I.ReferenceURI
, L.Determiner_of_second_organism = I.ResponsibleName
, L.Link_to_DiversityAgents_for_determiner_of_second_organism = I.ResponsibleAgentURI
from @List L,
dbo.Identification I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._SecondUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.Identification AS Imax
	GROUP BY CollectionSpecimenID, IdentificationUnitID
	HAVING (Imax.CollectionSpecimenID = I.CollectionSpecimenID) AND (Imax.IdentificationUnitID = I.IdentificationUnitID) AND 
	(MAX(Imax.IdentificationSequence) = I.IdentificationSequence))

-- Part
update L
set L._SpecimenPartID = P.SpecimenPartID
, L.Collection = P.CollectionID
, L.Material_category = P.MaterialCategory
, L.Storage_location = P.StorageLocation
, L.Stock = P.Stock
, L.Preparation_method = P.PreparationMethod
, L.Preparation_date = P.PreparationDate
, L.Notes_for_part = P.Notes
, L.Storage_container = P.StorageContainer
, L.Part_accession_number = P.AccessionNumber
from @List L,
dbo.CollectionSpecimenPart P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and EXISTS
	(SELECT Pmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenPart AS Pmin
	GROUP BY Pmin.CollectionSpecimenID
	HAVING (Pmin.CollectionSpecimenID = P.CollectionSpecimenID) AND (MIN(Pmin.SpecimenPartID) = P.SpecimenPartID))

-- Transaction
update L
set L._TransactionID = P.TransactionID
--, L.On_loan = P.IsOnLoan
from @List L,
dbo.CollectionSpecimenTransaction P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and L._SpecimenPartID = P.SpecimenPartID
and EXISTS
	(SELECT Tmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenTransaction AS Tmin
	GROUP BY Tmin.CollectionSpecimenID, Tmin.SpecimenPartID
	HAVING (Tmin.CollectionSpecimenID = P.CollectionSpecimenID) 
	AND Tmin.SpecimenPartID = P.SpecimenPartID
	AND (MIN(Tmin.TransactionID) = P.TransactionID))

update L
set L._Transaction = T.TransactionTitle
from @List L,
dbo.[Transaction] T
where L._TransactionID = T.TransactionID

--Relation
update L
set L.Related_specimen_URL = R.RelatedSpecimenURI
, L.Related_specimen_description = R.RelatedSpecimenDescription
, L.Relation_is_internal = R.IsInternalRelationCache
, L.Type_of_relation = R.RelationType
, L.Link_to_DiversityCollection_for_relation = case when R.IsInternalRelationCache = 1 then R.RelatedSpecimenURI else '' end
, L.Related_specimen_display_text = R.RelatedSpecimenDisplayText
, L.Related_specimen_notes = R.Notes
from @List L,
dbo.CollectionSpecimenRelation R
where L.CollectionSpecimenID = R.CollectionSpecimenID
and EXISTS
	(SELECT Rmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenRelation AS Rmin
	GROUP BY Rmin.CollectionSpecimenID
	HAVING (Rmin.CollectionSpecimenID = R.CollectionSpecimenID) AND (MIN(Rmin.RelatedSpecimenURI) = R.RelatedSpecimenURI))


RETURN 
END   
GO
GRANT SELECT ON [dbo].[FirstLines_3] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[FirstLines_4]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   FirstLines_4: Remove Reference from Specimen and Identification   ##########################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[FirstLines_4] 
(@CollectionSpecimenIDs varchar(8000))   
RETURNS @List TABLE (
	--Specimen
	[CollectionSpecimenID] [int] Primary key, --
	[Accession_number] [nvarchar](50) NULL, --
	-- withholding
	[Data_withholding_reason] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collection_event] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collector] [nvarchar](255) NULL, --
	[Collectors_event_number] [nvarchar](50) NULL, --
	-- event
	[Collection_day] [tinyint] NULL, --
	[Collection_month] [tinyint] NULL, --
	[Collection_year] [smallint] NULL, --
	[Collection_date_supplement] [nvarchar](100) NULL, --
	[Collection_time] [varchar](50) NULL, --
	[Collection_time_span] [varchar](50) NULL, --
	[Country] [nvarchar](50) NULL, --
	[Locality_description] [nvarchar](max) NULL, --
	[Habitat_description] [nvarchar](max) NULL, -- 
	[Collecting_method] [nvarchar](max) NULL, --
	[Collection_event_notes] [nvarchar](max) NULL, --
	--localisation
	[Named_area] [nvarchar](255) NULL, -- 
	[NamedAreaLocation2] [nvarchar](255) NULL, --
	[Remove_link_to_gazetteer] [int] NULL,
	[Distance_to_location] [varchar](50) NULL, --
	[Direction_to_location] [varchar](50) NULL, --
	[Longitude] [nvarchar](255) NULL, --
	[Latitude] [nvarchar](255) NULL, --
	[Coordinates_accuracy] [nvarchar](50) NULL, --
	[Link_to_GoogleMaps] [int] NULL,
	[_CoordinatesLocationNotes] [nvarchar](max) NULL, --
	[Altitude_from] [nvarchar](255) NULL, --
	[Altitude_to] [nvarchar](255) NULL, --
	[Altitude_accuracy] [nvarchar](50) NULL, --
	[Notes_for_Altitude] [nvarchar](max) NULL, --
	[MTB] [nvarchar](255) NULL, --
	[Quadrant] [nvarchar](255) NULL, --
	[Notes_for_MTB] [nvarchar](max) NULL, --
	[Sampling_plot] [nvarchar](255) NULL, --
	[Link_to_SamplingPlots] [nvarchar](255) NULL, --
	[Remove_link_to_SamplingPlots] [int] NULL,
	[Accuracy_of_sampling_plot] [nvarchar](50) NULL, --
	[Latitude_of_sampling_plot] [real] NULL, --
	[Longitude_of_sampling_plot] [real] NULL, --
	--site properties
	[Geographic_region] [nvarchar](255) NULL, --
	[Lithostratigraphy] [nvarchar](255) NULL, --
	[Chronostratigraphy] [nvarchar](255) NULL, --
	[Biostratigraphy] [nvarchar](255) NULL, --
	--collector
	[Collectors_name] [nvarchar](255) NULL, --
	[Link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_collector] [int] NULL,
	[Collectors_number] [nvarchar](50) NULL, --
	[Notes_about_collector] [nvarchar](max) NULL, --
	--Accession etc.
	[Accession_day] [tinyint] NULL, --
	[Accession_month] [tinyint] NULL, --
	[Accession_year] [smallint] NULL, --
	[Accession_date_supplement] [nvarchar](255) NULL, --
	[Depositors_name] [nvarchar](255) NULL, --
	[Depositors_link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_Depositor] [int] NULL,
	[Depositors_accession_number] [nvarchar](50) NULL, --
	[Exsiccata_abbreviation] [nvarchar](255) NULL, --
	[Link_to_DiversityExsiccatae] [varchar](255) NULL, --
	[Remove_link_to_exsiccatae] [int] NULL,
	[Exsiccata_number] [nvarchar](50) NULL, --
	[Original_notes] [nvarchar](max) NULL, --
	[Additional_notes] [nvarchar](max) NULL, --
	[Internal_notes] [nvarchar](max) NULL, --
	[Label_title] [nvarchar](255) NULL, --
	[Label_type] [nvarchar](50) NULL, --
	[Label_transcription_state] [nvarchar](50) NULL, --
	[Label_transcription_notes] [nvarchar](255) NULL, --
	[Problems] [nvarchar](255) NULL, --
	[External_datasource] [int] NULL, --
	[External_identifier] [nvarchar](100) NULL, --
	--[Reference_title_for_specimen] [nvarchar](255) NULL, --
	--[Link_to_DiversityReferences_for_specimen] [varchar](255) NULL, --
	--[Remove_link_of_reference_for_specimen] [int] NULL,
	-- unit
	[Taxonomic_group] [nvarchar](50) NULL, --
	[Relation_type] [nvarchar](50) NULL, --
	[Colonised_substrate_part] [nvarchar](255) NULL, --
	[Life_stage] [nvarchar](255) NULL, --
	[Gender] [nvarchar](50) NULL, --
	[Number_of_units] [smallint] NULL, --
	[Circumstances] [nvarchar](50) NULL, -- 
	[Order_of_taxon] [nvarchar](255) NULL, --
	[Family_of_taxon] [nvarchar](255) NULL, --
	[Identifier_of_organism] [nvarchar](50) NULL, --
	[Description_of_organism] [nvarchar](50) NULL, --
	[Only_observed] [bit] NULL, --
	[Notes_for_organism] [nvarchar](max) NULL, --
	-- identification
	[Taxonomic_name] [nvarchar](255) NULL, --
	[Link_to_DiversityTaxonNames] [varchar](255) NULL, --
	[Remove_link_for_identification] [int] NULL, 
	[Vernacular_term] [nvarchar](255) NULL, --
	[Identification_day] [tinyint] NULL, -- 
	[Identification_month] [tinyint] NULL, --
	[Identification_year] [smallint] NULL, --
	[Identification_category] [nvarchar](50) NULL, --
	[Identification_qualifier] [nvarchar](50) NULL, --
	[Type_status] [nvarchar](50) NULL, --
	[Type_notes] [nvarchar](max) NULL, --
	[Notes_for_identification] [nvarchar](max) NULL, --
	--[Reference_title] [nvarchar](255) NULL, --
	--[Link_to_DiversityReferences] [varchar](255) NULL, --
	--[Remove_link_for_reference] [int] NULL,
	[Determiner] [nvarchar](255) NULL,
	[Link_to_DiversityAgents_for_determiner] [varchar](255) NULL, --
	[Remove_link_for_determiner] [int] NULL,
	-- analysis
	[Analysis] [nvarchar](50) NULL, --
	[AnalysisID] [int] NULL, --
	[Analysis_number] [nvarchar](50) NULL, --
	[Analysis_result] [nvarchar](max) NULL, --
	-- 2. unit
	[Taxonomic_group_of_second_organism] [nvarchar](50) NULL, --
	[Life_stage_of_second_organism] [nvarchar](255) NULL, --
	[Gender_of_second_organism] [nvarchar](50) NULL, --
	[Number_of_units_of_second_organism] [smallint] NULL, --
	[Circumstances_of_second_organism] [nvarchar](50) NULL, -- 
	[Identifier_of_second_organism] [nvarchar](50) NULL, --
	[Description_of_second_organism] [nvarchar](50) NULL, --
	[Only_observed_of_second_organism] [bit] NULL, --
	[Notes_for_second_organism] [nvarchar](max) NULL, --
	-- 2. indent
	[Taxonomic_name_of_second_organism] [nvarchar](255) NULL, --
	[Link_to_DiversityTaxonNames_of_second_organism] [varchar](255) NULL, --
	[Remove_link_for_second_organism] [int] NULL,
	[Vernacular_term_of_second_organism] [nvarchar](255) NULL, --
	[Identification_day_of_second_organism] [tinyint] NULL, -- 
	[Identification_month_of_second_organism] [tinyint] NULL, --
	[Identification_year_of_second_organism] [smallint] NULL, --
	[Identification_category_of_second_organism] [nvarchar](50) NULL, --
	[Identification_qualifier_of_second_organism] [nvarchar](50) NULL, --
	[Type_status_of_second_organism] [nvarchar](50) NULL, --
	[Type_notes_of_second_organism] [nvarchar](max) NULL, --
	[Notes_for_identification_of_second_organism] [nvarchar](max) NULL, --
	--[Reference_title_of_second_organism] [nvarchar](255) NULL, --
	--[Link_to_DiversityReferences_of_second_organism] [varchar](255) NULL, --
	--[Remove_link_for_reference_of_second_organism] [int] NULL,
	[Determiner_of_second_organism] [nvarchar](255) NULL,
	[Link_to_DiversityAgents_for_determiner_of_second_organism] [varchar](255) NULL, --
	[Remove_link_for_determiner_of_second_organism] [int] NULL,
	-- part
	[Collection] [int] NULL, --
	[Material_category] [nvarchar](50) NULL, --
	[Storage_location] [nvarchar](255) NULL, --
	[Stock] [float] NULL, --
	[Part_accession_number] [nvarchar](50) NULL, --
	[Storage_container] [nvarchar](500) NULL, --
	[Preparation_method] [nvarchar](max) NULL, --
	[Preparation_date] [datetime] NULL, --
	[Notes_for_part] [nvarchar](max) NULL, --
	--relation
	[Related_specimen_URL] [varchar](255) NULL, --
	[Related_specimen_display_text] [varchar](255) NULL, --
	[Link_to_DiversityCollection_for_relation] [varchar](255) NULL, --
	[Type_of_relation] [nvarchar](50) NULL, --
	[Related_specimen_description] [nvarchar](max) NULL, --
	[Related_specimen_notes] [nvarchar](max) NULL, --
	[Relation_is_internal] [bit] NULL, --
	-- hidden columns
	[_TransactionID] [int] NULL, --
	[_Transaction] [nvarchar](200) NULL, --
	--[On_loan] [int] NULL, --
	[_CollectionEventID] [int] NULL, --
	[_IdentificationUnitID] [int] NULL, --
	[_IdentificationSequence] [smallint] NULL, --
	[_SecondUnitID] [int] NULL, --
	[_SecondSequence] [smallint] NULL, --
	[_SpecimenPartID] [int] NULL, --
	[_CoordinatesAverageLatitudeCache] [real] NULL, --
	[_CoordinatesAverageLongitudeCache] [real] NULL, --
	[_GeographicRegionPropertyURI] [varchar](255) NULL, --
	[_LithostratigraphyPropertyURI] [varchar](255) NULL, --
	[_ChronostratigraphyPropertyURI] [varchar](255) NULL, --
	[_BiostratigraphyPropertyURI] [varchar](255) NULL, --
	[_NamedAverageLatitudeCache] [real] NULL, --
	[_NamedAverageLongitudeCache] [real] NULL, --
	[_LithostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_ChronostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_BiostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_SecondUnitFamilyCache] [nvarchar](255) NULL, --
	[_SecondUnitOrderCache] [nvarchar](255) NULL, --
	[_AverageAltitudeCache] [real] NULL)     --
/* 
Returns a table that lists all the specimen with the first entries of related tables. 
Adding Relations, 
Specimen: Reference, ExternalSource
Part: Container, Description
Biostratigraphy


MW 18.03.2015 
TEST: 
Select * from dbo.FirstLines_3('189876, 189882, 189885, 189891, 189900, 189905, 189919, 189923, 189936, 189939, 189941, 189956, 189974, 189975, 189984, 189988, 189990, 189995, 190014, 190016, 190020, 190028, 190040, 190049, 190051, 190055, 190058, 190062, 190073, 190080, 190081, 190085, 190091, 190108, 190117, 190120, 190122, 190128, 190130, 190142')
Select 	[Altitude_from],
	[Altitude_to],
	[Altitude_accuracy],
	[Notes_for_Altitude],
	[MTB] [nvarchar],
	[Quadrant] [nvarchar],
	[Notes_for_MTB],
	[Sampling_plot],
	[Link_to_SamplingPlots],
	[Remove_link_to_SamplingPlots]
 from dbo.FirstLines_3('3251, 3252')
 Select *
 from dbo.FirstLines_3('3251,3252')
 Select *
 from dbo.FirstLines_3('3251, 3252')
 Select *
 from dbo.FirstLines_3('3251, 3252,')
 Select *
 from dbo.FirstLines_3('3251,')
 Select *
 from dbo.FirstLines_3('3251')
*/ 
AS 
BEGIN 
declare @IDs table (ID int  Primary key)
declare @sID varchar(50)
declare @sLenth int
set @sLenth = len(@CollectionSpecimenIDs)
while @CollectionSpecimenIDs <> ''-- AND charindex(',',@CollectionSpecimenIDs) > 0
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
		begin
		set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
		set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 1, 8000)))
		if (isnumeric(@sID) = 1)
			begin
				insert into @IDs 
				values( @sID )
			end
		end
	else
		begin
		if (isnumeric(@CollectionSpecimenIDs) = 1 AND ((select count(*) from @IDs) = 0 OR len(rtrim(ltrim(@CollectionSpecimenIDs))) >= len(@sID) OR @sLenth < 8000))
			begin
				set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
				insert into @IDs 
				values( @sID )
			end
		set @CollectionSpecimenIDs = ''
		end
end

-- insert basic informations to specimen
insert into @List (CollectionSpecimenID
, Accession_number
, Data_withholding_reason
, _CollectionEventID
, Accession_day
, Accession_month
, Accession_year
, Accession_date_supplement
, Depositors_name
, Depositors_link_to_DiversityAgents
, Depositors_accession_number
, Exsiccata_abbreviation
, Link_to_DiversityExsiccatae
, Original_notes
, Additional_notes
, Internal_notes
, Label_title
, Label_type
, Label_transcription_state
, Label_transcription_notes
, Problems
, External_datasource
, External_identifier
--, Reference_title_for_specimen
--, Link_to_DiversityReferences_for_specimen
)
select S.CollectionSpecimenID
, S.AccessionNumber
, S.DataWithholdingReason
, S.CollectionEventID 
, AccessionDay
, AccessionMonth
, AccessionYear
, AccessionDateSupplement
, DepositorsName
, DepositorsAgentURI
, DepositorsAccessionNumber
, ExsiccataAbbreviation
, ExsiccataURI
, OriginalNotes
, AdditionalNotes
, InternalNotes
, LabelTitle
, LabelType
, LabelTranscriptionState
, LabelTranscriptionNotes
, Problems
, ExternalDatasourceID
, ExternalIdentifier
--, ReferenceTitle
--, ReferenceURI
from dbo.CollectionSpecimen S, dbo.CollectionSpecimenID_UserAvailable U
where S.CollectionSpecimenID in (select ID from @IDs)  
and U.CollectionSpecimenID = S.CollectionSpecimenID

-- insert information about collection event
update L
set L.Collection_day = E.CollectionDay
, L.Collection_month = E.CollectionMonth
, L.Collection_year = E.CollectionYear
, L.Collection_date_supplement = E.CollectionDateSupplement
, L.Collection_time = E.CollectionTime
, L.Collection_time_span = E.CollectionTimeSpan
, L.Country = E.CountryCache
, L.Locality_description = E.LocalityDescription
, L.Habitat_description = E.HabitatDescription
, L.Collecting_method = E.CollectingMethod
, L.Collection_event_notes = E.Notes
, L.Data_withholding_reason_for_collection_event = E.DataWithholdingReason
, L.Collectors_event_number = E.CollectorsEventNumber
from @List L,
CollectionEvent E
where L._CollectionEventID = E.CollectionEventID

-- insert gazetteer infos
update L
set L.Named_area = E.Location1
, L.NamedAreaLocation2 = E.Location2
, L.Distance_to_location = E.DistanceToLocation
, L.Direction_to_location = E.DirectionToLocation
, L._NamedAverageLatitudeCache = E.AverageLatitudeCache
, L._NamedAverageLongitudeCache = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 7

-- insert Coordinates 
update L
set L.Longitude = E.Location1
, L.Latitude = E.Location2
, L.Coordinates_accuracy = E.LocationAccuracy
, L._CoordinatesAverageLatitudeCache = E.AverageLatitudeCache
, L._CoordinatesAverageLongitudeCache = E.AverageLongitudeCache
, L._CoordinatesLocationNotes = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 8

-- Altitide
update L
set L.Altitude_from = E.Location1
, L.Altitude_to = E.Location2
, L.Altitude_accuracy = E.LocationAccuracy
, L._AverageAltitudeCache = E.AverageAltitudeCache
, L.Notes_for_Altitude = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 4

--MTB
update L
set L.MTB = E.Location1
, L.Quadrant = E.Location2
, L.Notes_for_MTB = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 3

--Sampling Plot
update L
set L.Sampling_plot = E.Location1
, L.Link_to_SamplingPlots = E.Location2
, L.Accuracy_of_sampling_plot = E.LocationAccuracy
, L.Latitude_of_sampling_plot = E.AverageLatitudeCache
, L.Longitude_of_sampling_plot = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 13

--Geographic_region
update L
set L.Geographic_region = P.DisplayText
, L._GeographicRegionPropertyURI = P.PropertyURI
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 10

--Lithostratigraphy
update L
set L.Lithostratigraphy = P.DisplayText
, L._LithostratigraphyPropertyURI = P.PropertyURI
, L._LithostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 30

--Chronostratigraphy
update L
set L.Chronostratigraphy = P.DisplayText
, L._ChronostratigraphyPropertyURI = P.PropertyURI
, L._ChronostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 20

--Chronostratigraphy
update L
set L.Biostratigraphy = P.DisplayText
, L._BiostratigraphyPropertyURI = P.PropertyURI
, L._BiostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 60

--Collector
update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.CollectorsSequence) = A.CollectorsSequence))
update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and L.Collectors_name is null
and A.CollectorsSequence is null
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.LogCreatedWhen) = A.LogCreatedWhen))

-- getting the units
declare @AllUnitIDs table (UnitID int  Primary key, ID int, DisplayOrder smallint, RelatedUnitID int)
declare @UnitIDs table (UnitID int  Primary key, ID int, DisplayOrder smallint, RelatedUnitID int)
insert into @AllUnitIDs (UnitID, ID, DisplayOrder, RelatedUnitID)
select U.IdentificationUnitID, U.CollectionSpecimenID, U.DisplayOrder, U.RelatedUnitID
from IdentificationUnit as U, @IDs as IDs
where DisplayOrder > 0
and IDs.ID = U.CollectionSpecimenID 
insert into @UnitIDs (UnitID, ID, DisplayOrder, RelatedUnitID)
select U.UnitID, U.ID, U.DisplayOrder, U.RelatedUnitID
from @AllUnitIDs as U,  @AllUnitIDs as M
where U.ID = M.ID
group by M.ID, U.DisplayOrder, U.ID, U.RelatedUnitID, U.UnitID
having U.DisplayOrder = MIN(M.DisplayOrder)

--Unit
update L
set L.Taxonomic_group = I.TaxonomicGroup
, L._IdentificationUnitID = I.IdentificationUnitID
, L.Relation_type = I.RelationType
, L.Colonised_substrate_part = I.ColonisedSubstratePart
, L.Life_stage = I.LifeStage
, L.Gender = I.Gender
, L.Number_of_units = I.NumberOfUnits
, L.Circumstances = I.Circumstances
, L.Order_of_taxon = I.OrderCache
, L.Family_of_taxon = I.FamilyCache
, L.Identifier_of_organism = I.UnitIdentifier
, L.Description_of_organism = I.UnitDescription
, L.Only_observed = I.OnlyObserved
, L.Notes_for_organism = I.Notes
, L.Exsiccata_number = I.ExsiccataNumber
, L._SecondUnitID = U1.RelatedUnitID
from @List L,
@UnitIDs U1,
dbo.IdentificationUnit I
where L.CollectionSpecimenID = U1.ID
and L.CollectionSpecimenID = I.CollectionSpecimenID
and U1.ID = I.CollectionSpecimenID
and U1.UnitID = I.IdentificationUnitID

--Identification
update L
set L._IdentificationSequence = I.IdentificationSequence
, L.Taxonomic_name = I.TaxonomicName
, L.Link_to_DiversityTaxonNames = I.NameURI
, L.Vernacular_term = I.VernacularTerm
, L.Identification_day = I.IdentificationDay
, L.Identification_month = I.IdentificationMonth
, L.Identification_year = I.IdentificationYear
, L.Identification_category = I.IdentificationCategory
, L.Identification_qualifier = I.IdentificationQualifier
, L.Type_status = I.TypeStatus
, L.Type_notes = I.TypeNotes
, L.Notes_for_identification = I.Notes
--, L.Reference_title = I.ReferenceTitle
--, L.Link_to_DiversityReferences = I.ReferenceURI
, L.Determiner = I.ResponsibleName
, L.Link_to_DiversityAgents_for_determiner = I.ResponsibleAgentURI
from @List L,
dbo.Identification I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.Identification AS Imax
	GROUP BY CollectionSpecimenID, IdentificationUnitID
	HAVING (Imax.CollectionSpecimenID = I.CollectionSpecimenID) AND (Imax.IdentificationUnitID = I.IdentificationUnitID) AND 
	(MAX(Imax.IdentificationSequence) = I.IdentificationSequence))

--Analysis
update L
set L.AnalysisID = I.AnalysisID
, L.Analysis_number = I.AnalysisNumber
, L.Analysis_result = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (MIN(Imin.AnalysisID) = I.AnalysisID) 
	AND (MIN(Imin.AnalysisNumber) = I.AnalysisNumber))

update L
set L.Analysis = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID = A.AnalysisID

-- 2. Unit
update L
set L.Taxonomic_group_of_second_organism = I.TaxonomicGroup
, L.Life_stage_of_second_organism = I.LifeStage
, L.Gender_of_second_organism = I.Gender
, L.Number_of_units_of_second_organism = I.NumberOfUnits
, L.Circumstances_of_second_organism = I.Circumstances
, L.Identifier_of_second_organism = I.UnitIdentifier
, L.Description_of_second_organism = I.UnitDescription
, L.Only_observed_of_second_organism = I.OnlyObserved
, L.Notes_for_second_organism = I.Notes
, L._SecondUnitFamilyCache = I.FamilyCache
, L._SecondUnitOrderCache = I.OrderCache
from @List L,
dbo.IdentificationUnit I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._SecondUnitID = I.IdentificationUnitID

-- 2. Ident
update L
set L._SecondSequence = I.IdentificationSequence
, L.Taxonomic_name_of_second_organism = I.TaxonomicName
, L.Link_to_DiversityTaxonNames_of_second_organism = I.NameURI
, L.Vernacular_term_of_second_organism = I.VernacularTerm
, L.Identification_day_of_second_organism = I.IdentificationDay
, L.Identification_month_of_second_organism = I.IdentificationMonth
, L.Identification_year_of_second_organism = I.IdentificationYear
, L.Identification_category_of_second_organism = I.IdentificationCategory
, L.Identification_qualifier_of_second_organism = I.IdentificationQualifier
, L.Type_status_of_second_organism = I.TypeStatus
, L.Type_notes_of_second_organism = I.TypeNotes
, L.Notes_for_identification_of_second_organism = I.Notes
--, L.Reference_title_of_second_organism = I.ReferenceTitle
--, L.Link_to_DiversityReferences_of_second_organism = I.ReferenceURI
, L.Determiner_of_second_organism = I.ResponsibleName
, L.Link_to_DiversityAgents_for_determiner_of_second_organism = I.ResponsibleAgentURI
from @List L,
dbo.Identification I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._SecondUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.Identification AS Imax
	GROUP BY CollectionSpecimenID, IdentificationUnitID
	HAVING (Imax.CollectionSpecimenID = I.CollectionSpecimenID) AND (Imax.IdentificationUnitID = I.IdentificationUnitID) AND 
	(MAX(Imax.IdentificationSequence) = I.IdentificationSequence))

-- Part
update L
set L._SpecimenPartID = P.SpecimenPartID
, L.Collection = P.CollectionID
, L.Material_category = P.MaterialCategory
, L.Storage_location = P.StorageLocation
, L.Stock = P.Stock
, L.Preparation_method = P.PreparationMethod
, L.Preparation_date = P.PreparationDate
, L.Notes_for_part = P.Notes
, L.Storage_container = P.StorageContainer
, L.Part_accession_number = P.AccessionNumber
from @List L,
dbo.CollectionSpecimenPart P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and EXISTS
	(SELECT Pmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenPart AS Pmin
	GROUP BY Pmin.CollectionSpecimenID
	HAVING (Pmin.CollectionSpecimenID = P.CollectionSpecimenID) AND (MIN(Pmin.SpecimenPartID) = P.SpecimenPartID))

-- Transaction
update L
set L._TransactionID = P.TransactionID
--, L.On_loan = P.IsOnLoan
from @List L,
dbo.CollectionSpecimenTransaction P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and L._SpecimenPartID = P.SpecimenPartID
and EXISTS
	(SELECT Tmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenTransaction AS Tmin
	GROUP BY Tmin.CollectionSpecimenID, Tmin.SpecimenPartID
	HAVING (Tmin.CollectionSpecimenID = P.CollectionSpecimenID) 
	AND Tmin.SpecimenPartID = P.SpecimenPartID
	AND (MIN(Tmin.TransactionID) = P.TransactionID))

update L
set L._Transaction = T.TransactionTitle
from @List L,
dbo.[Transaction] T
where L._TransactionID = T.TransactionID

--Relation
update L
set L.Related_specimen_URL = R.RelatedSpecimenURI
, L.Related_specimen_description = R.RelatedSpecimenDescription
, L.Relation_is_internal = R.IsInternalRelationCache
, L.Type_of_relation = R.RelationType
, L.Link_to_DiversityCollection_for_relation = case when R.IsInternalRelationCache = 1 then R.RelatedSpecimenURI else '' end
, L.Related_specimen_display_text = R.RelatedSpecimenDisplayText
, L.Related_specimen_notes = R.Notes
from @List L,
dbo.CollectionSpecimenRelation R
where L.CollectionSpecimenID = R.CollectionSpecimenID
and EXISTS
	(SELECT Rmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenRelation AS Rmin
	GROUP BY Rmin.CollectionSpecimenID
	HAVING (Rmin.CollectionSpecimenID = R.CollectionSpecimenID) AND (MIN(Rmin.RelatedSpecimenURI) = R.RelatedSpecimenURI))


RETURN 
END   
GO
GRANT SELECT ON [dbo].[FirstLines_4] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[FirstLinesEvent]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   [FirstLinesEvent]   ######################################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[FirstLinesEvent] 
(@CollectionSpecimenIDs varchar(8000))   
RETURNS @List TABLE (
	[CollectionEventID] [int] Primary key, --
	--[Accession_number] [nvarchar](50) NULL, --
-- WITHHOLDINGREASONS
	[Data_withholding_reason_for_collection_event] [nvarchar](255) NULL, --
--CollectionEvent
	[Collectors_event_number] [nvarchar](50) NULL, --
	[Collection_day] [tinyint] NULL, --
	[Collection_month] [tinyint] NULL, --
	[Collection_year] [smallint] NULL, --
	[Collection_date_supplement] [nvarchar](100) NULL, --
	[Collection_time] [varchar](50) NULL, --
	[Collection_time_span] [varchar](50) NULL, --
	[Country] [nvarchar](50) NULL, --
	[Locality_description] [nvarchar](max) NULL, --
	[Habitat_description] [nvarchar](max) NULL, -- 
	[Collecting_method] [nvarchar](max) NULL, --
	[Collection_event_notes] [nvarchar](max) NULL, --
--Localisation
	[Named_area] [nvarchar](255) NULL, -- 
	[NamedAreaLocation2] [nvarchar](255) NULL, --
	[Remove_link_to_gazetteer] [int] NULL,
	[Distance_to_location] [varchar](50) NULL, --
	[Direction_to_location] [varchar](50) NULL, --
	[Longitude] [nvarchar](255) NULL, --
	[Latitude] [nvarchar](255) NULL, --
	[Coordinates_accuracy] [nvarchar](50) NULL, --
	[Link_to_GoogleMaps] [int] NULL,
	[Altitude_from] [nvarchar](255) NULL, --
	[Altitude_to] [nvarchar](255) NULL, --
	[Altitude_accuracy] [nvarchar](50) NULL, --
	[MTB] [nvarchar](255) NULL, --
	[Quadrant] [nvarchar](255) NULL, --
	[Notes_for_MTB] [nvarchar](max) NULL, --
	[Sampling_plot] [nvarchar](255) NULL, --
	[Link_to_SamplingPlots] [nvarchar](255) NULL, --
	[Remove_link_to_SamplingPlots] [int] NULL,
	[Accuracy_of_sampling_plot] [nvarchar](50) NULL, --
	[Latitude_of_sampling_plot] [real] NULL, --
	[Longitude_of_sampling_plot] [real] NULL, --
--Properties
	[Geographic_region] [nvarchar](255) NULL, --
	[Lithostratigraphy] [nvarchar](255) NULL, --
	[Chronostratigraphy] [nvarchar](255) NULL, --
--Hidden fields
	[_CollectionEventID] [int] NULL, --
	[_CoordinatesAverageLatitudeCache] [real] NULL, --
	[_CoordinatesAverageLongitudeCache] [real] NULL, --
	[_CoordinatesLocationNotes] [nvarchar](max) NULL, --
	[_GeographicRegionPropertyURI] [varchar](255) NULL, --
	[_LithostratigraphyPropertyURI] [varchar](255) NULL, --
	[_ChronostratigraphyPropertyURI] [varchar](255) NULL, --
	[_NamedAverageLatitudeCache] [real] NULL, --
	[_NamedAverageLongitudeCache] [real] NULL, --
	[_LithostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_ChronostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_AverageAltitudeCache] [real] NULL)     --
/* 
Returns a table that lists all the specimen with the first entries of related tables. 
MW 18.11.2009 
TEST: 
Select * from dbo.FirstLinesEvent('189876, 189882, 189885, 189891, 189900, 189905, 189919, 189923, 189936, 189939, 189941, 189956, 189974, 189975, 189984, 189988, 189990, 189995, 190014, 190016, 190020, 190028, 190040, 190049, 190051, 190055, 190058, 190062, 190073, 190080, 190081, 190085, 190091, 190108, 190117, 190120, 190122, 190128, 190130, 190142')
Select * from dbo.FirstLinesEvent('3251, 3252')
*/ 
AS 
BEGIN 

declare @IDs table (ID int  Primary key)
declare @sID varchar(50)
while @CollectionSpecimenIDs <> ''
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
	begin
	set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
	set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 2, 8000)))
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
	else
	begin
	set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
	set @CollectionSpecimenIDs = ''
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
end





--- Event
insert into @List (
  CollectionEventID
, Collection_day
, Collection_month
, Collection_year
, Collection_date_supplement
, Collection_time
, Collection_time_span
, Country
, Locality_description
, Habitat_description
, Collecting_method
, Collection_event_notes
, Data_withholding_reason_for_collection_event
, Collectors_event_number
)
select 
  CollectionEventID
, CollectionDay
, CollectionMonth
, CollectionYear
, CollectionDateSupplement
, CollectionTime
, CollectionTimeSpan
, CountryCache
, LocalityDescription
, HabitatDescription
, CollectingMethod
, Notes
, DataWithholdingReason
, CollectorsEventNumber
from dbo.CollectionEvent E
where CollectionEventID in 
(select CollectionEventID from CollectionSpecimen S, dbo.CollectionSpecimenID_UserAvailable A
where S.CollectionSpecimenID in( select ID from @IDs )
and not CollectionEventID is null
and S.CollectionSpecimenID = A.CollectionSpecimenID)  




--- Named Area

update L
set L.Named_area = E.Location1
, L.NamedAreaLocation2 = E.Location2
, L.Distance_to_location = E.DistanceToLocation
, L.Direction_to_location = E.DirectionToLocation
, L._NamedAverageLatitudeCache = E.AverageLatitudeCache
, L._NamedAverageLongitudeCache = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L.CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 7


--- Coordinates

update L
set L.Longitude = E.Location1
, L.Latitude = E.Location2
, L.Coordinates_accuracy = E.LocationAccuracy
, L._CoordinatesAverageLatitudeCache = E.AverageLatitudeCache
, L._CoordinatesAverageLongitudeCache = E.AverageLongitudeCache
, L._CoordinatesLocationNotes = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L.CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 8


--- Altitude

update L
set L.Altitude_from = E.Location1
, L.Altitude_to = E.Location2
, L.Altitude_accuracy = E.LocationAccuracy
, L._AverageAltitudeCache = E.AverageAltitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L.CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 4



--- MTB

update L
set L.MTB = E.Location1
, L.Quadrant = E.Location2
, L.Notes_for_MTB = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L.CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 3



--- SamplingPlots

update L
set L.Sampling_plot = E.Location1
, L.Link_to_SamplingPlots = E.Location2
, L.Accuracy_of_sampling_plot = E.LocationAccuracy
, L.Latitude_of_sampling_plot = E.AverageLatitudeCache
, L.Longitude_of_sampling_plot = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L.CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 13



--- GeographicRegions

update L
set L.Geographic_region = P.DisplayText
, L._GeographicRegionPropertyURI = P.PropertyURI
from @List L,
dbo.CollectionEventProperty P
where L.CollectionEventID = P.CollectionEventID
and P.PropertyID = 10


--- Lithostratigraphy

update L
set L.Lithostratigraphy = P.DisplayText
, L._LithostratigraphyPropertyURI = P.PropertyURI
, L._LithostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L.CollectionEventID = P.CollectionEventID
and P.PropertyID = 30

--- Chronostratigraphy
update L
set L.Chronostratigraphy = P.DisplayText
, L._ChronostratigraphyPropertyURI = P.PropertyURI
, L._ChronostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L.CollectionEventID = P.CollectionEventID
and P.PropertyID = 20
                  
RETURN 
END   

GO
GRANT SELECT ON [dbo].[FirstLinesEvent] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[FirstLinesEvent_2]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FirstLinesEvent_2] 
(@CollectionSpecimenIDs varchar(8000))   
RETURNS @List TABLE (
	[CollectionEventID] [int] Primary key, --
	[Data_withholding_reason_for_collection_event] [nvarchar](255) NULL, --
	[Collectors_event_number] [nvarchar](50) NULL, --
	[Collection_day] [tinyint] NULL, --
	[Collection_month] [tinyint] NULL, --
	[Collection_year] [smallint] NULL, --
	[Collection_date_supplement] [nvarchar](100) NULL, --
	[Collection_time] [varchar](50) NULL, --
	[Collection_time_span] [varchar](50) NULL, --
	[Country] [nvarchar](50) NULL, --
	[Locality_description] [nvarchar](max) NULL, --
	[Habitat_description] [nvarchar](max) NULL, -- 
	[Collecting_method] [nvarchar](max) NULL, --
	[Collection_event_notes] [nvarchar](max) NULL, --
	[Named_area] [nvarchar](255) NULL, -- 
	[NamedAreaLocation2] [nvarchar](255) NULL, --
	[Remove_link_to_gazetteer] [int] NULL,
	[Distance_to_location] [varchar](50) NULL, --
	[Direction_to_location] [varchar](50) NULL, --
	[Longitude] [nvarchar](255) NULL, --
	[Latitude] [nvarchar](255) NULL, --
	[Coordinates_accuracy] [nvarchar](50) NULL, --
	[Link_to_GoogleMaps] [int] NULL,
	[Altitude_from] [nvarchar](255) NULL, --
	[Altitude_to] [nvarchar](255) NULL, --
	[Altitude_accuracy] [nvarchar](50) NULL, --
	[MTB] [nvarchar](255) NULL, --
	[Quadrant] [nvarchar](255) NULL, --
	[Notes_for_MTB] [nvarchar](max) NULL, --
	[MTB_accuracy] [nvarchar](50) NULL, --
	[Sampling_plot] [nvarchar](255) NULL, --
	[Link_to_SamplingPlots] [nvarchar](255) NULL, --
	[Remove_link_to_SamplingPlots] [int] NULL,
	[Accuracy_of_sampling_plot] [nvarchar](50) NULL, --
	[Latitude_of_sampling_plot] [real] NULL, --
	[Longitude_of_sampling_plot] [real] NULL, --
	[Geographic_region] [nvarchar](255) NULL, --
	[Lithostratigraphy] [nvarchar](255) NULL, --
	[Chronostratigraphy] [nvarchar](255) NULL, --
	[_CollectionEventID] [int] NULL, --
	[_CoordinatesAverageLatitudeCache] [real] NULL, --
	[_CoordinatesAverageLongitudeCache] [real] NULL, --
	[_CoordinatesLocationNotes] [nvarchar](max) NULL, --
	[_GeographicRegionPropertyURI] [varchar](255) NULL, --
	[_LithostratigraphyPropertyURI] [varchar](255) NULL, --
	[_ChronostratigraphyPropertyURI] [varchar](255) NULL, --
	[_NamedAverageLatitudeCache] [real] NULL, --
	[_NamedAverageLongitudeCache] [real] NULL, --
	[_LithostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_ChronostratigraphyPropertyHierarchyCache] [nvarchar](max) NULL, --
	[_AverageAltitudeCache] [real] NULL)     --
/* 
Returns a table that lists all the specimen with the first entries of related tables. 
MW 18.11.2009 
TEST: 
Select * from dbo.FirstLinesEvent('189876, 189882, 189885, 189891, 189900, 189905, 189919, 189923, 189936, 189939, 189941, 189956, 189974, 189975, 189984, 189988, 189990, 189995, 190014, 190016, 190020, 190028, 190040, 190049, 190051, 190055, 190058, 190062, 190073, 190080, 190081, 190085, 190091, 190108, 190117, 190120, 190122, 190128, 190130, 190142')
Select * from dbo.FirstLinesEvent('3251, 3252')
Select * from dbo.FirstLinesEvent('3251,,')
*/ 
AS 
BEGIN 
declare @IDs table (ID int  Primary key)
declare @sID varchar(50)
/*
while @CollectionSpecimenIDs <> ''
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
	begin
	set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
	set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 2, 8000)))
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
	else
	begin
	set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
	set @CollectionSpecimenIDs = ''
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
end
*/
while @CollectionSpecimenIDs <> ''
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
		begin
		set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
		set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 1, 8000)))
		if (isnumeric(@sID) = 1)
			begin
			insert into @IDs 
			values( @sID )
			end
		end
	else
		begin
		if (isnumeric(@CollectionSpecimenIDs) = 1 AND ((select count(*) from @IDs) = 0 OR len(rtrim(ltrim(@CollectionSpecimenIDs))) >= len(@sID)))
			begin
			set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
			insert into @IDs 
			values( @sID )
			end
		set @CollectionSpecimenIDs = ''
		end
end
insert into @List (
  CollectionEventID
, Collection_day
, Collection_month
, Collection_year
, Collection_date_supplement
, Collection_time
, Collection_time_span
, Country
, Locality_description
, Habitat_description
, Collecting_method
, Collection_event_notes
, Data_withholding_reason_for_collection_event
, Collectors_event_number
)
select 
  CollectionEventID
, CollectionDay
, CollectionMonth
, CollectionYear
, CollectionDateSupplement
, CollectionTime
, CollectionTimeSpan
, CountryCache
, LocalityDescription
, HabitatDescription
, CollectingMethod
, Notes
, DataWithholdingReason
, CollectorsEventNumber
from dbo.CollectionEvent E
where CollectionEventID in 
(select CollectionEventID from CollectionSpecimen S, dbo.CollectionSpecimenID_UserAvailable A
where S.CollectionSpecimenID in( select ID from @IDs )
and not CollectionEventID is null
and S.CollectionSpecimenID = A.CollectionSpecimenID)  
update L
set L.Named_area = E.Location1
, L.NamedAreaLocation2 = E.Location2
, L.Distance_to_location = E.DistanceToLocation
, L.Direction_to_location = E.DirectionToLocation
, L._NamedAverageLatitudeCache = E.AverageLatitudeCache
, L._NamedAverageLongitudeCache = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L.CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 7
update L
set L.Longitude = E.Location1
, L.Latitude = E.Location2
, L.Coordinates_accuracy = E.LocationAccuracy
, L._CoordinatesAverageLatitudeCache = E.AverageLatitudeCache
, L._CoordinatesAverageLongitudeCache = E.AverageLongitudeCache
, L._CoordinatesLocationNotes = E.LocationNotes
from @List L,
dbo.CollectionEventLocalisation E
where L.CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 8
update L
set L.Altitude_from = E.Location1
, L.Altitude_to = E.Location2
, L.Altitude_accuracy = E.LocationAccuracy
, L._AverageAltitudeCache = E.AverageAltitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L.CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 4
update L
set L.MTB = E.Location1
, L.Quadrant = E.Location2
, L.Notes_for_MTB = E.LocationNotes
, L.MTB_accuracy = E.LocationAccuracy
from @List L,
dbo.CollectionEventLocalisation E
where L.CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 3
update L
set L.Sampling_plot = E.Location1
, L.Link_to_SamplingPlots = E.Location2
, L.Accuracy_of_sampling_plot = E.LocationAccuracy
, L.Latitude_of_sampling_plot = E.AverageLatitudeCache
, L.Longitude_of_sampling_plot = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L.CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 13
update L
set L.Geographic_region = P.DisplayText
, L._GeographicRegionPropertyURI = P.PropertyURI
from @List L,
dbo.CollectionEventProperty P
where L.CollectionEventID = P.CollectionEventID
and P.PropertyID = 10
update L
set L.Lithostratigraphy = P.DisplayText
, L._LithostratigraphyPropertyURI = P.PropertyURI
, L._LithostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L.CollectionEventID = P.CollectionEventID
and P.PropertyID = 30
update L
set L.Chronostratigraphy = P.DisplayText
, L._ChronostratigraphyPropertyURI = P.PropertyURI
, L._ChronostratigraphyPropertyHierarchyCache = P.PropertyHierarchyCache
from @List L,
dbo.CollectionEventProperty P
where L.CollectionEventID = P.CollectionEventID
and P.PropertyID = 20
RETURN 
END   
GO
GRANT SELECT ON [dbo].[FirstLinesEvent_2] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[FirstLinesPart]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   [FirstLinesPart] - optimized   #############################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[FirstLinesPart] 
(@CollectionSpecimenIDs varchar(8000), 
@AnalysisIDs varchar(8000), @AnalysisStartDate date, @AnalysisEndDate date, 
@ProcessingID int, @ProcessingStartDate datetime, @ProcessingEndDate datetime)   
RETURNS @List TABLE (
	[SpecimenPartID] [int] Primary key,
	[CollectionSpecimenID] [int], --
	[Accession_number] [nvarchar](50) NULL, --
	[Data_withholding_reason] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collection_event] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collector] [nvarchar](255) NULL, --
	[Collectors_event_number] [nvarchar](50) NULL, --
	[Collection_day] [tinyint] NULL, --
	[Collection_month] [tinyint] NULL, --
	[Collection_year] [smallint] NULL, --
	[Collection_date_supplement] [nvarchar](100) NULL, --
	[Collection_time] [varchar](50) NULL, --
	[Collection_time_span] [varchar](50) NULL, --
	[Country] [nvarchar](50) NULL, --
	[Locality_description] [nvarchar](255) NULL, --
	[Habitat_description] [nvarchar](255) NULL, -- 
	[Collecting_method] [nvarchar](255) NULL, --
	[Collection_event_notes] [nvarchar](255) NULL, --
	[Named_area] [nvarchar](255) NULL, -- 
	[NamedAreaLocation2] [nvarchar](255) NULL, --
	[Remove_link_to_gazetteer] [int] NULL,
	[Distance_to_location] [varchar](50) NULL, --
	[Direction_to_location] [varchar](50) NULL, --
	[Longitude] [nvarchar](255) NULL, --
	[Latitude] [nvarchar](255) NULL, --
	[Coordinates_accuracy] [nvarchar](50) NULL, --
	[Link_to_GoogleMaps] [int] NULL,
	[Altitude_from] [nvarchar](255) NULL, --
	[Altitude_to] [nvarchar](255) NULL, --
	[Altitude_accuracy] [nvarchar](50) NULL, --
	[Notes_for_Altitude] [nvarchar](255) NULL, --
	[MTB] [nvarchar](255) NULL, --
	[Quadrant] [nvarchar](255) NULL, --
	[Notes_for_MTB] [nvarchar](255) NULL, --
	[Sampling_plot] [nvarchar](255) NULL, --
	[Link_to_SamplingPlots] [nvarchar](255) NULL, --
	[Remove_link_to_SamplingPlots] [int] NULL,
	[Accuracy_of_sampling_plot] [nvarchar](50) NULL, --
	[Latitude_of_sampling_plot] [real] NULL, --
	[Longitude_of_sampling_plot] [real] NULL, --
	[Geographic_region] [nvarchar](255) NULL, --
	[Lithostratigraphy] [nvarchar](255) NULL, --
	[Chronostratigraphy] [nvarchar](255) NULL, --
	[Collectors_name] [nvarchar](255) NULL, --
	[Link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_collector] [int] NULL,
	[Collectors_number] [nvarchar](50) NULL, --
	[Notes_about_collector] [nvarchar](max) NULL, --
	[Accession_day] [tinyint] NULL, --
	[Accession_month] [tinyint] NULL, --
	[Accession_year] [smallint] NULL, --
	[Accession_date_supplement] [nvarchar](255) NULL, --
	[Depositors_name] [nvarchar](255) NULL, --
	[Depositors_link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_Depositor] [int] NULL,
	[Depositors_accession_number] [nvarchar](50) NULL, --
	[Exsiccata_abbreviation] [nvarchar](255) NULL, --
	[Link_to_DiversityExsiccatae] [varchar](255) NULL, --
	[Remove_link_to_exsiccatae] [int] NULL,
	[Exsiccata_number] [nvarchar](50) NULL, --
	[Original_notes] [nvarchar](max) NULL, --
	[Additional_notes] [nvarchar](max) NULL, --
	[Internal_notes] [nvarchar](max) NULL, --
	[Label_title] [nvarchar](255) NULL, --
	[Label_type] [nvarchar](50) NULL, --
	[Label_transcription_state] [nvarchar](50) NULL, --
	[Label_transcription_notes] [nvarchar](255) NULL, --
	[Problems] [nvarchar](255) NULL, --
	[Taxonomic_group] [nvarchar](50) NULL, --
	[Relation_type] [nvarchar](50) NULL, --
	[Colonised_substrate_part] [nvarchar](255) NULL, --
	[Related_organism] [nvarchar] (200) NULL,
	[Life_stage] [nvarchar](255) NULL, --
	[Gender] [nvarchar](50) NULL, --
	[Number_of_units] [smallint] NULL, --
	[Circumstances] [nvarchar](50) NULL, -- 
	[Order_of_taxon] [nvarchar](255) NULL, --
	[Family_of_taxon] [nvarchar](255) NULL, --
	[Identifier_of_organism] [nvarchar](50) NULL, --
	[Description_of_organism] [nvarchar](50) NULL, --
	[Only_observed] [bit] NULL, --
	[Notes_for_organism] [nvarchar](max) NULL, --
	[Taxonomic_name] [nvarchar](255) NULL, --
	[Link_to_DiversityTaxonNames] [varchar](255) NULL, --
	[Remove_link_for_identification] [int] NULL, 
	[Vernacular_term] [nvarchar](255) NULL, --
	[Identification_day] [tinyint] NULL, -- 
	[Identification_month] [tinyint] NULL, --
	[Identification_year] [smallint] NULL, --
	[Identification_category] [nvarchar](50) NULL, --
	[Identification_qualifier] [nvarchar](50) NULL, --
	[Type_status] [nvarchar](50) NULL, --
	[Type_notes] [nvarchar](max) NULL, --
	[Notes_for_identification] [nvarchar](max) NULL, --
	[Reference_title] [nvarchar](255) NULL, --
	[Link_to_DiversityReferences] [varchar](255) NULL, --
	[Remove_link_for_reference] [int] NULL,
	[Determiner] [nvarchar](255) NULL,
	[Link_to_DiversityAgents_for_determiner] [varchar](255) NULL, --
	[Remove_link_for_determiner] [int] NULL,
	[Analysis_0] [nvarchar](50) NULL, --
	[AnalysisID_0] [int] NULL, --
	[Analysis_number_0] [nvarchar](50) NULL, --
	[Analysis_result_0] [nvarchar](max) NULL, --
	[Analysis_1] [nvarchar](50) NULL, --
	[AnalysisID_1] [int] NULL, --
	[Analysis_number_1] [nvarchar](50) NULL, --
	[Analysis_result_1] [nvarchar](max) NULL, --
	[Analysis_2] [nvarchar](50) NULL, --
	[AnalysisID_2] [int] NULL, --
	[Analysis_number_2] [nvarchar](50) NULL, --
	[Analysis_result_2] [nvarchar](max) NULL, --
	[Analysis_3] [nvarchar](50) NULL, --
	[AnalysisID_3] [int] NULL, --
	[Analysis_number_3] [nvarchar](50) NULL, --
	[Analysis_result_3] [nvarchar](max) NULL, --
	[Analysis_4] [nvarchar](50) NULL, --
	[AnalysisID_4] [int] NULL, --
	[Analysis_number_4] [nvarchar](50) NULL, --
	[Analysis_result_4] [nvarchar](max) NULL, --
	[Analysis_5] [nvarchar](50) NULL, --
	[AnalysisID_5] [int] NULL, --
	[Analysis_number_5] [nvarchar](50) NULL, --
	[Analysis_result_5] [nvarchar](max) NULL, --
	[Analysis_6] [nvarchar](50) NULL, --
	[AnalysisID_6] [int] NULL, --
	[Analysis_number_6] [nvarchar](50) NULL, --
	[Analysis_result_6] [nvarchar](max) NULL, --
	[Analysis_7] [nvarchar](50) NULL, --
	[AnalysisID_7] [int] NULL, --
	[Analysis_number_7] [nvarchar](50) NULL, --
	[Analysis_result_7] [nvarchar](max) NULL, --
	[Analysis_8] [nvarchar](50) NULL, --
	[AnalysisID_8] [int] NULL, --
	[Analysis_number_8] [nvarchar](50) NULL, --
	[Analysis_result_8] [nvarchar](max) NULL, --
	[Analysis_9] [nvarchar](50) NULL, --
	[AnalysisID_9] [int] NULL, --
	[Analysis_number_9] [nvarchar](50) NULL, --
	[Analysis_result_9] [nvarchar](max) NULL, --
	[Preparation_method] [nvarchar](max) NULL, --
	[Preparation_date] [datetime] NULL, --
	[Part_accession_number] [nvarchar](50) NULL, --
	[Part_sublabel] [nvarchar](50) NULL, --
	[Collection] [int] NULL, --
	[Material_category] [nvarchar](50) NULL, --
	[Storage_location] [nvarchar](255) NULL, --
	[Storage_container] [nvarchar](500) NULL, --
	[Stock] [float] NULL, --
	[Stock_unit] [nvarchar](50) NULL, --
	[Notes_for_part] [nvarchar](max) NULL, --
	[Description_of_unit_in_part] [nvarchar](500) NULL, --
	[Processing_date_1] [datetime] NULL,
	[ProcessingID_1] [int] NULL,
	[Processing_Protocoll_1] [nvarchar](100) NULL,
	[Processing_duration_1] [varchar](50) NULL,
	[Processing_notes_1] [nvarchar](max) NULL,
	[Processing_date_2] [datetime] NULL,
	[ProcessingID_2] [int] NULL,
	[Processing_Protocoll_2] [nvarchar](100) NULL,
	[Processing_duration_2] [varchar](50) NULL,
	[Processing_notes_2] [nvarchar](max) NULL,
	[Processing_date_3] [datetime] NULL,
	[ProcessingID_3] [int] NULL,
	[Processing_Protocoll_3] [nvarchar](100) NULL,
	[Processing_duration_3] [varchar](50) NULL,
	[Processing_notes_3] [nvarchar](max) NULL,
	[Processing_date_4] [datetime] NULL,
	[ProcessingID_4] [int] NULL,
	[Processing_Protocoll_4] [nvarchar](100) NULL,
	[Processing_duration_4] [varchar](50) NULL,
	[Processing_notes_4] [nvarchar](max) NULL,
	[Processing_date_5] [datetime] NULL,
	[ProcessingID_5] [int] NULL,
	[Processing_Protocoll_5] [nvarchar](100) NULL,
	[Processing_duration_5] [varchar](50) NULL,
	[Processing_notes_5] [nvarchar](max) NULL,
	[_TransactionID] [int] NULL, --
	[_Transaction] [nvarchar](200) NULL, --
	[On_loan] [int] NULL, --
	[_CollectionEventID] [int] NULL, --
	[_IdentificationUnitID] [int] NULL, --
	[_IdentificationSequence] [smallint] NULL, --
	[_SpecimenPartID] [int] NULL, --
	[_CoordinatesAverageLatitudeCache] [real] NULL, --
	[_CoordinatesAverageLongitudeCache] [real] NULL, --
	[_CoordinatesLocationNotes] [nvarchar](255) NULL, --
	[_GeographicRegionPropertyURI] [varchar](255) NULL, --
	[_LithostratigraphyPropertyURI] [varchar](255) NULL, --
	[_ChronostratigraphyPropertyURI] [varchar](255) NULL, --
	[_NamedAverageLatitudeCache] [real] NULL, --
	[_NamedAverageLongitudeCache] [real] NULL, --
	[_LithostratigraphyPropertyHierarchyCache] [nvarchar](255) NULL, --
	[_ChronostratigraphyPropertyHierarchyCache] [nvarchar](255) NULL, --
	[_AverageAltitudeCache] [real] NULL)     --
/* 
Returns a table that lists all the specimen with the first entries of related tables. 
MW 18.08.2011 
TEST: 
Select * from dbo.FirstLinesPart('3251, 3252', '34', null, null, null, null) order by CollectionSpecimenID, SpecimenPartID
Select * from dbo.FirstLinesPart('3251, 3252, 177930', '34', null, null, '1/1/2000', '12/12/2010') order by CollectionSpecimenID, SpecimenPartID
Select P.Processing_date_0 from dbo.FirstLinesPart('3251, 3252, 177930', '34', null, null, '1/1/2000', '12/12/2010') P order by CollectionSpecimenID, SpecimenPartID
Select P.Processing_date_0 from dbo.FirstLinesPart('3251, 3252, 177930', '34', null, null, '2000/2/1', '2010/12/31') P order by CollectionSpecimenID, SpecimenPartID
Select P.Processing_date_0 from dbo.FirstLinesPart('3251, 3252, 177930', '34', null, null, null, null) P order by CollectionSpecimenID, SpecimenPartID
select * from CollectionSpecimenProcessing
Select * from dbo.FirstLinesPart('177930', '26,39,41,44,45', null, null, null, null, null) P order by CollectionSpecimenID, SpecimenPartID
Select * from dbo.FirstLinesPart('177930', '26,39,41,44,45', null, null, 8, null, null) P order by CollectionSpecimenID, SpecimenPartID
Select * from dbo.FirstLinesPart('3251,3252', '26,39,41,44,45', null, null, 8, null, null) P order by CollectionSpecimenID, SpecimenPartID
*/ 
AS 
BEGIN 
declare @IDs table (ID int  Primary key)
declare @sID varchar(50)
-- getting the IDs out of the string
while @CollectionSpecimenIDs <> ''
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
		begin
		set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
		set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 1, 8000)))
		if (isnumeric(@sID) = 1)
			begin
			insert into @IDs 
			values( @sID )
			end
		end
	else
		begin
		if (isnumeric(@CollectionSpecimenIDs) = 1 AND ((select count(*) from @IDs) = 0 OR len(rtrim(ltrim(@CollectionSpecimenIDs))) >= len(@sID)))
			begin
			set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
			insert into @IDs 
			values( @sID )
			end
		set @CollectionSpecimenIDs = ''
		end
end
insert into @List (
SpecimenPartID
, CollectionSpecimenID
, Accession_number
, Data_withholding_reason
, _CollectionEventID
, Accession_day
, Accession_month
, Accession_year
, Accession_date_supplement
, Depositors_name
, Depositors_link_to_DiversityAgents
, Depositors_accession_number
, Exsiccata_abbreviation
, Link_to_DiversityExsiccatae
, Original_notes
, Additional_notes
, Internal_notes
, Label_title
, Label_type
, Label_transcription_state
, Label_transcription_notes
, Problems
, Part_accession_number
, [Collection]
, Material_category
, Notes_for_part
, Part_sublabel
, Preparation_date
, Preparation_method
, Stock
, Stock_unit
, Storage_location
, Storage_container
)
select 
P.SpecimenPartID
, S.CollectionSpecimenID
, S.AccessionNumber
, S.DataWithholdingReason
, S.CollectionEventID 
, AccessionDay
, AccessionMonth
, AccessionYear
, AccessionDateSupplement
, DepositorsName
, DepositorsAgentURI
, DepositorsAccessionNumber
, ExsiccataAbbreviation
, ExsiccataURI
, OriginalNotes
, AdditionalNotes
, InternalNotes
, LabelTitle
, LabelType
, LabelTranscriptionState
, LabelTranscriptionNotes
, Problems
, P.AccessionNumber
, P.CollectionID
, P.MaterialCategory
, P.Notes
, P.PartSublabel
, P.PreparationDate
, P.PreparationMethod
, P.Stock
, P.StockUnit
, P.StorageLocation
, P.StorageContainer
from dbo.CollectionSpecimen S, dbo.CollectionSpecimenPart P, dbo.CollectionSpecimenID_UserAvailable A
where S.CollectionSpecimenID in (select ID from @IDs) 
and P.CollectionSpecimenID = S.CollectionSpecimenID 
and S.CollectionSpecimenID = A.CollectionSpecimenID

-- setting the data from CollectionEvent
update L
set L.Collection_day = E.CollectionDay
, L.Collection_month = E.CollectionMonth
, L.Collection_year = E.CollectionYear
, L.Collection_date_supplement = E.CollectionDateSupplement
, L.Collection_time = E.CollectionTime
, L.Collection_time_span = E.CollectionTimeSpan
, L.Country = E.CountryCache
, L.Locality_description = cast(E.LocalityDescription as nvarchar(255))
, L.Habitat_description = cast(E.HabitatDescription as nvarchar(255))
, L.Collecting_method = cast(E.CollectingMethod as nvarchar(255))
, L.Collection_event_notes = cast(E.Notes as nvarchar(255))
, L.Data_withholding_reason_for_collection_event = E.DataWithholdingReason
, L.Collectors_event_number = E.CollectorsEventNumber
from @List L,
CollectionEvent E
where L._CollectionEventID = E.CollectionEventID

-- setting the data from CollectionEventLocalisation
update L
set L.Named_area = E.Location1
, L.NamedAreaLocation2 = E.Location2
, L.Distance_to_location = E.DistanceToLocation
, L.Direction_to_location = E.DirectionToLocation
, L._NamedAverageLatitudeCache = E.AverageLatitudeCache
, L._NamedAverageLongitudeCache = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 7
update L
set L.Longitude = E.Location1
, L.Latitude = E.Location2
, L.Coordinates_accuracy = E.LocationAccuracy
, L._CoordinatesAverageLatitudeCache = E.AverageLatitudeCache
, L._CoordinatesAverageLongitudeCache = E.AverageLongitudeCache
, L._CoordinatesLocationNotes = cast(E.LocationNotes as nvarchar (255))
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 8

update L
set L.Altitude_from = E.Location1
, L.Altitude_to = E.Location2
, L.Altitude_accuracy = E.LocationAccuracy
, L._AverageAltitudeCache = E.AverageAltitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 4

update L
set L.MTB = E.Location1
, L.Quadrant = E.Location2
, L.Notes_for_MTB = cast(E.LocationNotes as nvarchar(255))
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 3

update L
set L.Sampling_plot = E.Location1
, L.Link_to_SamplingPlots = E.Location2
, L.Accuracy_of_sampling_plot = E.LocationAccuracy
, L.Latitude_of_sampling_plot = E.AverageLatitudeCache
, L.Longitude_of_sampling_plot = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 13

update L
set L.Geographic_region = P.DisplayText
, L._GeographicRegionPropertyURI = P.PropertyURI
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 10

update L
set L.Lithostratigraphy = P.DisplayText
, L._LithostratigraphyPropertyURI = P.PropertyURI
, L._LithostratigraphyPropertyHierarchyCache = cast(P.PropertyHierarchyCache as nvarchar (255))
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 30

update L
set L.Chronostratigraphy = P.DisplayText
, L._ChronostratigraphyPropertyURI = P.PropertyURI
, L._ChronostratigraphyPropertyHierarchyCache = cast(P.PropertyHierarchyCache as nvarchar (255))
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 20

update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.CollectorsSequence) = A.CollectorsSequence))

update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and L.Collectors_name is null
and A.CollectorsSequence is null
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.LogCreatedWhen) = A.LogCreatedWhen))
declare @AllUnitIDs table (UnitID int, ID int, DisplayOrder smallint, PartID int)
declare @UnitIDs table (UnitID int, ID int, DisplayOrder smallint, PartID int)
insert into @AllUnitIDs (UnitID, ID, DisplayOrder, PartID)
select P.IdentificationUnitID, P.CollectionSpecimenID, P.DisplayOrder, P.SpecimenPartID
from @IDs as IDs, IdentificationUnitInPart as P, @List as L
where P.DisplayOrder > 0
and IDs.ID = P.CollectionSpecimenID 
and P.SpecimenPartID = L.SpecimenPartID
insert into @UnitIDs (UnitID, ID, DisplayOrder, PartID)
select U.UnitID, U.ID, U.DisplayOrder, U.PartID
from @AllUnitIDs as U
where exists (select * from @AllUnitIDs aU group by aU.ID having min(aU.DisplayOrder) = U.DisplayOrder)

update L
set L.Taxonomic_group = IU.TaxonomicGroup
, L._IdentificationUnitID = IU.IdentificationUnitID
, L.Relation_type = IU.RelationType
, L.Colonised_substrate_part = IU.ColonisedSubstratePart
, L.Life_stage = IU.LifeStage
, L.Gender = IU.Gender
, L.Number_of_units = IU.NumberOfUnits
, L.Circumstances = IU.Circumstances
, L.Order_of_taxon = IU.OrderCache
, L.Family_of_taxon = IU.FamilyCache
, L.Identifier_of_organism = IU.UnitIdentifier
, L.Description_of_organism = IU.UnitDescription
, L.Only_observed = IU.OnlyObserved
, L.Notes_for_organism = IU.Notes
, L.Exsiccata_number = IU.ExsiccataNumber
, L.Description_of_unit_in_part = UP.[Description]
from @List L,
IdentificationUnitInPart UP,
dbo.IdentificationUnit IU,
@UnitIDs U
where L.CollectionSpecimenID = UP.CollectionSpecimenID
and L.SpecimenPartID = UP.SpecimenPartID
and L.CollectionSpecimenID = IU.CollectionSpecimenID
and UP.CollectionSpecimenID = IU.CollectionSpecimenID
and UP.IdentificationUnitID = IU.IdentificationUnitID
and U.UnitID = UP.IdentificationUnitID
and U.PartID = UP.SpecimenPartID
update L
set L._IdentificationSequence = I.IdentificationSequence
, L.Taxonomic_name = I.TaxonomicName
, L.Link_to_DiversityTaxonNames = I.NameURI
, L.Vernacular_term = I.VernacularTerm
, L.Identification_day = I.IdentificationDay
, L.Identification_month = I.IdentificationMonth
, L.Identification_year = I.IdentificationYear
, L.Identification_category = I.IdentificationCategory
, L.Identification_qualifier = I.IdentificationQualifier
, L.Type_status = I.TypeStatus
, L.Type_notes = I.TypeNotes
, L.Notes_for_identification = I.Notes
, L.Reference_title = I.ReferenceTitle
, L.Link_to_DiversityReferences = I.ReferenceURI
, L.Determiner = I.ResponsibleName
, L.Link_to_DiversityAgents_for_determiner = I.ResponsibleAgentURI
from @List L,
dbo.Identification I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.Identification AS Imax
	GROUP BY CollectionSpecimenID, IdentificationUnitID
	HAVING (Imax.CollectionSpecimenID = I.CollectionSpecimenID) AND (Imax.IdentificationUnitID = I.IdentificationUnitID) AND 
	(MAX(Imax.IdentificationSequence) = I.IdentificationSequence))
declare @AnalysisID_0 int
declare @AnalysisID_1 int
declare @AnalysisID_2 int
declare @AnalysisID_3 int
declare @AnalysisID_4 int
declare @AnalysisID_5 int
declare @AnalysisID_6 int
declare @AnalysisID_7 int
declare @AnalysisID_8 int
declare @AnalysisID_9 int
if (not @AnalysisIDs is null and @AnalysisIDs <> '')
begin
	declare @AnalysisID table (ID int Identity(0,1), AnalysisID int Primary key)
	declare @sAnalysisID varchar(50)
	declare @iAnalysis int
	set @iAnalysis = 0
	while @AnalysisIDs <> '' and @iAnalysis < 10
	begin
		if (CHARINDEX(',', @AnalysisIDs) > 0)
		begin
		set @sAnalysisID = rtrim(ltrim(SUBSTRING(@AnalysisIDs, 1, CHARINDEX(',', @AnalysisIDs) -1)))
		set @AnalysisIDs = rtrim(ltrim(SUBSTRING(@AnalysisIDs, CHARINDEX(',', @AnalysisIDs) + 1, 4000)))
		if (isnumeric(@sID) = 1 and (select count(*) from @AnalysisID where AnalysisID = @sID) = 0)
			begin
			insert into @AnalysisID (AnalysisID)
			values( @sAnalysisID )
			end
		end
		else
		begin
		set @sAnalysisID = rtrim(ltrim(@AnalysisIDs))
		set @AnalysisIDs = ''
		if (isnumeric(@sAnalysisID) = 1 and (select count(*) from @AnalysisID where AnalysisID = @sID) = 0)
			begin
			insert into @AnalysisID (AnalysisID)
			values( @sAnalysisID )
			end
		end
		set @iAnalysis = (select count(*) from @AnalysisID)
	end
	set @AnalysisID_0 = (select AnalysisID from @AnalysisID where ID = 0)
	set @AnalysisID_1 = (select AnalysisID from @AnalysisID where ID = 1)
	set @AnalysisID_2 = (select AnalysisID from @AnalysisID where ID = 2)
	set @AnalysisID_3 = (select AnalysisID from @AnalysisID where ID = 3)
	set @AnalysisID_4 = (select AnalysisID from @AnalysisID where ID = 4)
	set @AnalysisID_5 = (select AnalysisID from @AnalysisID where ID = 5)
	set @AnalysisID_6 = (select AnalysisID from @AnalysisID where ID = 6)
	set @AnalysisID_7 = (select AnalysisID from @AnalysisID where ID = 7)
	set @AnalysisID_8 = (select AnalysisID from @AnalysisID where ID = 8)
	set @AnalysisID_9 = (select AnalysisID from @AnalysisID where ID = 9)
end

update L
set L.AnalysisID_0 = I.AnalysisID
, L.Analysis_number_0 = I.AnalysisNumber
, L.Analysis_result_0 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_0
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_0)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_0 = null
	, L.Analysis_number_0 = null
	, L.Analysis_result_0 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_0
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_0 = null
	, L.Analysis_number_0 = null
	, L.Analysis_result_0 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_0
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_0 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_0 = A.AnalysisID
update L
set L.AnalysisID_1 = I.AnalysisID
, L.Analysis_number_1 = I.AnalysisNumber
, L.Analysis_result_1 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_1
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_1)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_1 = null
	, L.Analysis_number_1 = null
	, L.Analysis_result_1 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_1
	and I.AnalysisID = @AnalysisID_1
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_1 = null
	, L.Analysis_number_1 = null
	, L.Analysis_result_1 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_1
	and I.AnalysisID = @AnalysisID_1
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_1 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_1 = A.AnalysisID
update L
set L.AnalysisID_2 = I.AnalysisID
, L.Analysis_number_2 = I.AnalysisNumber
, L.Analysis_result_2 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_2
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_2
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_2)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_2 = null
	, L.Analysis_number_2 = null
	, L.Analysis_result_2 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_2
	and I.AnalysisID = @AnalysisID_2
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_2 = null
	, L.Analysis_number_2 = null
	, L.Analysis_result_2 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_2
	and I.AnalysisID = @AnalysisID_2
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_2 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_2 = A.AnalysisID
update L
set L.AnalysisID_3 = I.AnalysisID
, L.Analysis_number_3 = I.AnalysisNumber
, L.Analysis_result_3 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_3
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_3
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_3)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_3 = null
	, L.Analysis_number_3 = null
	, L.Analysis_result_3 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_3
	and I.AnalysisID = @AnalysisID_3
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_3 = null
	, L.Analysis_number_3 = null
	, L.Analysis_result_3 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_3
	and I.AnalysisID = @AnalysisID_3
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_3 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_3 = A.AnalysisID
update L
set L.AnalysisID_4 = I.AnalysisID
, L.Analysis_number_4 = I.AnalysisNumber
, L.Analysis_result_4 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_4
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_4
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_4)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_4 = null
	, L.Analysis_number_4 = null
	, L.Analysis_result_4 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_4
	and I.AnalysisID = @AnalysisID_4
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_4 = null
	, L.Analysis_number_4 = null
	, L.Analysis_result_4 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_4
	and I.AnalysisID = @AnalysisID_4
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_4 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_4 = A.AnalysisID
update L
set L.AnalysisID_5 = I.AnalysisID
, L.Analysis_number_5 = I.AnalysisNumber
, L.Analysis_result_5 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_5
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_5
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_5)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_5 = null
	, L.Analysis_number_5 = null
	, L.Analysis_result_5 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_5
	and I.AnalysisID = @AnalysisID_5
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_5 = null
	, L.Analysis_number_5 = null
	, L.Analysis_result_5 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_5
	and I.AnalysisID = @AnalysisID_5
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_5 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_5 = A.AnalysisID
update L
set L.AnalysisID_6 = I.AnalysisID
, L.Analysis_number_6 = I.AnalysisNumber
, L.Analysis_result_6 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_6
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_6
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_6)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_6 = null
	, L.Analysis_number_6 = null
	, L.Analysis_result_6 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_6
	and I.AnalysisID = @AnalysisID_6
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_6 = null
	, L.Analysis_number_6 = null
	, L.Analysis_result_6 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_6
	and I.AnalysisID = @AnalysisID_6
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_6 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_6 = A.AnalysisID
update L
set L.AnalysisID_7 = I.AnalysisID
, L.Analysis_number_7 = I.AnalysisNumber
, L.Analysis_result_7 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_7
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_7
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_7)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_7 = null
	, L.Analysis_number_7 = null
	, L.Analysis_result_7 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_7
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_7 = null
	, L.Analysis_number_7 = null
	, L.Analysis_result_7 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_7
	and I.AnalysisID = @AnalysisID_7
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_7 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_7 = A.AnalysisID
update L
set L.AnalysisID_8 = I.AnalysisID
, L.Analysis_number_8 = I.AnalysisNumber
, L.Analysis_result_8 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_8
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_8
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_8)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_8 = null
	, L.Analysis_number_8 = null
	, L.Analysis_result_8 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_8
	and I.AnalysisID = @AnalysisID_8
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_8 = null
	, L.Analysis_number_8 = null
	, L.Analysis_result_8 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_8
	and I.AnalysisID = @AnalysisID_8
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_8 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_8 = A.AnalysisID
update L
set L.AnalysisID_9 = I.AnalysisID
, L.Analysis_number_9 = I.AnalysisNumber
, L.Analysis_result_9 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_9
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_9
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_9)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_9 = null
	, L.Analysis_number_9 = null
	, L.Analysis_result_9 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_9
	and I.AnalysisID = @AnalysisID_9
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_9 = null
	, L.Analysis_number_9 = null
	, L.Analysis_result_9 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_9
	and I.AnalysisID = @AnalysisID_9
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_9 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_9 = A.AnalysisID

/*
Update L
set L.Related_Organism = Urel.LastIdentificationCache
from  @List L
, dbo.IdentificationUnit U
, dbo.IdentificationUnit Urel
where U.IdentificationUnitID = L._IdentificationUnitID
and U.RelatedUnitID = Urel.IdentificationUnitID	
and U.CollectionSpecimenID = Urel.CollectionSpecimenID
*/

declare @IdentificationUnitIDs TABLE (UnitID int not null Primary key, LastIdentificationCache nvarchar(500))
insert into @IdentificationUnitIDs (UnitID) select L._IdentificationUnitID from @List L where not L._IdentificationUnitID is null group by L._IdentificationUnitID

Update L
set L.LastIdentificationCache = Urel.LastIdentificationCache
from  @IdentificationUnitIDs L
, dbo.IdentificationUnit U
, dbo.IdentificationUnit Urel
where U.IdentificationUnitID = L.UnitID
and U.RelatedUnitID = Urel.IdentificationUnitID	
and U.CollectionSpecimenID = Urel.CollectionSpecimenID

Update L
set L.Related_Organism = U.LastIdentificationCache
from  @List L, @IdentificationUnitIDs U
where U.UnitID = L._IdentificationUnitID


declare @ProcessingIDs varchar(4000)
if (@ProcessingID is null)
begin
	declare @Processing table (ProcessingID int Primary key)
	insert into @Processing
	select ProcessingID from Processing
end
else
begin
	insert into @Processing
	select @ProcessingID
end
declare @StartDate datetime
declare @EndDate datetime
if (ISDATE(@ProcessingStartDate) = 1) begin set @StartDate = @ProcessingStartDate end
else begin set @StartDate = (select MIN(ProcessingDate) from CollectionSpecimenProcessing) end
if (ISDATE(@ProcessingEndDate) = 1) begin set @EndDate = @ProcessingEndDate end
else begin set @EndDate = (select MAX(ProcessingDate) from CollectionSpecimenProcessing) end

update L
set L.Processing_date_1 = P.ProcessingDate
, L.ProcessingID_1 = P.ProcessingID
, L.Processing_duration_1 = P.ProcessingDuration
, L.Processing_notes_1 = P.Notes
, L.Processing_Protocoll_1 = P.Protocoll
from @List L, CollectionSpecimenProcessing P, @Processing PP
where P.ProcessingDate between @StartDate and @EndDate
and L.SpecimenPartID = P.SpecimenPartID
and L.CollectionSpecimenID = P.CollectionSpecimenID
and P.ProcessingDate = 
(
SELECT MIN(ProcessingDate) FROM CollectionSpecimenProcessing S
, @Processing PP2
WHERE S.ProcessingDate BETWEEN @StartDate AND @EndDate 
AND S.SpecimenPartID = P.SpecimenPartID
AND S.SpecimenPartID = L.SpecimenPartID
and S.ProcessingID = PP2.ProcessingID
GROUP BY S.SpecimenPartID
)
and P.ProcessingID = PP.ProcessingID

update L
set L.Processing_date_2 = P.ProcessingDate
, L.ProcessingID_2 = P.ProcessingID
, L.Processing_duration_2 = P.ProcessingDuration
, L.Processing_notes_2 = P.Notes
, L.Processing_Protocoll_2 = P.Protocoll
from @List L, CollectionSpecimenProcessing P, @Processing PP
where P.ProcessingDate between @StartDate and @EndDate
and L.SpecimenPartID = P.SpecimenPartID
and L.CollectionSpecimenID = P.CollectionSpecimenID
and P.ProcessingDate = 
(
SELECT MIN(ProcessingDate) FROM CollectionSpecimenProcessing S
, @Processing PP2
WHERE S.ProcessingDate BETWEEN @StartDate AND @EndDate 
AND S.SpecimenPartID = P.SpecimenPartID
AND S.ProcessingDate > L.Processing_date_1
AND S.SpecimenPartID = L.SpecimenPartID
and S.ProcessingID = PP2.ProcessingID
GROUP BY S.SpecimenPartID
)
and P.ProcessingID = PP.ProcessingID

update L
set L.Processing_date_3 = P.ProcessingDate
, L.ProcessingID_3 = P.ProcessingID
, L.Processing_duration_3 = P.ProcessingDuration
, L.Processing_notes_3 = P.Notes
, L.Processing_Protocoll_3 = P.Protocoll
from @List L, CollectionSpecimenProcessing P, @Processing PP
where P.ProcessingDate between @StartDate and @EndDate
and L.SpecimenPartID = P.SpecimenPartID
and L.CollectionSpecimenID = P.CollectionSpecimenID
and P.ProcessingDate = 
(
SELECT MIN(ProcessingDate) FROM CollectionSpecimenProcessing S
, @Processing PP2
WHERE S.ProcessingDate BETWEEN @StartDate AND @EndDate 
AND S.SpecimenPartID = P.SpecimenPartID
AND S.ProcessingDate > L.Processing_date_2
AND S.SpecimenPartID = L.SpecimenPartID
and S.ProcessingID = PP2.ProcessingID
GROUP BY S.SpecimenPartID
)
and P.ProcessingID = PP.ProcessingID

update L
set L.Processing_date_4 = P.ProcessingDate
, L.ProcessingID_4 = P.ProcessingID
, L.Processing_duration_4 = P.ProcessingDuration
, L.Processing_notes_4 = P.Notes
, L.Processing_Protocoll_4 = P.Protocoll
from @List L, CollectionSpecimenProcessing P, @Processing PP
where P.ProcessingDate between @StartDate and @EndDate
and L.SpecimenPartID = P.SpecimenPartID
and L.CollectionSpecimenID = P.CollectionSpecimenID
and P.ProcessingDate = 
(
SELECT MIN(ProcessingDate) FROM CollectionSpecimenProcessing S
, @Processing PP2
WHERE S.ProcessingDate BETWEEN @StartDate AND @EndDate 
AND S.SpecimenPartID = P.SpecimenPartID
AND S.ProcessingDate > L.Processing_date_3
AND S.SpecimenPartID = L.SpecimenPartID
and S.ProcessingID = PP2.ProcessingID
GROUP BY S.SpecimenPartID
)
and P.ProcessingID = PP.ProcessingID

update L
set L.Processing_date_5 = P.ProcessingDate
, L.ProcessingID_5 = P.ProcessingID
, L.Processing_duration_5 = P.ProcessingDuration
, L.Processing_notes_5 = P.Notes
, L.Processing_Protocoll_5 = P.Protocoll
from @List L, CollectionSpecimenProcessing P, @Processing PP
where P.ProcessingDate between @StartDate and @EndDate
and L.SpecimenPartID = P.SpecimenPartID
and L.CollectionSpecimenID = P.CollectionSpecimenID
and P.ProcessingDate = 
(
SELECT MIN(ProcessingDate) FROM CollectionSpecimenProcessing S 
, @Processing PP2
WHERE S.ProcessingDate BETWEEN @StartDate AND @EndDate 
AND S.ProcessingDate > L.Processing_date_4
AND S.SpecimenPartID = P.SpecimenPartID
and S.ProcessingID = PP2.ProcessingID
GROUP BY S.SpecimenPartID
)
and P.ProcessingID = PP.ProcessingID

update L
set L._TransactionID = P.TransactionID
, L.On_loan = P.IsOnLoan
from @List L,
dbo.CollectionSpecimenTransaction P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and L.SpecimenPartID = P.SpecimenPartID
and EXISTS
	(SELECT Tmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenTransaction AS Tmin
	GROUP BY Tmin.CollectionSpecimenID, Tmin.SpecimenPartID
	HAVING (Tmin.CollectionSpecimenID = P.CollectionSpecimenID) 
	AND Tmin.SpecimenPartID = P.SpecimenPartID
	AND (MIN(Tmin.TransactionID) = P.TransactionID))

update L
set L._Transaction = T.TransactionTitle
from @List L,
dbo.[Transaction] T
where L._TransactionID = T.TransactionID
RETURN 
END   

GO
GRANT SELECT ON [dbo].[FirstLinesPart] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[FirstLinesPart_2]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   [FirstLinesPart_2] - Remove Reference from Identification   ################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[FirstLinesPart_2] 
(@CollectionSpecimenIDs varchar(8000), 
@AnalysisIDs varchar(8000), @AnalysisStartDate date, @AnalysisEndDate date, 
@ProcessingID int, @ProcessingStartDate datetime, @ProcessingEndDate datetime)   
RETURNS @List TABLE (
	[SpecimenPartID] [int] Primary key,
	[CollectionSpecimenID] [int], --
	[Accession_number] [nvarchar](50) NULL, --
	[Data_withholding_reason] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collection_event] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collector] [nvarchar](255) NULL, --
	[Collectors_event_number] [nvarchar](50) NULL, --
	[Collection_day] [tinyint] NULL, --
	[Collection_month] [tinyint] NULL, --
	[Collection_year] [smallint] NULL, --
	[Collection_date_supplement] [nvarchar](100) NULL, --
	[Collection_time] [varchar](50) NULL, --
	[Collection_time_span] [varchar](50) NULL, --
	[Country] [nvarchar](50) NULL, --
	[Locality_description] [nvarchar](255) NULL, --
	[Habitat_description] [nvarchar](255) NULL, -- 
	[Collecting_method] [nvarchar](255) NULL, --
	[Collection_event_notes] [nvarchar](255) NULL, --
	[Named_area] [nvarchar](255) NULL, -- 
	[NamedAreaLocation2] [nvarchar](255) NULL, --
	[Remove_link_to_gazetteer] [int] NULL,
	[Distance_to_location] [varchar](50) NULL, --
	[Direction_to_location] [varchar](50) NULL, --
	[Longitude] [nvarchar](255) NULL, --
	[Latitude] [nvarchar](255) NULL, --
	[Coordinates_accuracy] [nvarchar](50) NULL, --
	[Link_to_GoogleMaps] [int] NULL,
	[Altitude_from] [nvarchar](255) NULL, --
	[Altitude_to] [nvarchar](255) NULL, --
	[Altitude_accuracy] [nvarchar](50) NULL, --
	[Notes_for_Altitude] [nvarchar](255) NULL, --
	[MTB] [nvarchar](255) NULL, --
	[Quadrant] [nvarchar](255) NULL, --
	[Notes_for_MTB] [nvarchar](255) NULL, --
	[Sampling_plot] [nvarchar](255) NULL, --
	[Link_to_SamplingPlots] [nvarchar](255) NULL, --
	[Remove_link_to_SamplingPlots] [int] NULL,
	[Accuracy_of_sampling_plot] [nvarchar](50) NULL, --
	[Latitude_of_sampling_plot] [real] NULL, --
	[Longitude_of_sampling_plot] [real] NULL, --
	[Geographic_region] [nvarchar](255) NULL, --
	[Lithostratigraphy] [nvarchar](255) NULL, --
	[Chronostratigraphy] [nvarchar](255) NULL, --
	[Collectors_name] [nvarchar](255) NULL, --
	[Link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_collector] [int] NULL,
	[Collectors_number] [nvarchar](50) NULL, --
	[Notes_about_collector] [nvarchar](max) NULL, --
	[Accession_day] [tinyint] NULL, --
	[Accession_month] [tinyint] NULL, --
	[Accession_year] [smallint] NULL, --
	[Accession_date_supplement] [nvarchar](255) NULL, --
	[Depositors_name] [nvarchar](255) NULL, --
	[Depositors_link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_Depositor] [int] NULL,
	[Depositors_accession_number] [nvarchar](50) NULL, --
	[Exsiccata_abbreviation] [nvarchar](255) NULL, --
	[Link_to_DiversityExsiccatae] [varchar](255) NULL, --
	[Remove_link_to_exsiccatae] [int] NULL,
	[Exsiccata_number] [nvarchar](50) NULL, --
	[Original_notes] [nvarchar](max) NULL, --
	[Additional_notes] [nvarchar](max) NULL, --
	[Internal_notes] [nvarchar](max) NULL, --
	[Label_title] [nvarchar](255) NULL, --
	[Label_type] [nvarchar](50) NULL, --
	[Label_transcription_state] [nvarchar](50) NULL, --
	[Label_transcription_notes] [nvarchar](255) NULL, --
	[Problems] [nvarchar](255) NULL, --
	[Taxonomic_group] [nvarchar](50) NULL, --
	[Relation_type] [nvarchar](50) NULL, --
	[Colonised_substrate_part] [nvarchar](255) NULL, --
	[Related_organism] [nvarchar] (200) NULL,
	[Life_stage] [nvarchar](255) NULL, --
	[Gender] [nvarchar](50) NULL, --
	[Number_of_units] [smallint] NULL, --
	[Circumstances] [nvarchar](50) NULL, -- 
	[Order_of_taxon] [nvarchar](255) NULL, --
	[Family_of_taxon] [nvarchar](255) NULL, --
	[Identifier_of_organism] [nvarchar](50) NULL, --
	[Description_of_organism] [nvarchar](50) NULL, --
	[Only_observed] [bit] NULL, --
	[Notes_for_organism] [nvarchar](max) NULL, --
	[Taxonomic_name] [nvarchar](255) NULL, --
	[Link_to_DiversityTaxonNames] [varchar](255) NULL, --
	[Remove_link_for_identification] [int] NULL, 
	[Vernacular_term] [nvarchar](255) NULL, --
	[Identification_day] [tinyint] NULL, -- 
	[Identification_month] [tinyint] NULL, --
	[Identification_year] [smallint] NULL, --
	[Identification_category] [nvarchar](50) NULL, --
	[Identification_qualifier] [nvarchar](50) NULL, --
	[Type_status] [nvarchar](50) NULL, --
	[Type_notes] [nvarchar](max) NULL, --
	[Notes_for_identification] [nvarchar](max) NULL, --
	--[Reference_title] [nvarchar](255) NULL, --
	--[Link_to_DiversityReferences] [varchar](255) NULL, --
	--[Remove_link_for_reference] [int] NULL,
	[Determiner] [nvarchar](255) NULL,
	[Link_to_DiversityAgents_for_determiner] [varchar](255) NULL, --
	[Remove_link_for_determiner] [int] NULL,
	[Analysis_0] [nvarchar](50) NULL, --
	[AnalysisID_0] [int] NULL, --
	[Analysis_number_0] [nvarchar](50) NULL, --
	[Analysis_result_0] [nvarchar](max) NULL, --
	[Analysis_1] [nvarchar](50) NULL, --
	[AnalysisID_1] [int] NULL, --
	[Analysis_number_1] [nvarchar](50) NULL, --
	[Analysis_result_1] [nvarchar](max) NULL, --
	[Analysis_2] [nvarchar](50) NULL, --
	[AnalysisID_2] [int] NULL, --
	[Analysis_number_2] [nvarchar](50) NULL, --
	[Analysis_result_2] [nvarchar](max) NULL, --
	[Analysis_3] [nvarchar](50) NULL, --
	[AnalysisID_3] [int] NULL, --
	[Analysis_number_3] [nvarchar](50) NULL, --
	[Analysis_result_3] [nvarchar](max) NULL, --
	[Analysis_4] [nvarchar](50) NULL, --
	[AnalysisID_4] [int] NULL, --
	[Analysis_number_4] [nvarchar](50) NULL, --
	[Analysis_result_4] [nvarchar](max) NULL, --
	[Analysis_5] [nvarchar](50) NULL, --
	[AnalysisID_5] [int] NULL, --
	[Analysis_number_5] [nvarchar](50) NULL, --
	[Analysis_result_5] [nvarchar](max) NULL, --
	[Analysis_6] [nvarchar](50) NULL, --
	[AnalysisID_6] [int] NULL, --
	[Analysis_number_6] [nvarchar](50) NULL, --
	[Analysis_result_6] [nvarchar](max) NULL, --
	[Analysis_7] [nvarchar](50) NULL, --
	[AnalysisID_7] [int] NULL, --
	[Analysis_number_7] [nvarchar](50) NULL, --
	[Analysis_result_7] [nvarchar](max) NULL, --
	[Analysis_8] [nvarchar](50) NULL, --
	[AnalysisID_8] [int] NULL, --
	[Analysis_number_8] [nvarchar](50) NULL, --
	[Analysis_result_8] [nvarchar](max) NULL, --
	[Analysis_9] [nvarchar](50) NULL, --
	[AnalysisID_9] [int] NULL, --
	[Analysis_number_9] [nvarchar](50) NULL, --
	[Analysis_result_9] [nvarchar](max) NULL, --
	[Preparation_method] [nvarchar](max) NULL, --
	[Preparation_date] [datetime] NULL, --
	[Part_accession_number] [nvarchar](50) NULL, --
	[Part_sublabel] [nvarchar](50) NULL, --
	[Collection] [int] NULL, --
	[Material_category] [nvarchar](50) NULL, --
	[Storage_location] [nvarchar](255) NULL, --
	[Storage_container] [nvarchar](500) NULL, --
	[Stock] [float] NULL, --
	[Stock_unit] [nvarchar](50) NULL, --
	[Notes_for_part] [nvarchar](max) NULL, --
	[Description_of_unit_in_part] [nvarchar](500) NULL, --
	[Processing_date_1] [datetime] NULL,
	[ProcessingID_1] [int] NULL,
	[Processing_Protocoll_1] [nvarchar](100) NULL,
	[Processing_duration_1] [varchar](50) NULL,
	[Processing_notes_1] [nvarchar](max) NULL,
	[Processing_date_2] [datetime] NULL,
	[ProcessingID_2] [int] NULL,
	[Processing_Protocoll_2] [nvarchar](100) NULL,
	[Processing_duration_2] [varchar](50) NULL,
	[Processing_notes_2] [nvarchar](max) NULL,
	[Processing_date_3] [datetime] NULL,
	[ProcessingID_3] [int] NULL,
	[Processing_Protocoll_3] [nvarchar](100) NULL,
	[Processing_duration_3] [varchar](50) NULL,
	[Processing_notes_3] [nvarchar](max) NULL,
	[Processing_date_4] [datetime] NULL,
	[ProcessingID_4] [int] NULL,
	[Processing_Protocoll_4] [nvarchar](100) NULL,
	[Processing_duration_4] [varchar](50) NULL,
	[Processing_notes_4] [nvarchar](max) NULL,
	[Processing_date_5] [datetime] NULL,
	[ProcessingID_5] [int] NULL,
	[Processing_Protocoll_5] [nvarchar](100) NULL,
	[Processing_duration_5] [varchar](50) NULL,
	[Processing_notes_5] [nvarchar](max) NULL,
	[_TransactionID] [int] NULL, --
	[_Transaction] [nvarchar](200) NULL, --
	[On_loan] [int] NULL, --
	[_CollectionEventID] [int] NULL, --
	[_IdentificationUnitID] [int] NULL, --
	[_IdentificationSequence] [smallint] NULL, --
	[_SpecimenPartID] [int] NULL, --
	[_CoordinatesAverageLatitudeCache] [real] NULL, --
	[_CoordinatesAverageLongitudeCache] [real] NULL, --
	[_CoordinatesLocationNotes] [nvarchar](255) NULL, --
	[_GeographicRegionPropertyURI] [varchar](255) NULL, --
	[_LithostratigraphyPropertyURI] [varchar](255) NULL, --
	[_ChronostratigraphyPropertyURI] [varchar](255) NULL, --
	[_NamedAverageLatitudeCache] [real] NULL, --
	[_NamedAverageLongitudeCache] [real] NULL, --
	[_LithostratigraphyPropertyHierarchyCache] [nvarchar](255) NULL, --
	[_ChronostratigraphyPropertyHierarchyCache] [nvarchar](255) NULL, --
	[_AverageAltitudeCache] [real] NULL)     --
/* 
Returns a table that lists all the specimen with the first entries of related tables. 
MW 18.08.2011 
TEST: 
Select * from dbo.FirstLinesPart('3251, 3252', '34', null, null, null, null) order by CollectionSpecimenID, SpecimenPartID
Select * from dbo.FirstLinesPart('3251, 3252, 177930', '34', null, null, '1/1/2000', '12/12/2010') order by CollectionSpecimenID, SpecimenPartID
Select P.Processing_date_0 from dbo.FirstLinesPart('3251, 3252, 177930', '34', null, null, '1/1/2000', '12/12/2010') P order by CollectionSpecimenID, SpecimenPartID
Select P.Processing_date_0 from dbo.FirstLinesPart('3251, 3252, 177930', '34', null, null, '2000/2/1', '2010/12/31') P order by CollectionSpecimenID, SpecimenPartID
Select P.Processing_date_0 from dbo.FirstLinesPart('3251, 3252, 177930', '34', null, null, null, null) P order by CollectionSpecimenID, SpecimenPartID
select * from CollectionSpecimenProcessing
Select * from dbo.FirstLinesPart('177930', '26,39,41,44,45', null, null, null, null, null) P order by CollectionSpecimenID, SpecimenPartID
Select * from dbo.FirstLinesPart('177930', '26,39,41,44,45', null, null, 8, null, null) P order by CollectionSpecimenID, SpecimenPartID
Select * from dbo.FirstLinesPart('3251,3252', '26,39,41,44,45', null, null, 8, null, null) P order by CollectionSpecimenID, SpecimenPartID
*/ 
AS 
BEGIN 
declare @IDs table (ID int  Primary key)
declare @sID varchar(50)
-- getting the IDs out of the string
while @CollectionSpecimenIDs <> ''
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
		begin
		set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
		set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 1, 8000)))
		if (isnumeric(@sID) = 1)
			begin
			insert into @IDs 
			values( @sID )
			end
		end
	else
		begin
		if (isnumeric(@CollectionSpecimenIDs) = 1 AND ((select count(*) from @IDs) = 0 OR len(rtrim(ltrim(@CollectionSpecimenIDs))) >= len(@sID)))
			begin
			set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
			insert into @IDs 
			values( @sID )
			end
		set @CollectionSpecimenIDs = ''
		end
end
insert into @List (
SpecimenPartID
, CollectionSpecimenID
, Accession_number
, Data_withholding_reason
, _CollectionEventID
, Accession_day
, Accession_month
, Accession_year
, Accession_date_supplement
, Depositors_name
, Depositors_link_to_DiversityAgents
, Depositors_accession_number
, Exsiccata_abbreviation
, Link_to_DiversityExsiccatae
, Original_notes
, Additional_notes
, Internal_notes
, Label_title
, Label_type
, Label_transcription_state
, Label_transcription_notes
, Problems
, Part_accession_number
, [Collection]
, Material_category
, Notes_for_part
, Part_sublabel
, Preparation_date
, Preparation_method
, Stock
, Stock_unit
, Storage_location
, Storage_container
)
select 
P.SpecimenPartID
, S.CollectionSpecimenID
, S.AccessionNumber
, S.DataWithholdingReason
, S.CollectionEventID 
, AccessionDay
, AccessionMonth
, AccessionYear
, AccessionDateSupplement
, DepositorsName
, DepositorsAgentURI
, DepositorsAccessionNumber
, ExsiccataAbbreviation
, ExsiccataURI
, OriginalNotes
, AdditionalNotes
, InternalNotes
, LabelTitle
, LabelType
, LabelTranscriptionState
, LabelTranscriptionNotes
, Problems
, P.AccessionNumber
, P.CollectionID
, P.MaterialCategory
, P.Notes
, P.PartSublabel
, P.PreparationDate
, P.PreparationMethod
, P.Stock
, P.StockUnit
, P.StorageLocation
, P.StorageContainer
from dbo.CollectionSpecimen S, dbo.CollectionSpecimenPart P, dbo.CollectionSpecimenID_UserAvailable A
where S.CollectionSpecimenID in (select ID from @IDs) 
and P.CollectionSpecimenID = S.CollectionSpecimenID 
and S.CollectionSpecimenID = A.CollectionSpecimenID

-- setting the data from CollectionEvent
update L
set L.Collection_day = E.CollectionDay
, L.Collection_month = E.CollectionMonth
, L.Collection_year = E.CollectionYear
, L.Collection_date_supplement = E.CollectionDateSupplement
, L.Collection_time = E.CollectionTime
, L.Collection_time_span = E.CollectionTimeSpan
, L.Country = E.CountryCache
, L.Locality_description = cast(E.LocalityDescription as nvarchar(255))
, L.Habitat_description = cast(E.HabitatDescription as nvarchar(255))
, L.Collecting_method = cast(E.CollectingMethod as nvarchar(255))
, L.Collection_event_notes = cast(E.Notes as nvarchar(255))
, L.Data_withholding_reason_for_collection_event = E.DataWithholdingReason
, L.Collectors_event_number = E.CollectorsEventNumber
from @List L,
CollectionEvent E
where L._CollectionEventID = E.CollectionEventID

-- setting the data from CollectionEventLocalisation
update L
set L.Named_area = E.Location1
, L.NamedAreaLocation2 = E.Location2
, L.Distance_to_location = E.DistanceToLocation
, L.Direction_to_location = E.DirectionToLocation
, L._NamedAverageLatitudeCache = E.AverageLatitudeCache
, L._NamedAverageLongitudeCache = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 7
update L
set L.Longitude = E.Location1
, L.Latitude = E.Location2
, L.Coordinates_accuracy = E.LocationAccuracy
, L._CoordinatesAverageLatitudeCache = E.AverageLatitudeCache
, L._CoordinatesAverageLongitudeCache = E.AverageLongitudeCache
, L._CoordinatesLocationNotes = cast(E.LocationNotes as nvarchar (255))
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 8

update L
set L.Altitude_from = E.Location1
, L.Altitude_to = E.Location2
, L.Altitude_accuracy = E.LocationAccuracy
, L._AverageAltitudeCache = E.AverageAltitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 4

update L
set L.MTB = E.Location1
, L.Quadrant = E.Location2
, L.Notes_for_MTB = cast(E.LocationNotes as nvarchar(255))
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 3

update L
set L.Sampling_plot = E.Location1
, L.Link_to_SamplingPlots = E.Location2
, L.Accuracy_of_sampling_plot = E.LocationAccuracy
, L.Latitude_of_sampling_plot = E.AverageLatitudeCache
, L.Longitude_of_sampling_plot = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 13

update L
set L.Geographic_region = P.DisplayText
, L._GeographicRegionPropertyURI = P.PropertyURI
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 10

update L
set L.Lithostratigraphy = P.DisplayText
, L._LithostratigraphyPropertyURI = P.PropertyURI
, L._LithostratigraphyPropertyHierarchyCache = cast(P.PropertyHierarchyCache as nvarchar (255))
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 30

update L
set L.Chronostratigraphy = P.DisplayText
, L._ChronostratigraphyPropertyURI = P.PropertyURI
, L._ChronostratigraphyPropertyHierarchyCache = cast(P.PropertyHierarchyCache as nvarchar (255))
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 20

update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.CollectorsSequence) = A.CollectorsSequence))

update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and L.Collectors_name is null
and A.CollectorsSequence is null
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.LogCreatedWhen) = A.LogCreatedWhen))
declare @AllUnitIDs table (UnitID int, ID int, DisplayOrder smallint, PartID int)
declare @UnitIDs table (UnitID int, ID int, DisplayOrder smallint, PartID int)
insert into @AllUnitIDs (UnitID, ID, DisplayOrder, PartID)
select P.IdentificationUnitID, P.CollectionSpecimenID, P.DisplayOrder, P.SpecimenPartID
from @IDs as IDs, IdentificationUnitInPart as P, @List as L
where P.DisplayOrder > 0
and IDs.ID = P.CollectionSpecimenID 
and P.SpecimenPartID = L.SpecimenPartID
insert into @UnitIDs (UnitID, ID, DisplayOrder, PartID)
select U.UnitID, U.ID, U.DisplayOrder, U.PartID
from @AllUnitIDs as U
where exists (select * from @AllUnitIDs aU group by aU.ID having min(aU.DisplayOrder) = U.DisplayOrder)

update L
set L.Taxonomic_group = IU.TaxonomicGroup
, L._IdentificationUnitID = IU.IdentificationUnitID
, L.Relation_type = IU.RelationType
, L.Colonised_substrate_part = IU.ColonisedSubstratePart
, L.Life_stage = IU.LifeStage
, L.Gender = IU.Gender
, L.Number_of_units = IU.NumberOfUnits
, L.Circumstances = IU.Circumstances
, L.Order_of_taxon = IU.OrderCache
, L.Family_of_taxon = IU.FamilyCache
, L.Identifier_of_organism = IU.UnitIdentifier
, L.Description_of_organism = IU.UnitDescription
, L.Only_observed = IU.OnlyObserved
, L.Notes_for_organism = IU.Notes
, L.Exsiccata_number = IU.ExsiccataNumber
, L.Description_of_unit_in_part = UP.[Description]
from @List L,
IdentificationUnitInPart UP,
dbo.IdentificationUnit IU,
@UnitIDs U
where L.CollectionSpecimenID = UP.CollectionSpecimenID
and L.SpecimenPartID = UP.SpecimenPartID
and L.CollectionSpecimenID = IU.CollectionSpecimenID
and UP.CollectionSpecimenID = IU.CollectionSpecimenID
and UP.IdentificationUnitID = IU.IdentificationUnitID
and U.UnitID = UP.IdentificationUnitID
and U.PartID = UP.SpecimenPartID
update L
set L._IdentificationSequence = I.IdentificationSequence
, L.Taxonomic_name = I.TaxonomicName
, L.Link_to_DiversityTaxonNames = I.NameURI
, L.Vernacular_term = I.VernacularTerm
, L.Identification_day = I.IdentificationDay
, L.Identification_month = I.IdentificationMonth
, L.Identification_year = I.IdentificationYear
, L.Identification_category = I.IdentificationCategory
, L.Identification_qualifier = I.IdentificationQualifier
, L.Type_status = I.TypeStatus
, L.Type_notes = I.TypeNotes
, L.Notes_for_identification = I.Notes
--, L.Reference_title = I.ReferenceTitle
--, L.Link_to_DiversityReferences = I.ReferenceURI
, L.Determiner = I.ResponsibleName
, L.Link_to_DiversityAgents_for_determiner = I.ResponsibleAgentURI
from @List L,
dbo.Identification I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.Identification AS Imax
	GROUP BY CollectionSpecimenID, IdentificationUnitID
	HAVING (Imax.CollectionSpecimenID = I.CollectionSpecimenID) AND (Imax.IdentificationUnitID = I.IdentificationUnitID) AND 
	(MAX(Imax.IdentificationSequence) = I.IdentificationSequence))
declare @AnalysisID_0 int
declare @AnalysisID_1 int
declare @AnalysisID_2 int
declare @AnalysisID_3 int
declare @AnalysisID_4 int
declare @AnalysisID_5 int
declare @AnalysisID_6 int
declare @AnalysisID_7 int
declare @AnalysisID_8 int
declare @AnalysisID_9 int
if (not @AnalysisIDs is null and @AnalysisIDs <> '')
begin
	declare @AnalysisID table (ID int Identity(0,1), AnalysisID int Primary key)
	declare @sAnalysisID varchar(50)
	declare @iAnalysis int
	set @iAnalysis = 0
	while @AnalysisIDs <> '' and @iAnalysis < 10
	begin
		if (CHARINDEX(',', @AnalysisIDs) > 0)
		begin
		set @sAnalysisID = rtrim(ltrim(SUBSTRING(@AnalysisIDs, 1, CHARINDEX(',', @AnalysisIDs) -1)))
		set @AnalysisIDs = rtrim(ltrim(SUBSTRING(@AnalysisIDs, CHARINDEX(',', @AnalysisIDs) + 1, 4000)))
		if (isnumeric(@sID) = 1 and (select count(*) from @AnalysisID where AnalysisID = @sID) = 0)
			begin
			insert into @AnalysisID (AnalysisID)
			values( @sAnalysisID )
			end
		end
		else
		begin
		set @sAnalysisID = rtrim(ltrim(@AnalysisIDs))
		set @AnalysisIDs = ''
		if (isnumeric(@sAnalysisID) = 1 and (select count(*) from @AnalysisID where AnalysisID = @sID) = 0)
			begin
			insert into @AnalysisID (AnalysisID)
			values( @sAnalysisID )
			end
		end
		set @iAnalysis = (select count(*) from @AnalysisID)
	end
	set @AnalysisID_0 = (select AnalysisID from @AnalysisID where ID = 0)
	set @AnalysisID_1 = (select AnalysisID from @AnalysisID where ID = 1)
	set @AnalysisID_2 = (select AnalysisID from @AnalysisID where ID = 2)
	set @AnalysisID_3 = (select AnalysisID from @AnalysisID where ID = 3)
	set @AnalysisID_4 = (select AnalysisID from @AnalysisID where ID = 4)
	set @AnalysisID_5 = (select AnalysisID from @AnalysisID where ID = 5)
	set @AnalysisID_6 = (select AnalysisID from @AnalysisID where ID = 6)
	set @AnalysisID_7 = (select AnalysisID from @AnalysisID where ID = 7)
	set @AnalysisID_8 = (select AnalysisID from @AnalysisID where ID = 8)
	set @AnalysisID_9 = (select AnalysisID from @AnalysisID where ID = 9)
end

update L
set L.AnalysisID_0 = I.AnalysisID
, L.Analysis_number_0 = I.AnalysisNumber
, L.Analysis_result_0 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_0
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_0)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_0 = null
	, L.Analysis_number_0 = null
	, L.Analysis_result_0 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_0
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_0 = null
	, L.Analysis_number_0 = null
	, L.Analysis_result_0 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_0
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_0 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_0 = A.AnalysisID
update L
set L.AnalysisID_1 = I.AnalysisID
, L.Analysis_number_1 = I.AnalysisNumber
, L.Analysis_result_1 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_1
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_1)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_1 = null
	, L.Analysis_number_1 = null
	, L.Analysis_result_1 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_1
	and I.AnalysisID = @AnalysisID_1
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_1 = null
	, L.Analysis_number_1 = null
	, L.Analysis_result_1 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_1
	and I.AnalysisID = @AnalysisID_1
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_1 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_1 = A.AnalysisID
update L
set L.AnalysisID_2 = I.AnalysisID
, L.Analysis_number_2 = I.AnalysisNumber
, L.Analysis_result_2 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_2
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_2
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_2)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_2 = null
	, L.Analysis_number_2 = null
	, L.Analysis_result_2 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_2
	and I.AnalysisID = @AnalysisID_2
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_2 = null
	, L.Analysis_number_2 = null
	, L.Analysis_result_2 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_2
	and I.AnalysisID = @AnalysisID_2
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_2 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_2 = A.AnalysisID
update L
set L.AnalysisID_3 = I.AnalysisID
, L.Analysis_number_3 = I.AnalysisNumber
, L.Analysis_result_3 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_3
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_3
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_3)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_3 = null
	, L.Analysis_number_3 = null
	, L.Analysis_result_3 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_3
	and I.AnalysisID = @AnalysisID_3
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_3 = null
	, L.Analysis_number_3 = null
	, L.Analysis_result_3 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_3
	and I.AnalysisID = @AnalysisID_3
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_3 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_3 = A.AnalysisID
update L
set L.AnalysisID_4 = I.AnalysisID
, L.Analysis_number_4 = I.AnalysisNumber
, L.Analysis_result_4 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_4
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_4
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_4)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_4 = null
	, L.Analysis_number_4 = null
	, L.Analysis_result_4 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_4
	and I.AnalysisID = @AnalysisID_4
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_4 = null
	, L.Analysis_number_4 = null
	, L.Analysis_result_4 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_4
	and I.AnalysisID = @AnalysisID_4
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_4 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_4 = A.AnalysisID
update L
set L.AnalysisID_5 = I.AnalysisID
, L.Analysis_number_5 = I.AnalysisNumber
, L.Analysis_result_5 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_5
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_5
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_5)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_5 = null
	, L.Analysis_number_5 = null
	, L.Analysis_result_5 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_5
	and I.AnalysisID = @AnalysisID_5
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_5 = null
	, L.Analysis_number_5 = null
	, L.Analysis_result_5 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_5
	and I.AnalysisID = @AnalysisID_5
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_5 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_5 = A.AnalysisID
update L
set L.AnalysisID_6 = I.AnalysisID
, L.Analysis_number_6 = I.AnalysisNumber
, L.Analysis_result_6 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_6
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_6
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_6)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_6 = null
	, L.Analysis_number_6 = null
	, L.Analysis_result_6 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_6
	and I.AnalysisID = @AnalysisID_6
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_6 = null
	, L.Analysis_number_6 = null
	, L.Analysis_result_6 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_6
	and I.AnalysisID = @AnalysisID_6
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_6 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_6 = A.AnalysisID
update L
set L.AnalysisID_7 = I.AnalysisID
, L.Analysis_number_7 = I.AnalysisNumber
, L.Analysis_result_7 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_7
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_7
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_7)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_7 = null
	, L.Analysis_number_7 = null
	, L.Analysis_result_7 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_7
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_7 = null
	, L.Analysis_number_7 = null
	, L.Analysis_result_7 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_7
	and I.AnalysisID = @AnalysisID_7
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_7 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_7 = A.AnalysisID
update L
set L.AnalysisID_8 = I.AnalysisID
, L.Analysis_number_8 = I.AnalysisNumber
, L.Analysis_result_8 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_8
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_8
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_8)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_8 = null
	, L.Analysis_number_8 = null
	, L.Analysis_result_8 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_8
	and I.AnalysisID = @AnalysisID_8
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_8 = null
	, L.Analysis_number_8 = null
	, L.Analysis_result_8 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_8
	and I.AnalysisID = @AnalysisID_8
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_8 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_8 = A.AnalysisID
update L
set L.AnalysisID_9 = I.AnalysisID
, L.Analysis_number_9 = I.AnalysisNumber
, L.Analysis_result_9 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L._IdentificationUnitID = I.IdentificationUnitID
and L.SpecimenPartID = I.SpecimenPartID
and I.AnalysisID = @AnalysisID_9
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_9
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID, Imin.SpecimenPartID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.SpecimenPartID = I.SpecimenPartID)
	AND (Imin.AnalysisID = @AnalysisID_9)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_9 = null
	, L.Analysis_number_9 = null
	, L.Analysis_result_9 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_9
	and I.AnalysisID = @AnalysisID_9
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_9 = null
	, L.Analysis_number_9 = null
	, L.Analysis_result_9 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L._IdentificationUnitID = I.IdentificationUnitID
	and L.SpecimenPartID = I.SpecimenPartID
	and I.AnalysisID = L.AnalysisID_9
	and I.AnalysisID = @AnalysisID_9
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_9 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_9 = A.AnalysisID

/*
Update L
set L.Related_Organism = Urel.LastIdentificationCache
from  @List L
, dbo.IdentificationUnit U
, dbo.IdentificationUnit Urel
where U.IdentificationUnitID = L._IdentificationUnitID
and U.RelatedUnitID = Urel.IdentificationUnitID	
and U.CollectionSpecimenID = Urel.CollectionSpecimenID
*/

declare @IdentificationUnitIDs TABLE (UnitID int not null Primary key, LastIdentificationCache nvarchar(500))
insert into @IdentificationUnitIDs (UnitID) select L._IdentificationUnitID from @List L where not L._IdentificationUnitID is null group by L._IdentificationUnitID

Update L
set L.LastIdentificationCache = Urel.LastIdentificationCache
from  @IdentificationUnitIDs L
, dbo.IdentificationUnit U
, dbo.IdentificationUnit Urel
where U.IdentificationUnitID = L.UnitID
and U.RelatedUnitID = Urel.IdentificationUnitID	
and U.CollectionSpecimenID = Urel.CollectionSpecimenID

Update L
set L.Related_Organism = U.LastIdentificationCache
from  @List L, @IdentificationUnitIDs U
where U.UnitID = L._IdentificationUnitID


declare @ProcessingIDs varchar(4000)
if (@ProcessingID is null)
begin
	declare @Processing table (ProcessingID int Primary key)
	insert into @Processing
	select ProcessingID from Processing
end
else
begin
	insert into @Processing
	select @ProcessingID
end
declare @StartDate datetime
declare @EndDate datetime
if (ISDATE(@ProcessingStartDate) = 1) begin set @StartDate = @ProcessingStartDate end
else begin set @StartDate = (select MIN(ProcessingDate) from CollectionSpecimenProcessing) end
if (ISDATE(@ProcessingEndDate) = 1) begin set @EndDate = @ProcessingEndDate end
else begin set @EndDate = (select MAX(ProcessingDate) from CollectionSpecimenProcessing) end

update L
set L.Processing_date_1 = P.ProcessingDate
, L.ProcessingID_1 = P.ProcessingID
, L.Processing_duration_1 = P.ProcessingDuration
, L.Processing_notes_1 = P.Notes
, L.Processing_Protocoll_1 = P.Protocoll
from @List L, CollectionSpecimenProcessing P, @Processing PP
where P.ProcessingDate between @StartDate and @EndDate
and L.SpecimenPartID = P.SpecimenPartID
and L.CollectionSpecimenID = P.CollectionSpecimenID
and P.ProcessingDate = 
(
SELECT MIN(ProcessingDate) FROM CollectionSpecimenProcessing S
, @Processing PP2
WHERE S.ProcessingDate BETWEEN @StartDate AND @EndDate 
AND S.SpecimenPartID = P.SpecimenPartID
AND S.SpecimenPartID = L.SpecimenPartID
and S.ProcessingID = PP2.ProcessingID
GROUP BY S.SpecimenPartID
)
and P.ProcessingID = PP.ProcessingID

update L
set L.Processing_date_2 = P.ProcessingDate
, L.ProcessingID_2 = P.ProcessingID
, L.Processing_duration_2 = P.ProcessingDuration
, L.Processing_notes_2 = P.Notes
, L.Processing_Protocoll_2 = P.Protocoll
from @List L, CollectionSpecimenProcessing P, @Processing PP
where P.ProcessingDate between @StartDate and @EndDate
and L.SpecimenPartID = P.SpecimenPartID
and L.CollectionSpecimenID = P.CollectionSpecimenID
and P.ProcessingDate = 
(
SELECT MIN(ProcessingDate) FROM CollectionSpecimenProcessing S
, @Processing PP2
WHERE S.ProcessingDate BETWEEN @StartDate AND @EndDate 
AND S.SpecimenPartID = P.SpecimenPartID
AND S.ProcessingDate > L.Processing_date_1
AND S.SpecimenPartID = L.SpecimenPartID
and S.ProcessingID = PP2.ProcessingID
GROUP BY S.SpecimenPartID
)
and P.ProcessingID = PP.ProcessingID

update L
set L.Processing_date_3 = P.ProcessingDate
, L.ProcessingID_3 = P.ProcessingID
, L.Processing_duration_3 = P.ProcessingDuration
, L.Processing_notes_3 = P.Notes
, L.Processing_Protocoll_3 = P.Protocoll
from @List L, CollectionSpecimenProcessing P, @Processing PP
where P.ProcessingDate between @StartDate and @EndDate
and L.SpecimenPartID = P.SpecimenPartID
and L.CollectionSpecimenID = P.CollectionSpecimenID
and P.ProcessingDate = 
(
SELECT MIN(ProcessingDate) FROM CollectionSpecimenProcessing S
, @Processing PP2
WHERE S.ProcessingDate BETWEEN @StartDate AND @EndDate 
AND S.SpecimenPartID = P.SpecimenPartID
AND S.ProcessingDate > L.Processing_date_2
AND S.SpecimenPartID = L.SpecimenPartID
and S.ProcessingID = PP2.ProcessingID
GROUP BY S.SpecimenPartID
)
and P.ProcessingID = PP.ProcessingID

update L
set L.Processing_date_4 = P.ProcessingDate
, L.ProcessingID_4 = P.ProcessingID
, L.Processing_duration_4 = P.ProcessingDuration
, L.Processing_notes_4 = P.Notes
, L.Processing_Protocoll_4 = P.Protocoll
from @List L, CollectionSpecimenProcessing P, @Processing PP
where P.ProcessingDate between @StartDate and @EndDate
and L.SpecimenPartID = P.SpecimenPartID
and L.CollectionSpecimenID = P.CollectionSpecimenID
and P.ProcessingDate = 
(
SELECT MIN(ProcessingDate) FROM CollectionSpecimenProcessing S
, @Processing PP2
WHERE S.ProcessingDate BETWEEN @StartDate AND @EndDate 
AND S.SpecimenPartID = P.SpecimenPartID
AND S.ProcessingDate > L.Processing_date_3
AND S.SpecimenPartID = L.SpecimenPartID
and S.ProcessingID = PP2.ProcessingID
GROUP BY S.SpecimenPartID
)
and P.ProcessingID = PP.ProcessingID

update L
set L.Processing_date_5 = P.ProcessingDate
, L.ProcessingID_5 = P.ProcessingID
, L.Processing_duration_5 = P.ProcessingDuration
, L.Processing_notes_5 = P.Notes
, L.Processing_Protocoll_5 = P.Protocoll
from @List L, CollectionSpecimenProcessing P, @Processing PP
where P.ProcessingDate between @StartDate and @EndDate
and L.SpecimenPartID = P.SpecimenPartID
and L.CollectionSpecimenID = P.CollectionSpecimenID
and P.ProcessingDate = 
(
SELECT MIN(ProcessingDate) FROM CollectionSpecimenProcessing S 
, @Processing PP2
WHERE S.ProcessingDate BETWEEN @StartDate AND @EndDate 
AND S.ProcessingDate > L.Processing_date_4
AND S.SpecimenPartID = P.SpecimenPartID
and S.ProcessingID = PP2.ProcessingID
GROUP BY S.SpecimenPartID
)
and P.ProcessingID = PP.ProcessingID

update L
set L._TransactionID = P.TransactionID
, L.On_loan = P.IsOnLoan
from @List L,
dbo.CollectionSpecimenTransaction P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and L.SpecimenPartID = P.SpecimenPartID
and EXISTS
	(SELECT Tmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenTransaction AS Tmin
	GROUP BY Tmin.CollectionSpecimenID, Tmin.SpecimenPartID
	HAVING (Tmin.CollectionSpecimenID = P.CollectionSpecimenID) 
	AND Tmin.SpecimenPartID = P.SpecimenPartID
	AND (MIN(Tmin.TransactionID) = P.TransactionID))

update L
set L._Transaction = T.TransactionTitle
from @List L,
dbo.[Transaction] T
where L._TransactionID = T.TransactionID
RETURN 
END   
GO
GRANT SELECT ON [dbo].[FirstLinesPart_2] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[FirstLinesSeries]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[FirstLinesSeries] 
(@CollectionSpecimenIDs varchar(8000))   
RETURNS @List TABLE (SeriesID int primary key,
   SeriesParentID int NULL,
   Description nvarchar(500) NULL,
   SeriesCode nvarchar(50) NULL,
   [Geography] geography,
   Notes nvarchar(500) NULL,
   DateStart datetime NULL,
   DateEnd datetime NULL)     --
/* 
Returns a table that lists all the specimen with the first entries of related tables. 
MW 18.11.2009 
TEST: 
Select * from dbo.FirstLinesSeries('189876, 189882, 189885, 189891, 189900, 189905, 189919, 189923, 189936, 189939, 189941, 189956, 189974, 189975, 189984, 189988, 189990, 189995, 190014, 190016, 190020, 190028, 190040, 190049, 190051, 190055, 190058, 190062, 190073, 190080, 190081, 190085, 190091, 190108, 190117, 190120, 190122, 190128, 190130, 190142')
Select * from dbo.FirstLinesSeries('107487, 107489, 107504, 107506, 98644')
Select * from dbo.FirstLinesSeries('107487,107489,107504,107506,98644')
Select * from dbo.FirstLinesSeries('98644')
Select * from dbo.FirstLinesSeries('107487,')
Select * from dbo.FirstLinesSeries('107506')
*/ 
AS 
BEGIN 
declare @IDs table (ID int  Primary key)
declare @sID varchar(50)
/*
while @CollectionSpecimenIDs <> ''
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
	begin
	set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
	set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 2, 8000)))
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
	else
	begin
	set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
	set @CollectionSpecimenIDs = ''
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
end
*/
while @CollectionSpecimenIDs <> ''
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
		begin
		set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
		set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 1, 8000)))
		if (isnumeric(@sID) = 1)
			begin
			insert into @IDs 
			values( @sID )
			end
		end
	else
		begin
		if (isnumeric(@CollectionSpecimenIDs) = 1 AND ((select count(*) from @IDs) = 0 OR len(rtrim(ltrim(@CollectionSpecimenIDs))) >= len(@sID)))
			begin
			set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
			insert into @IDs 
			values( @sID )
			end
		set @CollectionSpecimenIDs = ''
		end
end
declare @EventID TABLE (CollectionEventID int primary key)
INSERT INTO @EventID (CollectionEventID)
SELECT DISTINCT S.CollectionEventID
FROM CollectionSpecimen S, @IDs ID, dbo.CollectionSpecimenID_UserAvailable A
WHERE NOT CollectionEventID IS NULL
AND S.CollectionSpecimenID = ID.ID 
AND S.CollectionSpecimenID = A.CollectionSpecimenID
declare @SeriesID TABLE (SeriesID int primary key)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct E.SeriesID
FROM CollectionEvent E, @EventID ID
WHERE ID.CollectionEventID = E.CollectionEventID
AND NOT E.SeriesID IS NULL
GROUP BY E.SeriesID
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesParentID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesID
AND NOT S.SeriesParentID IS NULL
AND S.SeriesParentID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesParentID
AND NOT S.SeriesID IS NULL
AND S.SeriesID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesParentID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesID
AND NOT S.SeriesParentID IS NULL
AND S.SeriesParentID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesParentID
AND NOT S.SeriesID IS NULL
AND S.SeriesID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesParentID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesID
AND NOT S.SeriesParentID IS NULL
AND S.SeriesParentID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesParentID
AND NOT S.SeriesID IS NULL
AND S.SeriesID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesParentID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesID
AND NOT S.SeriesParentID IS NULL
AND S.SeriesParentID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesParentID
AND NOT S.SeriesID IS NULL
AND S.SeriesID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesParentID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesID
AND NOT S.SeriesParentID IS NULL
AND S.SeriesParentID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesParentID
AND NOT S.SeriesID IS NULL
AND S.SeriesID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesParentID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesID
AND NOT S.SeriesParentID IS NULL
AND S.SeriesParentID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesParentID
AND NOT S.SeriesID IS NULL
AND S.SeriesID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesParentID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesID
AND NOT S.SeriesParentID IS NULL
AND S.SeriesParentID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesParentID
AND NOT S.SeriesID IS NULL
AND S.SeriesID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesParentID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesID
AND NOT S.SeriesParentID IS NULL
AND S.SeriesParentID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesParentID
AND NOT S.SeriesID IS NULL
AND S.SeriesID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesParentID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesID
AND NOT S.SeriesParentID IS NULL
AND S.SeriesParentID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesParentID
AND NOT S.SeriesID IS NULL
AND S.SeriesID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesParentID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesID
AND NOT S.SeriesParentID IS NULL
AND S.SeriesParentID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesParentID
AND NOT S.SeriesID IS NULL
AND S.SeriesID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesParentID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesID
AND NOT S.SeriesParentID IS NULL
AND S.SeriesParentID NOT IN (SELECT SeriesID FROM @SeriesID)
INSERT INTO @SeriesID (SeriesID)
SELECT distinct S.SeriesID
FROM CollectionEventSeries S, @SeriesID ID
WHERE ID.SeriesID = S.SeriesParentID
AND NOT S.SeriesID IS NULL
AND S.SeriesID NOT IN (SELECT SeriesID FROM @SeriesID)
insert into @List (
SeriesID, 
SeriesParentID, 
Description, 
SeriesCode, 
Notes, 
Geography, 
DateStart, 
DateEnd
)
SELECT 
S.SeriesID, 
SeriesParentID, 
Description, 
SeriesCode, 
Notes, 
Geography, 
DateStart, 
DateEnd
FROM  CollectionEventSeries S, @SeriesID ID
where S.SeriesID = ID.SeriesID 
RETURN 
END   
GO
GRANT SELECT ON [dbo].[FirstLinesSeries] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[FirstLinesUnit_2]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[FirstLinesUnit_2] 
(@CollectionSpecimenIDs varchar(4000), @AnalysisIDs varchar(4000), @AnalysisStartDate date, @AnalysisEndDate date)   
RETURNS @List TABLE (
	[IdentificationUnitID] [int] Primary key,
	[CollectionSpecimenID] [int], --
	[Accession_number] [nvarchar](50) NULL, --
-- WITHHOLDINGREASONS
	[Data_withholding_reason] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collection_event] [nvarchar](255) NULL, --
	[Data_withholding_reason_for_collector] [nvarchar](255) NULL, --
--CollectionEvent
	[Collectors_event_number] [nvarchar](50) NULL, --
	[Collection_day] [tinyint] NULL, --
	[Collection_month] [tinyint] NULL, --
	[Collection_year] [smallint] NULL, --
	[Collection_date_supplement] [nvarchar](100) NULL, --
	[Collection_time] [varchar](50) NULL, --
	[Collection_time_span] [varchar](50) NULL, --
	[Country] [nvarchar](50) NULL, --
	[Locality_description] [nvarchar](255) NULL, --
	[Habitat_description] [nvarchar](255) NULL, -- 
	[Collecting_method] [nvarchar](255) NULL, --
	[Collection_event_notes] [nvarchar](255) NULL, --
--Localisation
	[Named_area] [nvarchar](255) NULL, -- 
	[NamedAreaLocation2] [nvarchar](255) NULL, --
	[Remove_link_to_gazetteer] [int] NULL,
	[Distance_to_location] [varchar](50) NULL, --
	[Direction_to_location] [varchar](50) NULL, --
	[Longitude] [nvarchar](255) NULL, --
	[Latitude] [nvarchar](255) NULL, --
	[Coordinates_accuracy] [nvarchar](50) NULL, --
	[Link_to_GoogleMaps] [int] NULL,
	[Altitude_from] [nvarchar](255) NULL, --
	[Altitude_to] [nvarchar](255) NULL, --
	[Altitude_accuracy] [nvarchar](50) NULL, --
	[MTB] [nvarchar](255) NULL, --
	[Quadrant] [nvarchar](255) NULL, --
	[Notes_for_MTB] [nvarchar](255) NULL, --
	[Sampling_plot] [nvarchar](255) NULL, --
	[Link_to_SamplingPlots] [nvarchar](255) NULL, --
	[Remove_link_to_SamplingPlots] [int] NULL,
	[Accuracy_of_sampling_plot] [nvarchar](50) NULL, --
	[Latitude_of_sampling_plot] [real] NULL, --
	[Longitude_of_sampling_plot] [real] NULL, --
--Properties
	[Geographic_region] [nvarchar](255) NULL, --
	[Lithostratigraphy] [nvarchar](255) NULL, --
	[Chronostratigraphy] [nvarchar](255) NULL, --
--Agent
	[Collectors_name] [nvarchar](255) NULL, --
	[Link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_collector] [int] NULL,
	[Collectors_number] [nvarchar](50) NULL, --
	[Notes_about_collector] [nvarchar](max) NULL, --
--Accession
	[Accession_day] [tinyint] NULL, --
	[Accession_month] [tinyint] NULL, --
	[Accession_year] [smallint] NULL, --
	[Accession_date_supplement] [nvarchar](255) NULL, --
--Depositor
	[Depositors_name] [nvarchar](255) NULL, --
	[Depositors_link_to_DiversityAgents] [varchar](255) NULL, --
	[Remove_link_for_Depositor] [int] NULL,
	[Depositors_accession_number] [nvarchar](50) NULL, --
--Exsiccate
	[Exsiccata_abbreviation] [nvarchar](255) NULL, --
	[Link_to_DiversityExsiccatae] [varchar](255) NULL, --
	[Remove_link_to_exsiccatae] [int] NULL,
	[Exsiccata_number] [nvarchar](50) NULL, --
--Notes
	[Original_notes] [nvarchar](max) NULL, --
	[Additional_notes] [nvarchar](max) NULL, --
	[Internal_notes] [nvarchar](max) NULL, --
--Label
	[Label_title] [nvarchar](255) NULL, --
	[Label_type] [nvarchar](50) NULL, --
	[Label_transcription_state] [nvarchar](50) NULL, --
	[Label_transcription_notes] [nvarchar](255) NULL, --
	[Problems] [nvarchar](255) NULL, --
--Organism
	[Taxonomic_group] [nvarchar](50) NULL, --
	[Relation_type] [nvarchar](50) NULL, --
	[Colonised_substrate_part] [nvarchar](255) NULL, --
	[Related_organism] [nvarchar] (200) NULL,
	[Life_stage] [nvarchar](255) NULL, --
	[Gender] [nvarchar](50) NULL, --
	[Number_of_units] [smallint] NULL, --
	[Circumstances] [nvarchar](50) NULL, -- 
	[Order_of_taxon] [nvarchar](255) NULL, --
	[Family_of_taxon] [nvarchar](255) NULL, --
	[Identifier_of_organism] [nvarchar](50) NULL, --
	[Description_of_organism] [nvarchar](50) NULL, --
	[Only_observed] [bit] NULL, --
	[Notes_for_organism] [nvarchar](max) NULL, --
--Identification
	[Taxonomic_name] [nvarchar](255) NULL, --
	[Link_to_DiversityTaxonNames] [varchar](255) NULL, --
	[Remove_link_for_identification] [int] NULL, 
	[Vernacular_term] [nvarchar](255) NULL, --
	[Identification_day] [tinyint] NULL, -- 
	[Identification_month] [tinyint] NULL, --
	[Identification_year] [smallint] NULL, --
	[Identification_category] [nvarchar](50) NULL, --
	[Identification_qualifier] [nvarchar](50) NULL, --
	[Type_status] [nvarchar](50) NULL, --
	[Type_notes] [nvarchar](max) NULL, --
	[Notes_for_identification] [nvarchar](max) NULL, --
	[Reference_title] [nvarchar](255) NULL, --
	[Link_to_DiversityReferences] [varchar](255) NULL, --
	[Remove_link_for_reference] [int] NULL,
	[Determiner] [nvarchar](255) NULL,
	[Link_to_DiversityAgents_for_determiner] [varchar](255) NULL, --
	[Remove_link_for_determiner] [int] NULL,
--Analysis
	[Analysis_0] [nvarchar](50) NULL, --
	[AnalysisID_0] [int] NULL, --
	[Analysis_number_0] [nvarchar](50) NULL, --
	[Analysis_result_0] [nvarchar](max) NULL, --
	
	[Analysis_1] [nvarchar](50) NULL, --
	[AnalysisID_1] [int] NULL, --
	[Analysis_number_1] [nvarchar](50) NULL, --
	[Analysis_result_1] [nvarchar](max) NULL, --
	
	[Analysis_2] [nvarchar](50) NULL, --
	[AnalysisID_2] [int] NULL, --
	[Analysis_number_2] [nvarchar](50) NULL, --
	[Analysis_result_2] [nvarchar](max) NULL, --
	
	[Analysis_3] [nvarchar](50) NULL, --
	[AnalysisID_3] [int] NULL, --
	[Analysis_number_3] [nvarchar](50) NULL, --
	[Analysis_result_3] [nvarchar](max) NULL, --
	
	[Analysis_4] [nvarchar](50) NULL, --
	[AnalysisID_4] [int] NULL, --
	[Analysis_number_4] [nvarchar](50) NULL, --
	[Analysis_result_4] [nvarchar](max) NULL, --
	
	[Analysis_5] [nvarchar](50) NULL, --
	[AnalysisID_5] [int] NULL, --
	[Analysis_number_5] [nvarchar](50) NULL, --
	[Analysis_result_5] [nvarchar](max) NULL, --
	
	[Analysis_6] [nvarchar](50) NULL, --
	[AnalysisID_6] [int] NULL, --
	[Analysis_number_6] [nvarchar](50) NULL, --
	[Analysis_result_6] [nvarchar](max) NULL, --
	
	[Analysis_7] [nvarchar](50) NULL, --
	[AnalysisID_7] [int] NULL, --
	[Analysis_number_7] [nvarchar](50) NULL, --
	[Analysis_result_7] [nvarchar](max) NULL, --
	
	[Analysis_8] [nvarchar](50) NULL, --
	[AnalysisID_8] [int] NULL, --
	[Analysis_number_8] [nvarchar](50) NULL, --
	[Analysis_result_8] [nvarchar](max) NULL, --
	
	[Analysis_9] [nvarchar](50) NULL, --
	[AnalysisID_9] [int] NULL, --
	[Analysis_number_9] [nvarchar](50) NULL, --
	[Analysis_result_9] [nvarchar](max) NULL, --
--Storage	
	[Collection] [int] NULL, --
	[Material_category] [nvarchar](50) NULL, --
	[Storage_location] [nvarchar](255) NULL, --
	[Stock] [tinyint] NULL, --
	[Preparation_method] [nvarchar](max) NULL, --
	[Preparation_date] [datetime] NULL, --
	[Notes_for_part] [nvarchar](max) NULL, --
--Transaction
	[_TransactionID] [int] NULL, --
	[_Transaction] [nvarchar](200) NULL, --
	[On_loan] [int] NULL, --
--Hidden fields
	[_CollectionEventID] [int] NULL, --
	[_IdentificationUnitID] [int] NULL, --
	[_IdentificationSequence] [smallint] NULL, --
	[_SpecimenPartID] [int] NULL, --
	[_CoordinatesAverageLatitudeCache] [real] NULL, --
	[_CoordinatesAverageLongitudeCache] [real] NULL, --
	[_CoordinatesLocationNotes] [nvarchar](255) NULL, --
	[_GeographicRegionPropertyURI] [varchar](255) NULL, --
	[_LithostratigraphyPropertyURI] [varchar](255) NULL, --
	[_ChronostratigraphyPropertyURI] [varchar](255) NULL, --
	[_NamedAverageLatitudeCache] [real] NULL, --
	[_NamedAverageLongitudeCache] [real] NULL, --
	[_LithostratigraphyPropertyHierarchyCache] [nvarchar](255) NULL, --
	[_ChronostratigraphyPropertyHierarchyCache] [nvarchar](255) NULL, --
	[_AverageAltitudeCache] [real] NULL)     --
/* 
Returns a table that lists all the specimen with the first entries of related tables. 
MW 18.11.2009 
TEST: 
Select * from dbo.FirstLinesUnit_2('189876, 189882, 189885, 189891, 189900, 189905, 189919, 189923, 189936, 189939, 189941, 189956, 189974, 189975, 189984, 189988, 189990, 189995, 190014, 190016, 190020, 190028, 190040, 190049, 190051, 190055, 190058, 190062, 190073, 190080, 190081, 190085, 190091, 190108, 190117, 190120, 190122, 190128, 190130, 190142')
Select * from dbo.FirstLinesUnit_2('3251, 3252', '34', null, null) order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit_2('193610, 193611') order by CollectionSpecimenID, IdentificationUnitID
*/ 
AS 
BEGIN 

declare @IDs table (ID int  Primary key)
declare @sID varchar(50)
while @CollectionSpecimenIDs <> ''
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
	begin
	set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
	set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 2, 4000)))
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
	else
	begin
	set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
	set @CollectionSpecimenIDs = ''
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
end


--- Specimen
insert into @List (
IdentificationUnitID
, CollectionSpecimenID
, Accession_number
, Data_withholding_reason
, _CollectionEventID
, Accession_day
, Accession_month
, Accession_year
, Accession_date_supplement
, Depositors_name
, Depositors_link_to_DiversityAgents
, Depositors_accession_number
, Exsiccata_abbreviation
, Link_to_DiversityExsiccatae
, Original_notes
, Additional_notes
, Internal_notes
, Label_title
, Label_type
, Label_transcription_state
, Label_transcription_notes
, Problems
, Taxonomic_group
, Relation_type
, Colonised_substrate_part
, Life_stage
, Gender
, Number_of_units
, Circumstances
, Order_of_taxon
, Family_of_taxon
, Identifier_of_organism
, Description_of_organism
, Only_observed
, Notes_for_organism
, Exsiccata_number
)
select 
U.IdentificationUnitID
, S.CollectionSpecimenID
, S.AccessionNumber
, S.DataWithholdingReason
, S.CollectionEventID 
, AccessionDay
, AccessionMonth
, AccessionYear
, AccessionDateSupplement
, DepositorsName
, DepositorsAgentURI
, DepositorsAccessionNumber
, ExsiccataAbbreviation
, ExsiccataURI
, OriginalNotes
, AdditionalNotes
, InternalNotes
, LabelTitle
, LabelType
, LabelTranscriptionState
, LabelTranscriptionNotes
, Problems
, U.TaxonomicGroup
, U.RelationType
, U.ColonisedSubstratePart
, U.LifeStage
, U.Gender
, U.NumberOfUnits
, U.Circumstances
, U.OrderCache
, U.FamilyCache
, U.UnitIdentifier
, U.UnitDescription
, U.OnlyObserved
, U.Notes
, U.ExsiccataNumber
from dbo.CollectionSpecimen S, dbo.IdentificationUnit U
where S.CollectionSpecimenID in (select ID from @IDs) 
and U.CollectionSpecimenID = S.CollectionSpecimenID 



--- Event

update L
set L.Collection_day = E.CollectionDay
, L.Collection_month = E.CollectionMonth
, L.Collection_year = E.CollectionYear
, L.Collection_date_supplement = E.CollectionDateSupplement
, L.Collection_time = E.CollectionTime
, L.Collection_time_span = E.CollectionTimeSpan
, L.Country = E.CountryCache
, L.Locality_description = cast(E.LocalityDescription as nvarchar(255))
, L.Habitat_description = cast(E.HabitatDescription as nvarchar(255))
, L.Collecting_method = cast(E.CollectingMethod as nvarchar(255))
, L.Collection_event_notes = cast(E.Notes as nvarchar(255))
, L.Data_withholding_reason_for_collection_event = E.DataWithholdingReason
, L.Collectors_event_number = E.CollectorsEventNumber
from @List L,
CollectionEvent E
where L._CollectionEventID = E.CollectionEventID



--- Named Area

update L
set L.Named_area = E.Location1
, L.NamedAreaLocation2 = E.Location2
, L.Distance_to_location = E.DistanceToLocation
, L.Direction_to_location = E.DirectionToLocation
, L._NamedAverageLatitudeCache = E.AverageLatitudeCache
, L._NamedAverageLongitudeCache = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 7


--- Coordinates

update L
set L.Longitude = E.Location1
, L.Latitude = E.Location2
, L.Coordinates_accuracy = E.LocationAccuracy
, L._CoordinatesAverageLatitudeCache = E.AverageLatitudeCache
, L._CoordinatesAverageLongitudeCache = E.AverageLongitudeCache
, L._CoordinatesLocationNotes = cast(E.LocationNotes as nvarchar (255))
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 8


--- Altitude

update L
set L.Altitude_from = E.Location1
, L.Altitude_to = E.Location2
, L.Altitude_accuracy = E.LocationAccuracy
, L._AverageAltitudeCache = E.AverageAltitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 4



--- MTB

update L
set L.MTB = E.Location1
, L.Quadrant = E.Location2
, L.Notes_for_MTB = cast(E.LocationNotes as nvarchar(255))
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 3



--- SamplingPlots

update L
set L.Sampling_plot = E.Location1
, L.Link_to_SamplingPlots = E.Location2
, L.Accuracy_of_sampling_plot = E.LocationAccuracy
, L.Latitude_of_sampling_plot = E.AverageLatitudeCache
, L.Longitude_of_sampling_plot = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 13



--- GeographicRegions

update L
set L.Geographic_region = P.DisplayText
, L._GeographicRegionPropertyURI = P.PropertyURI
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 10


--- Lithostratigraphy

update L
set L.Lithostratigraphy = P.DisplayText
, L._LithostratigraphyPropertyURI = P.PropertyURI
, L._LithostratigraphyPropertyHierarchyCache = cast(P.PropertyHierarchyCache as nvarchar (255))
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 30



--- Chronostratigraphy

update L
set L.Chronostratigraphy = P.DisplayText
, L._ChronostratigraphyPropertyURI = P.PropertyURI
, L._ChronostratigraphyPropertyHierarchyCache = cast(P.PropertyHierarchyCache as nvarchar (255))
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 20



--- Collector

update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
--,dbo.CollectionAgent Amin
where L.CollectionSpecimenID = A.CollectionSpecimenID
--and A.CollectionSpecimenID = Amin.CollectionSpecimenID
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.CollectorsSequence) = A.CollectorsSequence))

update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and L.Collectors_name is null
and A.CollectorsSequence is null
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.LogCreatedWhen) = A.LogCreatedWhen))


--- Identification

update L
set L._IdentificationSequence = I.IdentificationSequence
, L.Taxonomic_name = I.TaxonomicName
, L.Link_to_DiversityTaxonNames = I.NameURI
, L.Vernacular_term = I.VernacularTerm
, L.Identification_day = I.IdentificationDay
, L.Identification_month = I.IdentificationMonth
, L.Identification_year = I.IdentificationYear
, L.Identification_category = I.IdentificationCategory
, L.Identification_qualifier = I.IdentificationQualifier
, L.Type_status = I.TypeStatus
, L.Type_notes = I.TypeNotes
, L.Notes_for_identification = I.Notes
, L.Reference_title = I.ReferenceTitle
, L.Link_to_DiversityReferences = I.ReferenceURI
, L.Determiner = I.ResponsibleName
, L.Link_to_DiversityAgents_for_determiner = I.ResponsibleAgentURI
from @List L,
dbo.Identification I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.Identification AS Imax
	GROUP BY CollectionSpecimenID, IdentificationUnitID
	HAVING (Imax.CollectionSpecimenID = I.CollectionSpecimenID) AND (Imax.IdentificationUnitID = I.IdentificationUnitID) AND 
	(MAX(Imax.IdentificationSequence) = I.IdentificationSequence))



-- ANALYSIS 

-- getting the AnalysisID's that should be shown

declare @AnalysisID_0 int
declare @AnalysisID_1 int
declare @AnalysisID_2 int
declare @AnalysisID_3 int
declare @AnalysisID_4 int
declare @AnalysisID_5 int
declare @AnalysisID_6 int
declare @AnalysisID_7 int
declare @AnalysisID_8 int
declare @AnalysisID_9 int

if (not @AnalysisIDs is null and @AnalysisIDs <> '')
begin
	declare @AnalysisID table (ID int Identity(0,1), AnalysisID int Primary key)
	declare @sAnalysisID varchar(50)
	declare @iAnalysis int
	set @iAnalysis = 0
	while @AnalysisIDs <> '' and @iAnalysis < 10
	begin
		if (CHARINDEX(',', @AnalysisIDs) > 0)
		begin
		set @sAnalysisID = rtrim(ltrim(SUBSTRING(@AnalysisIDs, 1, CHARINDEX(',', @AnalysisIDs) -1)))
		set @AnalysisIDs = rtrim(ltrim(SUBSTRING(@AnalysisIDs, CHARINDEX(',', @AnalysisIDs) + 2, 4000)))
		if (isnumeric(@sID) = 1 and (select count(*) from @AnalysisID where AnalysisID = @sID) = 0)
			begin
			insert into @AnalysisID (AnalysisID)
			values( @sAnalysisID )
			end
		end
		else
		begin
		set @sAnalysisID = rtrim(ltrim(@AnalysisIDs))
		set @AnalysisIDs = ''
		if (isnumeric(@sAnalysisID) = 1 and (select count(*) from @AnalysisID where AnalysisID = @sID) = 0)
			begin
			insert into @AnalysisID (AnalysisID)
			values( @sAnalysisID )
			end
		end
		set @iAnalysis = (select count(*) from @AnalysisID)
	end
		
	set @AnalysisID_0 = (select AnalysisID from @AnalysisID where ID = 0)
	set @AnalysisID_1 = (select AnalysisID from @AnalysisID where ID = 1)
	set @AnalysisID_2 = (select AnalysisID from @AnalysisID where ID = 2)
	set @AnalysisID_3 = (select AnalysisID from @AnalysisID where ID = 3)
	set @AnalysisID_4 = (select AnalysisID from @AnalysisID where ID = 4)
	set @AnalysisID_5 = (select AnalysisID from @AnalysisID where ID = 5)
	set @AnalysisID_6 = (select AnalysisID from @AnalysisID where ID = 6)
	set @AnalysisID_7 = (select AnalysisID from @AnalysisID where ID = 7)
	set @AnalysisID_8 = (select AnalysisID from @AnalysisID where ID = 8)
	set @AnalysisID_9 = (select AnalysisID from @AnalysisID where ID = 9)
end

else
begin --- default values for the AnalysisIDs if nothing was given

	set @AnalysisID_0 = (select min(A.AnalysisID) 
		from @List L, dbo.IdentificationUnitAnalysis A 
		where 1=1
		and L.CollectionSpecimenID = A.CollectionSpecimenID 
		and L.IdentificationUnitID = A.IdentificationUnitID)
		
	set @AnalysisID_1 = (select min(A.AnalysisID) 
		from @List L, dbo.IdentificationUnitAnalysis A 
		where L.CollectionSpecimenID = A.CollectionSpecimenID 
		and L.IdentificationUnitID = A.IdentificationUnitID
		and A.AnalysisID <> @AnalysisID_0)
		
	set @AnalysisID_2 = (select min(A.AnalysisID) 
		from @List L, dbo.IdentificationUnitAnalysis A 
		where L.CollectionSpecimenID = A.CollectionSpecimenID 
		and L.IdentificationUnitID = A.IdentificationUnitID
		and A.AnalysisID <> @AnalysisID_0
		and A.AnalysisID <> @AnalysisID_1)
		
	set @AnalysisID_3 = (select min(A.AnalysisID) 
		from @List L, dbo.IdentificationUnitAnalysis A 
		where L.CollectionSpecimenID = A.CollectionSpecimenID 
		and L.IdentificationUnitID = A.IdentificationUnitID
		and A.AnalysisID <> @AnalysisID_0
		and A.AnalysisID <> @AnalysisID_1
		and A.AnalysisID <> @AnalysisID_2)

	set @AnalysisID_4 = (select min(A.AnalysisID) 
		from @List L, dbo.IdentificationUnitAnalysis A 
		where L.CollectionSpecimenID = A.CollectionSpecimenID 
		and L.IdentificationUnitID = A.IdentificationUnitID
		and A.AnalysisID <> @AnalysisID_0
		and A.AnalysisID <> @AnalysisID_1
		and A.AnalysisID <> @AnalysisID_2
		and A.AnalysisID <> @AnalysisID_3)

	set @AnalysisID_5 = (select min(A.AnalysisID) 
		from @List L, dbo.IdentificationUnitAnalysis A 
		where L.CollectionSpecimenID = A.CollectionSpecimenID 
		and L.IdentificationUnitID = A.IdentificationUnitID
		and A.AnalysisID <> @AnalysisID_0
		and A.AnalysisID <> @AnalysisID_1
		and A.AnalysisID <> @AnalysisID_2
		and A.AnalysisID <> @AnalysisID_3
		and A.AnalysisID <> @AnalysisID_4)

	set @AnalysisID_6 = (select min(A.AnalysisID) 
		from @List L, dbo.IdentificationUnitAnalysis A 
		where L.CollectionSpecimenID = A.CollectionSpecimenID 
		and L.IdentificationUnitID = A.IdentificationUnitID
		and A.AnalysisID <> @AnalysisID_0
		and A.AnalysisID <> @AnalysisID_1
		and A.AnalysisID <> @AnalysisID_2
		and A.AnalysisID <> @AnalysisID_3
		and A.AnalysisID <> @AnalysisID_4
		and A.AnalysisID <> @AnalysisID_5)

	set @AnalysisID_7 = (select min(A.AnalysisID) 
		from @List L, dbo.IdentificationUnitAnalysis A 
		where L.CollectionSpecimenID = A.CollectionSpecimenID 
		and L.IdentificationUnitID = A.IdentificationUnitID
		and A.AnalysisID <> @AnalysisID_0
		and A.AnalysisID <> @AnalysisID_1
		and A.AnalysisID <> @AnalysisID_2
		and A.AnalysisID <> @AnalysisID_3
		and A.AnalysisID <> @AnalysisID_4
		and A.AnalysisID <> @AnalysisID_5
		and A.AnalysisID <> @AnalysisID_6)

	set @AnalysisID_8 = (select min(A.AnalysisID) 
		from @List L, dbo.IdentificationUnitAnalysis A 
		where L.CollectionSpecimenID = A.CollectionSpecimenID 
		and L.IdentificationUnitID = A.IdentificationUnitID
		and A.AnalysisID <> @AnalysisID_0
		and A.AnalysisID <> @AnalysisID_1
		and A.AnalysisID <> @AnalysisID_2
		and A.AnalysisID <> @AnalysisID_3
		and A.AnalysisID <> @AnalysisID_4
		and A.AnalysisID <> @AnalysisID_5
		and A.AnalysisID <> @AnalysisID_6
		and A.AnalysisID <> @AnalysisID_7)

	set @AnalysisID_9 = (select min(A.AnalysisID) 
		from @List L, dbo.IdentificationUnitAnalysis A 
		where L.CollectionSpecimenID = A.CollectionSpecimenID 
		and L.IdentificationUnitID = A.IdentificationUnitID
		and A.AnalysisID <> @AnalysisID_0
		and A.AnalysisID <> @AnalysisID_1
		and A.AnalysisID <> @AnalysisID_2
		and A.AnalysisID <> @AnalysisID_3
		and A.AnalysisID <> @AnalysisID_4
		and A.AnalysisID <> @AnalysisID_5
		and A.AnalysisID <> @AnalysisID_6
		and A.AnalysisID <> @AnalysisID_7
		and A.AnalysisID <> @AnalysisID_8)
end


--############### ANALYSIS 0 ###############

update L
set L.AnalysisID_0 = I.AnalysisID
, L.Analysis_number_0 = I.AnalysisNumber
, L.Analysis_result_0 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_0
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_0)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))

if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_0 = null
	, L.Analysis_number_0 = null
	, L.Analysis_result_0 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_0
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end

if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_0 = null
	, L.Analysis_number_0 = null
	, L.Analysis_result_0 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_0
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end

update L
set L.Analysis_0 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_0 = A.AnalysisID



--############### ANALYSIS 1 ###############

update L
set L.AnalysisID_1 = I.AnalysisID
, L.Analysis_number_1 = I.AnalysisNumber
, L.Analysis_result_1 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_1
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_1)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))

if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_1 = null
	, L.Analysis_number_1 = null
	, L.Analysis_result_1 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_1
	and I.AnalysisID = @AnalysisID_1
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end

if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_1 = null
	, L.Analysis_number_1 = null
	, L.Analysis_result_1 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_1
	and I.AnalysisID = @AnalysisID_1
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end


update L
set L.Analysis_1 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_1 = A.AnalysisID


--############### ANALYSIS 2 ###############

update L
set L.AnalysisID_2 = I.AnalysisID
, L.Analysis_number_2 = I.AnalysisNumber
, L.Analysis_result_2 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_2
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_2
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_2)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))

if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_2 = null
	, L.Analysis_number_2 = null
	, L.Analysis_result_2 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_2
	and I.AnalysisID = @AnalysisID_2
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end

if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_2 = null
	, L.Analysis_number_2 = null
	, L.Analysis_result_2 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_2
	and I.AnalysisID = @AnalysisID_2
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end


update L
set L.Analysis_2 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_2 = A.AnalysisID



--############### ANALYSIS 3 ###############

update L
set L.AnalysisID_3 = I.AnalysisID
, L.Analysis_number_3 = I.AnalysisNumber
, L.Analysis_result_3 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_3
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_3
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_3)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))

if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_3 = null
	, L.Analysis_number_3 = null
	, L.Analysis_result_3 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_3
	and I.AnalysisID = @AnalysisID_3
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end

if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_3 = null
	, L.Analysis_number_3 = null
	, L.Analysis_result_3 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_3
	and I.AnalysisID = @AnalysisID_3
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end


update L
set L.Analysis_3 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_3 = A.AnalysisID


--############### ANALYSIS 4 ###############

update L
set L.AnalysisID_4 = I.AnalysisID
, L.Analysis_number_4 = I.AnalysisNumber
, L.Analysis_result_4 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_4
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_4
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_4)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))


if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_4 = null
	, L.Analysis_number_4 = null
	, L.Analysis_result_4 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_4
	and I.AnalysisID = @AnalysisID_4
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end

if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_4 = null
	, L.Analysis_number_4 = null
	, L.Analysis_result_4 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_4
	and I.AnalysisID = @AnalysisID_4
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end


update L
set L.Analysis_4 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_4 = A.AnalysisID



--############### ANALYSIS 5 ###############

update L
set L.AnalysisID_5 = I.AnalysisID
, L.Analysis_number_5 = I.AnalysisNumber
, L.Analysis_result_5 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_5
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_5
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_5)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))


if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_5 = null
	, L.Analysis_number_5 = null
	, L.Analysis_result_5 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_5
	and I.AnalysisID = @AnalysisID_5
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end

if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_5 = null
	, L.Analysis_number_5 = null
	, L.Analysis_result_5 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_5
	and I.AnalysisID = @AnalysisID_5
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end


update L
set L.Analysis_5 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_5 = A.AnalysisID


--############### ANALYSIS 6 ###############

update L
set L.AnalysisID_6 = I.AnalysisID
, L.Analysis_number_6 = I.AnalysisNumber
, L.Analysis_result_6 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_6
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_6
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_6)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))


if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_6 = null
	, L.Analysis_number_6 = null
	, L.Analysis_result_6 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_6
	and I.AnalysisID = @AnalysisID_6
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end

if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_6 = null
	, L.Analysis_number_6 = null
	, L.Analysis_result_6 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_6
	and I.AnalysisID = @AnalysisID_6
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end


update L
set L.Analysis_6 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_6 = A.AnalysisID



--############### ANALYSIS 7 ###############

update L
set L.AnalysisID_7 = I.AnalysisID
, L.Analysis_number_7 = I.AnalysisNumber
, L.Analysis_result_7 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_7
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_7
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_7)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))

if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_7 = null
	, L.Analysis_number_7 = null
	, L.Analysis_result_7 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_7
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end

if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_7 = null
	, L.Analysis_number_7 = null
	, L.Analysis_result_7 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_7
	and I.AnalysisID = @AnalysisID_7
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end


update L
set L.Analysis_7 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_7 = A.AnalysisID


--############### ANALYSIS 8 ###############

update L
set L.AnalysisID_8 = I.AnalysisID
, L.Analysis_number_8 = I.AnalysisNumber
, L.Analysis_result_8 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_8
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_8
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_8)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))


if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_8 = null
	, L.Analysis_number_8 = null
	, L.Analysis_result_8 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_8
	and I.AnalysisID = @AnalysisID_8
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end

if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_8 = null
	, L.Analysis_number_8 = null
	, L.Analysis_result_8 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_8
	and I.AnalysisID = @AnalysisID_8
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end


update L
set L.Analysis_8 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_8 = A.AnalysisID



--############### ANALYSIS 9 ###############

update L
set L.AnalysisID_9 = I.AnalysisID
, L.Analysis_number_9 = I.AnalysisNumber
, L.Analysis_result_9 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_9
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_9
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_9)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))


if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_9 = null
	, L.Analysis_number_9 = null
	, L.Analysis_result_9 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_9
	and I.AnalysisID = @AnalysisID_9
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end

if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_9 = null
	, L.Analysis_number_9 = null
	, L.Analysis_result_9 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_9
	and I.AnalysisID = @AnalysisID_9
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end


update L
set L.Analysis_9 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_9 = A.AnalysisID


--- Related Organism
Update L
set L.Related_Organism = Urel.LastIdentificationCache
from  @List L
, dbo.IdentificationUnit U
, dbo.IdentificationUnit Urel
where U.IdentificationUnitID = L.IdentificationUnitID
and U.RelatedUnitID = Urel.IdentificationUnitID	
and U.CollectionSpecimenID = Urel.CollectionSpecimenID
	
	
--- CollectionSpecimenPart	

update L
set L._SpecimenPartID = P.SpecimenPartID
, L.Collection = P.CollectionID
, L.Material_category = P.MaterialCategory
, L.Storage_location = P.StorageLocation
, L.Stock = P.Stock
, L.Preparation_method = P.PreparationMethod
, L.Preparation_date = P.PreparationDate
, L.Notes_for_part = P.Notes
from @List L,
dbo.CollectionSpecimenPart P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and EXISTS
	(SELECT Pmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenPart AS Pmin
	GROUP BY Pmin.CollectionSpecimenID
	HAVING (Pmin.CollectionSpecimenID = P.CollectionSpecimenID) AND (MIN(Pmin.SpecimenPartID) = P.SpecimenPartID))

--- Transaction
update L
set L._TransactionID = P.TransactionID
, L.On_loan = P.IsOnLoan
from @List L,
dbo.CollectionSpecimenTransaction P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and L._SpecimenPartID = P.SpecimenPartID
and EXISTS
	(SELECT Tmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenTransaction AS Tmin
	GROUP BY Tmin.CollectionSpecimenID, Tmin.SpecimenPartID
	HAVING (Tmin.CollectionSpecimenID = P.CollectionSpecimenID) 
	AND Tmin.SpecimenPartID = P.SpecimenPartID
	AND (MIN(Tmin.TransactionID) = P.TransactionID))
	
update L
set L._Transaction = T.TransactionTitle
from @List L,
dbo.[Transaction] T
where L._TransactionID = T.TransactionID
	
                  
RETURN 
END   

GO
GRANT SELECT ON [dbo].[FirstLinesUnit_2] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[FirstLinesUnit_3]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   FirstLinesUnit_3: Stock -> float   #########################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[FirstLinesUnit_3] 
(@CollectionSpecimenIDs varchar(8000), @AnalysisIDs varchar(8000), @AnalysisStartDate date, @AnalysisEndDate date)   
RETURNS @List TABLE (
	[IdentificationUnitID] [int] Primary key,
	[CollectionSpecimenID] [int], 
	[Accession_number] [nvarchar](50) NULL, 
	[Data_withholding_reason] [nvarchar](255) NULL, 
	[Data_withholding_reason_for_collection_event] [nvarchar](255) NULL, 
	[Data_withholding_reason_for_collector] [nvarchar](255) NULL, 
	[Collectors_event_number] [nvarchar](50) NULL, 
	[Collection_day] [tinyint] NULL, 
	[Collection_month] [tinyint] NULL, 
	[Collection_year] [smallint] NULL, 
	[Collection_date_supplement] [nvarchar](100) NULL, 
	[Collection_time] [varchar](50) NULL, 
	[Collection_time_span] [varchar](50) NULL, 
	[Country] [nvarchar](50) NULL, 
	[Locality_description] [nvarchar](255) NULL, 
	[Habitat_description] [nvarchar](255) NULL, 
	[Collecting_method] [nvarchar](255) NULL, 
	[Collection_event_notes] [nvarchar](255) NULL, 
	[Named_area] [nvarchar](255) NULL, 
	[NamedAreaLocation2] [nvarchar](255) NULL, 
	[Remove_link_to_gazetteer] [int] NULL,
	[Distance_to_location] [varchar](50) NULL, 
	[Direction_to_location] [varchar](50) NULL, 
	[Longitude] [nvarchar](255) NULL, 
	[Latitude] [nvarchar](255) NULL, 
	[Coordinates_accuracy] [nvarchar](50) NULL, 
	[Link_to_GoogleMaps] [int] NULL,
	[Altitude_from] [nvarchar](255) NULL, 
	[Altitude_to] [nvarchar](255) NULL, 
	[Altitude_accuracy] [nvarchar](50) NULL, 
	[Notes_for_Altitude] [nvarchar](255) NULL, 
	[MTB] [nvarchar](255) NULL, 
	[Quadrant] [nvarchar](255) NULL, 
	[Notes_for_MTB] [nvarchar](255) NULL, 
	[Sampling_plot] [nvarchar](255) NULL, 
	[Link_to_SamplingPlots] [nvarchar](255) NULL, 
	[Remove_link_to_SamplingPlots] [int] NULL,
	[Accuracy_of_sampling_plot] [nvarchar](50) NULL, 
	[Latitude_of_sampling_plot] [real] NULL, 
	[Longitude_of_sampling_plot] [real] NULL, 
	[Geographic_region] [nvarchar](255) NULL, 
	[Lithostratigraphy] [nvarchar](255) NULL, 
	[Chronostratigraphy] [nvarchar](255) NULL, 
	[Collectors_name] [nvarchar](255) NULL, 
	[Link_to_DiversityAgents] [varchar](255) NULL, 
	[Remove_link_for_collector] [int] NULL,
	[Collectors_number] [nvarchar](50) NULL, 
	[Notes_about_collector] [nvarchar](max) NULL, 
	[Accession_day] [tinyint] NULL, 
	[Accession_month] [tinyint] NULL, 
	[Accession_year] [smallint] NULL, 
	[Accession_date_supplement] [nvarchar](255) NULL, 
	[Depositors_name] [nvarchar](255) NULL, 
	[Depositors_link_to_DiversityAgents] [varchar](255) NULL, 
	[Remove_link_for_Depositor] [int] NULL,
	[Depositors_accession_number] [nvarchar](50) NULL, 
	[Exsiccata_abbreviation] [nvarchar](255) NULL, 
	[Link_to_DiversityExsiccatae] [varchar](255) NULL, 
	[Remove_link_to_exsiccatae] [int] NULL,
	[Exsiccata_number] [nvarchar](50) NULL, 
	[Original_notes] [nvarchar](max) NULL, 
	[Additional_notes] [nvarchar](max) NULL, 
	[Internal_notes] [nvarchar](max) NULL, 
	[Label_title] [nvarchar](255) NULL, 
	[Label_type] [nvarchar](50) NULL, 
	[Label_transcription_state] [nvarchar](50) NULL, 
	[Label_transcription_notes] [nvarchar](255) NULL, 
	[Problems] [nvarchar](255) NULL, 
	[Taxonomic_group] [nvarchar](50) NULL, 
	[Relation_type] [nvarchar](50) NULL, 
	[Colonised_substrate_part] [nvarchar](255) NULL, 
	[Related_organism] [nvarchar] (200) NULL,
	[Life_stage] [nvarchar](255) NULL, 
	[Gender] [nvarchar](50) NULL, 
	[Number_of_units] [smallint] NULL, 
	[Circumstances] [nvarchar](50) NULL, 
	[Order_of_taxon] [nvarchar](255) NULL, 
	[Family_of_taxon] [nvarchar](255) NULL, 
	[Identifier_of_organism] [nvarchar](50) NULL, 
	[Description_of_organism] [nvarchar](50) NULL, 
	[Only_observed] [bit] NULL, 
	[Notes_for_organism] [nvarchar](max) NULL, 
	[Taxonomic_name] [nvarchar](255) NULL, 
	[Link_to_DiversityTaxonNames] [varchar](255) NULL, 
	[Remove_link_for_identification] [int] NULL, 
	[Vernacular_term] [nvarchar](255) NULL, 
	[Identification_day] [tinyint] NULL, 
	[Identification_month] [tinyint] NULL, 
	[Identification_year] [smallint] NULL, 
	[Identification_category] [nvarchar](50) NULL, 
	[Identification_qualifier] [nvarchar](50) NULL, 
	[Type_status] [nvarchar](50) NULL, 
	[Type_notes] [nvarchar](max) NULL, 
	[Notes_for_identification] [nvarchar](max) NULL, 
	[Reference_title] [nvarchar](255) NULL, 
	[Link_to_DiversityReferences] [varchar](255) NULL, 
	[Remove_link_for_reference] [int] NULL,
	[Determiner] [nvarchar](255) NULL,
	[Link_to_DiversityAgents_for_determiner] [varchar](255) NULL, 
	[Remove_link_for_determiner] [int] NULL,
	[Analysis_0] [nvarchar](50) NULL, 
	[AnalysisID_0] [int] NULL, 
	[Analysis_number_0] [nvarchar](50) NULL, 
	[Analysis_result_0] [nvarchar](max) NULL, 
	[Analysis_1] [nvarchar](50) NULL, 
	[AnalysisID_1] [int] NULL, 
	[Analysis_number_1] [nvarchar](50) NULL, 
	[Analysis_result_1] [nvarchar](max) NULL, 
	[Analysis_2] [nvarchar](50) NULL, 
	[AnalysisID_2] [int] NULL, 
	[Analysis_number_2] [nvarchar](50) NULL, 
	[Analysis_result_2] [nvarchar](max) NULL, 
	[Analysis_3] [nvarchar](50) NULL, 
	[AnalysisID_3] [int] NULL, 
	[Analysis_number_3] [nvarchar](50) NULL, 
	[Analysis_result_3] [nvarchar](max) NULL, 
	[Analysis_4] [nvarchar](50) NULL, 
	[AnalysisID_4] [int] NULL, 
	[Analysis_number_4] [nvarchar](50) NULL, 
	[Analysis_result_4] [nvarchar](max) NULL, 
	[Analysis_5] [nvarchar](50) NULL, 
	[AnalysisID_5] [int] NULL, 
	[Analysis_number_5] [nvarchar](50) NULL, 
	[Analysis_result_5] [nvarchar](max) NULL, 
	[Analysis_6] [nvarchar](50) NULL, 
	[AnalysisID_6] [int] NULL, 
	[Analysis_number_6] [nvarchar](50) NULL, 
	[Analysis_result_6] [nvarchar](max) NULL, 
	[Analysis_7] [nvarchar](50) NULL, 
	[AnalysisID_7] [int] NULL, 
	[Analysis_number_7] [nvarchar](50) NULL, 
	[Analysis_result_7] [nvarchar](max) NULL, 
	[Analysis_8] [nvarchar](50) NULL, 
	[AnalysisID_8] [int] NULL, 
	[Analysis_number_8] [nvarchar](50) NULL, 
	[Analysis_result_8] [nvarchar](max) NULL, 
	[Analysis_9] [nvarchar](50) NULL, 
	[AnalysisID_9] [int] NULL, 
	[Analysis_number_9] [nvarchar](50) NULL, 
	[Analysis_result_9] [nvarchar](max) NULL, 
	[Collection] [int] NULL, 
	[Material_category] [nvarchar](50) NULL, 
	[Storage_location] [nvarchar](255) NULL, 
	[Stock] [float] NULL, 
	[Preparation_method] [nvarchar](max) NULL, 
	[Preparation_date] [datetime] NULL, 
	[Notes_for_part] [nvarchar](max) NULL, 
	[_TransactionID] [int] NULL, 
	[_Transaction] [nvarchar](200) NULL, 
	[On_loan] [int] NULL, 
	[_CollectionEventID] [int] NULL, 
	[_IdentificationUnitID] [int] NULL, 
	[_IdentificationSequence] [smallint] NULL, 
	[_SpecimenPartID] [int] NULL, 
	[_CoordinatesAverageLatitudeCache] [real] NULL, 
	[_CoordinatesAverageLongitudeCache] [real] NULL, 
	[_CoordinatesLocationNotes] [nvarchar](255) NULL, 
	[_GeographicRegionPropertyURI] [varchar](255) NULL, 
	[_LithostratigraphyPropertyURI] [varchar](255) NULL, 
	[_ChronostratigraphyPropertyURI] [varchar](255) NULL, 
	[_NamedAverageLatitudeCache] [real] NULL, 
	[_NamedAverageLongitudeCache] [real] NULL, 
	[_LithostratigraphyPropertyHierarchyCache] [nvarchar](255) NULL, 
	[_ChronostratigraphyPropertyHierarchyCache] [nvarchar](255) NULL, 
	[_AverageAltitudeCache] [real] NULL)     
/* 
Returns a table that lists all the specimen with the first entries of related tables. 
MW 18.11.2009 
TEST: 
Select * from dbo.FirstLinesUnit('189876, 189882, 189885, 189891, 189900, 189905, 189919, 189923, 189936, 189939, 189941, 189956, 189974, 189975, 189984, 189988, 189990, 189995, 190014, 190016, 190020, 190028, 190040, 190049, 190051, 190055, 190058, 190062, 190073, 190080, 190081, 190085, 190091, 190108, 190117, 190120, 190122, 190128, 190130, 190142')
Select * from dbo.FirstLinesUnit('3251, 3252', '34', null, null) order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit('193610, 193611') order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit_2('193610, 193611', '55, 64', null, null) order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit_2('193610, 193611', '64', null, null) order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit_2('193610, 193611', null, '2000/2/1', '2010/12/31') order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit_2('3251, 3252', null, null, null) order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit_2('3251, 3252', null, '2000/2/1', '2010/12/31') order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit_3('3251,3252,', null, '2000/2/1', '2010/12/31') order by CollectionSpecimenID, IdentificationUnitID
SELECT *
FROM dbo.FirstLinesUnit_3  ('193972', '18,75', '2011/8/17', null) 
ORDER BY Accession_number, CollectionSpecimenID, IdentificationUnitID 
SELECT *
FROM dbo.FirstLinesUnit_3  ('193972', '43,81,49,18,75,51', '2011/8/17', null) 
ORDER BY Accession_number, CollectionSpecimenID, IdentificationUnitID 
*/ 
AS 
BEGIN 
declare @IDs table (ID int  Primary key)
declare @sID varchar(50)
/*
while @CollectionSpecimenIDs <> ''
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
	begin
	set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
	set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 2, 4000)))
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
	else
	begin
	set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
	set @CollectionSpecimenIDs = ''
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
end
*/
while @CollectionSpecimenIDs <> ''
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
		begin
		set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
		set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 1, 8000)))
		if (isnumeric(@sID) = 1)
			begin
			insert into @IDs 
			values( @sID )
			end
		end
	else
		begin
		if (isnumeric(@CollectionSpecimenIDs) = 1 AND ((select count(*) from @IDs) = 0 OR len(rtrim(ltrim(@CollectionSpecimenIDs))) >= len(@sID)))
			begin
			set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
			insert into @IDs 
			values( @sID )
			end
		set @CollectionSpecimenIDs = ''
		end
end
insert into @List (
IdentificationUnitID
, CollectionSpecimenID
, Accession_number
, Data_withholding_reason
, _CollectionEventID
, Accession_day
, Accession_month
, Accession_year
, Accession_date_supplement
, Depositors_name
, Depositors_link_to_DiversityAgents
, Depositors_accession_number
, Exsiccata_abbreviation
, Link_to_DiversityExsiccatae
, Original_notes
, Additional_notes
, Internal_notes
, Label_title
, Label_type
, Label_transcription_state
, Label_transcription_notes
, Problems
, Taxonomic_group
, Relation_type
, Colonised_substrate_part
, Life_stage
, Gender
, Number_of_units
, Circumstances
, Order_of_taxon
, Family_of_taxon
, Identifier_of_organism
, Description_of_organism
, Only_observed
, Notes_for_organism
, Exsiccata_number
)
select 
U.IdentificationUnitID
, S.CollectionSpecimenID
, S.AccessionNumber
, S.DataWithholdingReason
, S.CollectionEventID 
, AccessionDay
, AccessionMonth
, AccessionYear
, AccessionDateSupplement
, DepositorsName
, DepositorsAgentURI
, DepositorsAccessionNumber
, ExsiccataAbbreviation
, ExsiccataURI
, OriginalNotes
, AdditionalNotes
, InternalNotes
, LabelTitle
, LabelType
, LabelTranscriptionState
, LabelTranscriptionNotes
, Problems
, U.TaxonomicGroup
, U.RelationType
, U.ColonisedSubstratePart
, U.LifeStage
, U.Gender
, U.NumberOfUnits
, U.Circumstances
, U.OrderCache
, U.FamilyCache
, U.UnitIdentifier
, U.UnitDescription
, U.OnlyObserved
, U.Notes
, U.ExsiccataNumber
from dbo.CollectionSpecimen S, dbo.IdentificationUnit U, dbo.CollectionSpecimenID_UserAvailable A
where S.CollectionSpecimenID in (select ID from @IDs) 
and U.CollectionSpecimenID = S.CollectionSpecimenID 
and S.CollectionSpecimenID = A.CollectionSpecimenID
update L
set L.Collection_day = E.CollectionDay
, L.Collection_month = E.CollectionMonth
, L.Collection_year = E.CollectionYear
, L.Collection_date_supplement = E.CollectionDateSupplement
, L.Collection_time = E.CollectionTime
, L.Collection_time_span = E.CollectionTimeSpan
, L.Country = E.CountryCache
, L.Locality_description = cast(E.LocalityDescription as nvarchar(255))
, L.Habitat_description = cast(E.HabitatDescription as nvarchar(255))
, L.Collecting_method = cast(E.CollectingMethod as nvarchar(255))
, L.Collection_event_notes = cast(E.Notes as nvarchar(255))
, L.Data_withholding_reason_for_collection_event = E.DataWithholdingReason
, L.Collectors_event_number = E.CollectorsEventNumber
from @List L,
CollectionEvent E
where L._CollectionEventID = E.CollectionEventID
update L
set L.Named_area = E.Location1
, L.NamedAreaLocation2 = E.Location2
, L.Distance_to_location = E.DistanceToLocation
, L.Direction_to_location = E.DirectionToLocation
, L._NamedAverageLatitudeCache = E.AverageLatitudeCache
, L._NamedAverageLongitudeCache = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 7
update L
set L.Longitude = E.Location1
, L.Latitude = E.Location2
, L.Coordinates_accuracy = E.LocationAccuracy
, L._CoordinatesAverageLatitudeCache = E.AverageLatitudeCache
, L._CoordinatesAverageLongitudeCache = E.AverageLongitudeCache
, L._CoordinatesLocationNotes = cast(E.LocationNotes as nvarchar (255))
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 8
update L
set L.Altitude_from = E.Location1
, L.Altitude_to = E.Location2
, L.Altitude_accuracy = E.LocationAccuracy
, L._AverageAltitudeCache = E.AverageAltitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 4
update L
set L.MTB = E.Location1
, L.Quadrant = E.Location2
, L.Notes_for_MTB = cast(E.LocationNotes as nvarchar(255))
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 3
update L
set L.Sampling_plot = E.Location1
, L.Link_to_SamplingPlots = E.Location2
, L.Accuracy_of_sampling_plot = E.LocationAccuracy
, L.Latitude_of_sampling_plot = E.AverageLatitudeCache
, L.Longitude_of_sampling_plot = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 13
update L
set L.Geographic_region = P.DisplayText
, L._GeographicRegionPropertyURI = P.PropertyURI
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 10
update L
set L.Lithostratigraphy = P.DisplayText
, L._LithostratigraphyPropertyURI = P.PropertyURI
, L._LithostratigraphyPropertyHierarchyCache = cast(P.PropertyHierarchyCache as nvarchar (255))
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 30
update L
set L.Chronostratigraphy = P.DisplayText
, L._ChronostratigraphyPropertyURI = P.PropertyURI
, L._ChronostratigraphyPropertyHierarchyCache = cast(P.PropertyHierarchyCache as nvarchar (255))
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 20
update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.CollectorsSequence) = A.CollectorsSequence))
update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and L.Collectors_name is null
and A.CollectorsSequence is null
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.LogCreatedWhen) = A.LogCreatedWhen))
update L
set L._IdentificationSequence = I.IdentificationSequence
, L.Taxonomic_name = I.TaxonomicName
, L.Link_to_DiversityTaxonNames = I.NameURI
, L.Vernacular_term = I.VernacularTerm
, L.Identification_day = I.IdentificationDay
, L.Identification_month = I.IdentificationMonth
, L.Identification_year = I.IdentificationYear
, L.Identification_category = I.IdentificationCategory
, L.Identification_qualifier = I.IdentificationQualifier
, L.Type_status = I.TypeStatus
, L.Type_notes = I.TypeNotes
, L.Notes_for_identification = I.Notes
, L.Reference_title = I.ReferenceTitle
, L.Link_to_DiversityReferences = I.ReferenceURI
, L.Determiner = I.ResponsibleName
, L.Link_to_DiversityAgents_for_determiner = I.ResponsibleAgentURI
from @List L,
dbo.Identification I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.Identification AS Imax
	GROUP BY CollectionSpecimenID, IdentificationUnitID
	HAVING (Imax.CollectionSpecimenID = I.CollectionSpecimenID) AND (Imax.IdentificationUnitID = I.IdentificationUnitID) AND 
	(MAX(Imax.IdentificationSequence) = I.IdentificationSequence))
declare @AnalysisID_0 int
declare @AnalysisID_1 int
declare @AnalysisID_2 int
declare @AnalysisID_3 int
declare @AnalysisID_4 int
declare @AnalysisID_5 int
declare @AnalysisID_6 int
declare @AnalysisID_7 int
declare @AnalysisID_8 int
declare @AnalysisID_9 int
if (not @AnalysisIDs is null and @AnalysisIDs <> '')
begin
	set @AnalysisIDs = REPLACE(@AnalysisIDs, ' ', '')
	declare @AnalysisID table (ID int Identity(0,1), AnalysisID int Primary key)
	declare @sAnalysisID varchar(50)
	declare @iAnalysis int
	set @iAnalysis = 0
	while @AnalysisIDs <> '' and @iAnalysis < 10
	begin
		if (CHARINDEX(',', @AnalysisIDs) > 0)
		begin
		set @sAnalysisID = rtrim(ltrim(SUBSTRING(@AnalysisIDs, 1, CHARINDEX(',', @AnalysisIDs) -1)))
		set @AnalysisIDs = rtrim(ltrim(SUBSTRING(@AnalysisIDs, CHARINDEX(',', @AnalysisIDs) + 1, 4000)))
		if (isnumeric(@sID) = 1 and (select count(*) from @AnalysisID where AnalysisID = @sAnalysisID) = 0)
			begin
			insert into @AnalysisID (AnalysisID)
			values( @sAnalysisID )
			end
		end
		else
		begin
		set @sAnalysisID = rtrim(ltrim(@AnalysisIDs))
		set @AnalysisIDs = ''
		if (isnumeric(@sAnalysisID) = 1 and (select count(*) from @AnalysisID where AnalysisID = @sAnalysisID) = 0)
			begin
			insert into @AnalysisID (AnalysisID)
			values( @sAnalysisID )
			end
		end
		set @iAnalysis = (select count(*) from @AnalysisID)
	end
	set @AnalysisID_0 = (select AnalysisID from @AnalysisID where ID = 0)
	set @AnalysisID_1 = (select AnalysisID from @AnalysisID where ID = 1)
	set @AnalysisID_2 = (select AnalysisID from @AnalysisID where ID = 2)
	set @AnalysisID_3 = (select AnalysisID from @AnalysisID where ID = 3)
	set @AnalysisID_4 = (select AnalysisID from @AnalysisID where ID = 4)
	set @AnalysisID_5 = (select AnalysisID from @AnalysisID where ID = 5)
	set @AnalysisID_6 = (select AnalysisID from @AnalysisID where ID = 6)
	set @AnalysisID_7 = (select AnalysisID from @AnalysisID where ID = 7)
	set @AnalysisID_8 = (select AnalysisID from @AnalysisID where ID = 8)
	set @AnalysisID_9 = (select AnalysisID from @AnalysisID where ID = 9)
end
update L
set L.AnalysisID_0 = I.AnalysisID
, L.Analysis_number_0 = I.AnalysisNumber
, L.Analysis_result_0 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_0
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_0)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_0 = null
	, L.Analysis_number_0 = null
	, L.Analysis_result_0 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_0
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_0 = null
	, L.Analysis_number_0 = null
	, L.Analysis_result_0 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_0
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_0 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_0 = A.AnalysisID
update L
set L.AnalysisID_1 = I.AnalysisID
, L.Analysis_number_1 = I.AnalysisNumber
, L.Analysis_result_1 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_1
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_1)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_1 = null
	, L.Analysis_number_1 = null
	, L.Analysis_result_1 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_1
	and I.AnalysisID = @AnalysisID_1
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_1 = null
	, L.Analysis_number_1 = null
	, L.Analysis_result_1 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_1
	and I.AnalysisID = @AnalysisID_1
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_1 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_1 = A.AnalysisID
update L
set L.AnalysisID_2 = I.AnalysisID
, L.Analysis_number_2 = I.AnalysisNumber
, L.Analysis_result_2 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_2
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_2
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_2)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_2 = null
	, L.Analysis_number_2 = null
	, L.Analysis_result_2 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_2
	and I.AnalysisID = @AnalysisID_2
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_2 = null
	, L.Analysis_number_2 = null
	, L.Analysis_result_2 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_2
	and I.AnalysisID = @AnalysisID_2
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_2 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_2 = A.AnalysisID
update L
set L.AnalysisID_3 = I.AnalysisID
, L.Analysis_number_3 = I.AnalysisNumber
, L.Analysis_result_3 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_3
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_3
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_3)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_3 = null
	, L.Analysis_number_3 = null
	, L.Analysis_result_3 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_3
	and I.AnalysisID = @AnalysisID_3
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_3 = null
	, L.Analysis_number_3 = null
	, L.Analysis_result_3 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_3
	and I.AnalysisID = @AnalysisID_3
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_3 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_3 = A.AnalysisID
update L
set L.AnalysisID_4 = I.AnalysisID
, L.Analysis_number_4 = I.AnalysisNumber
, L.Analysis_result_4 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_4
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_4
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_4)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_4 = null
	, L.Analysis_number_4 = null
	, L.Analysis_result_4 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_4
	and I.AnalysisID = @AnalysisID_4
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_4 = null
	, L.Analysis_number_4 = null
	, L.Analysis_result_4 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_4
	and I.AnalysisID = @AnalysisID_4
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_4 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_4 = A.AnalysisID
update L
set L.AnalysisID_5 = I.AnalysisID
, L.Analysis_number_5 = I.AnalysisNumber
, L.Analysis_result_5 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_5
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_5
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_5)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_5 = null
	, L.Analysis_number_5 = null
	, L.Analysis_result_5 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_5
	and I.AnalysisID = @AnalysisID_5
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_5 = null
	, L.Analysis_number_5 = null
	, L.Analysis_result_5 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_5
	and I.AnalysisID = @AnalysisID_5
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_5 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_5 = A.AnalysisID
update L
set L.AnalysisID_6 = I.AnalysisID
, L.Analysis_number_6 = I.AnalysisNumber
, L.Analysis_result_6 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_6
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_6
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_6)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_6 = null
	, L.Analysis_number_6 = null
	, L.Analysis_result_6 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_6
	and I.AnalysisID = @AnalysisID_6
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_6 = null
	, L.Analysis_number_6 = null
	, L.Analysis_result_6 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_6
	and I.AnalysisID = @AnalysisID_6
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_6 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_6 = A.AnalysisID
update L
set L.AnalysisID_7 = I.AnalysisID
, L.Analysis_number_7 = I.AnalysisNumber
, L.Analysis_result_7 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_7
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_7
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_7)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_7 = null
	, L.Analysis_number_7 = null
	, L.Analysis_result_7 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_7
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_7 = null
	, L.Analysis_number_7 = null
	, L.Analysis_result_7 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_7
	and I.AnalysisID = @AnalysisID_7
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_7 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_7 = A.AnalysisID
update L
set L.AnalysisID_8 = I.AnalysisID
, L.Analysis_number_8 = I.AnalysisNumber
, L.Analysis_result_8 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_8
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_8
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_8)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_8 = null
	, L.Analysis_number_8 = null
	, L.Analysis_result_8 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_8
	and I.AnalysisID = @AnalysisID_8
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_8 = null
	, L.Analysis_number_8 = null
	, L.Analysis_result_8 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_8
	and I.AnalysisID = @AnalysisID_8
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_8 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_8 = A.AnalysisID
update L
set L.AnalysisID_9 = I.AnalysisID
, L.Analysis_number_9 = I.AnalysisNumber
, L.Analysis_result_9 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_9
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_9
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_9)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_9 = null
	, L.Analysis_number_9 = null
	, L.Analysis_result_9 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_9
	and I.AnalysisID = @AnalysisID_9
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_9 = null
	, L.Analysis_number_9 = null
	, L.Analysis_result_9 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_9
	and I.AnalysisID = @AnalysisID_9
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_9 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_9 = A.AnalysisID
Update L
set L.Related_Organism = Urel.LastIdentificationCache
from  @List L
, dbo.IdentificationUnit U
, dbo.IdentificationUnit Urel
where U.IdentificationUnitID = L.IdentificationUnitID
and U.RelatedUnitID = Urel.IdentificationUnitID	
and U.CollectionSpecimenID = Urel.CollectionSpecimenID
update L
set L._SpecimenPartID = P.SpecimenPartID
, L.Collection = P.CollectionID
, L.Material_category = P.MaterialCategory
, L.Storage_location = P.StorageLocation
, L.Stock = P.Stock
, L.Preparation_method = P.PreparationMethod
, L.Preparation_date = P.PreparationDate
, L.Notes_for_part = P.Notes
from @List L,
dbo.CollectionSpecimenPart P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and EXISTS
	(SELECT Pmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenPart AS Pmin
	GROUP BY Pmin.CollectionSpecimenID
	HAVING (Pmin.CollectionSpecimenID = P.CollectionSpecimenID) AND (MIN(Pmin.SpecimenPartID) = P.SpecimenPartID))
update L
set L._TransactionID = P.TransactionID
, L.On_loan = P.IsOnLoan
from @List L,
dbo.CollectionSpecimenTransaction P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and L._SpecimenPartID = P.SpecimenPartID
and EXISTS
	(SELECT Tmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenTransaction AS Tmin
	GROUP BY Tmin.CollectionSpecimenID, Tmin.SpecimenPartID
	HAVING (Tmin.CollectionSpecimenID = P.CollectionSpecimenID) 
	AND Tmin.SpecimenPartID = P.SpecimenPartID
	AND (MIN(Tmin.TransactionID) = P.TransactionID))
update L
set L._Transaction = T.TransactionTitle
from @List L,
dbo.[Transaction] T
where L._TransactionID = T.TransactionID
RETURN 
END   
GO
GRANT SELECT ON [dbo].[FirstLinesUnit_3] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[FirstLinesUnit_4]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   FirstLinesUnit_4: Remove Reference from Identification   ###################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[FirstLinesUnit_4] 
(@CollectionSpecimenIDs varchar(8000), @AnalysisIDs varchar(8000), @AnalysisStartDate date, @AnalysisEndDate date)   
RETURNS @List TABLE (
	[IdentificationUnitID] [int] Primary key,
	[CollectionSpecimenID] [int], 
	[Accession_number] [nvarchar](50) NULL, 
	[Data_withholding_reason] [nvarchar](255) NULL, 
	[Data_withholding_reason_for_collection_event] [nvarchar](255) NULL, 
	[Data_withholding_reason_for_collector] [nvarchar](255) NULL, 
	[Collectors_event_number] [nvarchar](50) NULL, 
	[Collection_day] [tinyint] NULL, 
	[Collection_month] [tinyint] NULL, 
	[Collection_year] [smallint] NULL, 
	[Collection_date_supplement] [nvarchar](100) NULL, 
	[Collection_time] [varchar](50) NULL, 
	[Collection_time_span] [varchar](50) NULL, 
	[Country] [nvarchar](50) NULL, 
	[Locality_description] [nvarchar](255) NULL, 
	[Habitat_description] [nvarchar](255) NULL, 
	[Collecting_method] [nvarchar](255) NULL, 
	[Collection_event_notes] [nvarchar](255) NULL, 
	[Named_area] [nvarchar](255) NULL, 
	[NamedAreaLocation2] [nvarchar](255) NULL, 
	[Remove_link_to_gazetteer] [int] NULL,
	[Distance_to_location] [varchar](50) NULL, 
	[Direction_to_location] [varchar](50) NULL, 
	[Longitude] [nvarchar](255) NULL, 
	[Latitude] [nvarchar](255) NULL, 
	[Coordinates_accuracy] [nvarchar](50) NULL, 
	[Link_to_GoogleMaps] [int] NULL,
	[Altitude_from] [nvarchar](255) NULL, 
	[Altitude_to] [nvarchar](255) NULL, 
	[Altitude_accuracy] [nvarchar](50) NULL, 
	[Notes_for_Altitude] [nvarchar](255) NULL, 
	[MTB] [nvarchar](255) NULL, 
	[Quadrant] [nvarchar](255) NULL, 
	[Notes_for_MTB] [nvarchar](255) NULL, 
	[Sampling_plot] [nvarchar](255) NULL, 
	[Link_to_SamplingPlots] [nvarchar](255) NULL, 
	[Remove_link_to_SamplingPlots] [int] NULL,
	[Accuracy_of_sampling_plot] [nvarchar](50) NULL, 
	[Latitude_of_sampling_plot] [real] NULL, 
	[Longitude_of_sampling_plot] [real] NULL, 
	[Geographic_region] [nvarchar](255) NULL, 
	[Lithostratigraphy] [nvarchar](255) NULL, 
	[Chronostratigraphy] [nvarchar](255) NULL, 
	[Collectors_name] [nvarchar](255) NULL, 
	[Link_to_DiversityAgents] [varchar](255) NULL, 
	[Remove_link_for_collector] [int] NULL,
	[Collectors_number] [nvarchar](50) NULL, 
	[Notes_about_collector] [nvarchar](max) NULL, 
	[Accession_day] [tinyint] NULL, 
	[Accession_month] [tinyint] NULL, 
	[Accession_year] [smallint] NULL, 
	[Accession_date_supplement] [nvarchar](255) NULL, 
	[Depositors_name] [nvarchar](255) NULL, 
	[Depositors_link_to_DiversityAgents] [varchar](255) NULL, 
	[Remove_link_for_Depositor] [int] NULL,
	[Depositors_accession_number] [nvarchar](50) NULL, 
	[Exsiccata_abbreviation] [nvarchar](255) NULL, 
	[Link_to_DiversityExsiccatae] [varchar](255) NULL, 
	[Remove_link_to_exsiccatae] [int] NULL,
	[Exsiccata_number] [nvarchar](50) NULL, 
	[Original_notes] [nvarchar](max) NULL, 
	[Additional_notes] [nvarchar](max) NULL, 
	[Internal_notes] [nvarchar](max) NULL, 
	[Label_title] [nvarchar](255) NULL, 
	[Label_type] [nvarchar](50) NULL, 
	[Label_transcription_state] [nvarchar](50) NULL, 
	[Label_transcription_notes] [nvarchar](255) NULL, 
	[Problems] [nvarchar](255) NULL, 
	[Taxonomic_group] [nvarchar](50) NULL, 
	[Relation_type] [nvarchar](50) NULL, 
	[Colonised_substrate_part] [nvarchar](255) NULL, 
	[Related_organism] [nvarchar] (200) NULL,
	[Life_stage] [nvarchar](255) NULL, 
	[Gender] [nvarchar](50) NULL, 
	[Number_of_units] [smallint] NULL, 
	[Circumstances] [nvarchar](50) NULL, 
	[Order_of_taxon] [nvarchar](255) NULL, 
	[Family_of_taxon] [nvarchar](255) NULL, 
	[Identifier_of_organism] [nvarchar](50) NULL, 
	[Description_of_organism] [nvarchar](50) NULL, 
	[Only_observed] [bit] NULL, 
	[Notes_for_organism] [nvarchar](max) NULL, 
	[Taxonomic_name] [nvarchar](255) NULL, 
	[Link_to_DiversityTaxonNames] [varchar](255) NULL, 
	[Remove_link_for_identification] [int] NULL, 
	[Vernacular_term] [nvarchar](255) NULL, 
	[Identification_day] [tinyint] NULL, 
	[Identification_month] [tinyint] NULL, 
	[Identification_year] [smallint] NULL, 
	[Identification_category] [nvarchar](50) NULL, 
	[Identification_qualifier] [nvarchar](50) NULL, 
	[Type_status] [nvarchar](50) NULL, 
	[Type_notes] [nvarchar](max) NULL, 
	[Notes_for_identification] [nvarchar](max) NULL, 
	--[Reference_title] [nvarchar](255) NULL, 
	--[Link_to_DiversityReferences] [varchar](255) NULL, 
	--[Remove_link_for_reference] [int] NULL,
	[Determiner] [nvarchar](255) NULL,
	[Link_to_DiversityAgents_for_determiner] [varchar](255) NULL, 
	[Remove_link_for_determiner] [int] NULL,
	[Analysis_0] [nvarchar](50) NULL, 
	[AnalysisID_0] [int] NULL, 
	[Analysis_number_0] [nvarchar](50) NULL, 
	[Analysis_result_0] [nvarchar](max) NULL, 
	[Analysis_1] [nvarchar](50) NULL, 
	[AnalysisID_1] [int] NULL, 
	[Analysis_number_1] [nvarchar](50) NULL, 
	[Analysis_result_1] [nvarchar](max) NULL, 
	[Analysis_2] [nvarchar](50) NULL, 
	[AnalysisID_2] [int] NULL, 
	[Analysis_number_2] [nvarchar](50) NULL, 
	[Analysis_result_2] [nvarchar](max) NULL, 
	[Analysis_3] [nvarchar](50) NULL, 
	[AnalysisID_3] [int] NULL, 
	[Analysis_number_3] [nvarchar](50) NULL, 
	[Analysis_result_3] [nvarchar](max) NULL, 
	[Analysis_4] [nvarchar](50) NULL, 
	[AnalysisID_4] [int] NULL, 
	[Analysis_number_4] [nvarchar](50) NULL, 
	[Analysis_result_4] [nvarchar](max) NULL, 
	[Analysis_5] [nvarchar](50) NULL, 
	[AnalysisID_5] [int] NULL, 
	[Analysis_number_5] [nvarchar](50) NULL, 
	[Analysis_result_5] [nvarchar](max) NULL, 
	[Analysis_6] [nvarchar](50) NULL, 
	[AnalysisID_6] [int] NULL, 
	[Analysis_number_6] [nvarchar](50) NULL, 
	[Analysis_result_6] [nvarchar](max) NULL, 
	[Analysis_7] [nvarchar](50) NULL, 
	[AnalysisID_7] [int] NULL, 
	[Analysis_number_7] [nvarchar](50) NULL, 
	[Analysis_result_7] [nvarchar](max) NULL, 
	[Analysis_8] [nvarchar](50) NULL, 
	[AnalysisID_8] [int] NULL, 
	[Analysis_number_8] [nvarchar](50) NULL, 
	[Analysis_result_8] [nvarchar](max) NULL, 
	[Analysis_9] [nvarchar](50) NULL, 
	[AnalysisID_9] [int] NULL, 
	[Analysis_number_9] [nvarchar](50) NULL, 
	[Analysis_result_9] [nvarchar](max) NULL, 
	[Collection] [int] NULL, 
	[Material_category] [nvarchar](50) NULL, 
	[Storage_location] [nvarchar](255) NULL, 
	[Stock] [float] NULL, 
	[Preparation_method] [nvarchar](max) NULL, 
	[Preparation_date] [datetime] NULL, 
	[Notes_for_part] [nvarchar](max) NULL, 
	[_TransactionID] [int] NULL, 
	[_Transaction] [nvarchar](200) NULL, 
	[On_loan] [int] NULL, 
	[_CollectionEventID] [int] NULL, 
	[_IdentificationUnitID] [int] NULL, 
	[_IdentificationSequence] [smallint] NULL, 
	[_SpecimenPartID] [int] NULL, 
	[_CoordinatesAverageLatitudeCache] [real] NULL, 
	[_CoordinatesAverageLongitudeCache] [real] NULL, 
	[_CoordinatesLocationNotes] [nvarchar](255) NULL, 
	[_GeographicRegionPropertyURI] [varchar](255) NULL, 
	[_LithostratigraphyPropertyURI] [varchar](255) NULL, 
	[_ChronostratigraphyPropertyURI] [varchar](255) NULL, 
	[_NamedAverageLatitudeCache] [real] NULL, 
	[_NamedAverageLongitudeCache] [real] NULL, 
	[_LithostratigraphyPropertyHierarchyCache] [nvarchar](255) NULL, 
	[_ChronostratigraphyPropertyHierarchyCache] [nvarchar](255) NULL, 
	[_AverageAltitudeCache] [real] NULL)     
/* 
Returns a table that lists all the specimen with the first entries of related tables. 
MW 18.11.2009 
TEST: 
Select * from dbo.FirstLinesUnit('189876, 189882, 189885, 189891, 189900, 189905, 189919, 189923, 189936, 189939, 189941, 189956, 189974, 189975, 189984, 189988, 189990, 189995, 190014, 190016, 190020, 190028, 190040, 190049, 190051, 190055, 190058, 190062, 190073, 190080, 190081, 190085, 190091, 190108, 190117, 190120, 190122, 190128, 190130, 190142')
Select * from dbo.FirstLinesUnit('3251, 3252', '34', null, null) order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit('193610, 193611') order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit_2('193610, 193611', '55, 64', null, null) order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit_2('193610, 193611', '64', null, null) order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit_2('193610, 193611', null, '2000/2/1', '2010/12/31') order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit_2('3251, 3252', null, null, null) order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit_2('3251, 3252', null, '2000/2/1', '2010/12/31') order by CollectionSpecimenID, IdentificationUnitID
Select * from dbo.FirstLinesUnit_3('3251,3252,', null, '2000/2/1', '2010/12/31') order by CollectionSpecimenID, IdentificationUnitID
SELECT *
FROM dbo.FirstLinesUnit_3  ('193972', '18,75', '2011/8/17', null) 
ORDER BY Accession_number, CollectionSpecimenID, IdentificationUnitID 
SELECT *
FROM dbo.FirstLinesUnit_3  ('193972', '43,81,49,18,75,51', '2011/8/17', null) 
ORDER BY Accession_number, CollectionSpecimenID, IdentificationUnitID 
*/ 
AS 
BEGIN 
declare @IDs table (ID int  Primary key)
declare @sID varchar(50)
/*
while @CollectionSpecimenIDs <> ''
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
	begin
	set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
	set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 2, 4000)))
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
	else
	begin
	set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
	set @CollectionSpecimenIDs = ''
	if (isnumeric(@sID) = 1)
		begin
		insert into @IDs 
		values( @sID )
		end
	end
end
*/
while @CollectionSpecimenIDs <> ''
begin
	if (CHARINDEX(',', @CollectionSpecimenIDs) > 0)
		begin
		set @sID = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, 1, CHARINDEX(',', @CollectionSpecimenIDs) -1)))
		set @CollectionSpecimenIDs = rtrim(ltrim(SUBSTRING(@CollectionSpecimenIDs, CHARINDEX(',', @CollectionSpecimenIDs) + 1, 8000)))
		if (isnumeric(@sID) = 1)
			begin
			insert into @IDs 
			values( @sID )
			end
		end
	else
		begin
		if (isnumeric(@CollectionSpecimenIDs) = 1 AND ((select count(*) from @IDs) = 0 OR len(rtrim(ltrim(@CollectionSpecimenIDs))) >= len(@sID)))
			begin
			set @sID = rtrim(ltrim(@CollectionSpecimenIDs))
			insert into @IDs 
			values( @sID )
			end
		set @CollectionSpecimenIDs = ''
		end
end
insert into @List (
IdentificationUnitID
, CollectionSpecimenID
, Accession_number
, Data_withholding_reason
, _CollectionEventID
, Accession_day
, Accession_month
, Accession_year
, Accession_date_supplement
, Depositors_name
, Depositors_link_to_DiversityAgents
, Depositors_accession_number
, Exsiccata_abbreviation
, Link_to_DiversityExsiccatae
, Original_notes
, Additional_notes
, Internal_notes
, Label_title
, Label_type
, Label_transcription_state
, Label_transcription_notes
, Problems
, Taxonomic_group
, Relation_type
, Colonised_substrate_part
, Life_stage
, Gender
, Number_of_units
, Circumstances
, Order_of_taxon
, Family_of_taxon
, Identifier_of_organism
, Description_of_organism
, Only_observed
, Notes_for_organism
, Exsiccata_number
)
select 
U.IdentificationUnitID
, S.CollectionSpecimenID
, S.AccessionNumber
, S.DataWithholdingReason
, S.CollectionEventID 
, AccessionDay
, AccessionMonth
, AccessionYear
, AccessionDateSupplement
, DepositorsName
, DepositorsAgentURI
, DepositorsAccessionNumber
, ExsiccataAbbreviation
, ExsiccataURI
, OriginalNotes
, AdditionalNotes
, InternalNotes
, LabelTitle
, LabelType
, LabelTranscriptionState
, LabelTranscriptionNotes
, Problems
, U.TaxonomicGroup
, U.RelationType
, U.ColonisedSubstratePart
, U.LifeStage
, U.Gender
, U.NumberOfUnits
, U.Circumstances
, U.OrderCache
, U.FamilyCache
, U.UnitIdentifier
, U.UnitDescription
, U.OnlyObserved
, U.Notes
, U.ExsiccataNumber
from dbo.CollectionSpecimen S, dbo.IdentificationUnit U, dbo.CollectionSpecimenID_UserAvailable A
where S.CollectionSpecimenID in (select ID from @IDs) 
and U.CollectionSpecimenID = S.CollectionSpecimenID 
and S.CollectionSpecimenID = A.CollectionSpecimenID
update L
set L.Collection_day = E.CollectionDay
, L.Collection_month = E.CollectionMonth
, L.Collection_year = E.CollectionYear
, L.Collection_date_supplement = E.CollectionDateSupplement
, L.Collection_time = E.CollectionTime
, L.Collection_time_span = E.CollectionTimeSpan
, L.Country = E.CountryCache
, L.Locality_description = cast(E.LocalityDescription as nvarchar(255))
, L.Habitat_description = cast(E.HabitatDescription as nvarchar(255))
, L.Collecting_method = cast(E.CollectingMethod as nvarchar(255))
, L.Collection_event_notes = cast(E.Notes as nvarchar(255))
, L.Data_withholding_reason_for_collection_event = E.DataWithholdingReason
, L.Collectors_event_number = E.CollectorsEventNumber
from @List L,
CollectionEvent E
where L._CollectionEventID = E.CollectionEventID
update L
set L.Named_area = E.Location1
, L.NamedAreaLocation2 = E.Location2
, L.Distance_to_location = E.DistanceToLocation
, L.Direction_to_location = E.DirectionToLocation
, L._NamedAverageLatitudeCache = E.AverageLatitudeCache
, L._NamedAverageLongitudeCache = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 7
update L
set L.Longitude = E.Location1
, L.Latitude = E.Location2
, L.Coordinates_accuracy = E.LocationAccuracy
, L._CoordinatesAverageLatitudeCache = E.AverageLatitudeCache
, L._CoordinatesAverageLongitudeCache = E.AverageLongitudeCache
, L._CoordinatesLocationNotes = cast(E.LocationNotes as nvarchar (255))
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 8
update L
set L.Altitude_from = E.Location1
, L.Altitude_to = E.Location2
, L.Altitude_accuracy = E.LocationAccuracy
, L._AverageAltitudeCache = E.AverageAltitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 4
update L
set L.MTB = E.Location1
, L.Quadrant = E.Location2
, L.Notes_for_MTB = cast(E.LocationNotes as nvarchar(255))
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 3
update L
set L.Sampling_plot = E.Location1
, L.Link_to_SamplingPlots = E.Location2
, L.Accuracy_of_sampling_plot = E.LocationAccuracy
, L.Latitude_of_sampling_plot = E.AverageLatitudeCache
, L.Longitude_of_sampling_plot = E.AverageLongitudeCache
from @List L,
dbo.CollectionEventLocalisation E
where L._CollectionEventID = E.CollectionEventID
and E.LocalisationSystemID = 13
update L
set L.Geographic_region = P.DisplayText
, L._GeographicRegionPropertyURI = P.PropertyURI
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 10
update L
set L.Lithostratigraphy = P.DisplayText
, L._LithostratigraphyPropertyURI = P.PropertyURI
, L._LithostratigraphyPropertyHierarchyCache = cast(P.PropertyHierarchyCache as nvarchar (255))
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 30
update L
set L.Chronostratigraphy = P.DisplayText
, L._ChronostratigraphyPropertyURI = P.PropertyURI
, L._ChronostratigraphyPropertyHierarchyCache = cast(P.PropertyHierarchyCache as nvarchar (255))
from @List L,
dbo.CollectionEventProperty P
where L._CollectionEventID = P.CollectionEventID
and P.PropertyID = 20
update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.CollectorsSequence) = A.CollectorsSequence))
update L
set L.Data_withholding_reason_for_collector = A.DataWithholdingReason
, L.Collectors_name = A.CollectorsName
, L.Link_to_DiversityAgents = A.CollectorsAgentURI
, L.Collectors_number = A.CollectorsNumber
, L.Notes_about_collector = A.Notes
from @List L,
dbo.CollectionAgent A
where L.CollectionSpecimenID = A.CollectionSpecimenID
and L.Collectors_name is null
and A.CollectorsSequence is null
and EXISTS (SELECT CollectionSpecimenID
	FROM dbo.CollectionAgent AS Amin
	GROUP BY CollectionSpecimenID
	HAVING (A.CollectionSpecimenID = Amin.CollectionSpecimenID) 
	AND (MIN(Amin.LogCreatedWhen) = A.LogCreatedWhen))
update L
set L._IdentificationSequence = I.IdentificationSequence
, L.Taxonomic_name = I.TaxonomicName
, L.Link_to_DiversityTaxonNames = I.NameURI
, L.Vernacular_term = I.VernacularTerm
, L.Identification_day = I.IdentificationDay
, L.Identification_month = I.IdentificationMonth
, L.Identification_year = I.IdentificationYear
, L.Identification_category = I.IdentificationCategory
, L.Identification_qualifier = I.IdentificationQualifier
, L.Type_status = I.TypeStatus
, L.Type_notes = I.TypeNotes
, L.Notes_for_identification = I.Notes
--, L.Reference_title = I.ReferenceTitle
--, L.Link_to_DiversityReferences = I.ReferenceURI
, L.Determiner = I.ResponsibleName
, L.Link_to_DiversityAgents_for_determiner = I.ResponsibleAgentURI
from @List L,
dbo.Identification I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.Identification AS Imax
	GROUP BY CollectionSpecimenID, IdentificationUnitID
	HAVING (Imax.CollectionSpecimenID = I.CollectionSpecimenID) AND (Imax.IdentificationUnitID = I.IdentificationUnitID) AND 
	(MAX(Imax.IdentificationSequence) = I.IdentificationSequence))
declare @AnalysisID_0 int
declare @AnalysisID_1 int
declare @AnalysisID_2 int
declare @AnalysisID_3 int
declare @AnalysisID_4 int
declare @AnalysisID_5 int
declare @AnalysisID_6 int
declare @AnalysisID_7 int
declare @AnalysisID_8 int
declare @AnalysisID_9 int
if (not @AnalysisIDs is null and @AnalysisIDs <> '')
begin
	set @AnalysisIDs = REPLACE(@AnalysisIDs, ' ', '')
	declare @AnalysisID table (ID int Identity(0,1), AnalysisID int Primary key)
	declare @sAnalysisID varchar(50)
	declare @iAnalysis int
	set @iAnalysis = 0
	while @AnalysisIDs <> '' and @iAnalysis < 10
	begin
		if (CHARINDEX(',', @AnalysisIDs) > 0)
		begin
		set @sAnalysisID = rtrim(ltrim(SUBSTRING(@AnalysisIDs, 1, CHARINDEX(',', @AnalysisIDs) -1)))
		set @AnalysisIDs = rtrim(ltrim(SUBSTRING(@AnalysisIDs, CHARINDEX(',', @AnalysisIDs) + 1, 4000)))
		if (isnumeric(@sID) = 1 and (select count(*) from @AnalysisID where AnalysisID = @sAnalysisID) = 0)
			begin
			insert into @AnalysisID (AnalysisID)
			values( @sAnalysisID )
			end
		end
		else
		begin
		set @sAnalysisID = rtrim(ltrim(@AnalysisIDs))
		set @AnalysisIDs = ''
		if (isnumeric(@sAnalysisID) = 1 and (select count(*) from @AnalysisID where AnalysisID = @sAnalysisID) = 0)
			begin
			insert into @AnalysisID (AnalysisID)
			values( @sAnalysisID )
			end
		end
		set @iAnalysis = (select count(*) from @AnalysisID)
	end
	set @AnalysisID_0 = (select AnalysisID from @AnalysisID where ID = 0)
	set @AnalysisID_1 = (select AnalysisID from @AnalysisID where ID = 1)
	set @AnalysisID_2 = (select AnalysisID from @AnalysisID where ID = 2)
	set @AnalysisID_3 = (select AnalysisID from @AnalysisID where ID = 3)
	set @AnalysisID_4 = (select AnalysisID from @AnalysisID where ID = 4)
	set @AnalysisID_5 = (select AnalysisID from @AnalysisID where ID = 5)
	set @AnalysisID_6 = (select AnalysisID from @AnalysisID where ID = 6)
	set @AnalysisID_7 = (select AnalysisID from @AnalysisID where ID = 7)
	set @AnalysisID_8 = (select AnalysisID from @AnalysisID where ID = 8)
	set @AnalysisID_9 = (select AnalysisID from @AnalysisID where ID = 9)
end
update L
set L.AnalysisID_0 = I.AnalysisID
, L.Analysis_number_0 = I.AnalysisNumber
, L.Analysis_result_0 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_0
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_0)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_0 = null
	, L.Analysis_number_0 = null
	, L.Analysis_result_0 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_0
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_0 = null
	, L.Analysis_number_0 = null
	, L.Analysis_result_0 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_0
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_0 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_0 = A.AnalysisID
update L
set L.AnalysisID_1 = I.AnalysisID
, L.Analysis_number_1 = I.AnalysisNumber
, L.Analysis_result_1 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_1
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_1)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_1 = null
	, L.Analysis_number_1 = null
	, L.Analysis_result_1 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_1
	and I.AnalysisID = @AnalysisID_1
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_1 = null
	, L.Analysis_number_1 = null
	, L.Analysis_result_1 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_1
	and I.AnalysisID = @AnalysisID_1
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_1 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_1 = A.AnalysisID
update L
set L.AnalysisID_2 = I.AnalysisID
, L.Analysis_number_2 = I.AnalysisNumber
, L.Analysis_result_2 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_2
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_2
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_2)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_2 = null
	, L.Analysis_number_2 = null
	, L.Analysis_result_2 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_2
	and I.AnalysisID = @AnalysisID_2
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_2 = null
	, L.Analysis_number_2 = null
	, L.Analysis_result_2 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_2
	and I.AnalysisID = @AnalysisID_2
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_2 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_2 = A.AnalysisID
update L
set L.AnalysisID_3 = I.AnalysisID
, L.Analysis_number_3 = I.AnalysisNumber
, L.Analysis_result_3 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_3
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_3
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_3)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_3 = null
	, L.Analysis_number_3 = null
	, L.Analysis_result_3 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_3
	and I.AnalysisID = @AnalysisID_3
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_3 = null
	, L.Analysis_number_3 = null
	, L.Analysis_result_3 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_3
	and I.AnalysisID = @AnalysisID_3
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_3 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_3 = A.AnalysisID
update L
set L.AnalysisID_4 = I.AnalysisID
, L.Analysis_number_4 = I.AnalysisNumber
, L.Analysis_result_4 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_4
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_4
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_4)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_4 = null
	, L.Analysis_number_4 = null
	, L.Analysis_result_4 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_4
	and I.AnalysisID = @AnalysisID_4
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_4 = null
	, L.Analysis_number_4 = null
	, L.Analysis_result_4 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_4
	and I.AnalysisID = @AnalysisID_4
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_4 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_4 = A.AnalysisID
update L
set L.AnalysisID_5 = I.AnalysisID
, L.Analysis_number_5 = I.AnalysisNumber
, L.Analysis_result_5 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_5
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_5
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_5)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_5 = null
	, L.Analysis_number_5 = null
	, L.Analysis_result_5 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_5
	and I.AnalysisID = @AnalysisID_5
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_5 = null
	, L.Analysis_number_5 = null
	, L.Analysis_result_5 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_5
	and I.AnalysisID = @AnalysisID_5
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_5 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_5 = A.AnalysisID
update L
set L.AnalysisID_6 = I.AnalysisID
, L.Analysis_number_6 = I.AnalysisNumber
, L.Analysis_result_6 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_6
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_6
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_6)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_6 = null
	, L.Analysis_number_6 = null
	, L.Analysis_result_6 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_6
	and I.AnalysisID = @AnalysisID_6
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_6 = null
	, L.Analysis_number_6 = null
	, L.Analysis_result_6 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_6
	and I.AnalysisID = @AnalysisID_6
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_6 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_6 = A.AnalysisID
update L
set L.AnalysisID_7 = I.AnalysisID
, L.Analysis_number_7 = I.AnalysisNumber
, L.Analysis_result_7 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_7
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_7
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_7)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_7 = null
	, L.Analysis_number_7 = null
	, L.Analysis_result_7 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_7
	and I.AnalysisID = @AnalysisID_0
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_7 = null
	, L.Analysis_number_7 = null
	, L.Analysis_result_7 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_7
	and I.AnalysisID = @AnalysisID_7
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_7 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_7 = A.AnalysisID
update L
set L.AnalysisID_8 = I.AnalysisID
, L.Analysis_number_8 = I.AnalysisNumber
, L.Analysis_result_8 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_8
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_8
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_8)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_8 = null
	, L.Analysis_number_8 = null
	, L.Analysis_result_8 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_8
	and I.AnalysisID = @AnalysisID_8
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_8 = null
	, L.Analysis_number_8 = null
	, L.Analysis_result_8 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_8
	and I.AnalysisID = @AnalysisID_8
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_8 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_8 = A.AnalysisID
update L
set L.AnalysisID_9 = I.AnalysisID
, L.Analysis_number_9 = I.AnalysisNumber
, L.Analysis_result_9 = I.AnalysisResult
from @List L,
dbo.IdentificationUnitAnalysis I
where L.CollectionSpecimenID = I.CollectionSpecimenID
and L.IdentificationUnitID = I.IdentificationUnitID
and I.AnalysisID = @AnalysisID_9
and EXISTS
	(SELECT CollectionSpecimenID
	FROM dbo.IdentificationUnitAnalysis AS Imin
	WHERE Imin.AnalysisID = @AnalysisID_9
	GROUP BY Imin.CollectionSpecimenID, Imin.IdentificationUnitID, Imin.AnalysisID
	HAVING (Imin.CollectionSpecimenID = I.CollectionSpecimenID) 
	AND (Imin.IdentificationUnitID = I.IdentificationUnitID) 
	AND (Imin.AnalysisID = @AnalysisID_9)
	AND (Max(Imin.AnalysisNumber) = I.AnalysisNumber))
if (not @AnalysisStartDate is null)
begin
	update L 
	set L.AnalysisID_9 = null
	, L.Analysis_number_9 = null
	, L.Analysis_result_9 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_9
	and I.AnalysisID = @AnalysisID_9
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) < @AnalysisStartDate
end
if (not @AnalysisEndDate is null)
begin
	update L 
	set L.AnalysisID_9 = null
	, L.Analysis_number_9 = null
	, L.Analysis_result_9 = null
	from @List L,
	dbo.IdentificationUnitAnalysis I
	where L.CollectionSpecimenID = I.CollectionSpecimenID
	and L.IdentificationUnitID = I.IdentificationUnitID
	and I.AnalysisID = L.AnalysisID_9
	and I.AnalysisID = @AnalysisID_9
	and isdate(I.AnalysisDate) = 1
	and cast(I.AnalysisDate as date) > @AnalysisEndDate
end
update L
set L.Analysis_9 = A.DisplayText
from @List L,
dbo.Analysis A
where L.AnalysisID_9 = A.AnalysisID
Update L
set L.Related_Organism = Urel.LastIdentificationCache
from  @List L
, dbo.IdentificationUnit U
, dbo.IdentificationUnit Urel
where U.IdentificationUnitID = L.IdentificationUnitID
and U.RelatedUnitID = Urel.IdentificationUnitID	
and U.CollectionSpecimenID = Urel.CollectionSpecimenID
update L
set L._SpecimenPartID = P.SpecimenPartID
, L.Collection = P.CollectionID
, L.Material_category = P.MaterialCategory
, L.Storage_location = P.StorageLocation
, L.Stock = P.Stock
, L.Preparation_method = P.PreparationMethod
, L.Preparation_date = P.PreparationDate
, L.Notes_for_part = P.Notes
from @List L,
dbo.CollectionSpecimenPart P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and EXISTS
	(SELECT Pmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenPart AS Pmin
	GROUP BY Pmin.CollectionSpecimenID
	HAVING (Pmin.CollectionSpecimenID = P.CollectionSpecimenID) AND (MIN(Pmin.SpecimenPartID) = P.SpecimenPartID))
update L
set L._TransactionID = P.TransactionID
, L.On_loan = P.IsOnLoan
from @List L,
dbo.CollectionSpecimenTransaction P
where L.CollectionSpecimenID = P.CollectionSpecimenID
and L._SpecimenPartID = P.SpecimenPartID
and EXISTS
	(SELECT Tmin.CollectionSpecimenID
	FROM dbo.CollectionSpecimenTransaction AS Tmin
	GROUP BY Tmin.CollectionSpecimenID, Tmin.SpecimenPartID
	HAVING (Tmin.CollectionSpecimenID = P.CollectionSpecimenID) 
	AND Tmin.SpecimenPartID = P.SpecimenPartID
	AND (MIN(Tmin.TransactionID) = P.TransactionID))
update L
set L._Transaction = T.TransactionTitle
from @List L,
dbo.[Transaction] T
where L._TransactionID = T.TransactionID
RETURN 
END   
GO
GRANT SELECT ON [dbo].[FirstLinesUnit_4] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[GatheringSuperiorList]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[GatheringSuperiorList] (@EventID int)  
RETURNS @EventList TABLE (CollectionEventID int primary key,
   GatheringParentID int NULL,
   --Seq int NOT NULL,
   Event nchar(500) NULL,
   SpecimenCount int NULL)
/*Returns a result set that lists all the CollectionEventID's superior to a given event.*/
AS
BEGIN
-- declare the variables
   declare @GatheringParentID int
   --declare @Seq int
   declare @SuperiorEvent int
   declare @EventName nvarchar(50) 
   declare @SpecimenCount int   
-- initialize the variables
   --set @Seq = 1
   set @GatheringParentID = ( select CollectionEventParentID from v_EventList where CollectionEventID = @EventID)
   set @EventName = ( select Event from v_EventList where CollectionEventID = @EventID)
   set @SpecimenCount = (select dbo.EventSpecimenNumber (@EventID))
-- table variable to hold accumulated results
   DECLARE @TempEvent TABLE (CollectionEventID int primary key,
   GatheringParentID int NULL,
   --Seq int NOT NULL,
   Event nchar(500) NULL,
   SpecimenCount int NULL)
-- initialize @TempEvent with direct event
   INSERT @TempEvent (CollectionEventID, GatheringParentID, Event, SpecimenCount) values (@EventID, @GatheringParentID, @EventName, @SpecimenCount)
set @SuperiorEvent = (select CollectionEventParentID from v_EventList where CollectionEventID = @EventID)
while @SuperiorEvent > 0
begin
	--set @Seq = @Seq + 1
	set @GatheringParentID = (select CollectionEventParentID  from v_EventList where CollectionEventID = @SuperiorEvent)
	set @EventName = (select Event  from v_EventList where CollectionEventID = @SuperiorEvent)
	set @SpecimenCount = (select dbo.EventSpecimenNumber (@SuperiorEvent))
	insert into @TempEvent (CollectionEventID, GatheringParentID, Event, SpecimenCount) values (@SuperiorEvent, @GatheringParentID, @EventName, @SpecimenCount)
	set @SuperiorEvent = (select CollectionEventParentID from v_EventList where CollectionEventID = @SuperiorEvent)
end
    
   -- copy to the result of the function the required columns
   INSERT @EventList
   SELECT CollectionEventID, GatheringParentID, Event, SpecimenCount 
   FROM @TempEvent
   RETURN
END
GO
GRANT SELECT ON [dbo].[GatheringSuperiorList] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[getFieldDescription]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[getFieldDescription] (@Table varchar(40), @Field varchar(40))  
/* returns field description of a field of a table within the database */
RETURNS nvarchar(300)
AS  
BEGIN 
DECLARE @Description nvarchar(300)
set @Description = (SELECT     max(CONVERT(varchar(300), [value]))
FROM         ::fn_listextendedproperty(NULL, 'user', 'dbo', 'table', @Table, 'column', @Field) [::fn_listextendedproperty_1]) 
RETURN @Description
END
GO
GRANT EXECUTE ON [dbo].[getFieldDescription] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[Hierarchy]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[Hierarchy] (@Table varchar(50), @ID int)  
RETURNS @ItemList TABLE (ItemID int primary key,
   ParentID int NULL,
   Caption nchar(500) NULL)
/*Returns a result set that lists all the items within a hierarchy starting at the topmost item related to the given item.*/
AS
BEGIN
declare @TopID int
set @TopID = (select dbo.HierarchyTopID(@Table, @ID))
   DECLARE @TempItem TABLE (ID int primary key,
   ParentID int NULL,
   Caption nchar(500) NULL)
if @Table = 'CollectionEvent' 	begin   INSERT @TempItem (ID, ParentID, Caption) SELECT CollectionEventID, CollectionEventParentID, Event FROM CollectionEventList_Main20 WHERE CollectionEventID = @TopID end
if @Table = 'Collection'		begin   INSERT @TempItem (ID, ParentID, Caption) SELECT CollectionID, CollectionParentID, CollectionName FROM Collection WHERE CollectionID = @TopID end
if @Table = 'CollectionExchange' begin   INSERT @TempItem (ID, ParentID, Caption) SELECT ExchangeID, ExchangeParentID, ExchangeName FROM CollectionExchangeList_Main20 WHERE ExchangeID = @TopID end
insert into @TempItem select distinct ItemID,ParentID, Caption from dbo.HierarchyChildNodes (@Table, @TopID)
   -- copy to the result of the function the required columns
 INSERT @ItemList
   SELECT ID,  ParentID,  Caption
   FROM @TempItem  /**/
   RETURN
END
GO
GRANT SELECT ON [dbo].[Hierarchy] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[HierarchyChildNodes]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[HierarchyChildNodes] (@Table varchar(50), @ID int)  
RETURNS @ItemList TABLE (ItemID int primary key,
   ParentID int NULL,
   Caption nchar(500) NULL)
/*Returns a result set that lists all the items within a hierarchy starting at the topmost item related to the given item.*/
/*
 Items are: CollectionEvent, Collection, CollectionExchange
*/
AS
BEGIN
   declare @ParentID int
   DECLARE @TempItem TABLE (ID int primary key,
   ParentID int NULL,
   Caption nchar(500) NULL)
   if @Table = 'CollectionEvent' 	begin   INSERT @TempItem (ID, ParentID, Caption) SELECT CollectionEventID, CollectionEventParentID, Event FROM CollectionEventList_Main20 WHERE CollectionEventParentID = @ID end
   if @Table = 'Collection'		begin   INSERT @TempItem (ID, ParentID, Caption) SELECT CollectionID, CollectionParentID, CollectionName FROM Collection WHERE CollectionParentID = @ID end
   if @Table = 'CollectionExchange' begin   INSERT @TempItem (ID, ParentID, Caption) SELECT ExchangeID, ExchangeParentID, ExchangeName FROM CollectionExchangeList_Main20 WHERE ExchangeParentID = @ID end
   DECLARE HierarchyCursor  CURSOR for
   select ID from @TempItem
   open HierarchyCursor
   FETCH next from HierarchyCursor into @ParentID
   WHILE @@FETCH_STATUS = 0
   BEGIN
	insert into @TempItem select * from dbo.HierarchyChildNodes (@Table, @ParentID) where ItemID not in (select ID from @TempItem)
   	FETCH NEXT FROM HierarchyCursor into @ParentID
   END
   CLOSE HierarchyCursor
   DEALLOCATE HierarchyCursor
 INSERT @ItemList
   SELECT distinct ID,  ParentID,  Caption
   FROM @TempItem
   RETURN
END
GO
GRANT SELECT ON [dbo].[HierarchyChildNodes] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[HierarchySuperiorList]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[HierarchySuperiorList] (@Table varchar(50), @ID int)  
RETURNS @ItemList TABLE (ItemID int primary key,
   ParentID int NULL,
   Seq int NOT NULL,
   Caption nchar(500) NULL,
   SpecimenCount int NULL)
/*Returns a result set that lists all the CollectionEventID's superior to a given event.*/
AS
BEGIN
-- declare the variables
   declare @Seq int
   declare @SuperiorID int
   declare @Caption nvarchar(200) 
   declare @SpecimenCount int   
   declare @ParentID int
-- initialize the variables
   set @Seq = 1
if @Table = 'CollectionEvent' begin set @Caption = ( select Event from v_EventList where CollectionEventID = @ID) end
if @Table = 'Collection' begin set @Caption = (select CollectionName from Collection where CollectionID = @ID) end
if @Table = 'CollectionExchange' begin set @Caption = (select ExchangePartnerName from CollectionExchange where ExchangeID = @ID) end
if @Table = 'CollectionEvent' begin set @SpecimenCount =  (select dbo.EventSpecimenNumber (@ID)) end
if @Table = 'Collection' begin set @SpecimenCount = (select count(*) from CollectionStorage where CollectionID = @ID) end
if @Table = 'CollectionExchange' begin set @SpecimenCount = (select count(*) from  CollectionStorage where ExchangeID = @ID) end
if @Table = 'CollectionEvent' begin set @ParentID = (select CollectionEventParentID  from v_EventList where CollectionEventID = @ID) end
if @Table = 'Collection' begin set @ParentID = (select CollectionParentID from Collection where CollectionID = @ID) end
if @Table = 'CollectionExchange' begin set @ParentID = (select ExchangeParentID from CollectionExchange where ExchangeID = @ID) end
-- table variable to hold accumulated results
   DECLARE @TempEvent TABLE (ID int primary key,
   ParentID int NULL,
   Seq int NOT NULL,
   Caption nchar(500) NULL,
   SpecimenCount int NULL)
-- initialize @TempEvent with direct event
   INSERT @TempEvent (ID, ParentID, Seq, Caption, SpecimenCount) values (@ID, @ParentID, @Seq, @Caption, @SpecimenCount)
--  set @SuperiorID = (select CollectionEventParentID from v_EventList where CollectionEventID = @ID)
if @Table = 'CollectionEvent' begin set @SuperiorID = (select CollectionEventParentID from v_EventList where CollectionEventID = @ID) end
if @Table = 'Collection' begin set @SuperiorID = (select CollectionParentID from Collection where CollectionID = @ID) end
if @Table = 'CollectionExchange' begin set @SuperiorID = (select CharacterParentID.dbo.CharacterParentID from Character where CharacterID = @ID) end
while @SuperiorID > 0
begin
	set @Seq = @Seq + 1
	-- set @Caption = (select Event  from v_EventList where CollectionEventID = @SuperiorID)
	if @Table = 'CollectionEvent' begin set @Caption = (select Event  from v_EventList where CollectionEventID = @SuperiorID) end
	if @Table = 'Collection' begin set @Caption = (select CollectionName from Collection where CollectionID = @SuperiorID) end
	if @Table = 'CollectionExchange' begin set @Caption = (select ExchangePartnerName from CollectionExchange where ExchangeID = @SuperiorID) end
	if @Table = 'CollectionEvent' begin set @ParentID = (select CollectionEventParentID  from v_EventList where CollectionEventID = @SuperiorID) end
	if @Table = 'Collection' begin set @ParentID = (select CollectionParentID from Collection where CollectionID = @SuperiorID) end
	if @Table = 'CollectionExchange' begin set @ParentID = (select ExchangeParentID from CollectionExchange where ExchangeID = @SuperiorID) end
	--set @SpecimenCount = (select dbo.EventSpecimenNumber (@SuperiorID))
	if @Table = 'CollectionEvent' begin set @SpecimenCount =  (select dbo.EventSpecimenNumber (@SuperiorID)) end
	if @Table = 'Collection' begin set @SpecimenCount = (select count(*) from CollectionStorage where CollectionID = @SuperiorID) end
	if @Table = 'CollectionExchange' begin set @SpecimenCount = (select count(*) from  CollectionStorage where ExchangeID = @SuperiorID) end
	insert into @TempEvent (ID, ParentID, Seq, Caption, SpecimenCount) values (@SuperiorID, @ParentID, @Seq, @Caption, @SpecimenCount)
	--set @SuperiorID = (select CollectionEventParentID from v_EventList where CollectionEventID = @SuperiorID)
	if @Table = 'CollectionEvent' begin set @SuperiorID = (select CollectionEventParentID from v_EventList where CollectionEventID = @SuperiorID) end
	if @Table = 'Collection' begin set @SuperiorID = (select CollectionParentID from Collection where CollectionID = @SuperiorID) end
	if @Table = 'CollectionExchange' begin set @SuperiorID = (select CharacterParentID.dbo.CharacterParentID from Character where CharacterID = @SuperiorID) end
end
    
   -- copy to the result of the function the required columns
   INSERT @ItemList
   SELECT ID,  ParentID, Seq, Caption, SpecimenCount 
   FROM @TempEvent
   ORDER BY Seq
   RETURN
END
GO
GRANT SELECT ON [dbo].[HierarchySuperiorList] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[HierarchyTopID]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [dbo].[HierarchyTopID] (@Table nvarchar(50), @ID int)
RETURNS varchar (11)
/*Returns the top ID within the hierarchy for a given ID from the specified Table.*/
AS
BEGIN
declare @TopID int
declare @i int
if @Table = 'CollectionEvent' begin set @TopID = (select CollectionEventParentID from CollectionEvent where CollectionEventID = @ID) end
if @Table = 'Collection' begin set @TopID = (select CollectionParentID from Collection where CollectionID = @ID) end
if @Table = 'IdentificationUnit' begin set @TopID = (select SubstrateID from IdentificationUnit where CollectionSpecimenID = @ID) end
if @Table = 'CollectionExchange' begin set @TopID = (select ExchangeParentID from CollectionExchange where ExchangeID = @ID) end
if @Table = 'CollectionEvent' begin set @i = (select count(*) from CollectionEvent where CollectionEventID = @ID and not CollectionEventParentID is null) end
if @Table = 'Collection' begin set @i = (select count(*) from Collection where CollectionID = @ID and not CollectionParentID is null) end
if @Table = 'IdentificationUnit' begin set @i = (select count(*) from IdentificationUnit where CollectionSpecimenID = @ID and not SubstrateID is null) end
if @Table = 'CollectionExchange' begin set @i = (select count(*) from CollectionExchange where ExchangeID = @ID and not ExchangeParentID is null) end
if (@TopID = null )
	set @TopID =  @ID
else
	begin
	while (@i > 0)
		begin
		if @Table = 'CollectionEvent' begin set @ID = (select CollectionEventParentID from CollectionEvent where CollectionEventID = @ID) end
		if @Table = 'Collection' begin set @ID = (select CollectionParentID from Collection where CollectionID = @ID) end
		if @Table = 'IdentificationUnit' begin set @ID = (select SubstrateID from IdentificationUnit where CollectionSpecimenID = @ID) end
		if @Table = 'CollectionExchange' begin set @ID = (select ExchangeParentID from CollectionExchange where ExchangeID = @ID) end		
		if @Table = 'CollectionEvent' begin set @i = (select count(*) from CollectionEvent where CollectionEventID = @ID and not CollectionEventParentID is null) end
		if @Table = 'Collection' begin set @i = (select count(*) from Collection where CollectionID = @ID and not CollectionParentID is null) end
		if @Table = 'IdentificationUnit' begin set @i = (select count(*) from IdentificationUnit where CollectionSpecimenID = @ID and not SubstrateID is null) end
		if @Table = 'CollectionExchange' begin set @i = (select count(*) from CollectionExchange where ExchangeID = @ID and not ExchangeParentID is null) end
		end
	set @TopID = @ID
	end
return @TopID
END
GO
GRANT EXECUTE ON [dbo].[HierarchyTopID] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[ItemHierarchy]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[ItemHierarchy] (@Table varchar(50), @ID int)  
RETURNS @ItemList TABLE (ItemID int primary key,
   ParentID int NULL,
   Caption nchar(500) NULL)
/*Returns a result set that lists all the items within a hierarchy starting at the topmost item related to the given item.*/
AS
BEGIN
declare @TopID int
set @TopID = (select dbo.ItemHierarchyTopID(@Table, @ID))
   DECLARE @TempItem TABLE (ID int primary key,
   ParentID int NULL,
   Caption nchar(500) NULL)
--if @Table = 'CollectionEvent' 	begin   INSERT @TempItem (ID, ParentID, Caption) SELECT CollectionEventID, CollectionEventParentID, Event FROM CollectionEventList_Main20 WHERE CollectionEventID = @TopID end
--if @Table = 'CollectionEvent' 	begin   INSERT @TempItem (ID, ParentID, Caption) SELECT CollectionEventID, CollectionEventParentID, Event FROM CollectionEventList_Main20 WHERE CollectionEventID = @TopID end
if @Table = 'Collection'		begin   INSERT @TempItem (ID, ParentID, Caption) SELECT CollectionID, CollectionParentID, CollectionName FROM Collection WHERE CollectionID = @TopID end
if @Table = 'Agent' 		begin   INSERT @TempItem (ID, ParentID, Caption) SELECT AgentID, AgentParentID, AgentName FROM DiversityAgents.dbo.Agent WHERE AgentID = @TopID end
if @Table = 'CollectionExchange' begin   INSERT @TempItem (ID, ParentID, Caption) SELECT ExchangeID, ExchangeParentID, ExchangeName FROM CollectionExchangeList_Main20 WHERE ExchangeID = @TopID end
if @Table = 'CollectionProject' 	begin  INSERT @TempItem (ID, ParentID, Caption) SELECT ProjectID, ProjectParentID, ProjectTitle FROM DiversityProjects.dbo.Project WHERE ProjectID = @TopID end

insert into @TempItem select distinct ItemID,ParentID, Caption from dbo.ItemHierarchyChildNodes (@Table, @TopID)
   -- copy to the result of the function the required columns
 INSERT @ItemList
   SELECT ID,  ParentID,  Caption
   FROM @TempItem  /**/
   RETURN
END

GO
GRANT SELECT ON [dbo].[ItemHierarchy] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[ItemHierarchyChildNodes]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[ItemHierarchyChildNodes] (@Table varchar(50), @ID int)  
RETURNS @ItemList TABLE (ItemID int primary key,
   ParentID int NULL,
   Caption nchar(500) NULL)
/*Returns a result set that lists all the items within a hierarchy starting at the topmost item related to the given item.*/
/*
 Items are: 
CollectionEvent
Collection
Project
CollectionExchange
Agent
*/
AS
BEGIN
   declare @ParentID int
   DECLARE @TempItem TABLE (ID int primary key,
   ParentID int NULL,
   Caption nchar(500) NULL)
   if @Table = 'CollectionEvent' 	begin   INSERT @TempItem (ID, ParentID, Caption) SELECT CollectionEventID, CollectionEventParentID, Event FROM CollectionEventList_Main20 WHERE CollectionEventParentID = @ID end
   if @Table = 'Collection'		begin   INSERT @TempItem (ID, ParentID, Caption) SELECT CollectionID, CollectionParentID, CollectionName FROM Collection WHERE CollectionParentID = @ID end
   if @Table = 'Agent' 		begin   INSERT @TempItem (ID, ParentID, Caption) SELECT AgentID, AgentParentID, AgentName FROM DiversityAgents.dbo.Agent WHERE AgentParentID = @ID end
   if @Table = 'CollectionExchange' begin   INSERT @TempItem (ID, ParentID, Caption) SELECT ExchangeID, ExchangeParentID, ExchangeName FROM CollectionExchangeList_Main20 WHERE ExchangeParentID = @ID end
   if @Table = 'CollectionProject' 	begin  INSERT @TempItem (ID, ParentID, Caption) SELECT ProjectID, ProjectParentID, ProjectTitle FROM DiversityProjects.dbo.Project WHERE ProjectParentID = @ID end
   DECLARE HierarchyCursor  CURSOR for
   select ID from @TempItem
   open HierarchyCursor
   FETCH next from HierarchyCursor into @ParentID
   WHILE @@FETCH_STATUS = 0
   BEGIN
	insert into @TempItem select * from dbo.ItemHierarchyChildNodes (@Table, @ParentID) where ItemID not in (select ID from @TempItem)
   	FETCH NEXT FROM HierarchyCursor into @ParentID
   END
   CLOSE HierarchyCursor
   DEALLOCATE HierarchyCursor
 INSERT @ItemList
   SELECT distinct ID,  ParentID,  Caption
   FROM @TempItem
   RETURN
END
GO
GRANT SELECT ON [dbo].[ItemHierarchyChildNodes] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[ItemHierarchyTopID]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[ItemHierarchyTopID] (@Table nvarchar(50), @ID int)
RETURNS varchar (11)
/*Returns the top ID within the hierarchy for a given ID from the specified Table.*/
AS
BEGIN
declare @TopID int
declare @i int
if @Table = 'CollectionEvent' begin set @TopID = (select CollectionEventParentID from CollectionEvent where CollectionEventID = @ID) end
if @Table = 'Collection' begin set @TopID = (select CollectionParentID from Collection where CollectionID = @ID) end
if @Table = 'IdentificationUnit' begin set @TopID = (select SubstrateID from IdentificationUnit where CollectionSpecimenID = @ID) end
if @Table = 'Agent' begin set @TopID = (select AgentParentID from DiversityAgents.dbo.Agent where AgentID = @ID) end
if @Table = 'CollectionExchange' begin set @TopID = (select ExchangeParentID from CollectionExchange where ExchangeID = @ID) end
if @Table = 'Project' begin set @TopID = (select ProjectParentID from DiversityProjects.dbo.Project where ProjectID = @ID) end
if @Table = 'CollectionEvent' begin set @i = (select count(*) from CollectionEvent where CollectionEventID = @ID and not CollectionEventParentID is null) end
if @Table = 'Collection' begin set @i = (select count(*) from Collection where CollectionID = @ID and not CollectionParentID is null) end
if @Table = 'IdentificationUnit' begin set @i = (select count(*) from IdentificationUnit where CollectionSpecimenID = @ID and not SubstrateID is null) end
if @Table = 'Agent' begin set @i = (select count(*) from DiversityAgents.dbo.Agent where AgentID = @ID and not AgentParentID is null) end
if @Table = 'CollectionExchange' begin set @i = (select count(*) from CollectionExchange where ExchangeID = @ID and not ExchangeParentID is null) end
if @Table = 'Project' begin set @i = (select count(*) from DiversityProjects.dbo.Project where ProjectID = @ID and not ProjectParentID is null) end
if (@TopID = null )
	set @TopID =  @ID
else
	begin
	while (@i > 0)
		begin
		if @Table = 'CollectionEvent' begin set @ID = (select CollectionEventParentID from CollectionEvent where CollectionEventID = @ID) end
		if @Table = 'Collection' begin set @ID = (select CollectionParentID from Collection where CollectionID = @ID) end
		if @Table = 'IdentificationUnit' begin set @ID = (select SubstrateID from IdentificationUnit where CollectionSpecimenID = @ID) end
		if @Table = 'Agent' begin set @ID = (select AgentParentID from DiversityAgents.dbo.Agent where AgentID = @ID) end
		if @Table = 'CollectionExchange' begin set @ID = (select ExchangeParentID from CollectionExchange where ExchangeID = @ID) end		
		if @Table = 'Project' begin set @ID = (select ProjectParentID from DiversityProjects.dbo.Project where ProjectID = @ID) end
		if @Table = 'CollectionEvent' begin set @i = (select count(*) from CollectionEvent where CollectionEventID = @ID and not CollectionEventParentID is null) end
		if @Table = 'Collection' begin set @i = (select count(*) from Collection where CollectionID = @ID and not CollectionParentID is null) end
		if @Table = 'IdentificationUnit' begin set @i = (select count(*) from IdentificationUnit where CollectionSpecimenID = @ID and not SubstrateID is null) end
		if @Table = 'Agent' begin set @i = (select count(*) from DiversityAgents.dbo.Agent where AgentID = @ID and not AgentParentID is null) end
		if @Table = 'CollectionExchange' begin set @i = (select count(*) from CollectionExchange where ExchangeID = @ID and not ExchangeParentID is null) end
		if @Table = 'Project' begin set @i = (select count(*) from DiversityProjects.dbo.Project where ProjectID = @ID and not ProjectParentID is null) end
		end
	set @TopID = @ID
	end
return @TopID
END
GO
GRANT EXECUTE ON [dbo].[ItemHierarchyTopID] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[ItemSuperiorList]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[ItemSuperiorList] (@Table varchar(50), @ID int)  
RETURNS @ItemList TABLE (ItemID int primary key,
   ParentID int NULL,
   Seq int NOT NULL,
   Caption nchar(500) NULL,
   SpecimenCount int NULL)
/*Returns a result set that lists all the CollectionEventID's superior to a given event.*/
AS
BEGIN
-- declare the variables
   declare @Seq int
   declare @SuperiorID int
   declare @Caption nvarchar(200) 
   declare @SpecimenCount int   
   declare @ParentID int
-- initialize the variables
   set @Seq = 1
if @Table = 'CollectionEvent' begin set @Caption = ( select Event from v_EventList where CollectionEventID = @ID) end
if @Table = 'Collection' begin set @Caption = (select CollectionName from Collection where CollectionID = @ID) end
if @Table = 'Agent' begin set @Caption = (select Name from DiversityAgent.dbo.Agent where AgentID = @ID) end
if @Table = 'Character' begin set @Caption = (select CharacterParentID from DiversityCharacter.dbo.Character where CharacterID = @ID) end
if @Table = 'CollectionExchange' begin set @Caption = (select ExchangePartnerName from CollectionExchange where ExchangeID = @ID) end
if @Table = 'CollectionEvent' begin set @SpecimenCount =  (select dbo.EventSpecimenNumber (@ID)) end
if @Table = 'Collection' begin set @SpecimenCount = (select count(*) from CollectionStorage where CollectionID = @ID) end
if @Table = 'Agent' begin set @SpecimenCount = (select count(*) from CollectionAgent where CollectorsAgentID = @ID) end
if @Table = 'Character' begin set @SpecimenCount = (select count(*) from  DiversityCharacter.dbo.Character where CharacterID = @ID) end
if @Table = 'CollectionExchange' begin set @SpecimenCount = (select count(*) from  CollectionStorage where ExchangeID = @ID) end
if @Table = 'CollectionEvent' begin set @ParentID = (select CollectionEventParentID  from v_EventList where CollectionEventID = @ID) end
if @Table = 'Collection' begin set @ParentID = (select CollectionParentID from Collection where CollectionID = @ID) end
if @Table = 'Agent' begin set @ParentID = (select GroupID from DiversityAgent.dbo.Agent where AgentID = @ID) end
if @Table = 'Character' begin set @ParentID = (select CharacterParentID from DiversityCharacter.dbo.Character where CharacterID = @ID) end
if @Table = 'CollectionExchange' begin set @ParentID = (select ExchangeParentID from CollectionExchange where ExchangeID = @ID) end
-- table variable to hold accumulated results
   DECLARE @TempEvent TABLE (ID int primary key,
   ParentID int NULL,
   Seq int NOT NULL,
   Caption nchar(500) NULL,
   SpecimenCount int NULL)
-- initialize @TempEvent with direct event
   INSERT @TempEvent (ID, ParentID, Seq, Caption, SpecimenCount) values (@ID, @ParentID, @Seq, @Caption, @SpecimenCount)
--  set @SuperiorID = (select CollectionEventParentID from v_EventList where CollectionEventID = @ID)
if @Table = 'CollectionEvent' begin set @SuperiorID = (select CollectionEventParentID from v_EventList where CollectionEventID = @ID) end
if @Table = 'Collection' begin set @SuperiorID = (select CollectionParentID from Collection where CollectionID = @ID) end
if @Table = 'Agent' begin set @SuperiorID = (select GroupID from DiversityAgent.dbo.Agent where AgentID = @ID) end
if @Table = 'Character' begin set @SuperiorID = (select CharacterParentID.dbo.CharacterParentID from Character where CharacterID = @ID) end
if @Table = 'CollectionExchange' begin set @SuperiorID = (select CharacterParentID.dbo.CharacterParentID from Character where CharacterID = @ID) end
while @SuperiorID > 0
begin
	set @Seq = @Seq + 1
	-- set @Caption = (select Event  from v_EventList where CollectionEventID = @SuperiorID)
	if @Table = 'CollectionEvent' begin set @Caption = (select Event  from v_EventList where CollectionEventID = @SuperiorID) end
	if @Table = 'Collection' begin set @Caption = (select CollectionName from Collection where CollectionID = @SuperiorID) end
	if @Table = 'Agent' begin set @Caption = (select Name from DiversityAgent.dbo.Agent where AgentID = @SuperiorID) end
	if @Table = 'Character' begin set @Caption = (select CharacterParentID from DiversityCharacter.dbo.Character where CharacterID = @SuperiorID) end
	if @Table = 'CollectionExchange' begin set @Caption = (select ExchangePartnerName from CollectionExchange where ExchangeID = @SuperiorID) end
	if @Table = 'CollectionEvent' begin set @ParentID = (select CollectionEventParentID  from v_EventList where CollectionEventID = @SuperiorID) end
	if @Table = 'Collection' begin set @ParentID = (select CollectionParentID from Collection where CollectionID = @SuperiorID) end
	if @Table = 'Agent' begin set @ParentID = (select GroupID from DiversityAgent.dbo.Agent where AgentID = @SuperiorID) end
	if @Table = 'Character' begin set @ParentID = (select CharacterParentID from DiversityCharacter.dbo.Character where CharacterID = @SuperiorID) end
	if @Table = 'CollectionExchange' begin set @ParentID = (select ExchangeParentID from CollectionExchange where ExchangeID = @SuperiorID) end
	--set @SpecimenCount = (select dbo.EventSpecimenNumber (@SuperiorID))
	if @Table = 'CollectionEvent' begin set @SpecimenCount =  (select dbo.EventSpecimenNumber (@SuperiorID)) end
	if @Table = 'Collection' begin set @SpecimenCount = (select count(*) from CollectionStorage where CollectionID = @SuperiorID) end
	if @Table = 'Agent' begin set @SpecimenCount = (select count(*) from CollectionAgent where CollectorsAgentID = @SuperiorID) end
	if @Table = 'Character' begin set @SpecimenCount = (select count(*) from  DiversityCharacter.dbo.Character where CharacterID = @SuperiorID) end
	if @Table = 'CollectionExchange' begin set @SpecimenCount = (select count(*) from  CollectionStorage where ExchangeID = @SuperiorID) end
	insert into @TempEvent (ID, ParentID, Seq, Caption, SpecimenCount) values (@SuperiorID, @ParentID, @Seq, @Caption, @SpecimenCount)
	--set @SuperiorID = (select CollectionEventParentID from v_EventList where CollectionEventID = @SuperiorID)
	if @Table = 'CollectionEvent' begin set @SuperiorID = (select CollectionEventParentID from v_EventList where CollectionEventID = @SuperiorID) end
	if @Table = 'Collection' begin set @SuperiorID = (select CollectionParentID from Collection where CollectionID = @SuperiorID) end
	if @Table = 'Agent' begin set @SuperiorID = (select GroupID from DiversityAgent.dbo.Agent where AgentID = @SuperiorID) end
	if @Table = 'Character' begin set @SuperiorID = (select CharacterParentID.dbo.CharacterParentID from Character where CharacterID = @SuperiorID) end
	if @Table = 'CollectionExchange' begin set @SuperiorID = (select CharacterParentID.dbo.CharacterParentID from Character where CharacterID = @SuperiorID) end
end
    
   -- copy to the result of the function the required columns
   INSERT @ItemList
   SELECT ID,  ParentID, Seq, Caption, SpecimenCount 
   FROM @TempEvent
   ORDER BY Seq
   RETURN
END
GO
GRANT SELECT ON [dbo].[ItemSuperiorList] TO [User] AS [dbo]
GO



/****** Object:  UserDefinedFunction [dbo].[ManagerCollectionList]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  ManagerCollectionList: CollectionName expanded to 255  ######################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[ManagerCollectionList] ()  
RETURNS @CollectionList TABLE ([CollectionID] [int] Primary key ,
	[CollectionParentID] [int] NULL ,
	[CollectionName] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionAcronym] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactName] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactAgentURI] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[Description] [nvarchar] (4000) COLLATE Latin1_General_CI_AS NULL ,
	[Location] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionOwner]  [nvarchar]  (255) COLLATE Latin1_General_CI_AS NULL ,
	[DisplayOrder] [varchar] (255) COLLATE Latin1_General_CI_AS NULL)

/*
Returns a table that lists all the collections a Manager has access to, including the child collections.
MW 02.10.2018

Test:
select * from dbo.ManagerCollectionList()
*/
AS
BEGIN
	-- Filling the AdmininstratingCollections in the temp list
	DECLARE @CollectionID INT
	DECLARE @TempAdminCollectionID TABLE (CollectionID int primary key)
	DECLARE @TempCollectionID TABLE (CollectionID int primary key)
	INSERT @TempAdminCollectionID (CollectionID) 
		SELECT AdministratingCollectionID FROM CollectionManager WHERE (LoginName = USER_NAME()) 
	INSERT @TempCollectionID (CollectionID) 
		SELECT AdministratingCollectionID FROM CollectionManager WHERE (LoginName = USER_NAME()) 

	DECLARE HierarchyCursor  CURSOR for
	select CollectionID from @TempAdminCollectionID
	open HierarchyCursor
	FETCH next from HierarchyCursor into @CollectionID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		insert into @TempCollectionID select CollectionID 
		from dbo.CollectionChildNodes (@CollectionID) where @CollectionID not in (select CollectionID from @TempCollectionID)
		FETCH NEXT FROM HierarchyCursor into @CollectionID
	END
	CLOSE HierarchyCursor
	DEALLOCATE HierarchyCursor

	-- copy the child nodes into the result list
	INSERT @CollectionList
	SELECT CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder FROM dbo.Collection
	WHERE CollectionID in (SELECT CollectionID FROM @TempCollectionID)
	

	RETURN
END
GO
GRANT SELECT ON [dbo].[ManagerCollectionList] TO [CollectionManager] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[MethodChildNodes]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[MethodChildNodes] (@ID int)  
RETURNS @ItemList TABLE (MethodID int primary key,
	MethodParentID int NULL ,
	DisplayText nvarchar (50)   NULL ,
	Description nvarchar  (500)   NULL ,
	ForCollectionEvent [bit]   NULL ,
	Notes nvarchar  (1000)   NULL ,
	MethodURI varchar  (255)   NULL ,
	OnlyHierarchy [bit] NULL,
	RowGUID [uniqueidentifier] ROWGUIDCOL NULL)  
/*
Returns a result set that lists all the items within a hierarchy starting at the topmost item related to the given item.
MW02.01.2006
*/
AS
BEGIN
   declare @ParentID int
   DECLARE @TempItem TABLE (MethodID int primary key,
	MethodParentID int NULL ,
	DisplayText nvarchar (50)   NULL ,
	Description nvarchar  (500)   NULL ,
	ForCollectionEvent [bit]   NULL ,
	Notes nvarchar  (1000)   NULL ,
	MethodURI varchar  (255)   NULL,
	OnlyHierarchy [bit] NULL ,
	RowGUID [uniqueidentifier] ROWGUIDCOL NULL)
 INSERT @TempItem (MethodID , MethodParentID, DisplayText , Description , ForCollectionEvent, Notes , MethodURI, OnlyHierarchy, RowGUID) 
	SELECT MethodID , MethodParentID, DisplayText , Description , ForCollectionEvent, Notes , MethodURI, OnlyHierarchy, RowGUID
	FROM Method WHERE MethodParentID = @ID 
   DECLARE HierarchyCursor  CURSOR for
   select MethodID from @TempItem
   open HierarchyCursor
   FETCH next from HierarchyCursor into @ParentID
   WHILE @@FETCH_STATUS = 0
   BEGIN
	insert into @TempItem select MethodID , MethodParentID, DisplayText , Description , ForCollectionEvent, Notes , MethodURI, OnlyHierarchy, RowGUID
	from dbo.MethodChildNodes (@ParentID) where MethodID not in (select MethodID from @TempItem)
   	FETCH NEXT FROM HierarchyCursor into @ParentID
   END
   CLOSE HierarchyCursor
   DEALLOCATE HierarchyCursor
 INSERT @ItemList (MethodID , MethodParentID, DisplayText , Description , ForCollectionEvent, Notes , MethodURI, OnlyHierarchy, RowGUID) 
   SELECT distinct MethodID , MethodParentID, DisplayText , Description , ForCollectionEvent, Notes , MethodURI, OnlyHierarchy, RowGUID
   FROM @TempItem ORDER BY DisplayText
   RETURN
END
GO
GRANT SELECT ON [dbo].[MethodChildNodes] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[MethodHierarchy]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[MethodHierarchy] (@MethodID int)  
RETURNS @MethodList TABLE ([MethodID] [int] Primary key ,
	[MethodParentID] [int] NULL ,
	[DisplayText] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[Description] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[Notes] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL ,
	[MethodURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
	[ForCollectionEvent] [bit] NULL,
	[OnlyHierarchy] [bit] NULL)
/*
Returns a table that lists all the Method items related to the given Method.
MW 02.01.2006
Test
SELECT  *  FROM dbo.MethodHierarchy(82)
*/
AS
BEGIN
declare @TopID int
declare @i int
set @TopID = (select MethodParentID from Method where MethodID = @MethodID) 
set @i = (select count(*) from Method where MethodID = @MethodID)
if (@TopID is null )
	set @TopID =  @MethodID
else	
	begin
	while (@i > 0)
		begin
		set @MethodID = (select MethodParentID from Method where MethodID = @MethodID and not MethodParentID is null) 
		set @i = (select count(*) from Method where MethodID = @MethodID and not MethodParentID is null)
		end
	set @TopID = @MethodID
	end
   INSERT @MethodList
   SELECT DISTINCT MethodID, MethodParentID, DisplayText, Description, Notes, MethodURI, ForCollectionEvent, OnlyHierarchy
   FROM Method
   WHERE Method.MethodID = @TopID
   INSERT @MethodList
   SELECT MethodID, MethodParentID, DisplayText, Description, Notes, MethodURI, ForCollectionEvent, OnlyHierarchy
   FROM dbo.MethodChildNodes (@TopID)
   /*DELETE A FROM @MethodList A
   WHERE A.OnlyHierarchy = 1*/
   RETURN
END
GO
GRANT SELECT ON [dbo].[MethodHierarchy] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[MethodHierarchyAll]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[MethodHierarchyAll] ()  
RETURNS @MethodList TABLE ([MethodID] [int] Primary key ,
	[MethodParentID] [int] NULL ,
	[DisplayText] [nvarchar](255) NULL,
	[Description] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[MethodURI] [varchar](255) NULL,
	[ForCollectionEvent] [bit] NULL,
	[OnlyHierarchy] [bit] NULL,
	[HierarchyDisplayText] [nvarchar] (900) COLLATE Latin1_General_CI_AS NULL)
/*
Returns a table that lists all the Method items related to the given Method.
MW 02.01.2006
TEST:
SELECT * FROM DBO.MethodHierarchyAll()
*/
AS
BEGIN
INSERT @MethodList (MethodID, MethodParentID, DisplayText, Description, ForCollectionEvent, Notes, MethodURI, OnlyHierarchy, HierarchyDisplayText)
SELECT DISTINCT MethodID, MethodParentID, DisplayText, Description, ForCollectionEvent, Notes, MethodURI, OnlyHierarchy, DisplayText
FROM Method
WHERE Method.MethodParentID IS NULL
declare @i int
set @i = (select count(*) from Method where MethodID not IN (select MethodID from  @MethodList))
while (@i > 0)
	begin
	INSERT @MethodList (MethodID, MethodParentID, DisplayText, Description, ForCollectionEvent, Notes, MethodURI, OnlyHierarchy, HierarchyDisplayText)
	SELECT DISTINCT C.MethodID, C.MethodParentID, C.DisplayText, C.Description, C.ForCollectionEvent, C.Notes, C.MethodURI, C.OnlyHierarchy, L.HierarchyDisplayText + ' | ' + C.DisplayText
	FROM Method C, @MethodList L
	WHERE C.MethodParentID = L.MethodID
	AND C.MethodID NOT IN (select MethodID from  @MethodList)
	set @i = (select count(*) from Method where MethodID not IN (select MethodID from  @MethodList))
end
   RETURN
END
GO
GRANT SELECT ON [dbo].[MethodHierarchyAll] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[MultiColumnQuery]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  MultiColumnQuery - including event and series images  #######################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[MultiColumnQuery]
(	
	@Target nvarchar(50), 
	@QueryString nvarchar(500)
)
RETURNS @ID table(CollectionSpecimenID int not null Primary Key)
AS
/*
Test
select CollectionSpecimenID from dbo.MultiColumnQuery('Identifier', 'SAPM-PI-00%')
select S.* from dbo.MultiColumnQuery('Identifier', 'SAPM-PI-00%') M, CollectionSpecimen S
where M.CollectionSpecimenID = S.CollectionSpecimenID
*/
begin
	--declare @TempID table(CollectionSpecimenID int not null)

if (@Target = 'Identifier')
	begin
	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimen S, CollectionEvent E
	WHERE S.CollectionEventID = E.CollectionEventID AND E.CollectorsEventNumber LIKE @QueryString
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimen 
	WHERE (AccessionNumber LIKE @QueryString OR DepositorsAccessionNumber LIKE @QueryString OR ExternalIdentifier LIKE @QueryString)
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionAgent 
	WHERE CollectorsNumber LIKE @QueryString
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimenPart 
	WHERE (StorageLocation LIKE @QueryString OR AccessionNumber LIKE @QueryString OR PartSublabel LIKE @QueryString)
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimenTransaction 
	WHERE AccessionNumber LIKE @QueryString
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimenRelation 
	WHERE (RelatedSpecimenURI LIKE @QueryString OR RelatedSpecimenDisplayText LIKE @QueryString)
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM Identification 
	WHERE (VernacularTerm LIKE @QueryString OR TaxonomicName LIKE @QueryString)
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM IdentificationUnit 
	WHERE (ExsiccataNumber LIKE @QueryString OR UnitIdentifier LIKE @QueryString)
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM IdentificationUnitAnalysis 
	WHERE AnalysisNumber LIKE @QueryString 
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	end

	if (@Target = 'Withhold')
	begin

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimen S, CollectionEvent E
	WHERE S.CollectionEventID = E.CollectionEventID AND E.DataWithholdingReason LIKE @QueryString
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionAgent 
	WHERE DataWithholdingReason LIKE @QueryString 
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimen_Core 
	WHERE DataWithholdingReason LIKE @QueryString 
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimenPart 
	WHERE DataWithholdingReason LIKE @QueryString 
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimenImage 
	WHERE DataWithholdingReason LIKE @QueryString 
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionEventImage E, CollectionSpecimen S
	WHERE S.CollectionEventID = E.CollectionEventID AND E.DataWithholdingReason LIKE @QueryString 
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionEventSeriesImage I, CollectionEvent E, CollectionSpecimen S
	WHERE S.CollectionEventID = E.CollectionEventID AND I.SeriesID = E.SeriesID AND I.DataWithholdingReason LIKE @QueryString 
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	end

	if (@Target = 'Notes')
	begin

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimen S, CollectionEvent E
	WHERE S.CollectionEventID = E.CollectionEventID AND E.Notes LIKE @QueryString
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionAgent 
	WHERE Notes LIKE @QueryString 
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimen_Core 
	WHERE (LabelTitle LIKE @QueryString OR LabelTranscriptionNotes LIKE @QueryString OR OriginalNotes LIKE @QueryString 
	OR AdditionalNotes LIKE @QueryString OR Problems LIKE @QueryString 	OR InternalNotes LIKE @QueryString)
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimenImage 
	WHERE (Notes LIKE @QueryString OR Notes LIKE @QueryString OR CopyrightStatement LIKE @QueryString 
	OR InternalNotes LIKE @QueryString)
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimenPart 
	WHERE (Notes LIKE @QueryString OR Notes LIKE @QueryString OR PreparationMethod LIKE @QueryString )
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM CollectionSpecimenRelation 
	WHERE (Notes LIKE @QueryString OR Notes LIKE @QueryString OR RelatedSpecimenDescription LIKE @QueryString )
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM Identification 
	WHERE (TypeNotes LIKE @QueryString OR Notes LIKE @QueryString)
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM IdentificationUnit 
	WHERE (Circumstances LIKE @QueryString OR UnitDescription LIKE @QueryString OR Notes LIKE @QueryString)
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM IdentificationUnitAnalysis 
	WHERE (Notes LIKE @QueryString)
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM IdentificationUnitGeoAnalysis 
	WHERE (Notes LIKE @QueryString)
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	INSERT INTO @ID (CollectionSpecimenID) 
	SELECT CollectionSpecimenID FROM IdentificationUnitInPart 
	WHERE (Description LIKE @QueryString)
	AND CollectionSpecimenID NOT IN (SELECT CollectionSpecimenID FROM @ID)
	GROUP BY CollectionSpecimenID

	end


RETURN 
end

GO
GRANT SELECT ON [dbo].[MultiColumnQuery] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[Namespace]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[Namespace] ()  
RETURNS @Namespace TABLE (
   DatabaseName varchar(50) not null,
   TableName varchar(50) not null,
   ColumnName varchar(50) not null,
   ColumnDescription varchar(500) null)
/*Returns a result set that lists all the Tables and Foreign keys connected to the querried item.*/
AS
BEGIN
-- table variable to hold accumulated results
   DECLARE @Temp TABLE (
    DatabaseName varchar(50) not null,
   TableName varchar(50) not null,
   ColumnName varchar(50) not null,
   ColumnDescription varchar(500) null)
DECLARE @Database varchar(50)
set @Database = (select distinct TABLE_CATALOG from INFORMATION_SCHEMA.TABLES)
/* inserting the Data into the table */
insert into @Temp (DatabaseName, TableName, ColumnName)
SELECT     TOP 100 PERCENT @Database, dbo.sysobjects.name AS TableName, dbo.syscolumns.name AS ColumnName
FROM         dbo.syscolumns INNER JOIN
                      dbo.sysobjects ON dbo.syscolumns.id = dbo.sysobjects.id INNER JOIN
                      dbo.systypes ON dbo.syscolumns.xtype = dbo.systypes.xtype
WHERE     (dbo.sysobjects.xtype = 'U') AND (dbo.systypes.name <> N'sysname') AND 
                      (NOT (dbo.syscolumns.name LIKE N'%Sequence')) AND (dbo.sysobjects.name IN (
select Table_Name from information_Schema.Tables
where Table_Type = 'Base Table'
and Table_Name not like '%Enum'
and Table_Name not like 'Application%'
and Table_Name not like 'Workbench%'
and Table_Name <> 'dtproperties'
and Table_Name not like '[_]%')) 
ORDER BY dbo.sysobjects.name, dbo.syscolumns.name
/* update of the descriptions */
DECLARE @Table as varchar(50)
DECLARE @OldTable as varchar(50)
DECLARE @Column as varchar(50)
DECLARE @Description as nvarchar(1000)
DECLARE DescriptionCursor  CURSOR for
select TableName, ColumnName from @Temp
open DescriptionCursor
FETCH next from DescriptionCursor into @Table, @Column
WHILE @@FETCH_STATUS = 0
BEGIN
   -- This is executed as long as the previous fetch succeeds.
	/* setting the foreign-key values for lookup tables */
	
	set @Description = (SELECT     max(CONVERT(nvarchar(1000), [value]))
	FROM         ::fn_listextendedproperty(NULL, 'user', 'dbo', 'table', @Table, 'column', @Column) [::fn_listextendedproperty_1]) 
	update @Temp set ColumnDescription = @Description where TableName = @Table and ColumnName = @Column
	
   	FETCH NEXT FROM DescriptionCursor into @Table, @Column
END
CLOSE DescriptionCursor
DEALLOCATE DescriptionCursor
/* transferring data to result table */
insert into @Namespace (DatabaseName, TableName, ColumnName,  ColumnDescription)
SELECT   DatabaseName, TableName, ColumnName,  ColumnDescription FROM @Temp
return
END
GO
GRANT SELECT ON [dbo].[Namespace] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[NextFreeAccNr]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[NextFreeAccNr] (@AccessionNumber nvarchar(50))  
/*
returns next free accession number
assumes that accession numbers have a pattern like M-0023423 or HAL 25345 or GLM3453
with a leading string and a numeric end
MW 31.10.2012
TEST:
select max(AccessionNumber) from CollectionSpecimen
select dbo.[NextFreeAccNr] ('0033933')
select dbo.[NextFreeAccNr] ('00041009')
select dbo.[NextFreeAccNr] ('M-00041009')
select dbo.[NextFreeAccNr] ('M-0014474')
select dbo.[NextFreeAccNr] ('ZSM_DIP-000')
select dbo.[NextFreeAccNr] ('1907/9')
select dbo.[NextFreeAccNr] ('ZSM-MA-9')
select dbo.[NextFreeAccNr] ('M-0013622')
select dbo.[NextFreeAccNr] ('M-0014900')
select dbo.[NextFreeAccNr] ('MB-FA-000001') 
select dbo.[NextFreeAccNr] ('MB-FA-000101') 
*/
RETURNS nvarchar (50)
AS
BEGIN 
declare @NextAcc nvarchar(50)
set @NextAcc = ''
declare @Start int
declare @Position tinyint
declare @Prefix nvarchar(50)
set @Position = len(@AccessionNumber) 
if (isnumeric(@AccessionNumber) = 1)
begin
	set @Prefix = substring(@AccessionNumber, 1, len(@AccessionNumber) - len(cast(cast(@AccessionNumber as int) as varchar)))
	set @Start = cast(@AccessionNumber as int)
end
else
begin
while (isnumeric(rtrim(substring(@AccessionNumber, @Position, len(@AccessionNumber)))) = 1)
begin
	set @Start = CAST(substring(@AccessionNumber, @Position, len(@AccessionNumber)) as int)
	set @Prefix = substring(@AccessionNumber, 1, @Position)
	set @Position = @Position - 1
end
end
if (@Start < 0) 
begin 
	set @Start = @Start * -1;
end
declare @Space nvarchar(1)
set @Space = ''
if (SUBSTRING(@AccessionNumber, @Position + 1, 1) = ' ')
begin
	set @Space = '_'
end
if (LEN(@Prefix) = LEN(@AccessionNumber))
begin
	set @Prefix = SUBSTRING(@Prefix, 1, len(@Prefix) - 1)
end
declare @T Table (ID int identity(1, 1),
	NumericPart int NULL,
    AccessionNumber nvarchar(50) NULL)
INSERT INTO @T (AccessionNumber)
SELECT AccessionNumber 
FROM CollectionSpecimen  
WHERE AccessionNumber LIKE @Prefix + '%'
AND AccessionNumber >= @AccessionNumber
if (select COUNT(*) from @T) = 0
begin
INSERT INTO @T (AccessionNumber)
SELECT @AccessionNumber 
end
UPDATE @T SET NumericPart = ID + @Start;
UPDATE @T SET AccessionNumber = @Prefix 
+ case when (len(@AccessionNumber) - LEN(NumericPart)- LEN(@Prefix) - LEN(@Space)) > 0 
then replicate('0', len(@AccessionNumber) - LEN(NumericPart)- LEN(@Prefix) - LEN(@Space)) else '' end
+ CAST(NumericPart as varchar);
set @NextAcc = (SELECT MIN(T.AccessionNumber) from @T T left outer join  CollectionSpecimen S on S.AccessionNumber = T.AccessionNumber
	where S.AccessionNumber is null)
return (@NextAcc)
END
GO
GRANT EXECUTE ON [dbo].[NextFreeAccNr] TO [Typist] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[NextFreeAccNumber]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  NextFreeAccNumber   #########################################################################################
--######  Bugfix:  Including parts in search for next number   ########################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[NextFreeAccNumber] (@AccessionNumber nvarchar(50), @IncludeSpecimen bit, @IncludePart bit)  
/*
returns next free accession number for parts or specimen
optionally including either parts or specimen
assumes that accession numbers have a pattern like M-0023423 or HAL 25345 or GLM3453
with a leading string and a numeric end
MW 05.09.2013
TEST:
select dbo.[NextFreeAccNumber] ('0033933', 1, 1)
select dbo.[NextFreeAccNumber] ('0033933', 0, 1)
select dbo.[NextFreeAccNumber] ('00041009', 1, 1)
select dbo.[NextFreeAccNumber] ('M-00041009', 1, 1)
select dbo.[NextFreeAccNumber] ('M-0014474', 1, 1)
select dbo.[NextFreeAccNumber] ('M-0014474', 0, 1)
select dbo.[NextFreeAccNumber] ('ZSM_DIP-000', 1, 1)
select dbo.[NextFreeAccNumber] ('1907/9', 1, 1)
select dbo.[NextFreeAccNumber] ('ZSM-MA-9', 1, 1)
select dbo.[NextFreeAccNumber] ('M-0013622', 1, 1)
select dbo.[NextFreeAccNumber] ('M-0014900', 1, 1)
select dbo.[NextFreeAccNumber] ('MB-FA-000001', 1, 1) 
select dbo.[NextFreeAccNumber] ('MB-FA-000101', 1, 1) 
select dbo.[NextFreeAccNumber] ('MB-006118', 1, 0)
select dbo.[NextFreeAccNumber] ('SMNS-B-PH-2017/942', 1, 1) 
select dbo.[NextFreeAccNumber] ('SMNS-B-PH-2017/02196', 1, 1) 
select dbo.[NextFreeAccNumber] ('SMNK-ARA 08643', 1, 1)
select dbo.[NextFreeAccNumber] ('Test', 1, 1)
SELECT [dbo].[NextFreeAccNumber] ('P-001', 1, 1)
*/
RETURNS nvarchar (50)
AS
BEGIN 
-- declaration of variables
declare @NextAcc nvarchar(50)			-- the result of the function
	set @NextAcc = null
declare @Start int						-- the numeric starting value
declare @NumericStartString nvarchar(50)-- the string containing the numeric part of the accession number
declare @NumericStartLength int			-- the length of the numeric part of the accession number
declare @EndString nvarchar(50)			-- an end of the accession number that is not numeric
	set @EndString = ''
declare @Position tinyint				-- the starting position of the numeric part 
declare @LastNumber int					-- the last numeric value that has been generated for testing										
declare @T Table (ID int identity(1, 1),-- temporary table keeping the numbers
	NumericPart int NULL,
    NumericString nvarchar(50) NULL,
    AccessionNumberGenerated nvarchar(50) NULL,
    AccessionNumberInCollection nvarchar(50) NULL)
declare @LastAccessionNumber nvarchar(50)-- the last AccessionNumber that has been generated for testing
	set @LastAccessionNumber = @AccessionNumber

-- getting the starting parameters of the accession number
declare @Prefix nvarchar(50)
set @Position = len(@AccessionNumber) 
if (@AccessionNumber NOT LIKE '%[^0-9]%')
begin
	set @Prefix = substring(@AccessionNumber, 1, len(@AccessionNumber) - len(cast(cast(@AccessionNumber as int) as varchar)))
	set @Start = cast(@AccessionNumber as int)
end
else
begin
	if (substring(reverse(@AccessionNumber), 1, 1) NOT LIKE  '[0-9]')
	begin
		set @EndString = substring(reverse(@AccessionNumber), 1, 1)
		declare @EndPos int
		set @EndPos = LEN(@AccessionNumber) - 1
		while (substring(@AccessionNumber, @EndPos, 1) NOT LIKE  '[0-9]' AND @EndPos > 0)
		begin
			set @EndString = substring(@AccessionNumber, @EndPos, 1) + @EndString
			set @EndPos = @EndPos - 1
		end
	end
	if(@EndString <> '')
	begin
		set @Position = @Position - len(@EndString)
	end
	while (substring(@AccessionNumber, @Position, 1) LIKE '[0-9]')
	begin
		set @NumericStartString = substring(@AccessionNumber, @Position, len(@AccessionNumber) - len(@EndString) - len(@Prefix) + 1)
		set @Start = CAST(@NumericStartString as int)
		set @Position = @Position - 1
		set @Prefix = substring(@AccessionNumber, 1, @Position)
	end
end

set @NumericStartLength = len(@NumericStartString)

-- getting leeding 0
declare @Leeding0 varchar(50)
declare @iLeed int
set @iLeed = @Position + 1
set @Leeding0 = ''
while (substring(@AccessionNumber, @iLeed, 1) = '0')
begin
	set @Leeding0 = @Leeding0 + '0'
	set @iLeed = @iLeed + 1
end

declare @LengthNumericPart int
set @LengthNumericPart = len(@NumericStartString)

-- walk through the existing numbers and find a not used number
while @NextAcc is null
begin
	-- filling the temporary table
	if (@IncludeSpecimen = 1)
	begin    
		INSERT INTO @T (AccessionNumberInCollection)
		SELECT DISTINCT TOP 100  AccessionNumber 
		FROM CollectionSpecimen  
		WHERE AccessionNumber LIKE @Prefix + '%'
		AND AccessionNumber > @LastAccessionNumber
		AND isnumeric(SUBSTRING(AccessionNumber, len(@Prefix) + 1, 50)) = 1
	end
	if (@IncludePart = 1)
	begin    
		INSERT INTO @T (AccessionNumberInCollection)
		SELECT DISTINCT TOP 100 AccessionNumber 
		FROM CollectionSpecimenPart  
		WHERE AccessionNumber LIKE @Prefix + '%'
		AND AccessionNumber > @LastAccessionNumber
		AND isnumeric(SUBSTRING(AccessionNumber, len(@Prefix) + 1, 50)) = 1
	end
	if (select COUNT(*) from @T) = 0
	begin
		INSERT INTO @T (AccessionNumberInCollection)
		SELECT @LastAccessionNumber 
	end

	-- setting the numbers
	UPDATE @T SET NumericPart = ID + @Start; 
	UPDATE @T SET NumericString = @Leeding0 + cast(NumericPart as varchar);

	-- if the with is restricted, shorten it
	if (@Leeding0 <> '')
	begin
		UPDATE @T SET NumericString = substring(NumericString, len(NumericString) - @LengthNumericPart + 1, @LengthNumericPart)
		WHERE len(NumericString) > @LengthNumericPart;
	end

	-- set the generated numbers
	UPDATE @T SET AccessionNumberGenerated = @Prefix + NumericString;

	-- start for the next circle
	set @LastAccessionNumber = (select max(AccessionNumberGenerated) from @T)
	set @LastNumber = (select max(NumericPart) from @T)

	-- remove those that are fitting
	if (select count(*) from @T) > 1
	begin
		delete from @T where AccessionNumberGenerated = rtrim(ltrim(AccessionNumberInCollection))
	end
	-- remove matches in the database
	if (select count(*) from @T) > 0
	begin
		if @IncludeSpecimen = 1
		begin
		Delete T from @T T inner join CollectionSpecimen S on S.AccessionNumber = T.AccessionNumberGenerated
		end
		if @IncludePart = 1
		begin
		Delete T from @T T inner join CollectionSpecimenPart S on S.AccessionNumber = T.AccessionNumberGenerated
		end
	end

	if (select count(*) from @T) > 0
	begin
		set @NextAcc = (select min(AccessionNumberGenerated) + @EndString from @T)
	end

	-- if nothing is left, exit the while loop
	if (select count(*) from CollectionSpecimen S where S.AccessionNumber > @LastAccessionNumber) = 0
	begin
		if (@NextAcc is null)
		begin
			set @NextAcc = ''
		end
	end

end

if (@NextAcc = '' AND not @LastNumber is null)
begin
	-- construction of the numeric part
	set @NextAcc = @Leeding0 + cast(@LastNumber + 1 as varchar)
	if (Len(@Leeding0) > 0 and len(@NextAcc) > @NumericStartLength)
		set @NextAcc = substring(@NextAcc, len(@NextAcc) - @NumericStartLength, 50)
	set @NextAcc = @Prefix + @NextAcc + @EndString
end

return (@NextAcc)
END
GO
GRANT EXECUTE ON [dbo].[NextFreeAccNumber] TO [Editor] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[PrivacyConsentInfo]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   Function PrivacyConsentInfo providing common information with the DiversityWorkbench  ######################
--#####################################################################################################################

CREATE FUNCTION [dbo].[PrivacyConsentInfo] () 
RETURNS varchar (900) 
AS  
BEGIN return 'http://diversityworkbench.net/Portal/Default_Agreement_on_Processing_of_Personal_Data_in_DWB_Software'  
END; 
GO
GRANT ALTER ON [dbo].[PrivacyConsentInfo] TO [Administrator] AS [dbo]
GO
GRANT EXECUTE ON [dbo].[PrivacyConsentInfo] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[ProcessingChildNodes]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ProcessingChildNodes] (@ID int)  
RETURNS @ItemList TABLE (ProcessingID int primary key,
	ProcessingParentID int NULL ,
	DisplayText nvarchar (50)   NULL ,
	Description nvarchar  (500)   NULL ,
	Notes nvarchar  (1000)   NULL ,
	ProcessingURI varchar  (255)   NULL ,
	OnlyHierarchy [bit] NULL,
	RowGUID [uniqueidentifier] ROWGUIDCOL NULL)  
	
/*
Returns a result set that lists all the items within a hierarchy starting at the topmost item related to the given item.
MW 21.10.2009
*/
AS
BEGIN
   declare @ParentID int
   DECLARE @TempItem TABLE (ProcessingID int primary key,
	ProcessingParentID int NULL ,
	DisplayText nvarchar (50)   NULL ,
	Description nvarchar  (500)   NULL ,
	Notes nvarchar  (1000)   NULL ,
	ProcessingURI varchar  (255)   NULL ,
	OnlyHierarchy [bit] NULL,
	RowGUID [uniqueidentifier] ROWGUIDCOL NULL)  

 INSERT @TempItem (ProcessingID , ProcessingParentID, DisplayText , Description , Notes , ProcessingURI, OnlyHierarchy, RowGUID) 
	SELECT ProcessingID , ProcessingParentID, DisplayText , Description , Notes , ProcessingURI, OnlyHierarchy, RowGUID
	FROM Processing WHERE ProcessingParentID = @ID 

   DECLARE HierarchyCursor  CURSOR for
   select ProcessingID from @TempItem
   open HierarchyCursor
   FETCH next from HierarchyCursor into @ParentID
   WHILE @@FETCH_STATUS = 0
   BEGIN
	insert into @TempItem select ProcessingID , ProcessingParentID, DisplayText , Description , Notes , ProcessingURI, OnlyHierarchy, RowGUID
	from dbo.ProcessingChildNodes (@ParentID) where ProcessingID not in (select ProcessingID from @TempItem)
   	FETCH NEXT FROM HierarchyCursor into @ParentID
   END
   CLOSE HierarchyCursor
   DEALLOCATE HierarchyCursor
 INSERT @ItemList (ProcessingID , ProcessingParentID, DisplayText , Description , Notes , ProcessingURI, OnlyHierarchy, RowGUID) 
   SELECT distinct ProcessingID , ProcessingParentID, DisplayText , Description , Notes , ProcessingURI, OnlyHierarchy, RowGUID
   FROM @TempItem ORDER BY DisplayText
   RETURN
END

GO
GRANT SELECT ON [dbo].[ProcessingChildNodes] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[ProcessingHierarchy]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ProcessingHierarchy] (@ID int)  
RETURNS @List TABLE ([ProcessingID] [int] Primary key ,
	[ProcessingParentID] [int] NULL ,
	[DisplayText] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[Description] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[Notes] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL ,
	[ProcessingURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
	[OnlyHierarchy] [bit] NULL,
	RowGUID [uniqueidentifier] ROWGUIDCOL NULL)  

/*
Returns a table that lists all the analysis items related to the given processing.
MW 21.10.2009
TEST:
SELECT * FROM dbo.ProcessingHierarchy(5)
*/
AS
BEGIN
-- getting the TopID
declare @TopID int
declare @i int

set @TopID = (select ProcessingParentID from Processing where ProcessingID = @ID) 

set @i = (select count(*) from Processing where ProcessingID = @ID)

if (@TopID is null )
	set @TopID =  @ID
else	
	begin
	while (@i > 0)
		begin
		set @ID = (select ProcessingParentID from Processing where ProcessingID = @ID and not ProcessingParentID is null) 
		set @i = (select count(*) from Processing where ProcessingID = @ID and not ProcessingParentID is null)
		end
	set @TopID = @ID
	end


-- get the ID's of the child nodes
-- copy the root node in the result list
   INSERT @List
   SELECT DISTINCT ProcessingID, ProcessingParentID, DisplayText, Description, Notes, ProcessingURI, OnlyHierarchy, RowGUID
   FROM Processing
   WHERE Processing.ProcessingID = @TopID

-- copy the child nodes into the result list
   INSERT @List
   SELECT * FROM dbo.ProcessingChildNodes (@TopID)

   RETURN
END
GO
GRANT SELECT ON [dbo].[ProcessingHierarchy] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[ProcessingHierarchyAll]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[ProcessingHierarchyAll] ()  
RETURNS @ProcessingList TABLE ([ProcessingID] [int] Primary key ,
	[ProcessingParentID] [int] NULL ,
	[DisplayText] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[ProcessingURI] [varchar](255) NULL,
	[OnlyHierarchy] [bit] NULL,
	[HierarchyDisplayText] [varchar] (900) COLLATE Latin1_General_CI_AS NULL)
/*
Returns a table that lists all the Processing items related to the given Processing.
MW 02.01.2006
TEST:
SELECT [HierarchyDisplayText], * FROM DBO.ProcessingHierarchyAll()
*/
AS
BEGIN
INSERT @ProcessingList (ProcessingID, ProcessingParentID, DisplayText, Description,  Notes, ProcessingURI, OnlyHierarchy, HierarchyDisplayText)
SELECT DISTINCT ProcessingID, ProcessingParentID, DisplayText, Description,  Notes, ProcessingURI, OnlyHierarchy
, DisplayText
FROM Processing
WHERE Processing.ProcessingParentID IS NULL
declare @i int
set @i = (select count(*) from Processing where ProcessingID not IN (select ProcessingID from  @ProcessingList))
while (@i > 0)
	begin
	INSERT @ProcessingList (ProcessingID, ProcessingParentID, DisplayText, Description,  Notes, ProcessingURI, OnlyHierarchy, HierarchyDisplayText)
	SELECT DISTINCT C.ProcessingID, C.ProcessingParentID, C.DisplayText, C.Description,  C.Notes, C.ProcessingURI, C.OnlyHierarchy, L.HierarchyDisplayText + ' | ' + C.DisplayText
	FROM Processing C, @ProcessingList L
	WHERE C.ProcessingParentID = L.ProcessingID
	AND C.ProcessingID NOT IN (select ProcessingID from  @ProcessingList)
	set @i = (select count(*) from Processing where ProcessingID not IN (select ProcessingID from  @ProcessingList))
end
   RETURN
END
GO
GRANT SELECT ON [dbo].[ProcessingHierarchyAll] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[ProcessingListForPart]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[ProcessingListForPart] (@CollectionSpecimenID int, @SpecimenPartID int)  
RETURNS @ProcessingList TABLE ([ProcessingID] [int]  Primary key,
	[ProcessingParentID] [int] NULL,
	[DisplayText] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[ProcessingURI] [varchar](255) NULL,
	[DisplayTextHierarchy] nvarchar (255))

/*
Returns a table that lists all the processing items related to the given part.
the list depends upon the processing types available for a material category
and the projects available for a processing
MW 08.08.2009
TEST:
SELECT * FROM dbo.ProcessingListForPart(177930,  NULL)
SELECT * FROM dbo.ProcessingListForPart(177930, 153619)

*/
AS
BEGIN

DECLARE @ProcessingID int

-- PROJECTS

-- GET THE Processing ACCORDING TO PROJECTS
DECLARE @ProcessingProjectCursor TABLE (ProcessingID int primary key)

INSERT INTO @ProcessingProjectCursor (ProcessingID)
SELECT DISTINCT A.ProcessingID
FROM  CollectionProject AS P INNER JOIN
ProjectProcessing AS A ON P.ProjectID = A.ProjectID INNER JOIN
CollectionSpecimen AS U ON P.CollectionSpecimenID = U.CollectionSpecimenID
--WHERE (U.SpecimenPartID = @SpecimenPartID)



-- GET THE Processing CHILDS ACCORDING TO PROJECTS
DECLARE @ProcessingProject TABLE (ProcessingID int primary key)

INSERT INTO @ProcessingProject (ProcessingID)
SELECT DISTINCT A.ProcessingID
FROM  CollectionProject AS P INNER JOIN
ProjectProcessing AS A ON P.ProjectID = A.ProjectID INNER JOIN
CollectionSpecimenPart AS U ON P.CollectionSpecimenID = U.CollectionSpecimenID

DECLARE ProcessingProjectCursor  CURSOR FOR
	SELECT ProcessingID FROM @ProcessingProjectCursor
	OPEN ProcessingProjectCursor
	FETCH next from ProcessingProjectCursor into @ProcessingID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		INSERT INTO @ProcessingProject (ProcessingID)
		SELECT DISTINCT ProcessingID
		FROM ProcessingHierarchy(@ProcessingID) C
		WHERE C.ProcessingID NOT IN (SELECT ProcessingID FROM @ProcessingProject)

		INSERT INTO @ProcessingProject (ProcessingID)
		SELECT DISTINCT ProcessingID
		FROM ProcessingChildNodes(@ProcessingID) C
		WHERE C.ProcessingID NOT IN (SELECT ProcessingID FROM @ProcessingProject)
		FETCH NEXT FROM ProcessingProjectCursor INTO @ProcessingID
	END
CLOSE ProcessingProjectCursor
DEALLOCATE ProcessingProjectCursor

-- Material

-- GET THE PROCESSING ACCORDING TO MATERIAL
DECLARE @ProcessingMaterialCursor TABLE (ProcessingID int primary key)

IF NOT @SpecimenPartID IS NULL
BEGIN
INSERT INTO @ProcessingMaterialCursor (ProcessingID)
SELECT DISTINCT  A.ProcessingID
FROM CollectionSpecimenPart AS U INNER JOIN
ProcessingMaterialCategory AS T ON U.MaterialCategory = T.MaterialCategory INNER JOIN
Processing AS A ON T.ProcessingID = A.ProcessingID
WHERE (U.SpecimenPartID = @SpecimenPartID)
AND (U.CollectionSpecimenID = @CollectionSpecimenID)
END

IF @SpecimenPartID IS NULL
BEGIN
INSERT INTO @ProcessingMaterialCursor (ProcessingID)
SELECT DISTINCT  A.ProcessingID
FROM CollectionSpecimenPart AS U INNER JOIN
ProcessingMaterialCategory AS T ON U.MaterialCategory = T.MaterialCategory INNER JOIN
Processing AS A ON T.ProcessingID = A.ProcessingID
WHERE (U.CollectionSpecimenID = @CollectionSpecimenID)
END


-- GET THE Processing CHILDS ACCORDING TO Material
DECLARE @ProcessingMaterial TABLE (ProcessingID int primary key)

IF NOT @SpecimenPartID IS NULL
BEGIN
INSERT INTO @ProcessingMaterial (ProcessingID)
SELECT DISTINCT  A.ProcessingID
FROM CollectionSpecimenPart AS U INNER JOIN
ProcessingMaterialCategory AS T ON U.MaterialCategory = T.MaterialCategory INNER JOIN
Processing AS A ON T.ProcessingID = A.ProcessingID
WHERE (U.SpecimenPartID = @SpecimenPartID)
AND (U.CollectionSpecimenID = @CollectionSpecimenID)
END

IF @SpecimenPartID IS NULL
BEGIN
INSERT INTO @ProcessingMaterial (ProcessingID)
SELECT DISTINCT  A.ProcessingID
FROM CollectionSpecimenPart AS U INNER JOIN
ProcessingMaterialCategory AS T ON U.MaterialCategory = T.MaterialCategory INNER JOIN
Processing AS A ON T.ProcessingID = A.ProcessingID
WHERE (U.CollectionSpecimenID = @CollectionSpecimenID)
END

DECLARE ProcessingMaterialCursor  CURSOR FOR
	SELECT ProcessingID FROM @ProcessingMaterialCursor
	OPEN ProcessingMaterialCursor
	FETCH next from ProcessingMaterialCursor into @ProcessingID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		INSERT INTO @ProcessingMaterial (ProcessingID)
		SELECT DISTINCT ProcessingID
		FROM ProcessingHierarchy(@ProcessingID) C
		WHERE C.ProcessingID NOT IN (SELECT ProcessingID FROM @ProcessingMaterial)

		INSERT INTO @ProcessingMaterial (ProcessingID)
		SELECT DISTINCT ProcessingID
		FROM ProcessingChildNodes(@ProcessingID) C
		WHERE C.ProcessingID NOT IN (SELECT ProcessingID FROM @ProcessingMaterial)
		
		FETCH NEXT FROM ProcessingMaterialCursor INTO @ProcessingID
	END
CLOSE ProcessingMaterialCursor
DEALLOCATE ProcessingMaterialCursor

INSERT INTO @ProcessingList
           ([ProcessingID]
           ,[ProcessingParentID]
           ,[DisplayText]
           ,[Description]
           ,[Notes]
           ,[ProcessingURI]
           ,[DisplayTextHierarchy])
SELECT A.ProcessingID, A.ProcessingParentID, A.DisplayText, A.Description, A.Notes, A.ProcessingURI, 
	CASE WHEN Ap3.DisplayText IS NULL 
	THEN '' ELSE Ap3.DisplayText + ' - ' END + CASE WHEN Ap2.DisplayText IS NULL 
	THEN '' ELSE Ap2.DisplayText + ' - ' END + CASE WHEN Ap1.DisplayText IS NULL 
	THEN '' ELSE Ap1.DisplayText + ' - ' END + A.DisplayText 
	AS DisplayTextHierarchy
FROM Processing AS Ap3 RIGHT OUTER JOIN Processing AS Ap2 ON Ap3.ProcessingID = Ap2.ProcessingParentID RIGHT OUTER JOIN
	Processing AS Ap1 ON Ap2.ProcessingID = Ap1.ProcessingParentID RIGHT OUTER JOIN
	Processing AS A  ON Ap1.ProcessingID = A.ProcessingParentID
	INNER JOIN @ProcessingMaterial AS T ON A.ProcessingID = T.ProcessingID 
	INNER JOIN @ProcessingProject AS P ON A.ProcessingID = P.ProcessingID

   RETURN
END
GO
GRANT SELECT ON [dbo].[ProcessingListForPart] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[ProcessingProjectList]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[ProcessingProjectList] (@ProjectID int)   
RETURNS @ProcessingList TABLE ([ProcessingID] [int] Primary key , 	
[ProcessingParentID] [int] NULL , 	
[DisplayText] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL , 	
[Description] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL , 	
[Notes] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL , 	
[ProcessingURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL,
[OnlyHierarchy] [bit] NULL,
[RowGUID] [uniqueidentifier] ROWGUIDCOL NULL)  
/* 
Returns a table that lists all the Processing items related to the given project. 
MW 08.08.2009 
TEST: 
Select * from ProcessingProjectList(3)  
Select * from ProcessingProjectList(372)  
*/ 
AS BEGIN  
--ALTER TABLE @ProcessingList ADD  CONSTRAINT [DF__Processing__RowGUI__29A2D696]  DEFAULT (newsequentialid()) FOR [RowGUID]

INSERT INTO @ProcessingList            
([ProcessingID]            
,[ProcessingParentID]            
,[DisplayText]            
,[Description]            
,[Notes]            
,[ProcessingURI]
,[OnlyHierarchy]
,[RowGUID]) 
SELECT Processing.ProcessingID, Processing.ProcessingParentID, Processing.DisplayText, Processing.Description, 
Processing.Notes,  Processing.ProcessingURI, Processing.OnlyHierarchy, Processing.RowGUID
FROM  ProjectProcessing 
INNER JOIN Processing ON ProjectProcessing.ProcessingID = Processing.ProcessingID 
WHERE ProjectProcessing.ProjectID = @ProjectID  

DECLARE @TempItem TABLE (ProcessingID int primary key) 

INSERT INTO @TempItem ([ProcessingID]) 
SELECT Processing.ProcessingID 
FROM  ProjectProcessing 
INNER JOIN Processing ON ProjectProcessing.ProcessingID = Processing.ProcessingID 
WHERE ProjectProcessing.ProjectID = @ProjectID  
declare @ParentID int  
DECLARE HierarchyCursor  CURSOR for 	select ProcessingID from @TempItem 	
open HierarchyCursor 	
FETCH next from HierarchyCursor into @ParentID 	
WHILE @@FETCH_STATUS = 0 	
BEGIN 	
insert into @ProcessingList ( ProcessingID , ProcessingParentID, DisplayText , Description , 
Notes , ProcessingURI, OnlyHierarchy, RowGUID) 
select ProcessingID , ProcessingParentID, DisplayText , Description ,  
Notes , ProcessingURI, OnlyHierarchy, RowGUID
from dbo.ProcessingChildNodes (@ParentID) 
where ProcessingID not in (select ProcessingID from @ProcessingList) 	
FETCH NEXT FROM HierarchyCursor into @ParentID 	END 
CLOSE HierarchyCursor 
DEALLOCATE HierarchyCursor  
--DELETE FROM  @ProcessingList WHERE OnlyHierarchy = 1  
RETURN 
END  


GO
GRANT SELECT ON [dbo].[ProcessingProjectList] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[ProjectChildNodes]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE  FUNCTION [dbo].[ProjectChildNodes] (@ID int)  
RETURNS @ItemList TABLE ([ExchangeID] [int] Primary key  NOT NULL ,
	[ExchangeParentID] [int] NULL ,
	[ExchangeGroup] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[MaterialCategory] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL DEFAULT (N'specimen'),
	[NumberOfUnits] [smallint] NULL ,
	[ExchangeTitle] [nvarchar] (100) COLLATE Latin1_General_CI_AS NOT NULL ,
	[ExchangeType] [nvarchar] (50) COLLATE Latin1_General_CI_AS NOT NULL DEFAULT (N'exchange'),
	[ExchangePartnerName] [nvarchar] (200) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangePartnerAgentURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeComment] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeNumber] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeDate] [datetime] NULL ,
	[InternalNotes] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[ResponsibleName] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[ResponsibleAgentURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL  )

/*
Returns a result set that lists all the items within a hierarchy starting at the topmost item related to the given item.
MW02.01.2006
*/
AS
BEGIN
   declare @ParentID int
   DECLARE @TempItem TABLE ([ExchangeID] [int] Primary key  NOT NULL ,
	[ExchangeParentID] [int] NULL ,
	[ExchangeGroup] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[MaterialCategory] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL DEFAULT (N'specimen'),
	[NumberOfUnits] [smallint] NULL ,
	[ExchangeTitle] [nvarchar] (100) COLLATE Latin1_General_CI_AS NOT NULL ,
	[ExchangeType] [nvarchar] (50) COLLATE Latin1_General_CI_AS NOT NULL DEFAULT (N'exchange'),
	[ExchangePartnerName] [nvarchar] (200) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangePartnerAgentURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeComment] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeNumber] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[ExchangeDate] [datetime] NULL ,
	[InternalNotes] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[ResponsibleName] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[ResponsibleAgentURI] [varchar] (255) COLLATE Latin1_General_CI_AS NULL )

INSERT @TempItem (  ExchangeID, ExchangeParentID, ExchangeGroup, MaterialCategory, NumberOfUnits, ExchangeTitle, ExchangeType, ExchangePartnerName, 
                      ExchangePartnerAgentURI, ExchangeComment, ExchangeNumber, ExchangeDate, InternalNotes, ResponsibleName, ResponsibleAgentURI) 
	SELECT  ExchangeID, ExchangeParentID, ExchangeGroup, MaterialCategory, NumberOfUnits, ExchangeTitle, ExchangeType, ExchangePartnerName, 
                      ExchangePartnerAgentURI, ExchangeComment, ExchangeNumber, ExchangeDate, InternalNotes, ResponsibleName, ResponsibleAgentURI
	FROM Exchange WHERE ExchangeParentID = @ID 

   DECLARE HierarchyCursor  CURSOR for
   select ExchangeID from @TempItem
   open HierarchyCursor
   FETCH next from HierarchyCursor into @ParentID
   WHILE @@FETCH_STATUS = 0
   BEGIN
	insert into @TempItem select  ExchangeID, ExchangeParentID, ExchangeGroup, MaterialCategory, NumberOfUnits, ExchangeTitle, ExchangeType, ExchangePartnerName, 
                      ExchangePartnerAgentURI, ExchangeComment, ExchangeNumber, ExchangeDate, InternalNotes, ResponsibleName, ResponsibleAgentURI
	from dbo.ExchangeChildNodes (@ParentID) where ExchangeID not in (select ExchangeID from @TempItem)
   	FETCH NEXT FROM HierarchyCursor into @ParentID
   END
   CLOSE HierarchyCursor
   DEALLOCATE HierarchyCursor
 INSERT @ItemList ( ExchangeID, ExchangeParentID, ExchangeGroup, MaterialCategory, NumberOfUnits, ExchangeTitle, ExchangeType, ExchangePartnerName, 
                      ExchangePartnerAgentURI, ExchangeComment, ExchangeNumber, ExchangeDate, InternalNotes, ResponsibleName, ResponsibleAgentURI) 
   SELECT distinct  ExchangeID, ExchangeParentID, ExchangeGroup, MaterialCategory, NumberOfUnits, ExchangeTitle, ExchangeType, ExchangePartnerName, 
                      ExchangePartnerAgentURI, ExchangeComment, ExchangeNumber, ExchangeDate, InternalNotes, ResponsibleName, ResponsibleAgentURI
   FROM @TempItem ORDER BY ExchangeTitle
   RETURN
END

GO


/****** Object:  UserDefinedFunction [dbo].[ProjectDataLastChanges]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   ProjectDataLastChanges        ##############################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[ProjectDataLastChanges] (@ProjectID int)  
RETURNS datetime
AS  
/*
retrieval of the last update in data of a project
--Test
select dbo.[ProjectDataLastChanges](3)
*/
BEGIN 
declare @LastChanges datetime
declare @Temp datetime

-- last changes in table CollectionSpecimen
set @LastChanges = (select max(S.[LogUpdatedWhen]) 
from [dbo].[CollectionSpecimen] S, [dbo].[CollectionProject] P
where S.CollectionSpecimenID = P.CollectionSpecimenID
and P.ProjectID = @ProjectID)

-- last changes in table CollectionEvent
set @LastChanges = (select max(E.[LogUpdatedWhen]) 
from [dbo].[CollectionEvent] E, [dbo].[CollectionSpecimen] S, [dbo].[CollectionProject] P
where S.CollectionSpecimenID = P.CollectionSpecimenID
and S.CollectionEventID = E.CollectionEventID
and P.ProjectID = @ProjectID)
if (@Temp > @LastChanges)
	set @LastChanges = @Temp

-- last adding to the project
set @Temp = (select max(P.[LogUpdatedWhen]) 
from [dbo].[CollectionProject] P
where P.ProjectID = @ProjectID)
if (@Temp > @LastChanges)
	set @LastChanges = @Temp

-- last removal from the project
set @Temp = (select max(P.[LogDate]) 
from [dbo].[CollectionProject_log] P
where P.ProjectID = @ProjectID)
if (@Temp > @LastChanges)
	set @LastChanges = @Temp

return @LastChanges
END

GO
GRANT EXECUTE ON [dbo].[ProjectDataLastChanges] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[RequesterCollectionList]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[RequesterCollectionList] ()  
RETURNS @CollectionList TABLE ([CollectionID] [int] Primary key ,
	[CollectionParentID] [int] NULL ,
	[CollectionName] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionAcronym] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactName] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactAgentURI] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[Description] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[Location] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionOwner]  [nvarchar]  (255) COLLATE Latin1_General_CI_AS NULL ,
	[DisplayOrder] [varchar] (255) COLLATE Latin1_General_CI_AS NULL)

/*
Returns a table that lists all the collections a requester has access to, including the child collections if allowed.
MW 02.08.2008

Test:
select * from dbo.RequesterCollectionList()
*/
AS
BEGIN

	-- Filling the AdmininstratingCollections in the temp list
	DECLARE @CollectionID INT
	DECLARE @IncludeSubcollections tinyint
	DECLARE @TempAdminCollectionID TABLE (CollectionID int primary key, IncludeSubcollections tinyint)
	DECLARE @TempCollectionID TABLE (CollectionID int primary key)
	INSERT @TempAdminCollectionID (CollectionID, IncludeSubcollections) 
		SELECT AdministratingCollectionID, IncludeSubcollections FROM CollectionRequester WHERE (LoginName = USER_NAME()) 

	BEGIN
		DECLARE HierarchyCursor  CURSOR for
		select CollectionID, CAST(IncludeSubcollections AS TINYINT) AS IncludeSubcollections from @TempAdminCollectionID
		open HierarchyCursor
		FETCH next from HierarchyCursor into @CollectionID, @IncludeSubcollections
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @IncludeSubcollections = 1
				insert into @TempCollectionID select CollectionID 
				from dbo.CollectionHierarchy (@CollectionID) where @CollectionID not in (select CollectionID from @TempCollectionID)
			FETCH NEXT FROM HierarchyCursor into @CollectionID, @IncludeSubcollections
		END
		CLOSE HierarchyCursor
		DEALLOCATE HierarchyCursor
	END

	-- copy the child nodes into the result list
	INSERT @CollectionList
	SELECT CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder FROM dbo.Collection
	WHERE CollectionID in (SELECT CollectionID FROM @TempCollectionID)

	-- copy the admin nodes into the result list
	INSERT @CollectionList
	SELECT CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder FROM dbo.Collection
	WHERE CollectionID in (SELECT CollectionID FROM @TempAdminCollectionID)
	AND CollectionID NOT IN (SELECT CollectionID FROM @CollectionList)

	RETURN
END

GO
GRANT SELECT ON [dbo].[RequesterCollectionList] TO [Requester] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[SearchMenuColumns]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[SearchMenuColumns] (@TableName varchar(50))  
RETURNS @MenuList TABLE (
   TableName varchar(50) not null,
   ColumnName varchar(50) not null,
   DataType varchar(50) not null,
   ColumnLength int null,
   ColumnDescription nvarchar(1000) null,
   ForeignKeyTable varchar(50) null,
   ForeignKeyColumn varchar(50) null,
   MenuTab varchar(50) null)
/*Returns a table that lists all the Tables and Columns including their description, datatype etc. connected to the querried table.*/
AS
BEGIN
/* inserting the Data into the table */
-- table variable to hold accumulated results
   DECLARE @ItemList TABLE (
   TableName varchar(50) not null,
   ColumnName varchar(50) not null,
   DataType varchar(50) not null,
   ColumnLength int null,
   ColumnDescription nvarchar(1000) null,
   ForeignKeyTable varchar(50) null,
   ForeignKeyColumn varchar(50) null,
   MenuTab varchar(50) null)
insert into @ItemList (TableName, ColumnName, DataType, ColumnLength, MenuTab)
SELECT  distinct   TOP 100 PERCENT  dbo.sysobjects.name AS TableName, dbo.syscolumns.name AS ColumnName, dbo.systypes.name AS DataType, 
                      	dbo.syscolumns.length, case when dbo.sysobjects.name like 'Collection%' and len(dbo.sysobjects.name) > 10  then RTRIM( substring(dbo.sysobjects.name, 11, 50)) else 
		case when dbo.sysobjects.name like 'Identification%' then  RTRIM( 'Identification ' + lower(substring(dbo.sysobjects.name, 15, 50)))  else dbo.sysobjects.name end end
FROM         dbo.syscolumns INNER JOIN
                      dbo.sysobjects ON dbo.syscolumns.id = dbo.sysobjects.id INNER JOIN
                      dbo.systypes ON dbo.syscolumns.xtype = dbo.systypes.xtype
WHERE     (dbo.sysobjects.xtype = 'U')
		AND (dbo.systypes.name <> N'sysname') 
		AND (NOT (dbo.syscolumns.name LIKE N'%ID')) 
		AND (NOT (dbo.syscolumns.name LIKE N'LOG%')) 
		AND (NOT (dbo.syscolumns.name LIKE N'%Sequence')) 
		AND (dbo.sysobjects.name IN (SELECT Tablename FROM dbo.SearchMenuInferiorTables (@TableName)) 
			OR dbo.sysobjects.name = @TableName 
			OR dbo.sysobjects.name IN (SELECT Tablename FROM dbo.SearchMenuSuperiorTables (@TableName)) )
		AND dbo.systypes.name IN ('char', 'nchar', 'varchar', 'nvarchar', 'text', 'ntext','bit', 'tinyint', 'smallint', 'int', 'bigint', 'real', 'float', 'money','smallmoney','decimal', 'numeric', 'datetime', 'smalldatetime')
ORDER BY dbo.sysobjects.name, dbo.syscolumns.name
/* update of the descriptions */
DECLARE @Table as varchar(50)
DECLARE @OldTable as varchar(50)
DECLARE @Column as varchar(50)
DECLARE @Description as nvarchar(1000)
DECLARE @fktable_name nvarchar(257) /* 2*128 + 1 */
DECLARE @fktable_id	int
DECLARE @fkfull_table_name	nvarchar(257) /* 2*128 + 1 */
DECLARE DescriptionCursor  CURSOR for
select TableName, ColumnName from @ItemList
open DescriptionCursor
FETCH next from DescriptionCursor into @Table, @Column
SET @OldTable = (select @Table)
WHILE @@FETCH_STATUS = 0
BEGIN
   -- This is executed as long as the previous fetch succeeds.
	set @Description = (SELECT     max(CONVERT(nvarchar(1000), [value]))
	FROM         ::fn_listextendedproperty(NULL, 'user', 'dbo', 'table', @Table, 'column', @Column) [::fn_listextendedproperty_1]) 
	update @ItemList set ColumnDescription = @Description where TableName = @Table and ColumnName = @Column
	/* setting the foreign-key values for lookup tables */
	IF  @OldTable <>  @Table
	BEGIN
		SET @fkfull_table_name = (SELECT quotename(@Table))
		SET @fktable_id = (SELECT object_id(@fkfull_table_name))
		UPDATE @ItemList SET ForeignKeyTable = convert(sysname,o1.name), ForeignKeyColumn = convert(sysname,c1.name)
		from @ItemList a, sysreferences r,  sysindexes i,
			sysobjects o1, sysobjects o2,
			syscolumns c1, syscolumns c2
		where	r.rkeyindid = i.indid
			AND r.rkeyid = i.id
			AND r.fkeyid = @fktable_id
			AND o1.id = r.rkeyid
			AND o2.id = r.fkeyid
			AND c1.id = r.rkeyid
			AND c2.id = r.fkeyid
			AND c1.colid = r.rkey1
			AND c2.colid = r.fkey1
			and o1.name like '%_Enum'
			AND convert(sysname,c2.name) = a.ColumnName
		/*print @Table
		print @OldTable
		print @Column*/
	END
	set @OldTable = (select @Table)
	
   	FETCH NEXT FROM DescriptionCursor into @Table, @Column
END
CLOSE DescriptionCursor
DEALLOCATE DescriptionCursor
/* transferring the data */
INSERT @MenuList
SELECT TableName,  ColumnName, DataType, ColumnLength, ColumnDescription, ForeignKeyTable, ForeignKeyColumn, MenuTab
FROM @ItemList
order by TableName, ColumnName
return
END


GO
GRANT SELECT ON [dbo].[SearchMenuColumns] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[SearchMenuForeignKeys]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[SearchMenuForeignKeys] (@TableName varchar(50))  
RETURNS @MenuList TABLE (
   TableName varchar(50) not null,
   ColumnName varchar(50) not null,
   ForeignKeyTable varchar(50) null,
   ForeignKeyColumn varchar(50) null)
/*Returns a result set that lists all the Tables and Foreign keys connected to the querried table.*/
AS
BEGIN
-- table variable to hold accumulated results
   DECLARE @ItemList TABLE (
   TableName varchar(50) not null,
   ColumnName varchar(50) not null,
   ForeignKeyTable varchar(50) null,
   ForeignKeyColumn varchar(50) null)
/* inserting the Data into the table */
insert into @ItemList (TableName, ColumnName)
SELECT     TOP 100 PERCENT dbo.sysobjects.name AS TableName, dbo.syscolumns.name AS ColumnName
FROM         dbo.syscolumns INNER JOIN
                   dbo.sysobjects ON dbo.syscolumns.id = dbo.sysobjects.id INNER JOIN
                   dbo.systypes ON dbo.syscolumns.xtype = dbo.systypes.xtype
WHERE     (dbo.sysobjects.xtype = 'U') AND (dbo.systypes.name <> N'sysname') 
	AND (NOT (dbo.syscolumns.name LIKE N'%Sequence')) 
	AND (
		dbo.sysobjects.name IN (SELECT Tablename FROM SearchMenuSuperiorTables ( @TableName) )
		OR dbo.sysobjects.name IN (SELECT Tablename FROM SearchMenuInferiorTables ( @TableName) )
		OR dbo.sysobjects.name = @TableName 
		)/*# ApplicationCollSearchMenuTables - Austauschen gegen Funktion !!! #*/
ORDER BY dbo.sysobjects.name, dbo.syscolumns.name
/* update of the descriptions */
DECLARE @Table as varchar(50)
DECLARE @OldTable as varchar(50)
DECLARE @Column as varchar(50)
--DECLARE @Description as nvarchar(1000)
DECLARE @fktable_name nvarchar(257) /* 2*128 + 1 */
DECLARE @fktable_id	int
DECLARE @fkfull_table_name	nvarchar(257) /* 2*128 + 1 */
DECLARE DescriptionCursor  CURSOR for
select TableName, ColumnName from @ItemList
open DescriptionCursor
FETCH next from DescriptionCursor into @Table, @Column
SET @OldTable = (select @Table)
WHILE @@FETCH_STATUS = 0
BEGIN
   -- This is executed as long as the previous fetch succeeds.
	/* setting the foreign-key values for lookup tables */
	IF  @OldTable <>  @Table
	BEGIN
		SET @fkfull_table_name = (SELECT quotename(@Table))
		SET @fktable_id = (SELECT object_id(@fkfull_table_name))
		UPDATE @ItemList SET ForeignKeyTable = convert(sysname,o1.name), ForeignKeyColumn = convert(sysname,c1.name)
		from @ItemList a, sysreferences r,  sysindexes i,
			sysobjects o1, sysobjects o2,
			syscolumns c1, syscolumns c2
		where	r.rkeyindid = i.indid
			AND r.rkeyid = i.id
			AND r.fkeyid = @fktable_id
			AND o1.id = r.rkeyid
			AND o2.id = r.fkeyid
			AND c1.id = r.rkeyid
			AND c2.id = r.fkeyid
			AND c1.colid = r.rkey1
			AND c2.colid = r.fkey1
			and o1.name not like '%_Enum'
			AND convert(sysname,c2.name) = a.ColumnName
	END
	set @OldTable = (select @Table)
	
   	FETCH NEXT FROM DescriptionCursor into @Table, @Column
END
CLOSE DescriptionCursor
DEALLOCATE DescriptionCursor
/* selecting the data */
DELETE FROM @ItemList  WHERE ForeignKeyTable IS NULL
/* transferring data to result table */
insert into @MenuList (TableName, ColumnName,  ForeignKeyTable, ForeignKeyColumn)
SELECT     TableName, ColumnName,  ForeignKeyTable, ForeignKeyColumn FROM @ItemList
WHERE ForeignKeyTable  NOT LIKE '[_]%'
AND ForeignKeyTable <> TableName
return
END

GO
GRANT SELECT ON [dbo].[SearchMenuForeignKeys] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[SearchMenuInferiorTables]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[SearchMenuInferiorTables] (@TableName varchar(50))  
RETURNS @TableList TABLE (
   TableName varchar(50) )
/*Returns a result set that lists all the Tables which are chiild tables to the querried table.*/
AS
BEGIN
-- table variable to hold accumulated results
   DECLARE @TempList TABLE (
   TableName varchar(50) not null)
/* inserting the Data into the table */
insert into @TempList (TableName)
select i.Table_name from information_Schema.Table_Constraints s,  information_Schema.Table_Constraints i, information_Schema.Referential_Constraints r
where s.Constraint_Type = 'Primary key'
and i.Constraint_name = r.Constraint_name
and r.Unique_constraint_name = s.Constraint_name
and i.Table_Name not like '%Enum'
and i.Table_Name not like '[_]%'
and i.Table_Name <> s.Table_Name
and s.Table_name = @TableName
DECLARE @Table as varchar(50)
DECLARE TableCursor  CURSOR for
select TableName from @TempList
open TableCursor
FETCH next from TableCursor into @Table
WHILE @@FETCH_STATUS = 0
BEGIN
   	-- This is executed as long as the previous fetch succeeds.
	insert into @TempList (TableName) select TableName from SearchMenuInferiorTables (@Table)
   	FETCH NEXT FROM TableCursor into @Table
END
CLOSE TableCursor
DEALLOCATE TableCursor
--insert into @TempList (TableName) values (@TableName)
/* transferring data to result table */
insert into @TableList (TableName)
SELECT   distinct  TableName FROM @TempList
return
END
GO
GRANT SELECT ON [dbo].[SearchMenuInferiorTables] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[SearchMenuOrderColumn]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[SearchMenuOrderColumn] (@TableName varchar(50))  
RETURNS @ColumnList TABLE (
   ColumnName varchar(50) not null)
/*Returns a table that lists all the columns of the querried table that can be used for ordering the records within that table.*/
AS
BEGIN
/* inserting the Data into the table */
INSERT INTO @ColumnList (ColumnName)
SELECT Column_Name FROM information_Schema.Columns 
WHERE Table_Name = @TableName
AND Data_Type IN ('char', 'nchar', 'varchar', 'nvarchar', 'text', 'ntext','bit', 'tinyint', 'smallint', 'int', 'bigint', 'real', 'float', 'money','smallmoney','decimal', 'numeric', 'datetime', 'smalldatetime')
AND Column_Name NOT LIKE '%ID'
union select ''
ORDER BY Column_Name
return
END

GO
GRANT SELECT ON [dbo].[SearchMenuOrderColumn] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[SearchMenuPrimaryKeyColumns]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[SearchMenuPrimaryKeyColumns] (@TableName varchar(50))  
RETURNS @TableList TABLE (
   TableName varchar(50),
   ColumnName varchar(50) )
/*Returns a result set that lists all the Tables which are chiild tables to the querried table.*/
AS
BEGIN
-- table variable to hold accumulated results
   DECLARE @TempList TABLE (
   TableName varchar(50) not null)
/* inserting the Data into the table */
insert into @TempList (TableName)
select i.Table_name from information_Schema.Table_Constraints s,  information_Schema.Table_Constraints i, information_Schema.Referential_Constraints r
where s.Constraint_Type = 'Primary key'
and i.Constraint_name = r.Constraint_name
and r.Unique_constraint_name = s.Constraint_name
and i.Table_Name not like '%Enum'
and i.Table_Name not like '[_]%'
and i.Table_Name <> s.Table_Name
and s.Table_name = @TableName
DECLARE @Table as varchar(50)
DECLARE TableCursor  CURSOR for
select TableName from @TempList
open TableCursor
FETCH next from TableCursor into @Table
WHILE @@FETCH_STATUS = 0
BEGIN
   	-- This is executed as long as the previous fetch succeeds.
	insert into @TempList (TableName) select TableName from SearchMenuInferiorTables (@Table)
   	FETCH NEXT FROM TableCursor into @Table
END
CLOSE TableCursor
DEALLOCATE TableCursor
--insert into @TempList (TableName) values (@TableName)
/* transferring data to result table */
insert into @TableList (TableName)
SELECT   distinct  TableName FROM @TempList
return
END
GO
GRANT SELECT ON [dbo].[SearchMenuPrimaryKeyColumns] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[SearchMenuSuperiorTables]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[SearchMenuSuperiorTables] (@TableName varchar(50))  
RETURNS @TableList TABLE (
   TableName varchar(50) )
/*Returns a result set that lists all the Tables which are chiild tables to the querried table.*/
AS
BEGIN
-- table variable to hold accumulated results
   DECLARE @TempList TABLE (
   TableName varchar(50) not null)
/* inserting the Data into the table */
insert into @TempList (TableName) 
select i.Table_name from information_Schema.Table_Constraints s,  information_Schema.Table_Constraints i, information_Schema.Referential_Constraints r
where s.Constraint_Type = 'Foreign key'
and s.Constraint_name = r.Constraint_name
and r.Unique_constraint_name = i.Constraint_name
and i.Table_Name not like '%Enum'
and i.Table_Name not like '[_]%'
and i.Table_Name <> s.Table_Name
and s.Table_name = @TableName
DECLARE @Table as varchar(50)
DECLARE TableCursor  CURSOR for
select TableName from @TempList
open TableCursor
FETCH next from TableCursor into @Table
WHILE @@FETCH_STATUS = 0
BEGIN
   	-- This is executed as long as the previous fetch succeeds.
	insert into @TempList (TableName) select TableName from SearchMenuSuperiorTables (@Table)
   	FETCH NEXT FROM TableCursor into @Table
END
CLOSE TableCursor
DEALLOCATE TableCursor
--insert into @TempList (TableName) values (@TableName)
/* transferring data to result table */
insert into @TableList (TableName)
SELECT   distinct  TableName FROM @TempList
return
END
GO
GRANT SELECT ON [dbo].[SearchMenuSuperiorTables] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[SearchMenuTables]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[SearchMenuTables] (@TableName varchar(50))  
RETURNS @MenuList TABLE (
   TableName varchar(50) not null,
   ColumnName varchar(50) not null,
   ForeignKeyTable varchar(50) null,
   ForeignKeyColumn varchar(50) null)
/*Returns a result set that lists all the Tables and Foreign keys connected to the querried item.*/
AS
BEGIN
-- table variable to hold accumulated results
   DECLARE @ItemList TABLE (
   TableName varchar(50) not null,
   ColumnName varchar(50) not null,
   ForeignKeyTable varchar(50) null,
   ForeignKeyColumn varchar(50) null)
/* inserting the Data into the table */
insert into @ItemList (TableName, ColumnName)
SELECT     TOP 100 PERCENT dbo.sysobjects.name AS TableName, dbo.syscolumns.name AS ColumnName
FROM         dbo.syscolumns INNER JOIN
                      dbo.sysobjects ON dbo.syscolumns.id = dbo.sysobjects.id INNER JOIN
                      dbo.systypes ON dbo.syscolumns.xtype = dbo.systypes.xtype
WHERE     (dbo.sysobjects.xtype = 'U') AND (dbo.systypes.name <> N'sysname') AND 
                      (NOT (dbo.syscolumns.name LIKE N'%Sequence')) AND (dbo.sysobjects.name IN (
select Table_Name from information_Schema.Tables
where Table_Type = 'Base Table'
and Table_Name not like '%Enum'
and Table_Name not like 'Application%'
and Table_Name not like 'Workbench%'
and Table_Name <> 'dtproperties'
and Table_Name not like '[_]%')) /*# Austauschen gegen Funktion !!! #*/
ORDER BY dbo.sysobjects.name, dbo.syscolumns.name
/* update of the descriptions */
DECLARE @Table as varchar(50)
DECLARE @OldTable as varchar(50)
DECLARE @Column as varchar(50)
--DECLARE @Description as nvarchar(1000)
DECLARE @fktable_name nvarchar(257) /* 2*128 + 1 */
DECLARE @fktable_id	int
DECLARE @fkfull_table_name	nvarchar(257) /* 2*128 + 1 */
DECLARE DescriptionCursor  CURSOR for
select TableName, ColumnName from @ItemList
open DescriptionCursor
FETCH next from DescriptionCursor into @Table, @Column
SET @OldTable = (select @Table)
WHILE @@FETCH_STATUS = 0
BEGIN
   -- This is executed as long as the previous fetch succeeds.
	/* setting the foreign-key values for lookup tables */
	IF  @OldTable <>  @Table
	BEGIN
		SET @fkfull_table_name = (SELECT quotename(@Table))
		SET @fktable_id = (SELECT object_id(@fkfull_table_name))
		UPDATE @ItemList SET ForeignKeyTable = convert(sysname,o1.name), ForeignKeyColumn = convert(sysname,c1.name)
		from @ItemList a, sysreferences r,  sysindexes i,
			sysobjects o1, sysobjects o2,
			syscolumns c1, syscolumns c2
		where	r.rkeyindid = i.indid
			AND r.rkeyid = i.id
			AND r.fkeyid = @fktable_id
			AND o1.id = r.rkeyid
			AND o2.id = r.fkeyid
			AND c1.id = r.rkeyid
			AND c2.id = r.fkeyid
			AND c1.colid = r.rkey1
			AND c2.colid = r.fkey1
			and o1.name not like '%_Enum'
			AND convert(sysname,c2.name) = a.ColumnName
	END
	set @OldTable = (select @Table)
	
   	FETCH NEXT FROM DescriptionCursor into @Table, @Column
END
CLOSE DescriptionCursor
DEALLOCATE DescriptionCursor
/* selecting the data */
DELETE FROM @ItemList  WHERE ForeignKeyTable IS NULL
/* transferring data to result table */
insert into @MenuList (TableName, ColumnName,  ForeignKeyTable, ForeignKeyColumn)
SELECT   distinct  TableName, ColumnName,  ForeignKeyTable, ForeignKeyColumn FROM @ItemList
WHERE ForeignKeyTable IN  (select Table_Name from information_Schema.Tables
where Table_Type = 'Base Table'
and Table_Name not like '%Enum'
and Table_Name not like 'Application%'
and Table_Name not like 'Workbench%'
and Table_Name <> 'dtproperties'
and Table_Name not like '[_]%')
AND ForeignKeyTable <> TableName
return
END
GO
GRANT SELECT ON [dbo].[SearchMenuTables] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[SearchMenuTableTabs]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[SearchMenuTableTabs] (@TableName varchar(50))  
RETURNS @TableList TABLE (
   TableName varchar(50),
   TableTab nvarchar(50) )
/*Returns a result set (table) with the name of the table and a name for a tabpage to show in the client that lists all the Tables which are chiild tables to the querried table, including the querried table.*/
AS
BEGIN
-- table variable to hold accumulated results
   DECLARE @TempList TABLE (
   TableName varchar(50) not null,
   TableTab nvarchar(50) null)
/* inserting the Data into the table */
insert into @TempList (TableName) select TableName from SearchMenuInferiorTables (@TableName)
insert into @TempList (TableName) select TableName from SearchMenuSuperiorTables (@TableName)
insert into @TempList (TableName) values (@TableName)
update @TempList set TableTab = case when TableName like 'Collection%' and len(TableName) > 10  then RTRIM( substring(TableName, 11, 50)) else 
		case when TableName like 'Identification%' then  RTRIM( 'Identification ' + lower(substring(TableName, 15, 50)))  else TableName end end
/* transferring data to result table */
insert into @TableList (TableName, TableTab)
SELECT   distinct  TableName, TableTab FROM @TempList
return
END

GO
GRANT SELECT ON [dbo].[SearchMenuTableTabs] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[StableIdentifier]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  StableIdentifier: Bugfix using StableIdentifierBase if present    ###########################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[StableIdentifier] (@ProjectID int, @CollectionSpecimenID int, @IdentificationUnitID int, @SpecimenPartID int)
RETURNS varchar (500)
/*
Returns a stable identfier for a dataset.
Relies on an entry in ProjectProxy
*/
AS
BEGIN
declare @StableIdentifierBase varchar(500)
if (select count(*) from INFORMATION_SCHEMA.ROUTINES r where r.ROUTINE_TYPE = 'FUNCTION'
and r.ROUTINE_NAME = 'StableIdentifierBase') = 1
begin 
	set @StableIdentifierBase = (SELECT dbo.[StableIdentifierBase]())
end
else 
begin
	set @StableIdentifierBase = NULL
end
set @StableIdentifierBase = (SELECT case when [StableIdentifierBase] is null or [StableIdentifierBase] = ''
	then @StableIdentifierBase--NULL -- dbo.BaseURL() -- former version used BaseURL as a default
	else [StableIdentifierBase]
	end
  FROM [dbo].[ProjectProxy]
p where p.ProjectID = @ProjectID)
if (@StableIdentifierBase not like '%/')
begin
	set @StableIdentifierBase = @StableIdentifierBase + '/'
end
declare @StableIdentifier varchar(500)
set @StableIdentifier = @StableIdentifierBase + cast(@CollectionSpecimenID as varchar) 
if (@IdentificationUnitID IS NOT NULL)
begin
	set @StableIdentifier = @StableIdentifier + '/' + cast(@IdentificationUnitID as varchar) 
	if (@SpecimenPartID IS NOT NULL)
	begin
		set @StableIdentifier = @StableIdentifier + '/' + cast(@SpecimenPartID as varchar) 
	end
end
return @StableIdentifier
END

GO
GRANT EXECUTE ON [dbo].[StableIdentifier] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[TaxonWithQualifier]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[TaxonWithQualifier]
(
	@Taxon nvarchar(500),
	@Qualifier nvarchar(50)
)
RETURNS nvarchar(500)
AS
BEGIN
/*
Test
select dbo.TaxonWithQualifier('Erysiphe DC.', 'sp.')
1. ? = vor dem Namen, ob Gattung oder intragenerische Namen
2. aff. forma (bzw.für cf. forma das gleiche):
Cribraria vulgaris aff. f. (cf. f.) similis (L.) Fr.
select dbo.TaxonWithQualifier('Cribraria vulgaris f. similis (L.) Fr.', 'cf. forma')
select dbo.TaxonWithQualifier('Cribraria vulgaris f. similis (L.) Fr.', 'aff. forma')
aff. gen (cf. gen.):
aff. (cf.) Cribraria (L.) Fr.
select dbo.TaxonWithQualifier('Cribraria (L.) Fr.', 'cf. gen.')
select dbo.TaxonWithQualifier('Cribraria (L.) Fr.', 'aff. gen.')
aff. sp. (cf. sp.)
Cribraria aff. (cf.) vulgaris (L.) Fr.
select dbo.TaxonWithQualifier('Cribraria vulgaris (L.) Fr.', 'cf. sp.')
select dbo.TaxonWithQualifier('Cribraria vulgaris (L.) Fr.', 'aff. sp.')
aff. ssp. (cf. ssp.)
Cribraria vulgaris aff. ssp. (cf. ssp.) similis (L.) Fr.
select dbo.TaxonWithQualifier('Cribraria vulgaris ssp. similis (L.) Fr.', 'cf. ssp.')
select dbo.TaxonWithQualifier('Cribraria vulgaris ssp. similis (L.) Fr.', 'aff. ssp.')
aff. var. (cf. var.)
Cribraria vulgaris aff. var. (cf. var.) similis (L.) Fr.
select dbo.TaxonWithQualifier('Cribraria vulgaris var. similis (L.) Fr.', 'cf. var.')
select dbo.TaxonWithQualifier('Cribraria vulgaris var. similis (L.) Fr.', 'aff. var.')
3. agg. (Autoren weglassen)
Cribraria splendens agg.
Cribraria spendens ssp. vulgaris agg.
select dbo.TaxonWithQualifier('Cribraria splendens', 'agg.')
select dbo.TaxonWithQualifier('Cribraria spendens ssp. vulgaris', 'agg.')
4. s.l. und s.str. (mit Autoren, ansonsten wie unter 3.)
Cribraria splendens (L.) Fr. s.str.
select dbo.TaxonWithQualifier('Cribraria splendens (L.) Fr.', 's. str.')
Cribraria splendens (L.) Fr. s.l.
select dbo.TaxonWithQualifier('Cribraria splendens (L.) Fr.', 's. l.')
Cribraria spendens ssp. vulgaris (L.) Fr. s.l..
select dbo.TaxonWithQualifier('Cribraria spendens ssp. vulgaris (L.) Fr.', 's. str.')
Cribraria spendens f. vulgaris (L.) Fr. s.str.
select dbo.TaxonWithQualifier('Cribraria spendens ssp. vulgaris (L.) Fr.', 's. l.')
5. sp. nur bei Gattungen (Autoren weglassen)
Cribraria sp.
select dbo.TaxonWithQualifier('Cribraria Fr.', 'sp.')
6. sp. nov. hinten an Namen (mit oder ohne Autoren) oder besser weglassen, würde ich eigentlich meinen
Cribraria splendens Mayr sp. nov.
select dbo.TaxonWithQualifier('Cribraria splendens Mayr', 'sp. nov.')
Cribraria spendens ssp. vulgaris sp. nov.
select dbo.TaxonWithQualifier('Cribraria splendens ssp. vulgaris Mayr', 'sp. nov.')
Cribraria spendens f. vulgaris Mayr & Müller sp. nov. 
select dbo.TaxonWithQualifier('Cribraria splendens f. vulgaris Mayr', 'sp. nov.')
*/
            if (@Qualifier = '') return @Taxon;
            set @Taxon = rtrim(ltrim(@Taxon));
            declare @_Taxon nvarchar(500);
            set @_Taxon = @Taxon;
            declare @Rank nvarchar(50);
            set @Rank = '';
            declare @Genus nvarchar(50);
            set @Genus = '';
            declare @Authors nvarchar(250);
            set @Authors = '';
            declare @IntraSpecificEpithet nvarchar(150);
            set @IntraSpecificEpithet = '';
            declare @SpeciesEpithet nvarchar(150);
            set @SpeciesEpithet = '';
            declare @QualifierText nvarchar(50);
            set @QualifierText = '';
            declare @QualifierRank nvarchar(50);
            set @QualifierRank = '';
            BEGIN
                if (len(@Taxon) > 0)
                BEGIN
                    if (charindex(' ', @Taxon) > 0)
                    BEGIN
                        SET @Rank = 'sp.';
                        SET @Genus = ltrim(rtrim(Substring(@Taxon, 1, charindex(' ', @Taxon))));
                        SET @Taxon = ltrim(rtrim(Substring(@Taxon, charindex(' ', @Taxon), 500)));
                        if (@Taxon LIKE ('(%')
                            OR upper(Substring(@Taxon, 1, 1)) COLLATE Latin1_General_CS_AS = Substring(@Taxon, 1, 1) COLLATE Latin1_General_CS_AS 
                            )
							BEGIN
								SET @Authors = ltrim(rtrim(@Taxon));
								SET @Taxon = '';
								if (@Qualifier = 'sp.')
									begin
									SET @Rank = @Qualifier;
									end
								else
									begin
									SET @Rank = 'gen.';
									end
							END
                        else
                        BEGIN
                            if (charindex(' ', @Taxon) > 0)
                            BEGIN
                                SET @SpeciesEpithet = ltrim(rtrim(Substring(@Taxon, 1, charindex(' ', @Taxon))));
                                SET @Taxon = ltrim(rtrim(Substring(@Taxon, charindex(' ', @Taxon), 500)));
                                if (PATINDEX('% var. %' COLLATE Latin1_General_CS_AS, @Taxon) > 0 OR
									PATINDEX('% ssp. %' COLLATE Latin1_General_CS_AS, @Taxon) > 0 OR
									PATINDEX('% fm. %' COLLATE Latin1_General_CS_AS, @Taxon) > 0 OR
									PATINDEX('% subvar. %' COLLATE Latin1_General_CS_AS, @Taxon) > 0 OR
									PATINDEX('% f. %' COLLATE Latin1_General_CS_AS, @Taxon) > 0)
									BEGIN
										if (PATINDEX('% var. %' COLLATE Latin1_General_CS_AS, @Taxon) > 0)
											SET @Rank = 'var.';
										else if (PATINDEX('% ssp. %' COLLATE Latin1_General_CS_AS, @Taxon) > 0)
											SET @Rank = 'ssp.';
										else if (PATINDEX('% fm. %' COLLATE Latin1_General_CS_AS, @Taxon) > 0)
											SET @Rank = 'fm.';
										else if (PATINDEX('% subvar. %' COLLATE Latin1_General_CS_AS, @Taxon) > 0)
											SET @Rank = 'subvar.';
										else if (PATINDEX('% f. %' COLLATE Latin1_General_CS_AS, @Taxon) > 0)
											SET @Rank = 'f.';
										SET @Authors = rtrim(ltrim(Substring(@Taxon, 1, patindex('% ' + @Rank + ' %', @Taxon))));
										SET @Taxon = rtrim(ltrim(Substring(@Taxon, patindex('% ' + @Rank + ' %', @Taxon) + len(@Rank) + 2, 500)));
										SET @IntraSpecificEpithet = @Taxon;
									END/**/
                                else
                                BEGIN
                                if (@Taxon like 'var.%' OR
									@Taxon like  'ssp.%' OR
									@Taxon like 'fm. %'  COLLATE Latin1_General_CS_AS OR
									@Taxon  like 'subvar. %' OR
									@Taxon like 'f. %'  COLLATE Latin1_General_CS_AS)
                                    BEGIN
                                        SET @Rank = ltrim(rtrim(Substring(@Taxon, 1, charindex('.', @Taxon) + 1)));
                                        SET @Taxon = ltrim(rtrim(Substring(@Taxon, charindex('.', @Taxon) + 1, 500)));
                                        if (charindex(' ' , @Taxon) > 0)
                                        BEGIN
                                            SET @IntraSpecificEpithet = rtrim(ltrim(Substring(@Taxon, 1, charindex(' ', @Taxon))));
                                            SET @Taxon = ltrim(rtrim(Substring(@Taxon, charindex(' ' , @Taxon), 500)));
                                        END
                                        else
                                        BEGIN
                                            SET @IntraSpecificEpithet = @Taxon;
                                            SET @Taxon = '';
                                        END
                                    END
                                    if (len(@Taxon) > 0 AND Substring(@Taxon, 1, 1) COLLATE Latin1_General_CS_AS = upper(Substring(@Taxon, 1, 1)) COLLATE Latin1_General_CS_AS)
                                        SET @Authors = @Taxon;
                                    else if (len(@Taxon) > 0)
                                    BEGIN
                                        SET @IntraSpecificEpithet = @Taxon;
                                        SET @Rank = 'ssp.';
                                    END
                                    if (len(@Authors) > 0 AND
                                        (@Authors LIKE ('%;')
                                        OR @Authors LIKE('%,')))
                                    BEGIN
                                        SET @Authors = ltrim(rtrim(Substring(@Authors, 1, len(@Authors) - 1)));
                                    END
                                END
                            END
                            else
                                SET @SpeciesEpithet = @Taxon;
                        END
                    END
                    else
                    BEGIN
                        SET @Rank = 'gen.';
                        SET @Genus = @Taxon;
                    END
                END
                IF (@Qualifier = 'aff. forma' 
                   OR @Qualifier = 'aff. gen.' 
                   OR @Qualifier = 'aff. sp.' 
                   OR @Qualifier = 'aff. ssp.'
                   OR @Qualifier = 'aff. var.')
                   BEGIN
                        SET @QualifierRank = ltrim(rtrim(Substring(@Qualifier, 6, 50)));
                        if (@QualifierRank = 'forma') set @QualifierRank = 'f.'
                        SET @QualifierText = 'aff.';
                    END
                    ELSE
                    IF (@Qualifier = 'cf. forma'
                   OR @Qualifier = 'cf. gen.'
                   OR @Qualifier = 'cf. sp.'
                   OR @Qualifier = 'cf. ssp.'
                   OR @Qualifier = 'cf. var.')
                   BEGIN
                        SET @QualifierRank = ltrim(rtrim(Substring(@Qualifier, 5, 50)));
                        if (@QualifierRank = 'forma') set @QualifierRank = 'f.'
                        SET @QualifierText = 'cf.';
                   END;
                   else
                    IF (@Qualifier = 'cf. hybrid')
                    begin
                        SET @QualifierRank = 'hybrid';
                        SET @QualifierText = 'cf.';
                        end;
                        else
                    IF (@Qualifier = '?'
                   OR @Qualifier = 'agg.'
                   OR @Qualifier = 's. l.'
                   OR @Qualifier = 's. str.'
                   OR @Qualifier = 'sp.'
                   OR @Qualifier = 'sp. nov.' -- #1 (von 2) falls Rank bei sp. nov. mit ausgegeben werden soll auskommentieren
                   OR @Qualifier = 'spp.')
                   begin
                        SET @QualifierRank = '';
                        SET @QualifierText = @Qualifier;
                        end;
                END
                SET @Taxon = '';
                if (@QualifierText = '?') SET @Taxon = '? ';
                if ((@QualifierRank = 'gen.' OR @QualifierRank = 'hybrid') AND (@QualifierText = 'aff.' OR @QualifierText = 'cf.')) 
                SET @Taxon = @QualifierText + ' ';
                SET @Taxon += @Genus + ' ';
                if (@QualifierRank = 'sp.' AND len(@QualifierText) > 0)
                    SET @Taxon += @QualifierText + ' ';
                if (len(@SpeciesEpithet) > 0)
                    SET @Taxon = @Taxon + @SpeciesEpithet + ' ';
                if (@QualifierRank <> 'sp.' AND
                    @QualifierRank <> 'gen.' AND
                    len(@QualifierRank) > 0 AND
                    len(@QualifierText) > 0 AND
                    @QualifierText <> '?' AND
                    @IntraSpecificEpithet <> @SpeciesEpithet)
                    SET @Taxon += @QualifierText + ' ' + @QualifierRank + ' ';
                if (len(@IntraSpecificEpithet) = 0)
                BEGIN
                    if (len(@Authors) > 0 AND @QualifierText <> 'agg.' AND @QualifierText <> 'sp.')
                        SET @Taxon += @Authors + ' ';
                END
                else
                BEGIN
                    if (@SpeciesEpithet = @IntraSpecificEpithet AND len(@Authors) > 0 AND @QualifierText <> 'agg.' AND @QualifierText <> 'sp.')
                        SET @Taxon += @Authors + ' ';
                    if (@QualifierRank <> 'sp.' AND
                       @QualifierRank <> 'gen.' AND
                       len(@QualifierRank) > 0 AND
                       len(@QualifierText) > 0 AND
                       @QualifierText <> '?' AND
                       @IntraSpecificEpithet = @SpeciesEpithet)
                       SET @Taxon += @QualifierText + ' ';
                    SET @Taxon += @IntraSpecificEpithet + ' ';
                    if (@SpeciesEpithet <> @IntraSpecificEpithet AND len(@Authors) > 0 AND @QualifierText <> 'agg.' AND @QualifierText <> 'sp.')
                        SET @Taxon += @Authors + ' ';
                END
                if (len(@QualifierText) > 0 AND len(@QualifierRank) = 0 AND @QualifierText <> '?')
                    SET @Taxon += @QualifierText;
            if (@Taxon = '' OR (LEN(@Taxon) < Len(@_Taxon) AND @QualifierText <> 'agg.' AND @QualifierText <> 'sp.' AND @QualifierText <> '?'))
                SET @Taxon = @_Taxon;
                return @Taxon;
END
GO
GRANT EXECUTE ON [dbo].[TaxonWithQualifier] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[TopCollectionEventID]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE FUNCTION [dbo].[TopCollectionEventID] (@CollectionEventID int)  
RETURNS int 
AS  
BEGIN 
declare @TopID int
declare @ID int
set @ID = @CollectionEventID
set @TopID = (select CollectionEventParentID from CollectionEvent where CollectionEventID = @ID)
if (@TopID = null )
	set @TopID =  @ID
else
	begin
	while ((select count(*) from CollectionEvent where CollectionEventID = @ID and CollectionEventParentID <> null) > 0)
		begin
		set @ID = (select CollectionEventParentID from CollectionEvent where CollectionEventID = @ID)
		end
	set @TopID = @ID
	end
return (@TopID)
END
GO
GRANT EXECUTE ON [dbo].[TopCollectionEventID] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[TransactionChildNodes]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  TransactionChildNodes - more missing children included (in @IDs)   ##########################################
--#####################################################################################################################

CREATE  FUNCTION [dbo].[TransactionChildNodes] (@ID int)  
RETURNS @ItemList TABLE (
	[TransactionID] [int] primary key NOT NULL,
	[ParentTransactionID] [int] NULL,
	[TransactionType] [nvarchar](50) NOT NULL,
	[TransactionTitle] [nvarchar](200) NOT NULL,
	[ReportingCategory] [nvarchar](50) NULL,
	[AdministratingCollectionID] [int] NULL,
	[MaterialDescription] [nvarchar](max) NULL,
	[MaterialSource] [nvarchar](500) NULL,
	[MaterialCategory] [nvarchar](50) NULL,
	[MaterialCollectors] [nvarchar](max) NULL,
	[FromCollectionID] [int] NULL,
	[FromTransactionPartnerName] [nvarchar](255) NULL,
	[FromTransactionPartnerAgentURI] [varchar](255) NULL,
	[FromTransactionNumber] [nvarchar](50) NULL,
	[ToCollectionID] [int] NULL,
	[ToTransactionPartnerName] [nvarchar](255) NULL,
	[ToTransactionPartnerAgentURI] [varchar](255) NULL,
	[ToTransactionNumber] [nvarchar](50) NULL,
	[ToRecipient] [nvarchar](255) NULL,
	[NumberOfUnits] [int] NULL,
	[Investigator] [nvarchar](200) NULL,
	[TransactionComment] [nvarchar](max) NULL,
	[BeginDate] [datetime] NULL,
	[AgreedEndDate] [datetime] NULL,
	[ActualEndDate] [datetime] NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[DateSupplement] [nvarchar](100) NULL
)
/*
Returns a result set that lists all the items within a hierarchy starting at the topmost item related to the given item.
MW 12.12.2016: NumberOfUnits -> int
select * FROM dbo.[TransactionChildNodes](3918)
*/
AS
BEGIN

declare @IDs TABLE (
	[TransactionID] [int] primary key NOT NULL,
	[ParentTransactionID] [int] NULL)

   insert into @IDs(TransactionID, ParentTransactionID) 
   Select distinct T.TransactionID, t.ParentTransactionID 
   from [Transaction] T 
   where t.ParentTransactionID = @ID
   and T.TransactionID <> @ID
   and T.TransactionID <> T.ParentTransactionID

   declare @i int
   set @i = (select count(*) from @IDs I where I.ParentTransactionID not in (select TransactionID from @IDs))
   while @i > 0
   begin
		insert into @IDs(TransactionID, ParentTransactionID) 
			Select distinct T.TransactionID, t.ParentTransactionID 
			from [Transaction] T, @IDs I where t.TransactionID = I.ParentTransactionID
			and T.TransactionID not in (select TransactionID from @IDs)
		insert into @IDs(TransactionID, ParentTransactionID) 
			Select distinct T.TransactionID, t.ParentTransactionID 
			from [Transaction] T, @IDs I where t.ParentTransactionID = I.TransactionID
			and T.TransactionID not in (select TransactionID from @IDs)
		set @i = (select count(*) from @IDs I, [Transaction] T where I.TransactionID = T.ParentTransactionID and T.TransactionID not in (select TransactionID from @IDs))
   end

INSERT @ItemList (TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, 
	MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, 
	ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, Investigator, TransactionComment, 
	BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, DateSupplement) 
SELECT distinct T.TransactionID, T.ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, 
	MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, 
	ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, Investigator, TransactionComment, 
	BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, DateSupplement
   FROM @IDs I, [Transaction] T 
   where I.TransactionID = T.TransactionID
   ORDER BY TransactionTitle

   RETURN
END

GO
GRANT SELECT ON [dbo].[TransactionChildNodes] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[TransactionChildNodesAccess]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  TransactionChildNodesAccess     #############################################################################
--#####################################################################################################################

CREATE  FUNCTION [dbo].[TransactionChildNodesAccess] (@ID int)  
RETURNS @ItemList TABLE (
	[TransactionID] [int] NOT NULL,
	[ParentTransactionID] [int] NULL,
	[TransactionType] [nvarchar](50) NOT NULL,
	[TransactionTitle] [nvarchar](200) NOT NULL,
	[ReportingCategory] [nvarchar](50) NULL,
	[AdministratingCollectionID] [int] NULL,
	[MaterialDescription] [nvarchar](max) NULL,
	[MaterialSource] [nvarchar](500) NULL,
	[MaterialCategory] [nvarchar](50) NULL,
	[MaterialCollectors] [nvarchar](max) NULL,
	[FromCollectionID] [int] NULL,
	[FromTransactionPartnerName] [nvarchar](255) NULL,
	[FromTransactionPartnerAgentURI] [varchar](255) NULL,
	[FromTransactionNumber] [nvarchar](50) NULL,
	[ToCollectionID] [int] NULL,
	[ToTransactionPartnerName] [nvarchar](255) NULL,
	[ToTransactionPartnerAgentURI] [varchar](255) NULL,
	[ToTransactionNumber] [nvarchar](50) NULL,
	[ToRecipient] [nvarchar](255) NULL,
	[NumberOfUnits] [int] NULL,
	[Investigator] [nvarchar](200) NULL,
	[TransactionComment] [nvarchar](max) NULL,
	[BeginDate] [datetime] NULL,
	[AgreedEndDate] [datetime] NULL,
	[ActualEndDate] [datetime] NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[Accessible] tinyint NULL
)
/*
Returns a result set that lists all the items within a hierarchy starting at the topmost item related to the given item 
where the current user has no access according to the restriction in TransactionList.
MW 12.12.2016: NumberOfUnits -> int
*/
AS
BEGIN
   declare @ParentID int
   DECLARE @TempItem TABLE (
	[TransactionID] [int] NOT NULL,
	[ParentTransactionID] [int] NULL,
	[TransactionType] [nvarchar](50) NOT NULL,
	[TransactionTitle] [nvarchar](200) NOT NULL,
	[ReportingCategory] [nvarchar](50) NULL,
	[AdministratingCollectionID] [int] NULL,
	[MaterialDescription] [nvarchar](max) NULL,
	[MaterialSource] [nvarchar](500) NULL,
	[MaterialCategory] [nvarchar](50) NULL,
	[MaterialCollectors] [nvarchar](max) NULL,
	[FromCollectionID] [int] NULL,
	[FromTransactionPartnerName] [nvarchar](255) NULL,
	[FromTransactionPartnerAgentURI] [varchar](255) NULL,
	[FromTransactionNumber] [nvarchar](50) NULL,
	[ToCollectionID] [int] NULL,
	[ToTransactionPartnerName] [nvarchar](255) NULL,
	[ToTransactionPartnerAgentURI] [varchar](255) NULL,
	[ToTransactionNumber] [nvarchar](50) NULL,
	[ToRecipient] [nvarchar](255) NULL,
	[NumberOfUnits] [int] NULL,
	[Investigator] [nvarchar](200) NULL,
	[TransactionComment] [nvarchar](max) NULL,
	[BeginDate] [datetime] NULL,
	[AgreedEndDate] [datetime] NULL,
	[ActualEndDate] [datetime] NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[Accessible] tinyint NULL
)
INSERT @TempItem ( TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, 
  MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, 
  ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, Investigator, TransactionComment, 
  BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, Accessible) 
	SELECT TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, 
  MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, 
  ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, Investigator, TransactionComment, 
  BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, 0
FROM [Transaction]   
WHERE ParentTransactionID = @ID 
  DECLARE HierarchyCursor  CURSOR for
   select TransactionID from @TempItem
   open HierarchyCursor
   FETCH next from HierarchyCursor into @ParentID
   WHILE @@FETCH_STATUS = 0
   BEGIN
	insert into @TempItem select TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, 
	  MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, 
	  ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, Investigator, TransactionComment, 
	  BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, Accessible
	from dbo.TransactionChildNodesAccess (@ParentID) where TransactionID not in (select TransactionID from @TempItem)
   	FETCH NEXT FROM HierarchyCursor into @ParentID
   END
   CLOSE HierarchyCursor
   DEALLOCATE HierarchyCursor

INSERT @ItemList (TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, 
  MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, 
  ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, Investigator, TransactionComment, 
  BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, Accessible) 
   SELECT distinct TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, 
  MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, 
  ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, Investigator, TransactionComment, 
  BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, Accessible
   FROM @TempItem ORDER BY TransactionTitle
   RETURN
END


GO
GRANT SELECT ON [dbo].[TransactionChildNodesAccess] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[TransactionCurrency]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   TransactionCurrency    #####################################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[TransactionCurrency] () RETURNS nvarchar(50) AS BEGIN RETURN '€' END
GO
GRANT EXECUTE ON [dbo].[TransactionCurrency] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[TransactionHierarchy]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  TransactionHierarchy     ####################################################################################
--#####################################################################################################################

CREATE  FUNCTION [dbo].[TransactionHierarchy] (@TransactionID int)  
RETURNS @ItemList TABLE (
	[TransactionID] [int] primary key NOT NULL,
	[ParentTransactionID] [int] NULL,
	[TransactionType] [nvarchar](50) NOT NULL,
	[TransactionTitle] [nvarchar](200) NOT NULL,
	[ReportingCategory] [nvarchar](50) NULL,
	[AdministratingCollectionID] [int] NULL,
	[MaterialDescription] [nvarchar](max) NULL,
	[MaterialSource] [nvarchar](500) NULL,
	[MaterialCategory] [nvarchar](50) NULL,
	[MaterialCollectors] [nvarchar](max) NULL,
	[FromCollectionID] [int] NULL,
	[FromTransactionPartnerName] [nvarchar](255) NULL,
	[FromTransactionPartnerAgentURI] [varchar](255) NULL,
	[FromTransactionNumber] [nvarchar](50) NULL,
	[ToCollectionID] [int] NULL,
	[ToTransactionPartnerName] [nvarchar](255) NULL,
	[ToTransactionPartnerAgentURI] [varchar](255) NULL,
	[ToTransactionNumber] [nvarchar](50) NULL,
	[ToRecipient] [nvarchar](255) NULL,
	[NumberOfUnits] [int] NULL,
	[Investigator] [nvarchar](200) NULL,
	[TransactionComment] [nvarchar](max) NULL,
	[BeginDate] [datetime] NULL,
	[AgreedEndDate] [datetime] NULL,
	[ActualEndDate] [datetime] NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[DateSupplement] [nvarchar](100) NULL
)
/*
Returns a table that lists all the transactions related to the given transaction.
MW 12.12.2016: NumberOfUnits -> int
SELECT  * FROM dbo.TransactionHierarchy(3918)
*/
AS
BEGIN
declare @TopID int
declare @i int
set @TopID = (select ParentTransactionID from [TransactionList] where TransactionID = @TransactionID) 
set @i = (select count(*) from [TransactionList] where TransactionID = @TransactionID)
if (@TopID is null )
	set @TopID =  @TransactionID
else	
	begin
	while (@i > 0)
		begin
		set @TransactionID = (select ParentTransactionID from [TransactionList] where TransactionID = @TransactionID and not ParentTransactionID is null) 
		set @i = (select count(*) from [TransactionList] where TransactionID = @TransactionID and not ParentTransactionID is null and ParentTransactionID <> @TransactionID)
		end
	set @TopID = @TransactionID
	end
INSERT @ItemList
SELECT Distinct TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, 
  MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, 
  ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, Investigator, TransactionComment, 
  BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, DateSupplement
FROM [TransactionList]
WHERE TransactionID = @TopID
INSERT @ItemList
SELECT * FROM dbo.TransactionChildNodes (@TopID) WHERE TransactionID <> @TopID
   RETURN
END

GO
GRANT SELECT ON [dbo].[TransactionHierarchy] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[TransactionHierarchyAccess]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  TransactionHierarchyAccess     ##############################################################################
--#####################################################################################################################

CREATE  FUNCTION [dbo].[TransactionHierarchyAccess] (@TransactionID int)  
RETURNS @ItemList TABLE (
	[TransactionID] [int] NOT NULL,
	[ParentTransactionID] [int] NULL,
	[TransactionType] [nvarchar](50) NOT NULL,
	[TransactionTitle] [nvarchar](200) NOT NULL,
	[ReportingCategory] [nvarchar](50) NULL,
	[AdministratingCollectionID] [int] NULL,
	[MaterialDescription] [nvarchar](max) NULL,
	[MaterialSource] [nvarchar](500) NULL,
	[MaterialCategory] [nvarchar](50) NULL,
	[MaterialCollectors] [nvarchar](max) NULL,
	[FromCollectionID] [int] NULL,
	[FromTransactionPartnerName] [nvarchar](255) NULL,
	[FromTransactionPartnerAgentURI] [varchar](255) NULL,
	[FromTransactionNumber] [nvarchar](50) NULL,
	[ToCollectionID] [int] NULL,
	[ToTransactionPartnerName] [nvarchar](255) NULL,
	[ToTransactionPartnerAgentURI] [varchar](255) NULL,
	[ToTransactionNumber] [nvarchar](50) NULL,
	[ToRecipient] [nvarchar](255) NULL,
	[NumberOfUnits] [int] NULL,
	[Investigator] [nvarchar](200) NULL,
	[TransactionComment] [nvarchar](max) NULL,
	[BeginDate] [datetime] NULL,
	[AgreedEndDate] [datetime] NULL,
	[ActualEndDate] [datetime] NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[Accessible] tinyint NULL
)
/*
Returns a table that lists all the transactions related to the given transaction.
MW 12.12.2016: NumberOfUnits -> int
*/
AS
BEGIN

-- finding the top ID
declare @TopID int
declare @i int
set @TopID = (select ParentTransactionID from [Transaction] where TransactionID = @TransactionID) 
set @i = (select count(*) from [Transaction] where TransactionID = @TransactionID)
if (@TopID is null )
	set @TopID =  @TransactionID
else	
	begin
	while (@i > 0)
		begin
		set @TransactionID = (select ParentTransactionID from [Transaction] where TransactionID = @TransactionID and not ParentTransactionID is null) 
		set @i = (select count(*) from [Transaction] where TransactionID = @TransactionID and not ParentTransactionID is null)
		end
	set @TopID = @TransactionID
	end

-- insert the top dataset
INSERT @ItemList
SELECT TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, 
  MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, 
  ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, Investigator, TransactionComment, 
  BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, 0
FROM [Transaction]
WHERE TransactionID = @TopID

-- insert the depending datasets
INSERT @ItemList
SELECT TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, 
  MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, 
  ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, Investigator, TransactionComment, 
  BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, 0 FROM dbo.TransactionChildNodesAccess (@TopID)

-- setting the Accessibility marker
UPDATE I SET I.Accessible = 1 from @ItemList I, TransactionList L
WHERE I.TransactionID = L.TransactionID
   RETURN
END


GO
GRANT SELECT ON [dbo].[TransactionHierarchyAccess] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[TransactionHierarchyAll]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  TransactionHierarchyAll        ##############################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[TransactionHierarchyAll] ()  
RETURNS @TransactionList TABLE ([TransactionID] [int] Primary key ,
	[ParentTransactionID] [int] NULL,
	[TransactionType] [nvarchar](50) NOT NULL,
	[TransactionTitle] [nvarchar](200) NOT NULL,
	[ReportingCategory] [nvarchar](50) NULL,
	[AdministratingCollectionID] [int] NOT NULL,
	[MaterialDescription] [nvarchar](max) NULL,
	[MaterialSource] [nvarchar](500) NULL,
	[MaterialCategory] [nvarchar](50) NULL,
	[MaterialCollectors] [nvarchar](max) NULL,
	[FromCollectionID] [int] NULL,
	[FromTransactionPartnerName] [nvarchar](255) NULL,
	[FromTransactionPartnerAgentURI] [varchar](255) NULL,
	[FromTransactionNumber] [nvarchar](50) NULL,
	[ToCollectionID] [int] NULL,
	[ToTransactionPartnerName] [nvarchar](255) NULL,
	[ToTransactionPartnerAgentURI] [varchar](255) NULL,
	[ToTransactionNumber] [nvarchar](50) NULL,
	[ToRecipient] [nvarchar](255) NULL,
	[NumberOfUnits] [smallint] NULL,
	[Investigator] [nvarchar](200) NULL,
	[TransactionComment] [nvarchar](max) NULL,
	[BeginDate] [datetime] NULL,
	[AgreedEndDate] [datetime] NULL,
	[ActualEndDate] [datetime] NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[DisplayText] [nvarchar](500),
	[HierarchyDisplayText] [nvarchar](500))
/*
Returns a table that lists all the transactions items related to the given analysis.
MW 02.01.2006
TEST:
SELECT * FROM DBO.TransactionHierarchyAll()
*/
AS
BEGIN
INSERT @TransactionList (TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, MaterialCategory, 
MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, ToCollectionID, 
ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, Investigator, TransactionComment, BeginDate, AgreedEndDate, 
ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, DisplayText)
SELECT DISTINCT TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, MaterialCategory, 
MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, ToCollectionID, 
ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToRecipient, ToTransactionNumber, NumberOfUnits, Investigator, TransactionComment, BeginDate, AgreedEndDate, 
ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI
, TransactionTitle
FROM [Transaction]
WHERE [Transaction].ParentTransactionID IS NULL
declare @i int
declare @iNext int
set @i = (select count(*) from [Transaction] where TransactionID not IN (select TransactionID from  @TransactionList))
while (@i > 0)
	begin
	INSERT @TransactionList (TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, MaterialCategory, 
		MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, ToCollectionID, 
		ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, Investigator, TransactionComment, BeginDate, AgreedEndDate, 
		ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, DisplayText)
	SELECT DISTINCT C.TransactionID, C.ParentTransactionID, C.TransactionType, C.TransactionTitle, C.ReportingCategory, C.AdministratingCollectionID, C.MaterialDescription, C.MaterialSource, C.MaterialCategory, 
		C.MaterialCollectors, C.FromCollectionID, C.FromTransactionPartnerName, C.FromTransactionPartnerAgentURI, C.FromTransactionNumber, C.ToCollectionID, 
		C.ToTransactionPartnerName, C.ToTransactionPartnerAgentURI, C.ToTransactionNumber, C.ToRecipient, C.NumberOfUnits, C.Investigator, C.TransactionComment, C.BeginDate, C.AgreedEndDate, 
		C.ActualEndDate, C.InternalNotes, C.ResponsibleName, C.ResponsibleAgentURI, L.DisplayText + ' | ' + C.TransactionTitle
	FROM [Transaction] C, @TransactionList L
	WHERE C.ParentTransactionID = L.TransactionID
	AND C.TransactionID NOT IN (select TransactionID from  @TransactionList)
	set @iNext = (select count(*) from [Transaction] where TransactionID not IN (select TransactionID from  @TransactionList))
	if (@iNext <> @i)
	begin
		set @i = @iNext;
	end
	else 
	begin
		set @i = 0;
	end
end
update T set HierarchyDisplayText = DisplayText
from @TransactionList T
   RETURN
END

GO
GRANT SELECT ON [dbo].[TransactionHierarchyAll] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[UserCollectionList]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  UserCollectionList - bugfix  ################################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[UserCollectionList] ()  
RETURNS @CollectionList TABLE ([CollectionID] [int] Primary key ,
	[CollectionParentID] [int] NULL ,
	[CollectionName] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionAcronym] [nvarchar] (50) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactName] [nvarchar] (500) COLLATE Latin1_General_CI_AS NULL ,
	[AdministrativeContactAgentURI] [nvarchar] (255) COLLATE Latin1_General_CI_AS NULL ,
	[Description] [nvarchar] (MAX) COLLATE Latin1_General_CI_AS NULL ,
	[Location] [nvarchar] (1000) COLLATE Latin1_General_CI_AS NULL ,
	[CollectionOwner]  [nvarchar]  (255) COLLATE Latin1_General_CI_AS NULL ,
	[DisplayOrder] [smallint])
/*
Returns a table that lists all the collections a User has access to, including the child collections.
MW 20.02.2012
Test:
select * from dbo.UserCollectionList()
*/
AS
BEGIN
	DECLARE @CollectionID INT
	DECLARE @TempAdminCollectionID TABLE (CollectionID int primary key)
	DECLARE @TempCollectionID TABLE (CollectionID int primary key)
	IF (SELECT COUNT(*) FROM CollectionUser WHERE (LoginName = USER_NAME())) > 0
	BEGIN
		IF (SELECT COUNT(*) FROM CollectionManager WHERE (LoginName = USER_NAME())) > 0
		BEGIN
			INSERT @TempCollectionID (CollectionID) 
				SELECT DISTINCT CollectionID FROM ManagerCollectionList()
		END
		INSERT @TempAdminCollectionID (CollectionID) 
		SELECT DISTINCT CollectionID FROM CollectionUser WHERE (LoginName = USER_NAME()) AND CollectionID NOT IN (SELECT CollectionID FROM @TempAdminCollectionID)

		INSERT @TempCollectionID (CollectionID) 
		SELECT CollectionID FROM CollectionUser WHERE (LoginName = USER_NAME())  AND CollectionID NOT IN (SELECT CollectionID FROM @TempCollectionID)

		DECLARE HierarchyCursor  CURSOR for
		select CollectionID from @TempAdminCollectionID
		open HierarchyCursor
		FETCH next from HierarchyCursor into @CollectionID
		WHILE @@FETCH_STATUS = 0
		BEGIN
			insert into @TempCollectionID select CollectionID 
			from dbo.CollectionChildNodes (@CollectionID) where CollectionID not in (select CollectionID from @TempCollectionID)
			FETCH NEXT FROM HierarchyCursor into @CollectionID
		END
		CLOSE HierarchyCursor
		DEALLOCATE HierarchyCursor
	END
	IF (select COUNT(*) from @TempCollectionID) = 0
	BEGIN
		INSERT @TempCollectionID (CollectionID) 
			SELECT CollectionID FROM Collection
	END
	INSERT @CollectionList
	SELECT CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder FROM dbo.Collection
	WHERE CollectionID in (SELECT CollectionID FROM @TempCollectionID)
	RETURN
END
GO
GRANT SELECT ON [dbo].[UserCollectionList] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[UserID]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   UserID() - if SUSER_SNAME is not found, try USER_NAME, overwise -1  ########################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[UserID] () RETURNS int AS 
BEGIN  
declare @ID int;  
SET @ID = (SELECT MIN(ID) FROM UserProxy U WHERE U.LoginName = SUSER_SNAME()) 
IF @ID IS NULL
begin
	SET @ID = (SELECT MIN(ID) FROM UserProxy U WHERE U.LoginName = USER_NAME()) 
end
IF @ID IS NULL
begin
	set @ID = -1
end
RETURN @ID  
END 
GO
GRANT EXECUTE ON [dbo].[UserID] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[Version]    Script Date: 06.04.2021 17:13:29 ******/

GRANT EXECUTE ON [dbo].[Version] TO [public] AS [dbo]
GO
GRANT EXECUTE ON [dbo].[Version] TO [User] AS [dbo]
GO


/****** Object:  UserDefinedFunction [dbo].[VersionClient]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   setting the Client Version    ##############################################################################
--#####################################################################################################################

CREATE FUNCTION [dbo].[VersionClient] () 
RETURNS nvarchar(11) AS 
BEGIN 
RETURN '04.03.00' 
END

GO
GRANT EXECUTE ON [dbo].[VersionClient] TO [User] AS [dbo]
GO


/****** Object:  Table [dbo].[Analysis]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Analysis](
	[AnalysisID] [int] IDENTITY(1,1) NOT NULL,
	[AnalysisParentID] [int] NULL,
	[DisplayText] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[MeasurementUnit] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[AnalysisURI] [varchar](255) NULL,
	[OnlyHierarchy] [bit] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_IdentificationAnalysis] PRIMARY KEY CLUSTERED 
(
	[AnalysisID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[Analysis] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[Analysis] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[Analysis] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Analysis] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[Analysis] TO [Editor] AS [dbo]
GO
GRANT ALTER ON [dbo].[Analysis] TO [Replicator] AS [dbo]
GO
GRANT SELECT ON [dbo].[Analysis] TO [User] AS [dbo]
GO


/****** Object:  Table [dbo].[Analysis_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Analysis_log](
	[AnalysisID] [int] NULL,
	[AnalysisParentID] [int] NULL,
	[DisplayText] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[MeasurementUnit] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[AnalysisURI] [varchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[OnlyHierarchy] [bit] NULL,
	[RowGUID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_Analysis_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO


/****** Object:  Table [dbo].[AnalysisResult]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AnalysisResult](
	[AnalysisID] [int] NOT NULL,
	[AnalysisResult] [nvarchar](255) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[Notes] [nvarchar](500) NULL,
	[LogInsertedBy] [nvarchar](50) NULL,
	[LogInsertedWhen] [smalldatetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [smalldatetime] NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_AnalysisResult] PRIMARY KEY CLUSTERED 
(
	[AnalysisID] ASC,
	[AnalysisResult] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[AnalysisResult] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[AnalysisResult] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[AnalysisResult] TO [Administrator] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[AnalysisResult] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[AnalysisResult] TO [User] AS [dbo]
GO


/****** Object:  Table [dbo].[AnalysisTaxonomicGroup]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AnalysisTaxonomicGroup](
	[AnalysisID] [int] NOT NULL,
	[TaxonomicGroup] [nvarchar](50) NOT NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_AnalysisTaxonomicGroup] PRIMARY KEY CLUSTERED 
(
	[AnalysisID] ASC,
	[TaxonomicGroup] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[AnalysisTaxonomicGroup] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[AnalysisTaxonomicGroup] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[AnalysisTaxonomicGroup] TO [Administrator] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[AnalysisTaxonomicGroup] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[AnalysisTaxonomicGroup] TO [User] AS [dbo]
GO


/****** Object:  Table [dbo].[Annotation]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Annotation](
	[AnnotationID] [int] IDENTITY(1,1) NOT NULL,
	[ReferencedAnnotationID] [int] NULL,
	[AnnotationType] [nvarchar](50) NOT NULL,
	[Title] [nvarchar](50) NULL,
	[Annotation] [nvarchar](max) NOT NULL,
	[URI] [varchar](255) NULL,
	[ReferenceDisplayText] [nvarchar](500) NULL,
	[ReferenceURI] [varchar](255) NULL,
	[SourceDisplayText] [nvarchar](500) NULL,
	[SourceURI] [varchar](255) NULL,
	[IsInternal] [bit] NULL,
	[ReferencedID] [int] NOT NULL,
	[ReferencedTable] [nvarchar](500) NOT NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_Annotation] PRIMARY KEY CLUSTERED 
(
	[AnnotationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[Annotation] TO [DataManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Annotation] TO [DataManager] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[Annotation] TO [Editor] AS [dbo]
GO
GRANT ALTER ON [dbo].[Annotation] TO [Replicator] AS [dbo]
GO
GRANT INSERT ON [dbo].[Annotation] TO [User] AS [dbo]
GO
GRANT SELECT ON [dbo].[Annotation] TO [User] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Annotation] TO [User] AS [dbo]
GO


/****** Object:  Table [dbo].[Annotation_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Annotation_log](
	[AnnotationID] [int] NULL,
	[ReferencedAnnotationID] [int] NULL,
	[AnnotationType] [nvarchar](50) NULL,
	[Title] [nvarchar](50) NULL,
	[Annotation] [nvarchar](max) NULL,
	[URI] [varchar](255) NULL,
	[ReferenceDisplayText] [nvarchar](500) NULL,
	[ReferenceURI] [varchar](255) NULL,
	[SourceDisplayText] [nvarchar](500) NULL,
	[SourceURI] [varchar](255) NULL,
	[IsInternal] [bit] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[ReferencedTable] [nvarchar](500) NULL,
	[ReferencedID] [int] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_Annotation_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[Annotation_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[Annotation_log] TO [Editor] AS [dbo]
GO


/****** Object:  Table [dbo].[AnnotationType_Enum]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AnnotationType_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_AnnotationType_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT SELECT ON [dbo].[AnnotationType_Enum] TO [User] AS [dbo]
GO


/****** Object:  Table [dbo].[AnonymCollector]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AnonymCollector](
	[CollectorsName] [nvarchar](400) NOT NULL,
	[Anonymisation] [nvarchar](50) NULL,
 CONSTRAINT [PK_AnonymCollector] PRIMARY KEY CLUSTERED 
(
	[CollectorsName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[AnonymCollector] TO [CacheAdmin] AS [dbo]
GO
GRANT INSERT ON [dbo].[AnonymCollector] TO [CacheAdmin] AS [dbo]
GO
GRANT UPDATE ON [dbo].[AnonymCollector] TO [CacheAdmin] AS [dbo]
GO
GRANT SELECT ON [dbo].[AnonymCollector] TO [CacheUser] AS [dbo]
GO


/****** Object:  Table [dbo].[ApplicationSearchSelectionStrings]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ApplicationSearchSelectionStrings](
	[UserName] [varchar](50) NOT NULL,
	[SQLStringIdentifier] [varchar](50) NOT NULL,
	[ItemTable] [varchar](50) NULL,
	[SQLString] [varchar](max) NULL,
	[Description] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
 CONSTRAINT [PK_ApplicationCollItemSelectionStrings] PRIMARY KEY CLUSTERED 
(
	[UserName] ASC,
	[SQLStringIdentifier] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[ApplicationSearchSelectionStrings] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[ApplicationSearchSelectionStrings] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[ApplicationSearchSelectionStrings] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[ApplicationSearchSelectionStrings] TO [User] AS [dbo]
GO


/****** Object:  Table [dbo].[CacheDatabase]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CacheDatabase](
	[Server] [varchar](50) NOT NULL,
	[DatabaseName] [varchar](50) NOT NULL,
	[Port] [smallint] NOT NULL,
	[Version] [varchar](50) NULL,
 CONSTRAINT [PK_CacheDatabase] PRIMARY KEY CLUSTERED 
(
	[Server] ASC,
	[DatabaseName] ASC,
	[Port] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT SELECT ON [dbo].[CacheDatabase] TO [Administrator] AS [dbo]
GO


/****** Object:  Table [dbo].[CacheDatabase2]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CacheDatabase2](
	[Server] [varchar](50) NOT NULL,
	[DatabaseName] [varchar](50) NOT NULL,
	[Port] [smallint] NOT NULL,
	[Version] [varchar](50) NULL,
 CONSTRAINT [PK_CacheDatabase2] PRIMARY KEY CLUSTERED 
(
	[Server] ASC,
	[DatabaseName] ASC,
	[Port] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CacheDatabase2] TO [CacheAdmin] AS [dbo]
GO
GRANT SELECT ON [dbo].[CacheDatabase2] TO [CacheUser] AS [dbo]
GO


/****** Object:  Table [dbo].[CollCircumstances_Enum]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollCircumstances_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollCircumstances_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT SELECT ON [dbo].[CollCircumstances_Enum] TO [User] AS [dbo]
GO


/****** Object:  Table [dbo].[CollCollectionType_Enum]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollCollectionType_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[Icon] [image] NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollCollectionType_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollCollectionType_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollCollectionType_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollCollectionType_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollCollectionType_Enum] TO [User] AS [dbo]
GO


/****** Object:  Table [dbo].[CollDateCategory_Enum]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollDateCategory_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_IdentificationDateCategory_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollDateCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollDateCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollDateCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollDateCategory_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[Collection]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Collection](
	[CollectionID] [int] IDENTITY(1,1) NOT NULL,
	[CollectionParentID] [int] NULL,
	[CollectionName] [nvarchar](255) NOT NULL,
	[CollectionAcronym] [nvarchar](10) NULL,
	[AdministrativeContactName] [nvarchar](500) NULL,
	[AdministrativeContactAgentURI] [varchar](255) NULL,
	[Description] [nvarchar](max) NULL,
	[Location] [nvarchar](255) NULL,
	[CollectionOwner] [nvarchar](255) NULL,
	[DisplayOrder] [smallint] NULL,
	[Type] [nvarchar](50) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_Collection] PRIMARY KEY CLUSTERED 
(
	[CollectionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[Collection] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[Collection] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[Collection] TO [CollectionManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[Collection] TO [CollectionManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Collection] TO [CollectionManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[Collection] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Collection] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[Collection] TO [Editor] AS [dbo]
GO
GRANT ALTER ON [dbo].[Collection] TO [Replicator] AS [dbo]
GO
GRANT SELECT ON [dbo].[Collection] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[Collection_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Collection_log](
	[CollectionID] [int] NULL,
	[CollectionParentID] [int] NULL,
	[CollectionName] [nvarchar](255) NULL,
	[CollectionAcronym] [nvarchar](10) NULL,
	[AdministrativeContactName] [nvarchar](500) NULL,
	[AdministrativeContactAgentURI] [varchar](255) NULL,
	[Description] [nvarchar](max) NULL,
	[Location] [nvarchar](255) NULL,
	[CollectionOwner] [nvarchar](255) NULL,
	[DisplayOrder] [smallint] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[Type] [nvarchar](50) NULL,
 CONSTRAINT [PK_Collection_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[Collection_log] TO [CollectionManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[Collection_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[Collection_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionAgent]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionAgent](
	[CollectionSpecimenID] [int] NOT NULL,
	[CollectorsName] [nvarchar](255) NOT NULL,
	[CollectorsAgentURI] [varchar](255) NULL,
	[CollectorsSequence] [datetime2](7) NULL,
	[CollectorsNumber] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionAgent2] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[CollectorsName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionAgent] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[CollectionAgent] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionAgent] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionAgent] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionAgent] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionAgent] TO [Typist] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionAgent] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionAgent] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionAgent_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionAgent_log](
	[CollectionSpecimenID] [int] NULL,
	[CollectorsName] [nvarchar](255) NULL,
	[CollectorsAgentURI] [varchar](255) NULL,
	[CollectorsSequence] [datetime2](7) NULL,
	[CollectorsNumber] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[xx_IsAvailable] [bit] NULL,
	[RowGUID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_CollectionAgent_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionAgent_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionAgent_log] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionAgent_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionAgent_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEvent]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEvent](
	[CollectionEventID] [int] IDENTITY(1,1) NOT NULL,
	[Version] [int] NOT NULL,
	[SeriesID] [int] NULL,
	[CollectorsEventNumber] [nvarchar](50) NULL,
	[CollectionDate] [datetime] NULL,
	[CollectionDay] [dbo].[dtDay] NULL,
	[CollectionMonth] [dbo].[dtMonth] NULL,
	[CollectionYear] [smallint] NULL,
	[CollectionEndDay] [dbo].[dtDay] NULL,
	[CollectionEndMonth] [dbo].[dtMonth] NULL,
	[CollectionEndYear] [smallint] NULL,
	[CollectionDateSupplement] [nvarchar](100) NULL,
	[CollectionDateCategory] [nvarchar](50) NULL,
	[CollectionTime] [varchar](50) NULL,
	[CollectionTimeSpan] [varchar](50) NULL,
	[LocalityDescription] [nvarchar](max) NULL,
	[LocalityVerbatim] [nvarchar](max) NULL,
	[HabitatDescription] [nvarchar](max) NULL,
	[ReferenceTitle] [nvarchar](255) NULL,
	[ReferenceURI] [varchar](255) NULL,
	[ReferenceDetails] [nvarchar](50) NULL,
	[CollectingMethod] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[CountryCache] [nvarchar](50) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[DataWithholdingReasonDate] [nvarchar](50) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionEvent] PRIMARY KEY CLUSTERED 
(
	[CollectionEventID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionEvent] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[CollectionEvent] TO [DataManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEvent] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionEvent] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionEvent] TO [Editor] AS [dbo]
GO
GRANT ALTER ON [dbo].[CollectionEvent] TO [Replicator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionEvent] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEvent] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEvent_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEvent_log](
	[CollectionEventID] [int] NULL,
	[Version] [int] NULL,
	[SeriesID] [int] NULL,
	[CollectorsEventNumber] [nvarchar](50) NULL,
	[CollectionDate] [datetime] NULL,
	[CollectionDay] [tinyint] NULL,
	[CollectionMonth] [tinyint] NULL,
	[CollectionYear] [smallint] NULL,
	[CollectionDateSupplement] [nvarchar](100) NULL,
	[CollectionDateCategory] [nvarchar](50) NULL,
	[CollectionTime] [varchar](50) NULL,
	[CollectionTimeSpan] [varchar](50) NULL,
	[LocalityDescription] [nvarchar](max) NULL,
	[HabitatDescription] [nvarchar](max) NULL,
	[ReferenceTitle] [nvarchar](255) NULL,
	[ReferenceURI] [varchar](255) NULL,
	[CollectingMethod] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[CountryCache] [nvarchar](50) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[IsAvailable] [bit] NULL,
	[ExpeditionID] [int] NULL,
	[ReferenceDetails] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LocalityVerbatim] [nvarchar](max) NULL,
	[CollectionEndDay] [dbo].[dtDay] NULL,
	[CollectionEndMonth] [dbo].[dtMonth] NULL,
	[CollectionEndYear] [smallint] NULL,
	[DataWithholdingReasonDate] [nvarchar](50) NULL,
 CONSTRAINT [PK_CollectionEvent_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionEvent_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEvent_log] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEvent_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEvent_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventImage]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventImage](
	[CollectionEventID] [int] NOT NULL,
	[URI] [varchar](255) NOT NULL,
	[ResourceURI] [varchar](255) NULL,
	[ImageType] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[Description] [xml] NULL,
	[Title] [nvarchar](500) NULL,
	[IPR] [nvarchar](500) NULL,
	[CreatorAgent] [nvarchar](500) NULL,
	[CreatorAgentURI] [varchar](255) NULL,
	[CopyrightStatement] [nvarchar](500) NULL,
	[LicenseType] [nvarchar](500) NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[LicenseHolder] [nvarchar](500) NULL,
	[LicenseHolderAgentURI] [nvarchar](500) NULL,
	[LicenseYear] [nvarchar](50) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionEventImage] PRIMARY KEY CLUSTERED 
(
	[CollectionEventID] ASC,
	[URI] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionEventImage] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[CollectionEventImage] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEventImage] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionEventImage] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionEventImage] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEventImage] TO [Typist] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionEventImage] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventImage] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventImage_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventImage_log](
	[CollectionEventID] [int] NULL,
	[URI] [varchar](255) NULL,
	[ResourceURI] [varchar](255) NULL,
	[ImageType] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[Description] [xml] NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[Title] [nvarchar](500) NULL,
	[IPR] [nvarchar](500) NULL,
	[CreatorAgent] [nvarchar](500) NULL,
	[CreatorAgentURI] [varchar](255) NULL,
	[CopyrightStatement] [nvarchar](500) NULL,
	[LicenseType] [nvarchar](500) NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[LicenseHolder] [nvarchar](500) NULL,
	[LicenseHolderAgentURI] [nvarchar](500) NULL,
	[LicenseYear] [nvarchar](50) NULL,
 CONSTRAINT [PK_CollectionEventImage_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionEventImage_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventImage_log] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEventImage_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventImage_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventLocalisation]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventLocalisation](
	[CollectionEventID] [int] NOT NULL,
	[LocalisationSystemID] [int] NOT NULL,
	[Location1] [nvarchar](255) NULL,
	[Location2] [nvarchar](255) NULL,
	[LocationAccuracy] [nvarchar](50) NULL,
	[LocationNotes] [nvarchar](max) NULL,
	[DeterminationDate] [smalldatetime] NULL,
	[DistanceToLocation] [varchar](50) NULL,
	[DirectionToLocation] [varchar](50) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[Geography] [geography] NULL,
	[RecordingMethod] [nvarchar](500) NULL,
	[AverageAltitudeCache] [float] NULL,
	[AverageLatitudeCache] [float] NULL,
	[AverageLongitudeCache] [float] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionLocalisation] PRIMARY KEY CLUSTERED 
(
	[CollectionEventID] ASC,
	[LocalisationSystemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionEventLocalisation] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionEventLocalisation] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEventLocalisation] TO [Typist] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionEventLocalisation] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventLocalisation] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventLocalisation_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventLocalisation_log](
	[CollectionEventID] [int] NULL,
	[LocalisationSystemID] [int] NULL,
	[Location1] [nvarchar](255) NULL,
	[Location2] [nvarchar](255) NULL,
	[LocationAccuracy] [nvarchar](50) NULL,
	[LocationNotes] [nvarchar](max) NULL,
	[DeterminationDate] [smalldatetime] NULL,
	[DistanceToLocation] [varchar](50) NULL,
	[DirectionToLocation] [varchar](50) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[AverageAltitudeCache] [float] NULL,
	[AverageLatitudeCache] [float] NULL,
	[AverageLongitudeCache] [float] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[Geography] [geography] NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NULL,
	[RecordingMethod] [nvarchar](500) NULL,
 CONSTRAINT [PK_CollectionEventLocalisation_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionEventLocalisation_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventLocalisation_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventMethod]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventMethod](
	[CollectionEventID] [int] NOT NULL,
	[MethodID] [int] NOT NULL,
	[MethodMarker] [nvarchar](50) NOT NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionEventMethod] PRIMARY KEY CLUSTERED 
(
	[CollectionEventID] ASC,
	[MethodID] ASC,
	[MethodMarker] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionEventMethod] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEventMethod] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionEventMethod] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionEventMethod] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventMethod] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventMethod_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventMethod_log](
	[CollectionEventID] [int] NULL,
	[MethodID] [int] NULL,
	[MethodMarker] [nvarchar](50) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionEventMethod_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionEventMethod_log] TO [Administrator] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventParameterValue]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventParameterValue](
	[CollectionEventID] [int] NOT NULL,
	[MethodID] [int] NOT NULL,
	[MethodMarker] [nvarchar](50) NOT NULL,
	[ParameterID] [int] NOT NULL,
	[Value] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogInsertedWhen] [datetime] NULL,
	[LogInsertedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_CollectionEventParameterValue] PRIMARY KEY CLUSTERED 
(
	[CollectionEventID] ASC,
	[MethodID] ASC,
	[ParameterID] ASC,
	[MethodMarker] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionEventParameterValue] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEventParameterValue] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionEventParameterValue] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionEventParameterValue] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventParameterValue] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventParameterValue_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventParameterValue_log](
	[CollectionEventID] [int] NULL,
	[MethodID] [int] NULL,
	[MethodMarker] [nvarchar](50) NULL,
	[ParameterID] [int] NULL,
	[Value] [nvarchar](max) NULL,
	[LogInsertedWhen] [datetime] NULL,
	[LogInsertedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[Notes] [nvarchar](max) NULL,
 CONSTRAINT [PK_CollectionEventParameterValue_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionEventParameterValue_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventParameterValue_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventProperty]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventProperty](
	[CollectionEventID] [int] NOT NULL,
	[PropertyID] [int] NOT NULL,
	[DisplayText] [nvarchar](255) NULL,
	[PropertyURI] [varchar](255) NULL,
	[PropertyHierarchyCache] [nvarchar](max) NULL,
	[PropertyValue] [nvarchar](255) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[Notes] [nvarchar](max) NULL,
	[AverageValueCache] [float] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionEventCharacter] PRIMARY KEY CLUSTERED 
(
	[CollectionEventID] ASC,
	[PropertyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionEventProperty] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionEventProperty] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEventProperty] TO [Typist] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionEventProperty] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventProperty] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventProperty_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventProperty_log](
	[CollectionEventID] [int] NULL,
	[PropertyID] [int] NULL,
	[DisplayText] [nvarchar](255) NULL,
	[PropertyURI] [varchar](255) NULL,
	[PropertyHierarchyCache] [nvarchar](max) NULL,
	[PropertyValue] [nvarchar](255) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[Notes] [nvarchar](max) NULL,
	[AverageValueCache] [float] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[RowGUID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_CollectionEventProperty_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionEventProperty_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventProperty_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventRegulation]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventRegulation](
	[CollectionEventID] [int] NOT NULL,
	[Regulation] [nvarchar](400) NOT NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionEventRegulation] PRIMARY KEY CLUSTERED 
(
	[CollectionEventID] ASC,
	[Regulation] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionEventRegulation] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[CollectionEventRegulation] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEventRegulation] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionEventRegulation] TO [Editor] AS [dbo]
GO
GRANT DELETE ON [dbo].[CollectionEventRegulation] TO [RegulationManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEventRegulation] TO [RegulationManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionEventRegulation] TO [RegulationManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventRegulation] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventRegulation_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventRegulation_log](
	[CollectionEventID] [int] NULL,
	[RegulationID] [int] NULL,
	[Regulation] [nvarchar](500) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_CollectionEventRegulation_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionEventRegulation_log] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEventRegulation_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventRegulation_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventSeries]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventSeries](
	[SeriesID] [int] IDENTITY(-1,-1) NOT NULL,
	[SeriesParentID] [int] NULL,
	[Description] [nvarchar](max) NOT NULL,
	[SeriesCode] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[Geography] [geography] NULL,
	[DateStart] [datetime] NULL,
	[DateEnd] [datetime] NULL,
	[DateCache] [datetime] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionEventSeries] PRIMARY KEY CLUSTERED 
(
	[SeriesID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionEventSeries] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEventSeries] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionEventSeries] TO [Editor] AS [dbo]
GO
GRANT ALTER ON [dbo].[CollectionEventSeries] TO [Replicator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionEventSeries] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventSeries] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventSeries_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventSeries_log](
	[SeriesID] [int] NULL,
	[SeriesParentID] [int] NULL,
	[Description] [nvarchar](max) NULL,
	[SeriesCode] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[DateCache] [datetime] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[Geography] [geography] NULL,
	[DateStart] [datetime] NULL,
	[DateEnd] [datetime] NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NULL,
 CONSTRAINT [PK_CollectionEventSeries_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionEventSeries_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventSeries_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventSeriesImage]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventSeriesImage](
	[SeriesID] [int] NOT NULL,
	[URI] [varchar](255) NOT NULL,
	[ResourceURI] [varchar](255) NULL,
	[ImageType] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[Description] [xml] NULL,
	[Title] [nvarchar](500) NULL,
	[IPR] [nvarchar](500) NULL,
	[CreatorAgent] [nvarchar](500) NULL,
	[CreatorAgentURI] [varchar](255) NULL,
	[CopyrightStatement] [nvarchar](500) NULL,
	[LicenseType] [nvarchar](500) NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[LicenseHolder] [nvarchar](500) NULL,
	[LicenseHolderAgentURI] [nvarchar](500) NULL,
	[LicenseYear] [nvarchar](50) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionEventSeriesImage] PRIMARY KEY CLUSTERED 
(
	[SeriesID] ASC,
	[URI] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionEventSeriesImage] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionEventSeriesImage] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionEventSeriesImage] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionEventSeriesImage] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionEventSeriesImage] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionEventSeriesImage_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionEventSeriesImage_log](
	[SeriesID] [int] NULL,
	[URI] [varchar](255) NULL,
	[ResourceURI] [varchar](255) NULL,
	[ImageType] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[Description] [xml] NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[Title] [nvarchar](500) NULL,
	[IPR] [nvarchar](500) NULL,
	[CreatorAgent] [nvarchar](500) NULL,
	[CreatorAgentURI] [varchar](255) NULL,
	[CopyrightStatement] [nvarchar](500) NULL,
	[LicenseType] [nvarchar](500) NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[LicenseHolder] [nvarchar](500) NULL,
	[LicenseHolderAgentURI] [nvarchar](500) NULL,
	[LicenseYear] [nvarchar](50) NULL,
 CONSTRAINT [PK_CollectionEventSeriesImage_log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CollectionExternalDatasource]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionExternalDatasource](
	[ExternalDatasourceID] [int] IDENTITY(1,1) NOT NULL,
	[ExternalDatasourceName] [nvarchar](255) NULL,
	[ExternalDatasourceVersion] [nvarchar](255) NULL,
	[Rights] [nvarchar](500) NULL,
	[ExternalDatasourceAuthors] [nvarchar](200) NULL,
	[ExternalDatasourceURI] [nvarchar](300) NULL,
	[ExternalDatasourceInstitution] [nvarchar](300) NULL,
	[InternalNotes] [nvarchar](1500) NULL,
	[ExternalAttribute_NameID] [nvarchar](255) NULL,
	[PreferredSequence] [tinyint] NULL,
	[Disabled] [bit] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionExternalDatasource] PRIMARY KEY CLUSTERED 
(
	[ExternalDatasourceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionExternalDatasource] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionExternalDatasource] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionExternalDatasource] TO [Administrator] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionExternalDatasource] TO [Editor] AS [dbo]
GO
GRANT ALTER ON [dbo].[CollectionExternalDatasource] TO [Replicator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionExternalDatasource] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionExternalDatasource_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionExternalDatasource_log](
	[ExternalDatasourceID] [int] NULL,
	[ExternalDatasourceName] [nvarchar](255) NULL,
	[ExternalDatasourceVersion] [nvarchar](255) NULL,
	[Rights] [nvarchar](500) NULL,
	[ExternalDatasourceAuthors] [nvarchar](200) NULL,
	[ExternalDatasourceURI] [nvarchar](300) NULL,
	[ExternalDatasourceInstitution] [nvarchar](300) NULL,
	[InternalNotes] [nvarchar](1500) NULL,
	[ExternalAttribute_NameID] [nvarchar](255) NULL,
	[PreferredSequence] [tinyint] NULL,
	[Disabled] [bit] NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_CollectionExternalDatasource_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CollectionImage]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionImage](
	[CollectionID] [int] NOT NULL,
	[URI] [varchar](255) NOT NULL,
	[ImageType] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[Description] [xml] NULL,
	[Title] [nvarchar](500) NULL,
	[IPR] [nvarchar](500) NULL,
	[CreatorAgent] [nvarchar](500) NULL,
	[CreatorAgentURI] [varchar](255) NULL,
	[CopyrightStatement] [nvarchar](500) NULL,
	[LicenseType] [nvarchar](500) NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[LicenseHolder] [nvarchar](500) NULL,
	[LicenseHolderAgentURI] [nvarchar](500) NULL,
	[LicenseYear] [nvarchar](50) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[LogInsertedWhen] [datetime] NULL,
	[LogInsertedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_CollectionImage] PRIMARY KEY CLUSTERED 
(
	[CollectionID] ASC,
	[URI] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionImage] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionImage] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionImage] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionImage] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[CollectionImage] TO [CollectionManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionImage] TO [CollectionManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionImage] TO [CollectionManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionImage] TO [CollectionManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionImage] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionImage] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionImage] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionImage] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionImage_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionImage_log](
	[CollectionID] [int] NULL,
	[URI] [varchar](255) NULL,
	[ImageType] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[LogInsertedWhen] [datetime] NULL,
	[LogInsertedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[Description] [xml] NULL,
	[Title] [nvarchar](500) NULL,
	[IPR] [nvarchar](500) NULL,
	[CreatorAgent] [nvarchar](500) NULL,
	[CreatorAgentURI] [varchar](255) NULL,
	[CopyrightStatement] [nvarchar](500) NULL,
	[LicenseType] [nvarchar](500) NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[LicenseHolder] [nvarchar](500) NULL,
	[LicenseHolderAgentURI] [nvarchar](500) NULL,
	[LicenseYear] [nvarchar](50) NULL,
 CONSTRAINT [PK_CollectionImage_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionImage_log] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionImage_log] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionImage_log] TO [CollectionManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionImage_log] TO [CollectionManager] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionManager]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionManager](
	[LoginName] [nvarchar](50) NOT NULL,
	[AdministratingCollectionID] [int] NOT NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionManager] PRIMARY KEY CLUSTERED 
(
	[LoginName] ASC,
	[AdministratingCollectionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionManager] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionManager] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionManager] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionManager] TO [CollectionManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionManager] TO [CollectionManager] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionManager] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionManager] TO [Requester] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionProject]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionProject](
	[CollectionSpecimenID] [int] NOT NULL,
	[ProjectID] [int] NOT NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionProject] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[ProjectID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionProject] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[CollectionProject] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionProject] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionProject] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionProject] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionProject] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionProject_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionProject_log](
	[CollectionSpecimenID] [int] NULL,
	[ProjectID] [int] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_CollectionProject_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionProject_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionProject_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionRequester]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionRequester](
	[LoginName] [nvarchar](50) NOT NULL,
	[AdministratingCollectionID] [int] NOT NULL,
	[IncludeSubcollections] [bit] NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionRequester] PRIMARY KEY CLUSTERED 
(
	[LoginName] ASC,
	[AdministratingCollectionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionRequester] TO [CollectionManager] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionRequester] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimen]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimen](
	[CollectionSpecimenID] [int] IDENTITY(1,1) NOT NULL,
	[Version] [int] NOT NULL,
	[CollectionEventID] [int] NULL,
	[CollectionID] [int] NULL,
	[AccessionNumber] [nvarchar](50) NULL,
	[AccessionDate] [datetime] NULL,
	[AccessionDay] [tinyint] NULL,
	[AccessionMonth] [tinyint] NULL,
	[AccessionYear] [smallint] NULL,
	[AccessionDateSupplement] [nvarchar](255) NULL,
	[AccessionDateCategory] [nvarchar](50) NULL,
	[DepositorsName] [nvarchar](255) NULL,
	[DepositorsAgentURI] [varchar](255) NULL,
	[DepositorsAccessionNumber] [nvarchar](50) NULL,
	[LabelTitle] [nvarchar](max) NULL,
	[LabelType] [nvarchar](50) NULL,
	[LabelTranscriptionState] [nvarchar](50) NULL,
	[LabelTranscriptionNotes] [nvarchar](255) NULL,
	[ExsiccataURI] [varchar](255) NULL,
	[ExsiccataAbbreviation] [nvarchar](255) NULL,
	[OriginalNotes] [nvarchar](max) NULL,
	[AdditionalNotes] [nvarchar](max) NULL,
	[Problems] [nvarchar](255) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[ExternalDatasourceID] [int] NULL,
	[ExternalIdentifier] [nvarchar](100) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ReferenceTitle] [nvarchar](255) NULL,
	[ReferenceURI] [varchar](255) NULL,
	[ReferenceDetails] [nvarchar](50) NULL,
 CONSTRAINT [PK_CollectionSpecimen_1] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionSpecimen] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[CollectionSpecimen] TO [DataManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimen] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimen] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionSpecimen] TO [Editor] AS [dbo]
GO
GRANT ALTER ON [dbo].[CollectionSpecimen] TO [Replicator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimen] TO [Typist] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimen] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimen] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimen_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimen_log](
	[CollectionSpecimenID] [int] NULL,
	[Version] [int] NULL,
	[CollectionEventID] [int] NULL,
	[CollectionID] [int] NULL,
	[AccessionNumber] [nvarchar](50) NULL,
	[AccessionDate] [datetime] NULL,
	[AccessionDay] [tinyint] NULL,
	[AccessionMonth] [tinyint] NULL,
	[AccessionYear] [smallint] NULL,
	[AccessionDateSupplement] [nvarchar](255) NULL,
	[AccessionDateCategory] [nvarchar](50) NULL,
	[DepositorsName] [nvarchar](255) NULL,
	[DepositorsAgentURI] [varchar](255) NULL,
	[DepositorsAccessionNumber] [nvarchar](50) NULL,
	[LabelTitle] [nvarchar](max) NULL,
	[LabelType] [nvarchar](50) NULL,
	[LabelTranscriptionState] [nvarchar](50) NULL,
	[LabelTranscriptionNotes] [nvarchar](255) NULL,
	[ExsiccataURI] [varchar](255) NULL,
	[ExsiccataAbbreviation] [nvarchar](255) NULL,
	[OriginalNotes] [nvarchar](max) NULL,
	[AdditionalNotes] [nvarchar](max) NULL,
	[ReferenceTitle] [nvarchar](255) NULL,
	[ReferenceURI] [varchar](255) NULL,
	[Problems] [nvarchar](255) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[IsAvailable] [bit] NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[ExternalDatasourceID] [int] NULL,
	[ExternalIdentifier] [nvarchar](100) NULL,
	[ReferenceDetails] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_CollectionSpecimen_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionSpecimen_log] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimen_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimen_log] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimen_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimen_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenImage]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenImage](
	[CollectionSpecimenID] [int] NOT NULL,
	[URI] [varchar](255) NOT NULL,
	[ResourceURI] [varchar](255) NULL,
	[SpecimenPartID] [int] NULL,
	[IdentificationUnitID] [int] NULL,
	[ImageType] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[Description] [xml] NULL,
	[Title] [nvarchar](500) NULL,
	[IPR] [nvarchar](500) NULL,
	[CreatorAgent] [nvarchar](500) NULL,
	[CreatorAgentURI] [varchar](255) NULL,
	[CopyrightStatement] [nvarchar](500) NULL,
	[LicenseType] [nvarchar](500) NULL,
	[LicenseURI] [varchar](500) NULL,
	[LicenseHolder] [nvarchar](500) NULL,
	[LicenseHolderAgentURI] [nvarchar](500) NULL,
	[LicenseYear] [nvarchar](50) NULL,
	[LicenseNotes] [nvarchar](500) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[DisplayOrder] [int] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionSpecimenImage] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[URI] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenImage] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenImage] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenImage] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenImage] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionSpecimenImage] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenImage] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenImage] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenImage] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenImage_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenImage_log](
	[CollectionSpecimenID] [int] NULL,
	[URI] [varchar](255) NULL,
	[ResourceURI] [varchar](255) NULL,
	[SpecimenPartID] [int] NULL,
	[IdentificationUnitID] [int] NULL,
	[ImageType] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[Description] [xml] NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[Title] [nvarchar](500) NULL,
	[IPR] [nvarchar](500) NULL,
	[CreatorAgent] [nvarchar](500) NULL,
	[CreatorAgentURI] [varchar](255) NULL,
	[CopyrightStatement] [nvarchar](500) NULL,
	[LicenseType] [nvarchar](500) NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[LicenseHolder] [nvarchar](500) NULL,
	[LicenseHolderAgentURI] [nvarchar](500) NULL,
	[LicenseYear] [nvarchar](50) NULL,
	[DisplayOrder] [int] NULL,
	[LicenseNotes] [nvarchar](500) NULL,
	[LicenseURI] [varchar](500) NULL,
 CONSTRAINT [PK_CollectionSpecimenImage_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenImage_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenImage_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenImageProperty]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenImageProperty](
	[CollectionSpecimenID] [int] NOT NULL,
	[URI] [varchar](255) NOT NULL,
	[Property] [varchar](255) NOT NULL,
	[Description] [nvarchar](max) NULL,
	[ImageArea] [geometry] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionSpecimenImageProperty] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[URI] ASC,
	[Property] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenImageProperty] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenImageProperty] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenImageProperty] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenImageProperty] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenImageProperty_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenImageProperty_log](
	[CollectionSpecimenID] [int] NULL,
	[URI] [varchar](255) NULL,
	[Property] [varchar](255) NULL,
	[Description] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[ImageArea] [geometry] NULL,
 CONSTRAINT [PK_CollectionSpecimenImageProperty_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenImageProperty_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenImageProperty_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenPart]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenPart](
	[CollectionSpecimenID] [int] NOT NULL,
	[SpecimenPartID] [int] IDENTITY(1,1) NOT NULL,
	[DerivedFromSpecimenPartID] [int] NULL,
	[PreparationMethod] [nvarchar](max) NULL,
	[PreparationDate] [datetime] NULL,
	[AccessionNumber] [nvarchar](50) NULL,
	[PartSublabel] [nvarchar](50) NULL,
	[CollectionID] [int] NOT NULL,
	[MaterialCategory] [nvarchar](50) NOT NULL,
	[StorageLocation] [nvarchar](255) NULL,
	[Stock] [float] NULL,
	[StockUnit] [nvarchar](50) NULL,
	[StorageContainer] [nvarchar](500) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[Notes] [nvarchar](max) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionSpecimenPart] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[SpecimenPartID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenPart] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionSpecimenPart] TO [Editor] AS [dbo]
GO
GRANT ALTER ON [dbo].[CollectionSpecimenPart] TO [Replicator] AS [dbo]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenPart] TO [StorageManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenPart] TO [StorageManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenPart] TO [StorageManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenPart] TO [Typist] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenPart] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenPart] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenPart_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenPart_log](
	[CollectionSpecimenID] [int] NULL,
	[SpecimenPartID] [int] NULL,
	[DerivedFromSpecimenPartID] [int] NULL,
	[PreparationMethod] [nvarchar](max) NULL,
	[PreparationDate] [datetime] NULL,
	[AccessionNumber] [nvarchar](50) NULL,
	[PartSublabel] [nvarchar](50) NULL,
	[CollectionID] [int] NULL,
	[MaterialCategory] [nvarchar](50) NULL,
	[StorageLocation] [nvarchar](255) NULL,
	[Stock] [float] NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[StorageContainer] [nvarchar](500) NULL,
	[StockUnit] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
 CONSTRAINT [PK_CollectionSpecimenPart_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenPart_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenPart_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenPartDescription]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenPartDescription](
	[CollectionSpecimenID] [int] NOT NULL,
	[SpecimenPartID] [int] NOT NULL,
	[PartDescriptionID] [int] IDENTITY(1,1) NOT NULL,
	[IdentificationUnitID] [int] NULL,
	[Description] [nvarchar](max) NULL,
	[DescriptionTermURI] [varchar](500) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_CollectionSpecimenPartDescription] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[SpecimenPartID] ASC,
	[PartDescriptionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenPartDescription] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenPartDescription] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenPartDescription] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenPartDescription] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenPartDescription_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenPartDescription_log](
	[CollectionSpecimenID] [int] NULL,
	[SpecimenPartID] [int] NULL,
	[PartDescriptionID] [int] NULL,
	[Description] [nvarchar](max) NULL,
	[DescriptionTermURI] [varchar](500) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[IdentificationUnitID] [int] NULL,
 CONSTRAINT [PK_CollectionSpecimenPartDescription_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenPartDescription_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenPartDescription_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenPartRegulation]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenPartRegulation](
	[CollectionEventID] [int] NOT NULL,
	[CollectionSpecimenID] [int] NOT NULL,
	[SpecimenPartID] [int] NOT NULL,
	[Regulation] [nvarchar](400) NOT NULL,
	[RegulationID] [int] NULL,
	[ResponsibleName] [nvarchar](500) NULL,
	[ResponsibleAgentURI] [nvarchar](500) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_CollectionSpecimenPartRegulation] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[SpecimenPartID] ASC,
	[CollectionEventID] ASC,
	[Regulation] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenPartRegulation] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenPartRegulation] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenPartRegulation] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenPartRegulation] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenPartRegulation_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenPartRegulation_log](
	[CollectionSpecimenID] [int] NULL,
	[SpecimenPartID] [int] NULL,
	[RegulationID] [int] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[Regulation] [nvarchar](400) NULL,
	[CollectionEventID] [int] NULL,
 CONSTRAINT [PK_CollectionSpecimenPartRegulation_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenPartRegulation_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenPartRegulation_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenProcessing]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenProcessing](
	[CollectionSpecimenID] [int] NOT NULL,
	[SpecimenProcessingID] [int] IDENTITY(1,1) NOT NULL,
	[ProcessingDate] [datetime] NULL,
	[ProcessingID] [int] NOT NULL,
	[Protocoll] [nvarchar](100) NULL,
	[SpecimenPartID] [int] NULL,
	[ProcessingDuration] [varchar](50) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionSpecimenProcessing] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[SpecimenProcessingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenProcessing] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenProcessing] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenProcessing] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionSpecimenProcessing] TO [Editor] AS [dbo]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenProcessing] TO [StorageManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenProcessing] TO [StorageManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenProcessing] TO [StorageManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenProcessing] TO [Typist] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenProcessing] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenProcessing] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenProcessing_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenProcessing_log](
	[CollectionSpecimenID] [int] NULL,
	[ProcessingDate] [datetime] NULL,
	[ProcessingID] [int] NULL,
	[Protocoll] [nvarchar](100) NULL,
	[SpecimenPartID] [int] NULL,
	[ProcessingDuration] [varchar](50) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[SpecimenProcessingID] [int] NULL,
 CONSTRAINT [PK_CollectionSpecimenProcessing_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenProcessing_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenProcessing_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenProcessingMethod]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenProcessingMethod](
	[CollectionSpecimenID] [int] NOT NULL,
	[SpecimenProcessingID] [int] NOT NULL,
	[MethodID] [int] NOT NULL,
	[MethodMarker] [nvarchar](50) NOT NULL,
	[ProcessingID] [int] NOT NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_CollectionSpecimenProcessingMethod] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[SpecimenProcessingID] ASC,
	[MethodID] ASC,
	[ProcessingID] ASC,
	[MethodMarker] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenProcessingMethod] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenProcessingMethod] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenProcessingMethod] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenProcessingMethod] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenProcessingMethod_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenProcessingMethod_log](
	[CollectionSpecimenID] [int] NULL,
	[SpecimenProcessingID] [int] NULL,
	[MethodID] [int] NULL,
	[MethodMarker] [nvarchar](50) NULL,
	[ProcessingID] [int] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_CollectionSpecimenProcessingMethod_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenProcessingMethod_log] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenProcessingMethod_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenProcessingMethod_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenProcessingMethodParameter]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenProcessingMethodParameter](
	[CollectionSpecimenID] [int] NOT NULL,
	[SpecimenProcessingID] [int] NOT NULL,
	[ProcessingID] [int] NOT NULL,
	[MethodID] [int] NOT NULL,
	[MethodMarker] [nvarchar](50) NOT NULL,
	[ParameterID] [int] NOT NULL,
	[Value] [nvarchar](max) NOT NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_CollectionSpecimenProcessingMethodParameter] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[SpecimenProcessingID] ASC,
	[ProcessingID] ASC,
	[MethodID] ASC,
	[ParameterID] ASC,
	[MethodMarker] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenProcessingMethodParameter] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenProcessingMethodParameter] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenProcessingMethodParameter] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenProcessingMethodParameter] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenProcessingMethodParameter_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenProcessingMethodParameter_log](
	[CollectionSpecimenID] [int] NULL,
	[SpecimenProcessingID] [int] NULL,
	[ProcessingID] [int] NULL,
	[MethodID] [int] NULL,
	[MethodMarker] [nvarchar](50) NULL,
	[ParameterID] [int] NULL,
	[Value] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[RowGUID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_CollectionSpecimenProcessingMethodParameter_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CollectionSpecimenReference]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenReference](
	[CollectionSpecimenID] [int] NOT NULL,
	[ReferenceID] [int] IDENTITY(1,1) NOT NULL,
	[ReferenceTitle] [nvarchar](400) NOT NULL,
	[ReferenceURI] [varchar](500) NULL,
	[IdentificationUnitID] [int] NULL,
	[IdentificationSequence] [smallint] NULL,
	[SpecimenPartID] [int] NULL,
	[ReferenceDetails] [nvarchar](500) NULL,
	[Notes] [nvarchar](max) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionSpecimenReference] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[ReferenceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenReference] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenReference] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenReference] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenReference] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenReference_log]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenReference_log](
	[CollectionSpecimenID] [int] NULL,
	[ReferenceID] [int] NULL,
	[ReferenceTitle] [nvarchar](400) NULL,
	[ReferenceURI] [varchar](500) NULL,
	[IdentificationUnitID] [int] NULL,
	[SpecimenPartID] [int] NULL,
	[ReferenceDetails] [nvarchar](500) NULL,
	[Notes] [nvarchar](max) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[IdentificationSequence] [smallint] NULL,
 CONSTRAINT [PK_CollectionSpecimenReference_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenReference_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenReference_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenRelation]    Script Date: 06.04.2021 17:13:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenRelation](
	[CollectionSpecimenID] [int] NOT NULL,
	[RelatedSpecimenURI] [varchar](255) NOT NULL,
	[RelatedSpecimenDisplayText] [varchar](255) NOT NULL,
	[RelationType] [nvarchar](50) NULL,
	[RelatedSpecimenCollectionID] [int] NULL,
	[RelatedSpecimenDescription] [nvarchar](max) NULL,
	[IdentificationUnitID] [int] NULL,
	[SpecimenPartID] [int] NULL,
	[Notes] [nvarchar](max) NULL,
	[IsInternalRelationCache] [bit] NOT NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionSpecimenRelation] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[RelatedSpecimenURI] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenRelation] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenRelation] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenRelation] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenRelation] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionSpecimenRelation] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenRelation] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenRelation_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenRelation_log](
	[CollectionSpecimenID] [int] NULL,
	[RelatedSpecimenURI] [varchar](255) NULL,
	[RelatedSpecimenDisplayText] [varchar](255) NULL,
	[RelationType] [nvarchar](50) NULL,
	[RelatedSpecimenCollectionID] [int] NULL,
	[RelatedSpecimenDescription] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[IsInternalRelationCache] [bit] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[ExchangeID] [int] NULL,
	[ExternalAgentName] [nvarchar](255) NULL,
	[ExternalAgentURI] [varchar](255) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[IdentificationUnitID] [int] NULL,
	[SpecimenPartID] [int] NULL,
 CONSTRAINT [PK_CollectionSpecimenRelation_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenRelation_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenRelation_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenTransaction]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenTransaction](
	[CollectionSpecimenID] [int] NOT NULL,
	[TransactionID] [int] NOT NULL,
	[SpecimenPartID] [int] NOT NULL,
	[AccessionNumber] [nvarchar](255) NULL,
	[TransactionReturnID] [int] NULL,
	[TransactionTitle] [nvarchar](200) NULL,
	[LogInsertedBy] [nvarchar](50) NULL,
	[LogInsertedWhen] [smalldatetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [smalldatetime] NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[IsOnLoan] [bit] NULL,
 CONSTRAINT [PK_CollectionSpecimenTransaction] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[TransactionID] ASC,
	[SpecimenPartID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenTransaction] TO [CollectionManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenTransaction] TO [CollectionManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenTransaction] TO [CollectionManager] AS [dbo]
GO
GRANT DELETE ON [dbo].[CollectionSpecimenTransaction] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionSpecimenTransaction] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenTransaction] TO [StorageManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenTransaction] TO [StorageManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenTransaction] TO [TransactionUser] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenTransaction] TO [Typist] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollectionSpecimenTransaction] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenTransaction] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionSpecimenTransaction_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionSpecimenTransaction_log](
	[CollectionSpecimenID] [int] NULL,
	[TransactionID] [int] NULL,
	[SpecimenPartID] [int] NULL,
	[IsOnLoan] [bit] NULL,
	[LogInsertedBy] [nvarchar](50) NULL,
	[LogInsertedWhen] [smalldatetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [smalldatetime] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[AccessionNumber] [nvarchar](255) NULL,
	[TransactionReturnID] [int] NULL,
	[TransactionTitle] [nvarchar](200) NULL,
 CONSTRAINT [PK_CollectionSpecimenTransaction_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenTransaction_log] TO [CollectionManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionSpecimenTransaction_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionSpecimenTransaction_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[CollectionUser]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollectionUser](
	[LoginName] [nvarchar](50) NOT NULL,
	[CollectionID] [int] NOT NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionUser] PRIMARY KEY CLUSTERED 
(
	[LoginName] ASC,
	[CollectionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollectionUser] TO [CollectionManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollectionUser] TO [CollectionManager] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[CollectionUser] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollectionUser] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollEventDateCategory_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollEventDateCategory_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollEventDateCategory_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollEventDateCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollEventDateCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollEventDateCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollEventDateCategory_Enum] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollEventDateCategory_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollEventImageType_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollEventImageType_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollEventImageType_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollEventImageType_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollEventImageType_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollEventImageType_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollEventImageType_Enum] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollEventImageType_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollEventSeriesImageType_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollEventSeriesImageType_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollEventSeriesImageType_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT SELECT ON [dbo].[CollEventSeriesImageType_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollExchangeType_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollExchangeType_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollExchangeType_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollExchangeType_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollExchangeType_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollExchangeType_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollExchangeType_Enum] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollExchangeType_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollIdentificationCategory_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollIdentificationCategory_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_IdentificationCategory_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollIdentificationCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollIdentificationCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollIdentificationCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollIdentificationCategory_Enum] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollIdentificationCategory_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollIdentificationDateCategory_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollIdentificationDateCategory_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollDateCategory_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollIdentificationDateCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollIdentificationDateCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollIdentificationDateCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollIdentificationDateCategory_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollIdentificationQualifier_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollIdentificationQualifier_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_IdentificationQualifier_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollIdentificationQualifier_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollIdentificationQualifier_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollIdentificationQualifier_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollIdentificationQualifier_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollLabelTranscriptionState_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollLabelTranscriptionState_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollLabelTranscritionState_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollLabelTranscriptionState_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollLabelTranscriptionState_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollLabelTranscriptionState_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollLabelTranscriptionState_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollLabelType_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollLabelType_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollLabelType_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollLabelType_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollLabelType_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollLabelType_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollLabelType_Enum] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollLabelType_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollMaterialCategory_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollMaterialCategory_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Icon] [image] NULL,
 CONSTRAINT [PK_CollMaterialType_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollMaterialCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollMaterialCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollMaterialCategory_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollMaterialCategory_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollRetrievalType_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollRetrievalType_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Icon] [image] NULL,
 CONSTRAINT [PK_CollectionRetrievalTypes] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollRetrievalType_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollRetrievalType_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollRetrievalType_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollRetrievalType_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollSpecimenImageType_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollSpecimenImageType_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollImageType_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollSpecimenImageType_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollSpecimenImageType_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollSpecimenImageType_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollSpecimenImageType_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollSpecimenRelationType_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollSpecimenRelationType_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollSpecimenRelationType_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT SELECT ON [dbo].[CollSpecimenRelationType_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollTaxonomicGroup_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollTaxonomicGroup_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Icon] [image] NULL,
 CONSTRAINT [PK_CollectionTaxonomicGroups] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollTaxonomicGroup_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollTaxonomicGroup_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollTaxonomicGroup_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollTaxonomicGroup_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollTransactionType_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollTransactionType_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollTransactionType_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT SELECT ON [dbo].[CollTransactionType_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollTypeStatus_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollTypeStatus_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollTypeStatus_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[CollTypeStatus_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[CollTypeStatus_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[CollTypeStatus_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[CollTypeStatus_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[CollUnitRelationType_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CollUnitRelationType_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollUnitRelationType_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT SELECT ON [dbo].[CollUnitRelationType_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[Entity]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Entity](
	[Entity] [varchar](500) NOT NULL,
	[DisplayGroup] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[Obsolete] [bit] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_Entity] PRIMARY KEY CLUSTERED 
(
	[Entity] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[Entity] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[Entity] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Entity] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[Entity] TO [DescriptionEditor] AS [dbo]
GO
GRANT INSERT ON [dbo].[Entity] TO [DescriptionEditor] AS [dbo]
GO
GRANT SELECT ON [dbo].[Entity] TO [DescriptionEditor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Entity] TO [DescriptionEditor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[Entity] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[Entity] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[EntityAccessibility_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntityAccessibility_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_EntityAccessibility_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT SELECT ON [dbo].[EntityAccessibility_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[EntityAccessibility_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[EntityContext_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntityContext_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_EntityContext_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[EntityContext_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[EntityContext_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[EntityContext_Enum] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[EntityContext_Enum] TO [DescriptionEditor] AS [dbo]
GO
GRANT INSERT ON [dbo].[EntityContext_Enum] TO [DescriptionEditor] AS [dbo]
GO
GRANT SELECT ON [dbo].[EntityContext_Enum] TO [DescriptionEditor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[EntityContext_Enum] TO [DescriptionEditor] AS [dbo]
GO
GRANT SELECT ON [dbo].[EntityContext_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[EntityDetermination_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntityDetermination_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_EntityDetermination_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT SELECT ON [dbo].[EntityDetermination_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[EntityLanguageCode_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntityLanguageCode_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[ParentCode] [nvarchar](50) NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_EntityLanguageCode_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[EntityLanguageCode_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[EntityLanguageCode_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[EntityLanguageCode_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[EntityLanguageCode_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[EntityRepresentation]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntityRepresentation](
	[Entity] [varchar](500) NOT NULL,
	[LanguageCode] [nvarchar](50) NOT NULL,
	[EntityContext] [nvarchar](50) NOT NULL,
	[DisplayText] [nvarchar](50) NULL,
	[Abbreviation] [nvarchar](20) NULL,
	[Description] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_EntityRepresentation] PRIMARY KEY CLUSTERED 
(
	[Entity] ASC,
	[LanguageCode] ASC,
	[EntityContext] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[EntityRepresentation] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[EntityRepresentation] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[EntityRepresentation] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[EntityRepresentation] TO [DescriptionEditor] AS [dbo]
GO
GRANT INSERT ON [dbo].[EntityRepresentation] TO [DescriptionEditor] AS [dbo]
GO
GRANT SELECT ON [dbo].[EntityRepresentation] TO [DescriptionEditor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[EntityRepresentation] TO [DescriptionEditor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[EntityRepresentation] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[EntityRepresentation] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[EntityUsage]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntityUsage](
	[Entity] [varchar](500) NOT NULL,
	[EntityContext] [nvarchar](50) NOT NULL,
	[Accessibility] [nvarchar](50) NULL,
	[Determination] [nvarchar](50) NULL,
	[Visibility] [nvarchar](50) NULL,
	[PresetValue] [nvarchar](500) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_EntityUsage] PRIMARY KEY CLUSTERED 
(
	[Entity] ASC,
	[EntityContext] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[EntityUsage] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[EntityUsage] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[EntityUsage] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[EntityUsage] TO [DescriptionEditor] AS [dbo]
GO
GRANT INSERT ON [dbo].[EntityUsage] TO [DescriptionEditor] AS [dbo]
GO
GRANT SELECT ON [dbo].[EntityUsage] TO [DescriptionEditor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[EntityUsage] TO [DescriptionEditor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[EntityUsage] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[EntityUsage] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[EntityUsage_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntityUsage_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_EntityUsage_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[EntityUsage_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[EntityUsage_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[EntityUsage_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[EntityUsage_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[EntityVisibility_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EntityVisibility_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_EntityVisibility_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT SELECT ON [dbo].[EntityVisibility_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[ExternalIdentifier]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExternalIdentifier](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ReferencedTable] [nvarchar](128) NOT NULL,
	[ReferencedID] [int] NOT NULL,
	[Type] [nvarchar](50) NULL,
	[Identifier] [nvarchar](500) NULL,
	[URL] [varchar](500) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_ExternalIdentifier] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[ExternalIdentifier] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[ExternalIdentifier] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[ExternalIdentifier] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[ExternalIdentifier] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[ExternalIdentifier] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[ExternalIdentifier_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExternalIdentifier_log](
	[ID] [int] NULL,
	[ReferencedTable] [nvarchar](128) NULL,
	[ReferencedID] [int] NULL,
	[Type] [nvarchar](50) NULL,
	[Identifier] [nvarchar](500) NULL,
	[URL] [varchar](500) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_ExternalIdentifier_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[ExternalIdentifier_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[ExternalIdentifier_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[ExternalIdentifierType]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExternalIdentifierType](
	[Type] [nvarchar](50) NOT NULL,
	[ParentType] [nvarchar](50) NULL,
	[URL] [varchar](500) NULL,
	[Description] [nvarchar](max) NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_ExternalIdentifierType] PRIMARY KEY CLUSTERED 
(
	[Type] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[ExternalIdentifierType] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[ExternalIdentifierType] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[ExternalIdentifierType] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[ExternalIdentifierType] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[ExternalIdentifierType] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[ExternalIdentifierType] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[ExternalIdentifierType] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[ExternalIdentifierType_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExternalIdentifierType_log](
	[Type] [nvarchar](50) NULL,
	[ParentType] [nvarchar](50) NULL,
	[URL] [varchar](500) NULL,
	[Description] [nvarchar](max) NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_ExternalIdentifierType_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[ExternalIdentifierType_log] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[ExternalIdentifierType_log] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[ExternalIdentifierType_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[ExternalRequestCredentials]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExternalRequestCredentials](
	[RequesterLogin] [nvarchar](50) NOT NULL,
	[AdministratingCollectionID] [int] NOT NULL,
	[RequestingCollectionID] [int] NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionRequestor] PRIMARY KEY CLUSTERED 
(
	[RequesterLogin] ASC,
	[AdministratingCollectionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT VIEW DEFINITION ON [dbo].[ExternalRequestCredentials] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[Identification]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Identification](
	[CollectionSpecimenID] [int] NOT NULL,
	[IdentificationUnitID] [int] NOT NULL,
	[IdentificationSequence] [smallint] NOT NULL,
	[IdentificationDate] [datetime] NULL,
	[IdentificationDay] [tinyint] NULL,
	[IdentificationMonth] [tinyint] NULL,
	[IdentificationYear] [smallint] NULL,
	[IdentificationDateSupplement] [nvarchar](255) NULL,
	[IdentificationDateCategory] [nvarchar](50) NULL,
	[VernacularTerm] [nvarchar](255) NULL,
	[TermURI] [varchar](500) NULL,
	[TaxonomicName] [nvarchar](255) NULL,
	[NameURI] [varchar](255) NULL,
	[IdentificationCategory] [nvarchar](50) NULL,
	[IdentificationQualifier] [nvarchar](50) NULL,
	[TypeStatus] [nvarchar](50) NULL,
	[TypeNotes] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ReferenceTitle] [nvarchar](255) NULL,
	[ReferenceURI] [varchar](255) NULL,
	[ReferenceDetails] [nvarchar](50) NULL,
	[DependsOnIdentificationSequence] [smallint] NULL,
 CONSTRAINT [PK_Identification] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[IdentificationUnitID] ASC,
	[IdentificationSequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[Identification] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[Identification] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[Identification] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[Identification] TO [Typist] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Identification] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[Identification] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[Identification_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Identification_log](
	[CollectionSpecimenID] [int] NULL,
	[IdentificationUnitID] [int] NULL,
	[IdentificationSequence] [smallint] NULL,
	[IdentificationDate] [datetime] NULL,
	[IdentificationDay] [tinyint] NULL,
	[IdentificationMonth] [tinyint] NULL,
	[IdentificationYear] [smallint] NULL,
	[IdentificationDateSupplement] [nvarchar](255) NULL,
	[IdentificationDateCategory] [nvarchar](50) NULL,
	[VernacularTerm] [nvarchar](255) NULL,
	[TaxonomicName] [nvarchar](255) NULL,
	[NameURI] [varchar](255) NULL,
	[IdentificationCategory] [nvarchar](50) NULL,
	[IdentificationQualifier] [nvarchar](50) NULL,
	[TypeStatus] [nvarchar](50) NULL,
	[TypeNotes] [nvarchar](max) NULL,
	[ReferenceTitle] [nvarchar](255) NULL,
	[ReferenceURI] [varchar](255) NULL,
	[Notes] [nvarchar](max) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[ReferenceDetails] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[TermURI] [varchar](500) NULL,
	[DependsOnIdentificationSequence] [smallint] NULL,
 CONSTRAINT [PK_Identification_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[Identification_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[Identification_log] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[Identification_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[Identification_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[IdentificationUnit]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IdentificationUnit](
	[CollectionSpecimenID] [int] NOT NULL,
	[IdentificationUnitID] [int] IDENTITY(1,1) NOT NULL,
	[LastIdentificationCache] [nvarchar](255) NOT NULL,
	[FamilyCache] [nvarchar](255) NULL,
	[OrderCache] [nvarchar](255) NULL,
	[HierarchyCache] [nvarchar](500) NULL,
	[TaxonomicGroup] [nvarchar](50) NOT NULL,
	[OnlyObserved] [bit] NULL,
	[RelatedUnitID] [int] NULL,
	[RelationType] [nvarchar](50) NULL,
	[ParentUnitID] [int] NULL,
	[ColonisedSubstratePart] [nvarchar](255) NULL,
	[LifeStage] [nvarchar](255) NULL,
	[Gender] [nvarchar](50) NULL,
	[NumberOfUnits] [smallint] NULL,
	[NumberOfUnitsModifier] [nvarchar](100) NULL,
	[ExsiccataNumber] [nvarchar](50) NULL,
	[ExsiccataIdentification] [smallint] NULL,
	[UnitIdentifier] [nvarchar](50) NULL,
	[UnitDescription] [nvarchar](50) NULL,
	[Circumstances] [nvarchar](50) NULL,
	[RetrievalType] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NOT NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_IdentificationUnit] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[IdentificationUnitID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[IdentificationUnit] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[IdentificationUnit] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[IdentificationUnit] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[IdentificationUnit] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[IdentificationUnit] TO [Editor] AS [dbo]
GO
GRANT ALTER ON [dbo].[IdentificationUnit] TO [Replicator] AS [dbo]
GO
GRANT INSERT ON [dbo].[IdentificationUnit] TO [Typist] AS [dbo]
GO
GRANT UPDATE ON [dbo].[IdentificationUnit] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[IdentificationUnit] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[IdentificationUnit_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IdentificationUnit_log](
	[CollectionSpecimenID] [int] NULL,
	[IdentificationUnitID] [int] NULL,
	[LastIdentificationCache] [nvarchar](255) NULL,
	[FamilyCache] [nvarchar](255) NULL,
	[OrderCache] [nvarchar](255) NULL,
	[TaxonomicGroup] [nvarchar](50) NULL,
	[OnlyObserved] [bit] NULL,
	[RelatedUnitID] [int] NULL,
	[RelationType] [nvarchar](50) NULL,
	[ColonisedSubstratePart] [nvarchar](255) NULL,
	[LifeStage] [nvarchar](255) NULL,
	[Gender] [nvarchar](50) NULL,
	[NumberOfUnits] [smallint] NULL,
	[ExsiccataNumber] [nvarchar](50) NULL,
	[ExsiccataIdentification] [smallint] NULL,
	[UnitIdentifier] [nvarchar](50) NULL,
	[UnitDescription] [nvarchar](50) NULL,
	[Circumstances] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[SubstrateID] [int] NULL,
	[SubstrateRelationType] [nvarchar](50) NULL,
	[HierarchyCache] [nvarchar](500) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[ParentUnitID] [nvarchar](255) NULL,
	[DataWithholdingReason] [nvarchar](255) NULL,
	[NumberOfUnitsModifier] [nvarchar](100) NULL,
	[RetrievalType] [nvarchar](50) NULL,
 CONSTRAINT [PK_IdentificationUnit_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[IdentificationUnit_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[IdentificationUnit_log] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[IdentificationUnit_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[IdentificationUnit_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[IdentificationUnitAnalysis]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IdentificationUnitAnalysis](
	[CollectionSpecimenID] [int] NOT NULL,
	[IdentificationUnitID] [int] NOT NULL,
	[AnalysisID] [int] NOT NULL,
	[AnalysisNumber] [nvarchar](50) NOT NULL,
	[AnalysisResult] [nvarchar](max) NULL,
	[ExternalAnalysisURI] [varchar](255) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[AnalysisDate] [nvarchar](50) NULL,
	[SpecimenPartID] [int] NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_ProvisionalDescriptionData] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[IdentificationUnitID] ASC,
	[AnalysisID] ASC,
	[AnalysisNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[IdentificationUnitAnalysis] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[IdentificationUnitAnalysis] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[IdentificationUnitAnalysis] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[IdentificationUnitAnalysis] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[IdentificationUnitAnalysis] TO [Editor] AS [dbo]
GO
GRANT DELETE ON [dbo].[IdentificationUnitAnalysis] TO [StorageManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[IdentificationUnitAnalysis] TO [StorageManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[IdentificationUnitAnalysis] TO [StorageManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[IdentificationUnitAnalysis] TO [Typist] AS [dbo]
GO
GRANT UPDATE ON [dbo].[IdentificationUnitAnalysis] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[IdentificationUnitAnalysis] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[IdentificationUnitAnalysis_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IdentificationUnitAnalysis_log](
	[CollectionSpecimenID] [int] NULL,
	[IdentificationUnitID] [int] NULL,
	[AnalysisID] [int] NULL,
	[AnalysisNumber] [nvarchar](50) NULL,
	[AnalysisResult] [nvarchar](max) NULL,
	[ExternalAnalysisURI] [varchar](255) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[AnalysisDate] [nvarchar](50) NULL,
	[SpecimenPartID] [int] NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[RowGUID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_IdentificationUnitAnalysis_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[IdentificationUnitAnalysis_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[IdentificationUnitAnalysis_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[IdentificationUnitAnalysisMethod]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IdentificationUnitAnalysisMethod](
	[CollectionSpecimenID] [int] NOT NULL,
	[IdentificationUnitID] [int] NOT NULL,
	[MethodID] [int] NOT NULL,
	[MethodMarker] [nvarchar](50) NOT NULL,
	[AnalysisID] [int] NOT NULL,
	[AnalysisNumber] [nvarchar](50) NOT NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_IdentificationUnitAnalysisMethod] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[IdentificationUnitID] ASC,
	[MethodID] ASC,
	[AnalysisID] ASC,
	[AnalysisNumber] ASC,
	[MethodMarker] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[IdentificationUnitAnalysisMethod] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[IdentificationUnitAnalysisMethod] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[IdentificationUnitAnalysisMethod] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[IdentificationUnitAnalysisMethod] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[IdentificationUnitAnalysisMethod] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[IdentificationUnitAnalysisMethod_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IdentificationUnitAnalysisMethod_log](
	[CollectionSpecimenID] [int] NULL,
	[IdentificationUnitID] [int] NULL,
	[MethodID] [int] NULL,
	[MethodMarker] [nvarchar](50) NULL,
	[AnalysisID] [int] NULL,
	[AnalysisNumber] [nvarchar](50) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_IdentificationUnitAnalysisMethod_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[IdentificationUnitAnalysisMethod_log] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[IdentificationUnitAnalysisMethod_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[IdentificationUnitAnalysisMethod_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[IdentificationUnitAnalysisMethodParameter]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IdentificationUnitAnalysisMethodParameter](
	[CollectionSpecimenID] [int] NOT NULL,
	[IdentificationUnitID] [int] NOT NULL,
	[AnalysisID] [int] NOT NULL,
	[AnalysisNumber] [nvarchar](50) NOT NULL,
	[MethodID] [int] NOT NULL,
	[MethodMarker] [nvarchar](50) NOT NULL,
	[ParameterID] [int] NOT NULL,
	[Value] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_IdentificationUnitAnalysisMethodParameter] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[IdentificationUnitID] ASC,
	[AnalysisID] ASC,
	[AnalysisNumber] ASC,
	[MethodID] ASC,
	[ParameterID] ASC,
	[MethodMarker] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[IdentificationUnitAnalysisMethodParameter] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[IdentificationUnitAnalysisMethodParameter] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[IdentificationUnitAnalysisMethodParameter] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[IdentificationUnitAnalysisMethodParameter] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[IdentificationUnitAnalysisMethodParameter] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[IdentificationUnitAnalysisMethodParameter_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IdentificationUnitAnalysisMethodParameter_log](
	[CollectionSpecimenID] [int] NULL,
	[IdentificationUnitID] [int] NULL,
	[AnalysisID] [int] NULL,
	[AnalysisNumber] [nvarchar](50) NULL,
	[MethodID] [int] NULL,
	[MethodMarker] [nvarchar](50) NULL,
	[ParameterID] [int] NULL,
	[Value] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_IdentificationUnitAnalysisMethodParameter_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[IdentificationUnitAnalysisMethodParameter_log] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[IdentificationUnitAnalysisMethodParameter_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[IdentificationUnitAnalysisMethodParameter_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[IdentificationUnitGeoAnalysis]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IdentificationUnitGeoAnalysis](
	[CollectionSpecimenID] [int] NOT NULL,
	[IdentificationUnitID] [int] NOT NULL,
	[AnalysisDate] [datetime] NOT NULL,
	[Geography] [geography] NULL,
	[Geometry] [geometry] NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_IdentificationUnitGeoAnalysis] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[IdentificationUnitID] ASC,
	[AnalysisDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[IdentificationUnitGeoAnalysis] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[IdentificationUnitGeoAnalysis] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[IdentificationUnitGeoAnalysis] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[IdentificationUnitGeoAnalysis] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[IdentificationUnitGeoAnalysis] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[IdentificationUnitGeoAnalysis_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IdentificationUnitGeoAnalysis_log](
	[CollectionSpecimenID] [int] NULL,
	[IdentificationUnitID] [int] NULL,
	[AnalysisDate] [datetime] NULL,
	[Geography] [geography] NULL,
	[Geometry] [geometry] NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_IdentificationUnitGeoAnalysis_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[IdentificationUnitGeoAnalysis_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[IdentificationUnitInPart]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IdentificationUnitInPart](
	[CollectionSpecimenID] [int] NOT NULL,
	[IdentificationUnitID] [int] NOT NULL,
	[SpecimenPartID] [int] NOT NULL,
	[DisplayOrder] [smallint] NOT NULL,
	[LogInsertedBy] [nvarchar](50) NULL,
	[LogInsertedWhen] [smalldatetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [smalldatetime] NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Description] [nvarchar](500) NULL,
 CONSTRAINT [PK_IdentificationUnitInPart] PRIMARY KEY CLUSTERED 
(
	[CollectionSpecimenID] ASC,
	[IdentificationUnitID] ASC,
	[SpecimenPartID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[IdentificationUnitInPart] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[IdentificationUnitInPart] TO [Editor] AS [dbo]
GO
GRANT DELETE ON [dbo].[IdentificationUnitInPart] TO [StorageManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[IdentificationUnitInPart] TO [StorageManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[IdentificationUnitInPart] TO [Typist] AS [dbo]
GO
GRANT UPDATE ON [dbo].[IdentificationUnitInPart] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[IdentificationUnitInPart] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[IdentificationUnitInPart_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IdentificationUnitInPart_log](
	[CollectionSpecimenID] [int] NULL,
	[IdentificationUnitID] [int] NULL,
	[SpecimenPartID] [int] NULL,
	[DisplayOrder] [smallint] NULL,
	[Description] [nvarchar](500) NULL,
	[LogInsertedBy] [nvarchar](50) NULL,
	[LogInsertedWhen] [smalldatetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [smalldatetime] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[RowGUID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_IdentificationUnitInPart_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[IdentificationUnitInPart_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[IdentificationUnitInPart_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[LanguageCode_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LanguageCode_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[ParentCode] [nvarchar](50) NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_LanguageCode_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LocalisationSystem]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LocalisationSystem](
	[LocalisationSystemID] [int] NOT NULL,
	[LocalisationSystemParentID] [int] NULL,
	[LocalisationSystemName] [nvarchar](100) NOT NULL,
	[DefaultAccuracyOfLocalisation] [nvarchar](50) NULL,
	[DefaultMeasurementUnit] [nvarchar](50) NULL,
	[ParsingMethodName] [nvarchar](50) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayEnable] [bit] NULL,
	[DisplayOrder] [smallint] NULL,
	[Description] [nvarchar](255) NULL,
	[DisplayTextLocation1] [nvarchar](50) NULL,
	[DescriptionLocation1] [nvarchar](255) NULL,
	[DisplayTextLocation2] [nvarchar](50) NULL,
	[DescriptionLocation2] [nvarchar](255) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_LocalisationSystem_1] PRIMARY KEY CLUSTERED 
(
	[LocalisationSystemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[LocalisationSystem] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[LocalisationSystem] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[LocalisationSystem] TO [Administrator] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[LocalisationSystem] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[LocalisationSystem] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[MeasurementUnit_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MeasurementUnit_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_MeasurementUnit] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Method]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Method](
	[MethodID] [int] IDENTITY(1,1) NOT NULL,
	[MethodParentID] [int] NULL,
	[OnlyHierarchy] [bit] NULL,
	[DisplayText] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[MethodURI] [varchar](255) NULL,
	[ForCollectionEvent] [bit] NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_Method] PRIMARY KEY CLUSTERED 
(
	[MethodID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[Method] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[Method] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Method] TO [Administrator] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[Method] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[Method] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[Method_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Method_log](
	[MethodID] [int] NULL,
	[MethodParentID] [int] NULL,
	[OnlyHierarchy] [bit] NULL,
	[DisplayText] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[MethodURI] [varchar](255) NULL,
	[ForCollectionEvent] [bit] NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_Method_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[Method_log] TO [Administrator] AS [dbo]
GO
/****** Object:  Table [dbo].[MethodForAnalysis]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MethodForAnalysis](
	[AnalysisID] [int] NOT NULL,
	[MethodID] [int] NOT NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_MethodForAnalysis] PRIMARY KEY CLUSTERED 
(
	[AnalysisID] ASC,
	[MethodID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[MethodForAnalysis] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[MethodForAnalysis] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[MethodForAnalysis] TO [Administrator] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[MethodForAnalysis] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[MethodForAnalysis] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[MethodForProcessing]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MethodForProcessing](
	[ProcessingID] [int] NOT NULL,
	[MethodID] [int] NOT NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_MethodForProcessing] PRIMARY KEY CLUSTERED 
(
	[ProcessingID] ASC,
	[MethodID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[MethodForProcessing] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[MethodForProcessing] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[MethodForProcessing] TO [Administrator] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[MethodForProcessing] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[MethodForProcessing] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[Parameter]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Parameter](
	[MethodID] [int] NOT NULL,
	[ParameterID] [int] IDENTITY(1,1) NOT NULL,
	[DisplayText] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[ParameterURI] [varchar](255) NULL,
	[DefaultValue] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_Parameter] PRIMARY KEY CLUSTERED 
(
	[ParameterID] ASC,
	[MethodID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[Parameter] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[Parameter] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Parameter] TO [Administrator] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[Parameter] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[Parameter] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[Parameter_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Parameter_log](
	[MethodID] [int] NULL,
	[ParameterID] [int] NULL,
	[DisplayText] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[ParameterURI] [varchar](255) NULL,
	[DefaultValue] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_Parameter_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ParameterValue_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ParameterValue_Enum](
	[MethodID] [int] NOT NULL,
	[ParameterID] [int] NOT NULL,
	[Value] [nvarchar](400) NOT NULL,
	[DisplayText] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[URI] [varchar](255) NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[RowGUID] [uniqueidentifier] NULL,
 CONSTRAINT [PK_ParameterValue_Enum] PRIMARY KEY CLUSTERED 
(
	[MethodID] ASC,
	[ParameterID] ASC,
	[Value] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[ParameterValue_Enum] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[ParameterValue_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[ParameterValue_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[ParameterValue_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[ParameterValue_Enum_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ParameterValue_Enum_log](
	[MethodID] [int] NULL,
	[ParameterID] [int] NULL,
	[Value] [nvarchar](400) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[URI] [varchar](255) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_ParameterValue_Enum_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Processing]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Processing](
	[ProcessingID] [int] IDENTITY(1,1) NOT NULL,
	[ProcessingParentID] [int] NULL,
	[DisplayText] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[ProcessingURI] [varchar](255) NULL,
	[OnlyHierarchy] [bit] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CollectionProcessing] PRIMARY KEY CLUSTERED 
(
	[ProcessingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[Processing] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[Processing] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Processing] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[Processing] TO [Editor] AS [dbo]
GO
GRANT ALTER ON [dbo].[Processing] TO [Replicator] AS [dbo]
GO
GRANT SELECT ON [dbo].[Processing] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[Processing_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Processing_log](
	[ProcessingID] [int] NULL,
	[ProcessingParentID] [int] NULL,
	[DisplayText] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[Notes] [nvarchar](max) NULL,
	[ProcessingURI] [varchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogVersion] [int] NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[OnlyHierarchy] [bit] NULL,
 CONSTRAINT [PK_Processing_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[Processing_log] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[Processing_log] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[ProcessingMaterialCategory]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProcessingMaterialCategory](
	[ProcessingID] [int] NOT NULL,
	[MaterialCategory] [nvarchar](50) NOT NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_ProcessingMaterialCategory] PRIMARY KEY CLUSTERED 
(
	[ProcessingID] ASC,
	[MaterialCategory] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[ProcessingMaterialCategory] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[ProcessingMaterialCategory] TO [Editor] AS [dbo]
GO
GRANT UPDATE ON [dbo].[ProcessingMaterialCategory] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[ProcessingMaterialCategory] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[ProcessingMaterialCategory] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[ProjectAnalysis]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProjectAnalysis](
	[AnalysisID] [int] NOT NULL,
	[ProjectID] [int] NOT NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_ProjectAnalysis] PRIMARY KEY CLUSTERED 
(
	[AnalysisID] ASC,
	[ProjectID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[ProjectAnalysis] TO [Administrator] AS [dbo]
GO
GRANT ALTER ON [dbo].[ProjectAnalysis] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[ProjectAnalysis] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[ProjectAnalysis] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[ProjectAnalysis] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[ProjectProcessing]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProjectProcessing](
	[ProcessingID] [int] NOT NULL,
	[ProjectID] [int] NOT NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_ProjectProcessing] PRIMARY KEY CLUSTERED 
(
	[ProcessingID] ASC,
	[ProjectID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[ProjectProcessing] TO [Administrator] AS [dbo]
GO
GRANT ALTER ON [dbo].[ProjectProcessing] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[ProjectProcessing] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[ProjectProcessing] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[ProjectProcessing] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[ProjectProxy]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProjectProxy](
	[ProjectID] [int] NOT NULL,
	[Project] [nvarchar](50) NULL,
	[ImageDescriptionTemplate] [xml] NULL,
	[ProjectURI] [varchar](255) NULL,
	[CreateArchive] [bit] NULL,
	[ArchiveProtocol] [nvarchar](max) NULL,
	[StableIdentifierBase] [varchar](500) NULL,
	[StableIdentifierTypeID] [int] NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[LastChanges] [datetime] NULL,
 CONSTRAINT [PK_DiversityProjectProxy] PRIMARY KEY CLUSTERED 
(
	[ProjectID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[ProjectProxy] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[ProjectProxy] TO [Administrator] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[ProjectProxy] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[ProjectProxy] TO [User] AS [dbo]
GO
GRANT UPDATE ON [dbo].[ProjectProxy] ([ImageDescriptionTemplate]) TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[ProjectProxy] ([ImageDescriptionTemplate]) TO [DataManager] AS [dbo]
GO
/****** Object:  Table [dbo].[ProjectUser]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProjectUser](
	[LoginName] [nvarchar](50) NOT NULL,
	[ProjectID] [int] NOT NULL,
	[ReadOnly] [bit] NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_ProjectUser] PRIMARY KEY CLUSTERED 
(
	[LoginName] ASC,
	[ProjectID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[ProjectUser] ADD  CONSTRAINT [DF_ProjectUser_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
GRANT DELETE ON [dbo].[ProjectUser] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[ProjectUser] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[ProjectUser] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[ProjectUser] TO [Administrator] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[ProjectUser] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[ProjectUser] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[Property]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Property](
	[PropertyID] [int] NOT NULL,
	[PropertyParentID] [int] NULL,
	[PropertyName] [nvarchar](100) NOT NULL,
	[DefaultAccuracyOfProperty] [nvarchar](50) NULL,
	[DefaultMeasurementUnit] [nvarchar](50) NULL,
	[ParsingMethodName] [nvarchar](50) NOT NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayEnabled] [bit] NULL,
	[DisplayOrder] [smallint] NULL,
	[Description] [nvarchar](max) NULL,
	[PropertyURI] [varchar](1000) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_Descriptor] PRIMARY KEY CLUSTERED 
(
	[PropertyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[Property] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Property] TO [Administrator] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[Property] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[Property] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[Regulation]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Regulation](
	[Regulation] [nvarchar](400) NOT NULL,
	[RegulationID] [int] IDENTITY(1,1) NOT NULL,
	[ParentRegulation] [nvarchar](400) NULL,
	[ParentRegulationID] [int] NULL,
	[Type] [nvarchar](50) NULL,
	[Status] [nvarchar](500) NULL,
	[ProjectURI] [varchar](500) NULL,
	[ValidUntil] [date] NULL,
	[Notes] [nvarchar](max) NULL,
	[HierarchyOnly] [bit] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_Regulation] PRIMARY KEY CLUSTERED 
(
	[Regulation] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[Regulation] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[Regulation] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[Regulation] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Regulation] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[Regulation] TO [RegulationManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[Regulation] TO [RegulationManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[Regulation] TO [RegulationManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Regulation] TO [RegulationManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[Regulation] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[Regulation_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Regulation_log](
	[RegulationID] [int] NULL,
	[ParentRegulationID] [int] NULL,
	[Regulation] [nvarchar](500) NULL,
	[Type] [nvarchar](50) NULL,
	[ProjectURI] [varchar](500) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[Status] [nvarchar](500) NULL,
	[ValidUntil] [date] NULL,
	[HierarchyOnly] [bit] NULL,
	[ParentRegulation] [nvarchar](400) NULL,
 CONSTRAINT [PK_Regulation_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RegulationType_Enum]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RegulationType_Enum](
	[Code] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[DisplayText] [nvarchar](50) NULL,
	[DisplayOrder] [smallint] NULL,
	[DisplayEnable] [bit] NULL,
	[InternalNotes] [nvarchar](500) NULL,
	[ParentCode] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_RegulationType_Enum] PRIMARY KEY CLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[RegulationType_Enum] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[RegulationType_Enum] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[RegulationType_Enum] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[ReplicationPublisher]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReplicationPublisher](
	[DatabaseName] [varchar](255) NOT NULL,
	[Server] [varchar](255) NOT NULL,
	[Port] [smallint] NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
 CONSTRAINT [PK_ReplicationPublisher] PRIMARY KEY CLUSTERED 
(
	[DatabaseName] ASC,
	[Server] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[ReplicationPublisher] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[ReplicationPublisher] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[ReplicationPublisher] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[ReplicationPublisher] TO [Editor] AS [dbo]
GO
/****** Object:  Table [dbo].[Transaction]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Transaction](
	[TransactionID] [int] IDENTITY(1,1) NOT NULL,
	[ParentTransactionID] [int] NULL,
	[TransactionType] [nvarchar](50) NOT NULL,
	[TransactionTitle] [nvarchar](200) NOT NULL,
	[ReportingCategory] [nvarchar](50) NULL,
	[AdministratingCollectionID] [int] NOT NULL,
	[MaterialDescription] [nvarchar](max) NULL,
	[MaterialCategory] [nvarchar](50) NULL,
	[MaterialCollectors] [nvarchar](max) NULL,
	[MaterialSource] [nvarchar](500) NULL,
	[FromCollectionID] [int] NULL,
	[FromTransactionPartnerName] [nvarchar](255) NULL,
	[FromTransactionPartnerAgentURI] [varchar](255) NULL,
	[FromTransactionNumber] [nvarchar](50) NULL,
	[ToCollectionID] [int] NULL,
	[ToTransactionPartnerName] [nvarchar](255) NULL,
	[ToTransactionPartnerAgentURI] [varchar](255) NULL,
	[ToTransactionNumber] [nvarchar](50) NULL,
	[NumberOfUnits] [int] NULL,
	[Investigator] [nvarchar](200) NULL,
	[TransactionComment] [nvarchar](max) NULL,
	[BeginDate] [datetime] NULL,
	[AgreedEndDate] [datetime] NULL,
	[ActualEndDate] [datetime] NULL,
	[DateSupplement] [nvarchar](100) NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[ToRecipient] [nvarchar](255) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_Transaction] PRIMARY KEY CLUSTERED 
(
	[TransactionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[Transaction] TO [Administrator] AS [dbo]
GO
GRANT ALTER ON [dbo].[Transaction] TO [CollectionManager] AS [dbo]
GO
GRANT DELETE ON [dbo].[Transaction] TO [CollectionManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[Transaction] TO [CollectionManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[Transaction] TO [CollectionManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[Transaction] TO [CollectionManager] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[Transaction] TO [Editor] AS [dbo]
GO
GRANT ALTER ON [dbo].[Transaction] TO [Replicator] AS [dbo]
GO
GRANT SELECT ON [dbo].[Transaction] TO [TransactionUser] AS [dbo]
GO
GRANT SELECT ON [dbo].[Transaction] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[Transaction_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Transaction_log](
	[TransactionID] [int] NULL,
	[ParentTransactionID] [int] NULL,
	[TransactionType] [nvarchar](50) NULL,
	[TransactionTitle] [nvarchar](200) NULL,
	[ReportingCategory] [nvarchar](50) NULL,
	[AdministratingCollectionID] [int] NULL,
	[MaterialDescription] [nvarchar](max) NULL,
	[MaterialCategory] [nvarchar](50) NULL,
	[MaterialCollectors] [nvarchar](max) NULL,
	[FromCollectionID] [int] NULL,
	[FromTransactionPartnerName] [nvarchar](255) NULL,
	[FromTransactionPartnerAgentURI] [varchar](255) NULL,
	[FromTransactionNumber] [nvarchar](50) NULL,
	[ToCollectionID] [int] NULL,
	[ToTransactionPartnerName] [nvarchar](255) NULL,
	[ToTransactionPartnerAgentURI] [varchar](255) NULL,
	[ToTransactionNumber] [nvarchar](50) NULL,
	[NumberOfUnits] [int] NULL,
	[Investigator] [nvarchar](200) NULL,
	[TransactionComment] [nvarchar](max) NULL,
	[BeginDate] [datetime] NULL,
	[AgreedEndDate] [datetime] NULL,
	[ActualEndDate] [datetime] NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[ResponsibleName] [nvarchar](255) NULL,
	[ResponsibleAgentURI] [varchar](255) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[ProjectID] [int] NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[ToRecipient] [nvarchar](255) NULL,
	[MaterialSource] [nvarchar](500) NULL,
 CONSTRAINT [PK_Transaction_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[Transaction_log] TO [CollectionManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[Transaction_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[Transaction_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[TransactionAgent]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransactionAgent](
	[TransactionID] [int] NOT NULL,
	[TransactionAgentID] [int] IDENTITY(1,1) NOT NULL,
	[AgentName] [nvarchar](500) NULL,
	[AgentURI] [varchar](500) NULL,
	[AgentRole] [nvarchar](500) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_TransactionAgent] PRIMARY KEY CLUSTERED 
(
	[TransactionID] ASC,
	[TransactionAgentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[TransactionAgent] TO [CollectionManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[TransactionAgent] TO [CollectionManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[TransactionAgent] TO [CollectionManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[TransactionAgent] TO [TransactionUser] AS [dbo]
GO
/****** Object:  Table [dbo].[TransactionAgent_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransactionAgent_log](
	[TransactionID] [int] NULL,
	[TransactionAgentID] [int] NULL,
	[AgentName] [nvarchar](500) NULL,
	[AgentURI] [varchar](500) NULL,
	[AgentRole] [nvarchar](500) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_TransactionAgent_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TransactionComment]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransactionComment](
	[Comment] [nvarchar](400) NOT NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_TransactionComment] PRIMARY KEY CLUSTERED 
(
	[Comment] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[TransactionComment] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[TransactionComment] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[TransactionComment] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[TransactionComment] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[TransactionDocument]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransactionDocument](
	[TransactionID] [int] NOT NULL,
	[Date] [datetime] NOT NULL,
	[TransactionText] [nvarchar](max) NULL,
	[TransactionDocument] [image] NULL,
	[DisplayText] [nvarchar](255) NULL,
	[DocumentURI] [varchar](1000) NULL,
	[DocumentType] [nvarchar](255) NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_TransactionDocuments] PRIMARY KEY CLUSTERED 
(
	[TransactionID] ASC,
	[Date] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[TransactionDocument] TO [Administrator] AS [dbo]
GO
GRANT DELETE ON [dbo].[TransactionDocument] TO [CollectionManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[TransactionDocument] TO [CollectionManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[TransactionDocument] TO [CollectionManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[TransactionDocument] TO [CollectionManager] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[TransactionDocument] TO [Editor] AS [dbo]
GO
GRANT INSERT ON [dbo].[TransactionDocument] TO [Typist] AS [dbo]
GO
GRANT UPDATE ON [dbo].[TransactionDocument] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[TransactionDocument] TO [User] AS [dbo]
GO
/****** Object:  Table [dbo].[TransactionDocument_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransactionDocument_log](
	[TransactionID] [int] NULL,
	[Date] [datetime] NULL,
	[TransactionText] [nvarchar](max) NULL,
	[TransactionDocument] [image] NULL,
	[InternalNotes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[DisplayText] [nvarchar](255) NULL,
	[DocumentURI] [varchar](1000) NULL,
	[DocumentType] [nvarchar](255) NULL,
 CONSTRAINT [PK_TransactionDocument_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT INSERT ON [dbo].[TransactionDocument_log] TO [CollectionManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[TransactionDocument_log] TO [Typist] AS [dbo]
GO
GRANT SELECT ON [dbo].[TransactionDocument_log] TO [Typist] AS [dbo]
GO
/****** Object:  Table [dbo].[TransactionPayment]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransactionPayment](
	[TransactionID] [int] NOT NULL,
	[PaymentID] [int] IDENTITY(1,1) NOT NULL,
	[Identifier] [nvarchar](500) NULL,
	[Amount] [float] NULL,
	[ForeignAmount] [float] NULL,
	[ForeignCurrency] [nvarchar](50) NULL,
	[PayerName] [nvarchar](500) NULL,
	[PayerAgentURI] [varchar](500) NULL,
	[RecipientName] [nvarchar](500) NULL,
	[RecipientAgentURI] [varchar](500) NULL,
	[PaymentDate] [datetime] NULL,
	[PaymentDateSupplement] [nvarchar](50) NULL,
	[PaymentURI] [varchar](500) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_TransactionPayment] PRIMARY KEY CLUSTERED 
(
	[TransactionID] ASC,
	[PaymentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[TransactionPayment] TO [CollectionManager] AS [dbo]
GO
GRANT INSERT ON [dbo].[TransactionPayment] TO [CollectionManager] AS [dbo]
GO
GRANT UPDATE ON [dbo].[TransactionPayment] TO [CollectionManager] AS [dbo]
GO
GRANT SELECT ON [dbo].[TransactionPayment] TO [TransactionUser] AS [dbo]
GO
/****** Object:  Table [dbo].[TransactionPayment_log]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransactionPayment_log](
	[TransactionID] [int] NULL,
	[PaymentID] [int] NULL,
	[Amount] [float] NULL,
	[ForeignAmount] [float] NULL,
	[ForeignCurrency] [nvarchar](50) NULL,
	[PayerName] [nvarchar](500) NULL,
	[PayerAgentURI] [varchar](500) NULL,
	[RecipientName] [nvarchar](500) NULL,
	[RecipientAgentURI] [varchar](500) NULL,
	[PaymentDate] [datetime] NULL,
	[PaymentDateSupplement] [nvarchar](50) NULL,
	[Notes] [nvarchar](max) NULL,
	[LogCreatedWhen] [datetime] NULL,
	[LogCreatedBy] [nvarchar](50) NULL,
	[LogUpdatedWhen] [datetime] NULL,
	[LogUpdatedBy] [nvarchar](50) NULL,
	[RowGUID] [uniqueidentifier] NULL,
	[LogState] [char](1) NULL,
	[LogDate] [datetime] NOT NULL,
	[LogUser] [nvarchar](50) NULL,
	[LogID] [int] IDENTITY(1,1) NOT NULL,
	[Identifier] [nvarchar](500) NULL,
	[PaymentURI] [varchar](500) NULL,
 CONSTRAINT [PK_TransactionPayment_Log] PRIMARY KEY CLUSTERED 
(
	[LogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserProxy]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserProxy](
	[LoginName] [nvarchar](50) NOT NULL,
	[CombinedNameCache] [nvarchar](255) NOT NULL,
	[UserURI] [varchar](255) NULL,
	[AgentURI] [varchar](255) NULL,
	[Queries] [xml] NULL,
	[RowGUID] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Settings] [xml] NULL,
	[CurrentProjectID] [int] NULL,
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[PrivacyConsent] [bit] NULL,
	[PrivacyConsentDate] [datetime] NULL,
 CONSTRAINT [PK_UserProxy] PRIMARY KEY CLUSTERED 
(
	[LoginName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
GRANT DELETE ON [dbo].[UserProxy] TO [Administrator] AS [dbo]
GO
GRANT INSERT ON [dbo].[UserProxy] TO [Administrator] AS [dbo]
GO
GRANT SELECT ON [dbo].[UserProxy] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[UserProxy] TO [Administrator] AS [dbo]
GO
GRANT UPDATE ON [dbo].[UserProxy] TO [Editor] AS [dbo]
GO
GRANT VIEW DEFINITION ON [dbo].[UserProxy] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[UserProxy] TO [User] AS [dbo]
GO
GRANT UPDATE ON [dbo].[UserProxy] ([Queries]) TO [User] AS [dbo]
GO
GRANT UPDATE ON [dbo].[UserProxy] ([PrivacyConsent]) TO [User] AS [dbo]
GO
GRANT UPDATE ON [dbo].[UserProxy] ([PrivacyConsentDate]) TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesCollectionSpecimenPart]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[FirstLinesCollectionSpecimenPart]
AS
SELECT     CollectionSpecimenID, SpecimenPartID, DerivedFromSpecimenPartID, PreparationMethod, PreparationDate, AccessionNumber, PartSublabel, 
                      CollectionID, MaterialCategory, StorageLocation, Stock, Notes
FROM         dbo.CollectionSpecimenPart
WHERE     EXISTS
                          (SELECT     CollectionSpecimenID
                            FROM          dbo.CollectionSpecimenPart AS P
                            GROUP BY CollectionSpecimenID
                            HAVING      (CollectionSpecimenID = dbo.CollectionSpecimenPart.CollectionSpecimenID) AND (MIN(SpecimenPartID) 
                                                   = dbo.CollectionSpecimenPart.SpecimenPartID))
GO
GRANT SELECT ON [dbo].[FirstLinesCollectionSpecimenPart] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesTransaction]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[FirstLinesTransaction]
AS
SELECT     dbo.FirstLinesCollectionSpecimenPart.CollectionSpecimenID, dbo.FirstLinesCollectionSpecimenPart.SpecimenPartID, 
                      MIN(dbo.CollectionSpecimenTransaction.TransactionID) AS TransactionID
FROM         dbo.FirstLinesCollectionSpecimenPart INNER JOIN
                      dbo.CollectionSpecimenTransaction ON 
                      dbo.FirstLinesCollectionSpecimenPart.CollectionSpecimenID = dbo.CollectionSpecimenTransaction.CollectionSpecimenID AND 
                      dbo.FirstLinesCollectionSpecimenPart.SpecimenPartID = dbo.CollectionSpecimenTransaction.SpecimenPartID
GROUP BY dbo.FirstLinesCollectionSpecimenPart.CollectionSpecimenID, dbo.FirstLinesCollectionSpecimenPart.SpecimenPartID

GO
GRANT SELECT ON [dbo].[FirstLinesTransaction] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesCollectionSpecimenTransaction]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[FirstLinesCollectionSpecimenTransaction]
AS
SELECT     dbo.CollectionSpecimenTransaction.CollectionSpecimenID, dbo.[Transaction].TransactionTitle AS _Transaction, 
                      dbo.[Transaction].TransactionType AS Transaction_type, dbo.[Transaction].TransactionID AS _TransactionID
FROM         dbo.CollectionSpecimenTransaction INNER JOIN
                      dbo.FirstLinesCollectionSpecimenPart ON 
                      dbo.CollectionSpecimenTransaction.CollectionSpecimenID = dbo.FirstLinesCollectionSpecimenPart.CollectionSpecimenID AND 
                      dbo.CollectionSpecimenTransaction.SpecimenPartID = dbo.FirstLinesCollectionSpecimenPart.SpecimenPartID INNER JOIN
                      dbo.[Transaction] ON dbo.CollectionSpecimenTransaction.TransactionID = dbo.[Transaction].TransactionID INNER JOIN
                      dbo.FirstLinesTransaction ON dbo.CollectionSpecimenTransaction.CollectionSpecimenID = dbo.FirstLinesTransaction.CollectionSpecimenID AND 
                      dbo.CollectionSpecimenTransaction.SpecimenPartID = dbo.FirstLinesTransaction.SpecimenPartID AND 
                      dbo.CollectionSpecimenTransaction.TransactionID = dbo.FirstLinesTransaction.TransactionID AND 
                      dbo.[Transaction].TransactionID = dbo.FirstLinesTransaction.TransactionID
GROUP BY dbo.CollectionSpecimenTransaction.CollectionSpecimenID, dbo.[Transaction].TransactionType, dbo.[Transaction].TransactionTitle, 
                      dbo.[Transaction].TransactionID

GO
GRANT SELECT ON [dbo].[FirstLinesCollectionSpecimenTransaction] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesLoan]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[FirstLinesLoan]
AS
SELECT     dbo.CollectionSpecimenTransaction.CollectionSpecimenID, dbo.CollectionSpecimenTransaction.SpecimenPartID, 
                      MIN(dbo.CollectionSpecimenTransaction.TransactionID) AS TransactionID
FROM         dbo.FirstLinesCollectionSpecimenPart INNER JOIN
                      dbo.CollectionSpecimenTransaction ON 
                      dbo.FirstLinesCollectionSpecimenPart.CollectionSpecimenID = dbo.CollectionSpecimenTransaction.CollectionSpecimenID AND 
                      dbo.FirstLinesCollectionSpecimenPart.SpecimenPartID = dbo.CollectionSpecimenTransaction.SpecimenPartID
WHERE     (dbo.CollectionSpecimenTransaction.IsOnLoan = 1)
GROUP BY dbo.CollectionSpecimenTransaction.CollectionSpecimenID, dbo.CollectionSpecimenTransaction.SpecimenPartID

GO
GRANT SELECT ON [dbo].[FirstLinesLoan] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesCollectionSpecimenOnLoan]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[FirstLinesCollectionSpecimenOnLoan]
AS
SELECT     dbo.CollectionSpecimenTransaction.CollectionSpecimenID, dbo.[Transaction].TransactionTitle AS _Transaction, 
                      dbo.[Transaction].TransactionID AS _TransactionID
FROM         dbo.CollectionSpecimenTransaction INNER JOIN
                      dbo.FirstLinesCollectionSpecimenPart ON 
                      dbo.CollectionSpecimenTransaction.CollectionSpecimenID = dbo.FirstLinesCollectionSpecimenPart.CollectionSpecimenID AND 
                      dbo.CollectionSpecimenTransaction.SpecimenPartID = dbo.FirstLinesCollectionSpecimenPart.SpecimenPartID INNER JOIN
                      dbo.[Transaction] ON dbo.CollectionSpecimenTransaction.TransactionID = dbo.[Transaction].TransactionID INNER JOIN
                      dbo.FirstLinesLoan ON dbo.CollectionSpecimenTransaction.CollectionSpecimenID = dbo.FirstLinesLoan.CollectionSpecimenID AND 
                      dbo.CollectionSpecimenTransaction.SpecimenPartID = dbo.FirstLinesLoan.SpecimenPartID AND 
                      dbo.CollectionSpecimenTransaction.TransactionID = dbo.FirstLinesLoan.TransactionID AND 
                      dbo.[Transaction].TransactionID = dbo.FirstLinesLoan.TransactionID
WHERE     (dbo.CollectionSpecimenTransaction.IsOnLoan = 1)
GROUP BY dbo.CollectionSpecimenTransaction.CollectionSpecimenID, dbo.[Transaction].TransactionType, dbo.[Transaction].TransactionTitle, 
                      dbo.[Transaction].TransactionID
HAVING      (dbo.[Transaction].TransactionType = N'loan')
GO
GRANT SELECT ON [dbo].[FirstLinesCollectionSpecimenOnLoan] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionSpecimenID_UserAvailable]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######   CollectionSpecimenID_UserAvailable - include sUser_sName()  ################################################
--#####################################################################################################################

CREATE VIEW [dbo].[CollectionSpecimenID_UserAvailable]
AS
SELECT     dbo.CollectionProject.CollectionSpecimenID
FROM         dbo.CollectionProject INNER JOIN
                      dbo.ProjectUser ON dbo.CollectionProject.ProjectID = dbo.ProjectUser.ProjectID
WHERE     ((dbo.ProjectUser.LoginName = USER_NAME() OR ProjectUser.LoginName = sUSER_sNAME()) and dbo.ProjectUser.ReadOnly = 0)
GROUP BY dbo.CollectionProject.CollectionSpecimenID
UNION
SELECT     TOP (100) PERCENT dbo.CollectionSpecimen.CollectionSpecimenID
FROM         dbo.CollectionProject AS CollectionProject_1 RIGHT OUTER JOIN
                      dbo.CollectionSpecimen ON CollectionProject_1.CollectionSpecimenID = dbo.CollectionSpecimen.CollectionSpecimenID
GROUP BY dbo.CollectionSpecimen.CollectionSpecimenID, CollectionProject_1.ProjectID
HAVING      (CollectionProject_1.ProjectID IS NULL)
ORDER BY CollectionSpecimenID
GO
GRANT SELECT ON [dbo].[CollectionSpecimenID_UserAvailable] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesIdenitificationUnitDisplayOrder1]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[FirstLinesIdenitificationUnitDisplayOrder1]
AS
SELECT     CollectionSpecimenID, IdentificationUnitID, MIN(DisplayOrder) AS DisplayOrder
FROM         dbo.IdentificationUnit
WHERE     (DisplayOrder > 0) AND EXISTS
                          (SELECT     CollectionSpecimenID
                            FROM          dbo.IdentificationUnit AS U
                            WHERE      (DisplayOrder > 0)
                            GROUP BY CollectionSpecimenID
                            HAVING      (CollectionSpecimenID = dbo.IdentificationUnit.CollectionSpecimenID) AND (MIN(DisplayOrder) = dbo.IdentificationUnit.DisplayOrder))
GROUP BY CollectionSpecimenID, IdentificationUnitID
GO
GRANT SELECT ON [dbo].[FirstLinesIdenitificationUnitDisplayOrder1] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesIdentificationUnit]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[FirstLinesIdentificationUnit]
AS
SELECT     dbo.IdentificationUnit.CollectionSpecimenID, dbo.IdentificationUnit.IdentificationUnitID, dbo.IdentificationUnit.LastIdentificationCache, 
                      dbo.IdentificationUnit.FamilyCache, dbo.IdentificationUnit.OrderCache, dbo.IdentificationUnit.TaxonomicGroup, dbo.IdentificationUnit.OnlyObserved, 
                      dbo.IdentificationUnit.RelatedUnitID, dbo.IdentificationUnit.RelationType, dbo.IdentificationUnit.ColonisedSubstratePart, 
                      dbo.IdentificationUnit.LifeStage, dbo.IdentificationUnit.Gender, dbo.IdentificationUnit.NumberOfUnits, dbo.IdentificationUnit.ExsiccataNumber, 
                      dbo.IdentificationUnit.ExsiccataIdentification, dbo.IdentificationUnit.UnitIdentifier, dbo.IdentificationUnit.UnitDescription, 
                      dbo.IdentificationUnit.Circumstances, dbo.IdentificationUnit.DisplayOrder, dbo.IdentificationUnit.Notes
FROM         dbo.IdentificationUnit INNER JOIN
                      dbo.FirstLinesIdenitificationUnitDisplayOrder1 ON 
                      dbo.IdentificationUnit.CollectionSpecimenID = dbo.FirstLinesIdenitificationUnitDisplayOrder1.CollectionSpecimenID
GROUP BY dbo.FirstLinesIdenitificationUnitDisplayOrder1.CollectionSpecimenID, dbo.IdentificationUnit.CollectionSpecimenID, 
                      dbo.IdentificationUnit.IdentificationUnitID, dbo.IdentificationUnit.LastIdentificationCache, dbo.IdentificationUnit.FamilyCache, 
                      dbo.IdentificationUnit.OrderCache, dbo.IdentificationUnit.TaxonomicGroup, dbo.IdentificationUnit.OnlyObserved, dbo.IdentificationUnit.RelatedUnitID, 
                      dbo.IdentificationUnit.RelationType, dbo.IdentificationUnit.ColonisedSubstratePart, dbo.IdentificationUnit.LifeStage, dbo.IdentificationUnit.Gender, 
                      dbo.IdentificationUnit.NumberOfUnits, dbo.IdentificationUnit.ExsiccataNumber, dbo.IdentificationUnit.ExsiccataIdentification, 
                      dbo.IdentificationUnit.UnitIdentifier, dbo.IdentificationUnit.UnitDescription, dbo.IdentificationUnit.Circumstances, dbo.IdentificationUnit.DisplayOrder, 
                      dbo.IdentificationUnit.Notes
HAVING      (dbo.IdentificationUnit.DisplayOrder = MIN(dbo.FirstLinesIdenitificationUnitDisplayOrder1.DisplayOrder)) AND 
                      (dbo.IdentificationUnit.IdentificationUnitID = MIN(dbo.FirstLinesIdenitificationUnitDisplayOrder1.IdentificationUnitID))

GO
GRANT SELECT ON [dbo].[FirstLinesIdentificationUnit] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesSecondUnit]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[FirstLinesSecondUnit]
AS
SELECT     U2.CollectionSpecimenID, U2.IdentificationUnitID, U2.LastIdentificationCache, U2.FamilyCache, U2.OrderCache, U2.TaxonomicGroup, 
                      U2.OnlyObserved, U2.RelatedUnitID, U2.RelationType, U2.ColonisedSubstratePart, U2.LifeStage, U2.Gender, U2.NumberOfUnits, U2.ExsiccataNumber, 
                      U2.ExsiccataIdentification, U2.UnitIdentifier, U2.UnitDescription, U2.Circumstances, U2.DisplayOrder, U2.Notes
FROM         dbo.IdentificationUnit AS U2 INNER JOIN
                      dbo.CollectionSpecimenID_UserAvailable AS AV ON U2.CollectionSpecimenID = AV.CollectionSpecimenID
WHERE     EXISTS
                          (SELECT     MIN(U.IdentificationUnitID) AS Expr1, U.CollectionSpecimenID
                            FROM          dbo.IdentificationUnit AS U INNER JOIN
                                                   dbo.FirstLinesIdentificationUnit AS U1 ON U.CollectionSpecimenID = U1.CollectionSpecimenID AND 
                                                   U.DisplayOrder > U1.DisplayOrder
                            GROUP BY U.CollectionSpecimenID
                            HAVING      (U2.CollectionSpecimenID = U.CollectionSpecimenID) AND (U2.IdentificationUnitID = MIN(U.IdentificationUnitID)))
GO
GRANT SELECT ON [dbo].[FirstLinesSecondUnit] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionSpecimen_Core]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[CollectionSpecimen_Core]
AS
SELECT     S.CollectionSpecimenID, S.Version, S.CollectionEventID, S.CollectionID, S.AccessionNumber, S.AccessionDate, S.AccessionDay, S.AccessionMonth, S.AccessionYear, 
                      S.AccessionDateSupplement, S.AccessionDateCategory, S.DepositorsName, S.DepositorsAgentURI, S.DepositorsAccessionNumber, S.LabelTitle, S.LabelType, 
                      S.LabelTranscriptionState, S.LabelTranscriptionNotes, S.ExsiccataURI, S.ExsiccataAbbreviation, S.OriginalNotes, S.AdditionalNotes, S.ReferenceTitle, 
                      S.ReferenceURI, S.Problems, S.DataWithholdingReason, CASE WHEN E.CollectionDate IS NULL AND E.CollectionYear IS NULL AND E.CollectionMonth IS NULL AND 
                      E.CollectionDay IS NULL THEN NULL ELSE CASE WHEN E.CollectionDate IS NULL THEN CASE WHEN E.CollectionYear IS NULL 
                      THEN '----' ELSE CAST(E.CollectionYear AS varchar) END + '/' + CASE WHEN CollectionMonth < 10 THEN '0' ELSE '' END + CASE WHEN E.CollectionMonth IS NULL 
                      THEN '--' ELSE CAST(E.CollectionMonth AS varchar) END + '/' + CASE WHEN E.CollectionDay IS NULL 
                      THEN '--' ELSE CASE WHEN CollectionDay < 10 THEN '0' ELSE '' END + CAST(E.CollectionDay AS varchar) END ELSE CAST(year(E.CollectionDate) AS varchar) 
                      + '/' + CASE WHEN CollectionMonth < 10 THEN '0' ELSE '' END + CAST(month(E.CollectionDate) AS varchar) 
                      + '/' + CASE WHEN CollectionDay < 10 THEN '0' ELSE '' END + CAST(day(E.CollectionDate) AS varchar) END END + CASE WHEN E.LocalityDescription IS NULL 
                      THEN '' ELSE '   ' + E.LocalityDescription END AS CollectionDate, E.LocalityDescription AS Locality, E.HabitatDescription AS Habitat, S.InternalNotes, 
                      S.ExternalDatasourceID, S.ExternalIdentifier, S.LogCreatedWhen, S.LogCreatedBy, S.LogUpdatedWhen, S.LogUpdatedBy
FROM         dbo.CollectionSpecimen AS S INNER JOIN
                      dbo.CollectionSpecimenID_UserAvailable AS UA ON S.CollectionSpecimenID = UA.CollectionSpecimenID LEFT OUTER JOIN
                      dbo.CollectionEvent AS E ON S.CollectionEventID = E.CollectionEventID
GO
GRANT SELECT ON [dbo].[CollectionSpecimen_Core] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesIdentificationUnitAnalysis]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
   CREATE VIEW [dbo].[FirstLinesIdentificationUnitAnalysis] AS SELECT     A.CollectionSpecimenID, A.IdentificationUnitID, A.AnalysisID, dbo.Analysis.DisplayText, A.AnalysisNumber, A.AnalysisResult, A.ExternalAnalysisURI,                        A.ResponsibleName, A.ResponsibleAgentURI, A.AnalysisDate, A.SpecimenPartID, A.Notes, A.LogCreatedWhen, A.LogCreatedBy, A.LogUpdatedWhen,                        A.LogUpdatedBy FROM         dbo.IdentificationUnitAnalysis AS A INNER JOIN                       dbo.FirstLinesIdentificationUnit ON A.CollectionSpecimenID = dbo.FirstLinesIdentificationUnit.CollectionSpecimenID AND                        A.IdentificationUnitID = dbo.FirstLinesIdentificationUnit.IdentificationUnitID INNER JOIN                       dbo.Analysis ON A.AnalysisID = dbo.Analysis.AnalysisID WHERE     EXISTS                           (SELECT     CollectionSpecimenID                             FROM          dbo.IdentificationUnitAnalysis AS I                             GROUP BY CollectionSpecimenID, IdentificationUnitID                             HAVING      (CollectionSpecimenID = A.CollectionSpecimenID) AND (IdentificationUnitID = A.IdentificationUnitID) AND (MIN(AnalysisID) = A.AnalysisID)                                                     AND (MIN(AnalysisNumber) = A.AnalysisNumber)) ; 
GO
/****** Object:  View [dbo].[IdentificationUnitDisplayOrder1]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[IdentificationUnitDisplayOrder1]
AS
SELECT     dbo.IdentificationUnit.CollectionSpecimenID, dbo.IdentificationUnit.IdentificationUnitID, dbo.IdentificationUnit.LastIdentificationCache, 
                      dbo.IdentificationUnit.FamilyCache, dbo.IdentificationUnit.OrderCache, dbo.IdentificationUnit.TaxonomicGroup, dbo.IdentificationUnit.OnlyObserved, 
                      dbo.IdentificationUnit.RelatedUnitID, dbo.IdentificationUnit.RelationType, dbo.IdentificationUnit.ColonisedSubstratePart, 
                      dbo.IdentificationUnit.LifeStage, dbo.IdentificationUnit.Gender, dbo.IdentificationUnit.NumberOfUnits, dbo.IdentificationUnit.ExsiccataNumber, 
                      dbo.IdentificationUnit.ExsiccataIdentification, dbo.IdentificationUnit.UnitIdentifier, dbo.IdentificationUnit.Circumstances, 
                      dbo.IdentificationUnit.DisplayOrder, dbo.IdentificationUnit.Notes
FROM         dbo.IdentificationUnit INNER JOIN
                      dbo.CollectionSpecimenID_UserAvailable ON 
                      dbo.IdentificationUnit.CollectionSpecimenID = dbo.CollectionSpecimenID_UserAvailable.CollectionSpecimenID
WHERE     (dbo.IdentificationUnit.DisplayOrder = 1)
GO
GRANT SELECT ON [dbo].[IdentificationUnitDisplayOrder1] TO [User] AS [dbo]
GO

/****** Object:  View [dbo].[TransactionList]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######  TransactionList          ####################################################################################
--#####################################################################################################################


CREATE VIEW [dbo].[TransactionList]
AS
SELECT     TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, 
                      MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, 
                      ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, Investigator, TransactionComment, 
                      BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, DateSupplement
FROM         dbo.[Transaction]
WHERE     (AdministratingCollectionID IS NULL)
UNION
SELECT     T.TransactionID, T.ParentTransactionID, T.TransactionType, T.TransactionTitle, 
                      T.ReportingCategory, T.AdministratingCollectionID, T.MaterialDescription, T.MaterialSource, T.MaterialCategory, 
                      T.MaterialCollectors, T.FromCollectionID, T.FromTransactionPartnerName, 
                      T.FromTransactionPartnerAgentURI, T.FromTransactionNumber, T.ToCollectionID, 
                      T.ToTransactionPartnerName, T.ToTransactionPartnerAgentURI, T.ToTransactionNumber, T.ToRecipient, 
                      T.NumberOfUnits, T.Investigator, T.TransactionComment, T.BeginDate, 
                      T.AgreedEndDate, T.ActualEndDate, T.InternalNotes, T.ResponsibleName, 
                      T.ResponsibleAgentURI, T.DateSupplement
FROM         dbo.[Transaction] AS T INNER JOIN
                      dbo.CollectionManager ON T.AdministratingCollectionID = dbo.CollectionManager.AdministratingCollectionID
WHERE     (dbo.CollectionManager.LoginName = USER_NAME())


GO
GRANT SELECT ON [dbo].[TransactionList] TO [User] AS [dbo]
GO


--#####################################################################################################################
--######  TransactionList_H7       ####################################################################################
--#####################################################################################################################

CREATE VIEW [dbo].[TransactionList_H7]
AS

SELECT        TransactionID, ParentTransactionID, TransactionType, TransactionTitle, 
TransactionTitle AS HierarchyDisplayText,
ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialSource, MaterialCategory, MaterialCollectors, FromCollectionID, 
                         FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, ToRecipient, NumberOfUnits, 
                         Investigator, TransactionComment, BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI, DateSupplement
FROM            dbo.[Transaction]
WHERE        (AdministratingCollectionID IS NULL)
UNION
SELECT    T .TransactionID, T .ParentTransactionID, T .TransactionType, 
T .TransactionTitle,
case when T7.TransactionTitle is null then '' else T7.TransactionTitle + ' | ' end +
case when T6.TransactionTitle is null then '' else T6.TransactionTitle + ' | ' end +
case when T5.TransactionTitle is null then '' else T5.TransactionTitle + ' | ' end +
case when T4.TransactionTitle is null then '' else T4.TransactionTitle + ' | ' end +
case when T3.TransactionTitle is null then '' else T3.TransactionTitle + ' | ' end + 
case when T2.TransactionTitle is null then '' else T2.TransactionTitle + ' | ' end + 
case when T1.TransactionTitle is null then '' else T1.TransactionTitle + ' | ' end +
T .TransactionTitle 
AS HierarchyDisplayText, 
T .ReportingCategory, T .AdministratingCollectionID, T .MaterialDescription, T .MaterialSource, T .MaterialCategory, T .MaterialCollectors, 
                         T .FromCollectionID, T .FromTransactionPartnerName, T .FromTransactionPartnerAgentURI, T .FromTransactionNumber, T .ToCollectionID, T .ToTransactionPartnerName, T .ToTransactionPartnerAgentURI, 
                         T .ToTransactionNumber, T .ToRecipient, T .NumberOfUnits, T .Investigator, T .TransactionComment, T .BeginDate, T .AgreedEndDate, T .ActualEndDate, T .InternalNotes, T .ResponsibleName, T .ResponsibleAgentURI, 
                         T .DateSupplement
FROM            dbo.[Transaction] AS T INNER JOIN
                         dbo.CollectionManager ON T.AdministratingCollectionID = dbo.CollectionManager.AdministratingCollectionID and dbo.CollectionManager.LoginName = USER_NAME()
left outer join 
dbo.[Transaction] AS T1 ON T.ParentTransactionID = T1.TransactionID and T1.AdministratingCollectionID = dbo.CollectionManager.AdministratingCollectionID and dbo.CollectionManager.LoginName = USER_NAME()
left outer join 
dbo.[Transaction] AS T2 ON T1.ParentTransactionID = T2.TransactionID and T2.AdministratingCollectionID = dbo.CollectionManager.AdministratingCollectionID and dbo.CollectionManager.LoginName = USER_NAME()
left outer join 
dbo.[Transaction] AS T3 ON T2.ParentTransactionID = T3.TransactionID and T3.AdministratingCollectionID = dbo.CollectionManager.AdministratingCollectionID and dbo.CollectionManager.LoginName = USER_NAME()
left outer join 
dbo.[Transaction] AS T4 ON T3.TransactionID = T4.ParentTransactionID and T4.AdministratingCollectionID = dbo.CollectionManager.AdministratingCollectionID and dbo.CollectionManager.LoginName = USER_NAME()
left outer join 
dbo.[Transaction] AS T5 ON T4.TransactionID = T5.ParentTransactionID and T5.AdministratingCollectionID = dbo.CollectionManager.AdministratingCollectionID and dbo.CollectionManager.LoginName = USER_NAME()
left outer join 
dbo.[Transaction] AS T6 ON T5.TransactionID = T6.ParentTransactionID and T6.AdministratingCollectionID = dbo.CollectionManager.AdministratingCollectionID and dbo.CollectionManager.LoginName = USER_NAME()
left outer join 
dbo.[Transaction] AS T7 ON T6.TransactionID = T7.ParentTransactionID and T7.AdministratingCollectionID = dbo.CollectionManager.AdministratingCollectionID and dbo.CollectionManager.LoginName = USER_NAME()        
GO

GRANT SELECT ON [dbo].[TransactionList_H7] TO [User] AS [dbo]
GO



--#####################################################################################################################
--######   Alter TransactionRegulation - hide title for user with missing permission  #################################
--#####################################################################################################################

CREATE VIEW [dbo].[TransactionRegulation]
AS
SELECT        CASE WHEN L.TransactionID IS NULL THEN R.TransactionType ELSE R.TransactionTitle END AS TransactionTitle, R.TransactionID
FROM            dbo.[Transaction] AS R LEFT OUTER JOIN
                         dbo.TransactionList AS L ON R.TransactionID = L.TransactionID
WHERE        (R.TransactionType IN (N'regulation'))
GO
GRANT SELECT ON [dbo].[TransactionRegulation] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[IdentificationUnit_Core]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######   IdentificationUnit_Core   ##################################################################################
--#####################################################################################################################

CREATE VIEW [dbo].[IdentificationUnit_Core]
AS
SELECT        U.CollectionSpecimenID, U.IdentificationUnitID, U.LastIdentificationCache, U.FamilyCache, U.OrderCache, U.TaxonomicGroup, U.OnlyObserved, U.RelatedUnitID, 
                         U.RelationType, U.ColonisedSubstratePart, U.LifeStage, U.Gender, U.NumberOfUnits, U.ExsiccataNumber, U.ExsiccataIdentification, U.UnitIdentifier, 
                         U.UnitDescription, U.Circumstances, U.DisplayOrder, U.Notes, U.HierarchyCache, U.RetrievalType, U.ParentUnitID, U.DataWithholdingReason, 
                         U.NumberOfUnitsModifier
FROM            dbo.IdentificationUnit AS U INNER JOIN
                         dbo.CollectionSpecimenID_UserAvailable AS A ON U.CollectionSpecimenID = A.CollectionSpecimenID

GO
GRANT SELECT ON [dbo].[IdentificationUnit_Core] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionSpecimenPart_Core2]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   CollectionSpecimenPart_Core2 - including hierarchy of collection   #########################################
--#####################################################################################################################

CREATE VIEW [dbo].[CollectionSpecimenPart_Core2]
AS
SELECT        TOP (100) PERCENT H.DisplayText + CASE WHEN P.StorageLocation <> '' THEN ' | ' + P.StorageLocation ELSE CASE WHEN P.AccessionNumber <> '' OR
                         P.PartSublabel <> '' THEN ' | ' + CASE WHEN P.AccessionNumber <> '' THEN P.AccessionNumber ELSE '' END + CASE WHEN P.AccessionNumber <> '' AND 
                         P.PartSublabel <> '' THEN ' ' ELSE '' END + CASE WHEN P.PartSublabel <> '' THEN P.PartSublabel ELSE '' END ELSE '' END END AS Collection, P.CollectionSpecimenID, P.SpecimenPartID, P.DerivedFromSpecimenPartID, 
                         P.PreparationMethod, P.PreparationDate, P.AccessionNumber, P.PartSublabel, P.CollectionID, P.MaterialCategory, P.StorageLocation, P.StorageContainer, P.Stock, P.StockUnit, P.Notes, 
                         P.AccessionNumber AS PartAccessionNumber
FROM            dbo.CollectionHierarchyAll() AS H INNER JOIN
                         dbo.CollectionSpecimenID_UserAvailable AS U INNER JOIN
                         dbo.CollectionSpecimenPart AS P ON U.CollectionSpecimenID = P.CollectionSpecimenID ON H.CollectionID = P.CollectionID
ORDER BY DisplayText
GO
GRANT SELECT ON [dbo].[CollectionSpecimenPart_Core2] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionSpecimenID_Available]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   CollectionSpecimenID_Available - include sUser_sName()  ####################################################
--#####################################################################################################################

CREATE VIEW [dbo].[CollectionSpecimenID_Available]
AS
SELECT     P.CollectionSpecimenID
FROM         dbo.CollectionProject AS P INNER JOIN
                      dbo.ProjectUser AS U ON P.ProjectID = U.ProjectID
WHERE     (U.LoginName = USER_NAME()) OR (U.LoginName = sUSER_sNAME())
GROUP BY P.CollectionSpecimenID
UNION
SELECT     TOP (100) PERCENT S.CollectionSpecimenID
FROM         dbo.CollectionProject AS P RIGHT OUTER JOIN
                      dbo.CollectionSpecimen AS S ON P.CollectionSpecimenID = S.CollectionSpecimenID
GROUP BY S.CollectionSpecimenID, P.ProjectID
HAVING      (P.ProjectID IS NULL)
ORDER BY CollectionSpecimenID

GO
GRANT SELECT ON [dbo].[CollectionSpecimenID_Available] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionAgent_Core]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  CollectionAgent_Core: CollectionSpecimenID_Available instead of CollectionSpecimenID_UserAvailable  #########
--#####################################################################################################################

CREATE VIEW [dbo].[CollectionAgent_Core]
AS
SELECT        dbo.CollectionAgent.CollectionSpecimenID, dbo.CollectionAgent.CollectorsName, dbo.CollectionAgent.CollectorsAgentURI, dbo.CollectionAgent.CollectorsSequence, dbo.CollectionAgent.CollectorsNumber, 
                         dbo.CollectionAgent.Notes, dbo.CollectionAgent.DataWithholdingReason
FROM            dbo.CollectionAgent INNER JOIN
                         dbo.CollectionSpecimenID_Available ON dbo.CollectionAgent.CollectionSpecimenID = dbo.CollectionSpecimenID_Available.CollectionSpecimenID
GO
GRANT SELECT ON [dbo].[CollectionAgent_Core] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionSpecimen_Core2]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   CollectionSpecimen_Core2: Use CollectionMonth instead of month(E.CollectionDate) etc.   ####################
--#####################################################################################################################

CREATE VIEW [dbo].[CollectionSpecimen_Core2]
AS
SELECT     S.CollectionSpecimenID, S.Version, S.CollectionEventID, S.CollectionID, S.AccessionNumber, S.AccessionDate, S.AccessionDay, S.AccessionMonth, S.AccessionYear, 
                      S.AccessionDateSupplement, S.AccessionDateCategory, S.DepositorsName, S.DepositorsAgentURI, S.DepositorsAccessionNumber, S.LabelTitle, S.LabelType, 
                      S.LabelTranscriptionState, S.LabelTranscriptionNotes, S.ExsiccataURI, S.ExsiccataAbbreviation, S.OriginalNotes, S.AdditionalNotes, S.ReferenceTitle, 
                      S.ReferenceURI, S.Problems, S.DataWithholdingReason, CASE WHEN E.CollectionDate IS NULL AND E.CollectionYear IS NULL AND E.CollectionMonth IS NULL AND 
                      E.CollectionDay IS NULL THEN NULL ELSE CASE WHEN E.CollectionDate IS NULL THEN CASE WHEN E.CollectionYear IS NULL 
                      THEN '----' ELSE CAST(E.CollectionYear AS varchar) END + '/' + CASE WHEN CollectionMonth < 10 THEN '0' ELSE '' END + CASE WHEN E.CollectionMonth IS NULL 
                      THEN '--' ELSE CAST(E.CollectionMonth AS varchar) END + '/' + CASE WHEN E.CollectionDay IS NULL 
                      THEN '--' ELSE CASE WHEN CollectionDay < 10 THEN '0' ELSE '' END + CAST(E.CollectionDay AS varchar) END ELSE CAST(year(E.CollectionDate) AS varchar) 
                      + '/' + CASE WHEN CollectionMonth < 10 THEN '0' ELSE '' END + CAST(CollectionMonth AS varchar) 
                      + '/' + CASE WHEN CollectionDay < 10 THEN '0' ELSE '' END + CAST(CollectionDay AS varchar) END END + CASE WHEN E.LocalityDescription IS NULL 
                      THEN '' ELSE '   ' + E.LocalityDescription END AS CollectionDate, E.LocalityDescription AS Locality, E.HabitatDescription AS Habitat, S.InternalNotes, 
                      S.ExternalDatasourceID, S.ExternalIdentifier, S.LogCreatedWhen, S.LogCreatedBy, S.LogUpdatedWhen, S.LogUpdatedBy
FROM         dbo.CollectionSpecimen AS S INNER JOIN
                      dbo.CollectionSpecimenID_Available AS UA ON S.CollectionSpecimenID = UA.CollectionSpecimenID LEFT OUTER JOIN
                      dbo.CollectionEvent AS E ON S.CollectionEventID = E.CollectionEventID

GO
GRANT SELECT ON [dbo].[CollectionSpecimen_Core2] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionEventID_AvailableNotReadOnly]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   CollectionEventID_AvailableNotReadOnly    ##################################################################
--#####################################################################################################################

CREATE VIEW [dbo].[CollectionEventID_AvailableNotReadOnly]
AS
SELECT        S.CollectionEventID
FROM            dbo.CollectionSpecimen AS S INNER JOIN
                         dbo.CollectionProject AS P ON S.CollectionSpecimenID = P.CollectionSpecimenID INNER JOIN
                         dbo.ProjectUser AS U ON P.ProjectID = U.ProjectID
WHERE        (U.LoginName = USER_NAME()) AND (U.ReadOnly = 0) AND (NOT (S.CollectionEventID IS NULL))
GROUP BY S.CollectionEventID
UNION
SELECT        E.CollectionEventID
FROM       dbo.CollectionEvent E LEFT OUTER JOIN dbo.CollectionSpecimen AS S ON S.CollectionEventID = E.CollectionEventID 
WHERE       (S.CollectionEventID IS NULL)
GO
GRANT SELECT ON [dbo].[CollectionEventID_AvailableNotReadOnly] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionEvent_Core2]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######   CollectionEvent_Core2  #####################################################################################
--#####################################################################################################################

CREATE VIEW [dbo].[CollectionEvent_Core2]
AS
SELECT E.CollectionEventID, E.Version, E.SeriesID, E.CollectorsEventNumber, E.CollectionDate, E.CollectionDay, E.CollectionMonth, E.CollectionYear, 
	E.CollectionEndDay, E.CollectionEndMonth, E.CollectionEndYear, 
	E.CollectionDateSupplement, E.CollectionDateCategory, E.CollectionTime, E.CollectionTimeSpan, 
	E.LocalityDescription, E.LocalityVerbatim, E.HabitatDescription, E.ReferenceTitle, E.ReferenceDetails, 
	E.ReferenceURI, E.CollectingMethod, E.Notes, E.CountryCache, E.DataWithholdingReason, E.DataWithholdingReasonDate
FROM CollectionEvent AS E INNER JOIN
	CollectionEventID_AvailableNotReadOnly AS A ON E.CollectionEventID = A.CollectionEventID
GO
GRANT SELECT ON [dbo].[CollectionEvent_Core2] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectorsNumber_Core]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[CollectorsNumber_Core]
AS
SELECT     TOP (100) PERCENT dbo.CollectionAgent.CollectionSpecimenID, 
                      dbo.CollectionAgent.CollectorsNumber + SPACE(20 - LEN(dbo.CollectionAgent.CollectorsNumber) * 2) 
                      + '  ' + dbo.CollectionAgent.CollectorsName AS CollectorsNumber
FROM         dbo.CollectionAgent INNER JOIN
                      dbo.CollectionSpecimenID_UserAvailable ON 
                      dbo.CollectionAgent.CollectionSpecimenID = dbo.CollectionSpecimenID_UserAvailable.CollectionSpecimenID
WHERE     (NOT (dbo.CollectionAgent.CollectorsNumber IS NULL))
ORDER BY CollectorsNumber

GO
GRANT SELECT ON [dbo].[CollectorsNumber_Core] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionSpecimenPart_Core]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   Sorting for AccessionNumber of Part   ######################################################################################
--#####################################################################################################################


CREATE VIEW [dbo].[CollectionSpecimenPart_Core]
AS
SELECT        P.CollectionSpecimenID, P.SpecimenPartID, P.DerivedFromSpecimenPartID, P.PreparationMethod, P.PreparationDate, P.AccessionNumber, P.PartSublabel, 
                         P.CollectionID, P.MaterialCategory, P.StorageLocation, P.StorageContainer, P.Stock, P.StockUnit, P.Notes, P.AccessionNumber AS PartAccessionNumber
FROM            dbo.CollectionSpecimenID_UserAvailable AS U INNER JOIN
                         dbo.CollectionSpecimenPart AS P ON U.CollectionSpecimenID = P.CollectionSpecimenID

GO
GRANT SELECT ON [dbo].[CollectionSpecimenPart_Core] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[Identification_Core2]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   Identification_Core2  ######################################################################################
--#####################################################################################################################

CREATE VIEW [dbo].[Identification_Core2]
AS
SELECT        I.CollectionSpecimenID, I.IdentificationUnitID, I.IdentificationSequence, I.IdentificationDate, I.IdentificationDay, I.IdentificationMonth, I.IdentificationYear, I.IdentificationDateSupplement, 
                         I.IdentificationDateCategory, I.VernacularTerm, I.TaxonomicName, I.NameURI, I.IdentificationCategory, I.IdentificationQualifier, I.TypeStatus, I.TypeNotes, I.ReferenceTitle, I.ReferenceURI, I.Notes, 
                         I.ResponsibleName, I.ResponsibleAgentURI
FROM            Identification AS I INNER JOIN
                         CollectionSpecimenID_Available AS A ON I.CollectionSpecimenID = A.CollectionSpecimenID

GO
GRANT SELECT ON [dbo].[Identification_Core2] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[IdentificationUnit_Core2]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######   IdentificationUnit_Core2   ##################################################################################
--#####################################################################################################################

CREATE VIEW [dbo].[IdentificationUnit_Core2]
AS
SELECT        U.CollectionSpecimenID, U.IdentificationUnitID, U.LastIdentificationCache, U.FamilyCache, U.OrderCache, U.TaxonomicGroup, U.OnlyObserved, U.RelatedUnitID, 
                         U.RelationType, U.ColonisedSubstratePart, U.LifeStage, U.Gender, U.NumberOfUnits, U.ExsiccataNumber, U.ExsiccataIdentification, U.UnitIdentifier, 
                         U.UnitDescription, U.Circumstances, U.DisplayOrder, U.Notes, U.HierarchyCache, U.RetrievalType, U.ParentUnitID, U.DataWithholdingReason, 
                         U.NumberOfUnitsModifier
FROM            dbo.IdentificationUnit AS U INNER JOIN
                         dbo.CollectionSpecimenID_Available AS A ON U.CollectionSpecimenID = A.CollectionSpecimenID


GO
GRANT SELECT ON [dbo].[IdentificationUnit_Core2] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[TransactionForeignRequest]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[TransactionForeignRequest]
AS
SELECT     dbo.[Transaction].TransactionID, dbo.[Transaction].ParentTransactionID, dbo.[Transaction].TransactionType, dbo.[Transaction].TransactionTitle, 
                      dbo.[Transaction].ReportingCategory, dbo.[Transaction].AdministratingCollectionID, dbo.[Transaction].MaterialDescription, 
                      dbo.[Transaction].MaterialCategory, dbo.[Transaction].MaterialCollectors, dbo.[Transaction].FromCollectionID, 
                      dbo.[Transaction].FromTransactionPartnerName, dbo.[Transaction].FromTransactionPartnerAgentURI, dbo.[Transaction].FromTransactionNumber, 
                      dbo.[Transaction].ToCollectionID, dbo.[Transaction].ToTransactionPartnerName, dbo.[Transaction].ToTransactionPartnerAgentURI, 
                      dbo.[Transaction].ToTransactionNumber, dbo.[Transaction].NumberOfUnits, dbo.[Transaction].Investigator, dbo.[Transaction].TransactionComment, 
                      dbo.[Transaction].BeginDate, dbo.[Transaction].AgreedEndDate, dbo.[Transaction].ActualEndDate, dbo.[Transaction].InternalNotes, 
                      dbo.[Transaction].ResponsibleName, dbo.[Transaction].ResponsibleAgentURI
FROM         dbo.[Transaction] INNER JOIN
                      dbo.CollectionManager ON dbo.[Transaction].AdministratingCollectionID = dbo.CollectionManager.AdministratingCollectionID
WHERE     (dbo.CollectionManager.LoginName = USER_NAME()) AND (dbo.[Transaction].TransactionType = N'request')

GO
/****** Object:  View [dbo].[TransactionUserRequest]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[TransactionUserRequest]
AS
SELECT     dbo.[Transaction].TransactionID, dbo.[Transaction].ParentTransactionID, dbo.[Transaction].TransactionType, dbo.[Transaction].TransactionTitle, 
                      dbo.[Transaction].ReportingCategory, dbo.[Transaction].AdministratingCollectionID, dbo.[Transaction].MaterialDescription, 
                      dbo.[Transaction].MaterialCategory, dbo.[Transaction].MaterialCollectors, dbo.[Transaction].FromCollectionID, 
                      dbo.[Transaction].FromTransactionPartnerName, dbo.[Transaction].FromTransactionPartnerAgentURI, dbo.[Transaction].FromTransactionNumber, 
                      dbo.[Transaction].ToCollectionID, dbo.[Transaction].ToTransactionPartnerName, dbo.[Transaction].ToTransactionPartnerAgentURI, 
                      dbo.[Transaction].ToTransactionNumber, dbo.[Transaction].NumberOfUnits, dbo.[Transaction].Investigator, dbo.[Transaction].TransactionComment, 
                      dbo.[Transaction].BeginDate, dbo.[Transaction].AgreedEndDate, dbo.[Transaction].ActualEndDate, dbo.[Transaction].InternalNotes, 
                      dbo.[Transaction].ResponsibleName, dbo.[Transaction].ResponsibleAgentURI
FROM         dbo.[Transaction] INNER JOIN
                      dbo.CollectionRequester ON dbo.[Transaction].AdministratingCollectionID = dbo.CollectionRequester.AdministratingCollectionID
WHERE     (dbo.[Transaction].LogCreatedBy = USER_NAME()) AND (dbo.CollectionRequester.LoginName = USER_NAME()) AND 
                      (dbo.[Transaction].TransactionType = N'request') OR
                      (dbo.[Transaction].LogCreatedBy = USER_NAME()) AND (dbo.CollectionRequester.LoginName = USER_NAME()) AND 
                      (dbo.[Transaction].TransactionType = N'loan')

GO
/****** Object:  View [dbo].[TransactionRequest]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[TransactionRequest]
AS
SELECT     TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, 
                      MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, 
                      ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, NumberOfUnits, Investigator, TransactionComment, 
                      BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI
FROM         dbo.TransactionUserRequest
UNION
SELECT     TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, 
                      MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, 
                      ToCollectionID, ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, NumberOfUnits, Investigator, TransactionComment, 
                      BeginDate, AgreedEndDate, ActualEndDate, InternalNotes, ResponsibleName, ResponsibleAgentURI
FROM         dbo.TransactionForeignRequest

GO
/****** Object:  View [dbo].[CollectionSpecimenTransactionRequest]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[CollectionSpecimenTransactionRequest]
AS
SELECT     CollectionSpecimenID, TransactionID, SpecimenPartID, IsOnLoan, LogInsertedBy, LogInsertedWhen
FROM         dbo.CollectionSpecimenTransaction
WHERE     (LogInsertedBy = USER_NAME()) AND (TransactionID IN
                          (SELECT     dbo.CollectionSpecimenTransaction.TransactionID
                            FROM          dbo.TransactionRequest))

GO
GRANT SELECT ON [dbo].[CollectionSpecimenTransactionRequest] TO [Requester] AS [dbo]
GO
/****** Object:  View [dbo].[Identification_Core]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[Identification_Core]
AS
SELECT     dbo.Identification.CollectionSpecimenID, dbo.Identification.IdentificationUnitID, dbo.Identification.IdentificationSequence, 
                      dbo.Identification.IdentificationDate, dbo.Identification.IdentificationDay, dbo.Identification.IdentificationMonth, dbo.Identification.IdentificationYear, 
                      dbo.Identification.IdentificationDateSupplement, dbo.Identification.IdentificationDateCategory, dbo.Identification.VernacularTerm, 
                      dbo.Identification.TaxonomicName, dbo.Identification.NameURI, dbo.Identification.IdentificationCategory, dbo.Identification.IdentificationQualifier, 
                      dbo.Identification.TypeStatus, dbo.Identification.TypeNotes, dbo.Identification.ReferenceTitle, dbo.Identification.ReferenceURI, dbo.Identification.Notes, 
                      dbo.Identification.ResponsibleName, dbo.Identification.ResponsibleAgentURI
FROM         dbo.Identification INNER JOIN
                      dbo.CollectionSpecimenID_UserAvailable ON dbo.Identification.CollectionSpecimenID = dbo.CollectionSpecimenID_UserAvailable.CollectionSpecimenID

GO
GRANT SELECT ON [dbo].[Identification_Core] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionEventID_UserAvailable]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[CollectionEventID_UserAvailable]
AS
SELECT     dbo.CollectionSpecimen.CollectionEventID
FROM         dbo.CollectionSpecimen INNER JOIN
                      dbo.CollectionProject ON dbo.CollectionSpecimen.CollectionSpecimenID = dbo.CollectionProject.CollectionSpecimenID INNER JOIN
                      dbo.ProjectUser ON dbo.CollectionProject.ProjectID = dbo.ProjectUser.ProjectID
WHERE     (dbo.ProjectUser.LoginName = USER_NAME())
GROUP BY dbo.CollectionSpecimen.CollectionEventID
HAVING      (NOT (dbo.CollectionSpecimen.CollectionEventID IS NULL))
GO
GRANT SELECT ON [dbo].[CollectionEventID_UserAvailable] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionEvent_Core]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[CollectionEvent_Core]
AS
SELECT     dbo.CollectionEvent.CollectionEventID, dbo.CollectionEvent.Version, dbo.CollectionEvent.SeriesID, dbo.CollectionEvent.CollectorsEventNumber, 
                      dbo.CollectionEvent.CollectionDate, dbo.CollectionEvent.CollectionDay, dbo.CollectionEvent.CollectionMonth, dbo.CollectionEvent.CollectionYear, 
                      dbo.CollectionEvent.CollectionDateSupplement, dbo.CollectionEvent.CollectionDateCategory, dbo.CollectionEvent.CollectionTime, 
                      dbo.CollectionEvent.CollectionTimeSpan, dbo.CollectionEvent.LocalityDescription, dbo.CollectionEvent.HabitatDescription, 
                      dbo.CollectionEvent.ReferenceTitle, dbo.CollectionEvent.ReferenceURI, dbo.CollectionEvent.CollectingMethod, dbo.CollectionEvent.Notes, 
                      dbo.CollectionEvent.CountryCache, dbo.CollectionEvent.DataWithholdingReason
FROM         dbo.CollectionEvent INNER JOIN
                      dbo.CollectionEventID_UserAvailable ON dbo.CollectionEvent.CollectionEventID = dbo.CollectionEventID_UserAvailable.CollectionEventID
GO
GRANT SELECT ON [dbo].[CollectionEvent_Core] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesIdentification]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[FirstLinesIdentification]
AS
SELECT     dbo.Identification.CollectionSpecimenID, dbo.Identification.IdentificationUnitID, dbo.Identification.IdentificationSequence, 
                      dbo.Identification.IdentificationDate, dbo.Identification.IdentificationDay, dbo.Identification.IdentificationMonth, dbo.Identification.IdentificationYear, 
                      dbo.Identification.IdentificationDateSupplement, dbo.Identification.IdentificationDateCategory, dbo.Identification.VernacularTerm, 
                      dbo.Identification.TaxonomicName, dbo.Identification.NameURI, dbo.Identification.IdentificationCategory, dbo.Identification.IdentificationQualifier, 
                      dbo.Identification.TypeStatus, dbo.Identification.TypeNotes, dbo.Identification.ReferenceTitle, dbo.Identification.ReferenceURI, dbo.Identification.Notes, 
                      dbo.Identification.ResponsibleName, dbo.Identification.ResponsibleAgentURI, dbo.Identification.LogCreatedWhen, dbo.Identification.LogCreatedBy, 
                      dbo.Identification.LogUpdatedWhen, dbo.Identification.LogUpdatedBy
FROM         dbo.Identification INNER JOIN
                      dbo.FirstLinesIdentificationUnit ON dbo.Identification.CollectionSpecimenID = dbo.FirstLinesIdentificationUnit.CollectionSpecimenID AND 
                      dbo.Identification.IdentificationUnitID = dbo.FirstLinesIdentificationUnit.IdentificationUnitID
WHERE     EXISTS
                          (SELECT     CollectionSpecimenID
                            FROM          dbo.Identification AS I
                            GROUP BY CollectionSpecimenID, IdentificationUnitID
                            HAVING      (CollectionSpecimenID = dbo.Identification.CollectionSpecimenID) AND (IdentificationUnitID = dbo.Identification.IdentificationUnitID) AND 
                                                   (MAX(IdentificationSequence) = dbo.Identification.IdentificationSequence))

GO
GRANT SELECT ON [dbo].[FirstLinesIdentification] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesSecondUnitIdentification]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[FirstLinesSecondUnitIdentification]
AS
SELECT     dbo.Identification.CollectionSpecimenID, dbo.Identification.IdentificationUnitID, dbo.Identification.IdentificationSequence, 
                      dbo.Identification.IdentificationDate, dbo.Identification.IdentificationDay, dbo.Identification.IdentificationMonth, dbo.Identification.IdentificationYear, 
                      dbo.Identification.IdentificationDateSupplement, dbo.Identification.IdentificationDateCategory, dbo.Identification.VernacularTerm, 
                      dbo.Identification.TaxonomicName, dbo.Identification.NameURI, dbo.Identification.IdentificationCategory, dbo.Identification.IdentificationQualifier, 
                      dbo.Identification.TypeStatus, dbo.Identification.TypeNotes, dbo.Identification.ReferenceTitle, dbo.Identification.ReferenceURI, dbo.Identification.Notes, 
                      dbo.Identification.ResponsibleName, dbo.Identification.ResponsibleAgentURI
FROM         dbo.FirstLinesSecondUnit INNER JOIN
                      dbo.Identification ON dbo.FirstLinesSecondUnit.CollectionSpecimenID = dbo.Identification.CollectionSpecimenID AND 
                      dbo.FirstLinesSecondUnit.IdentificationUnitID = dbo.Identification.IdentificationUnitID
WHERE     EXISTS
                          (SELECT     CollectionSpecimenID
                            FROM          dbo.Identification AS I
                            GROUP BY CollectionSpecimenID, IdentificationUnitID
                            HAVING      (CollectionSpecimenID = dbo.Identification.CollectionSpecimenID) AND (MAX(IdentificationSequence) 
                                                   = dbo.Identification.IdentificationSequence) AND (IdentificationUnitID = dbo.Identification.IdentificationUnitID))

GO
GRANT SELECT ON [dbo].[FirstLinesSecondUnitIdentification] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesCollectionAgent]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[FirstLinesCollectionAgent]
AS
SELECT     CollectionSpecimenID, CollectorsName, CollectorsAgentURI, CollectorsSequence, CollectorsNumber, Notes, DataWithholdingReason
FROM         dbo.CollectionAgent AS Agent
WHERE     EXISTS
                          (SELECT     CollectionSpecimenID
                            FROM          dbo.CollectionAgent AS A
                            GROUP BY CollectionSpecimenID
                            HAVING      (Agent.CollectionSpecimenID = CollectionSpecimenID) AND (MIN(CollectorsSequence) = Agent.CollectorsSequence))
GO
GRANT SELECT ON [dbo].[FirstLinesCollectionAgent] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionAgentCollectorsNameList]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[CollectionAgentCollectorsNameList]
AS
SELECT     dbo.FirstLinesCollectionAgent.CollectionSpecimenID, dbo.FirstLinesCollectionAgent.CollectorsName AS Collector_1, A1.CollectorsName AS Collector_2, 
                      A2.CollectorsName AS Collector_3, A3.CollectorsName AS Collector_4, A4.CollectorsName AS Collector_5, A5.CollectorsName AS Collector_6
FROM         dbo.CollectionAgent AS A3 LEFT OUTER JOIN
                      dbo.CollectionAgent AS A5 RIGHT OUTER JOIN
                      dbo.CollectionAgent AS A4 ON A5.CollectorsName <> A4.CollectorsName AND A5.CollectionSpecimenID = A4.CollectionSpecimenID AND 
                      A5.CollectorsSequence > A4.CollectorsSequence ON A3.CollectorsName <> A4.CollectorsName AND 
                      A3.CollectionSpecimenID = A4.CollectionSpecimenID AND A3.CollectorsSequence < A4.CollectorsSequence RIGHT OUTER JOIN
                      dbo.CollectionAgent AS A2 RIGHT OUTER JOIN
                      dbo.CollectionAgent AS A1 RIGHT OUTER JOIN
                      dbo.FirstLinesCollectionAgent ON A1.CollectionSpecimenID = dbo.FirstLinesCollectionAgent.CollectionSpecimenID AND 
                      A1.CollectorsName <> dbo.FirstLinesCollectionAgent.CollectorsName AND 
                      A1.CollectorsSequence > dbo.FirstLinesCollectionAgent.CollectorsSequence ON A2.CollectorsName <> A1.CollectorsName AND 
                      A2.CollectionSpecimenID = A1.CollectionSpecimenID AND A2.CollectorsSequence > A1.CollectorsSequence ON 
                      A3.CollectorsName <> A2.CollectorsName AND A3.CollectionSpecimenID = A2.CollectionSpecimenID AND 
                      A3.CollectorsSequence > A2.CollectorsSequence AND A3.CollectorsSequence > A1.CollectorsSequence AND 
                      A4.CollectorsSequence > A1.CollectorsSequence AND A5.CollectorsSequence > A1.CollectorsSequence
WHERE     (A4.CollectorsSequence > A1.CollectorsSequence)
GO
/****** Object:  View [dbo].[FirstLinesAltitude]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[FirstLinesAltitude]
AS
SELECT     CollectionEventID, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, DeterminationDate, DistanceToLocation, 
                      DirectionToLocation, ResponsibleName, ResponsibleAgentURI, AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache
FROM         dbo.CollectionEventLocalisation
WHERE     (LocalisationSystemID = 4)
GO
GRANT SELECT ON [dbo].[FirstLinesAltitude] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesChronostratigraphy]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[FirstLinesChronostratigraphy]
AS
SELECT     CollectionEventID, PropertyID, DisplayText, PropertyURI, PropertyHierarchyCache, PropertyValue, ResponsibleName, ResponsibleAgentURI, Notes, 
                      AverageValueCache
FROM         dbo.CollectionEventProperty
WHERE     (PropertyID = 20)
GO
GRANT SELECT ON [dbo].[FirstLinesChronostratigraphy] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesCoordinatesWGS84]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[FirstLinesCoordinatesWGS84]
AS
SELECT     CollectionEventID, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, DeterminationDate, DistanceToLocation, 
                      DirectionToLocation, ResponsibleName, ResponsibleAgentURI, AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache
FROM         dbo.CollectionEventLocalisation
WHERE     (LocalisationSystemID = 8)

GO
/****** Object:  View [dbo].[FirstLinesGeographicRegion]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[FirstLinesGeographicRegion]
AS
SELECT     CollectionEventID, PropertyID, DisplayText, PropertyURI, PropertyHierarchyCache, PropertyValue, ResponsibleName, ResponsibleAgentURI, Notes, 
                      AverageValueCache
FROM         dbo.CollectionEventProperty
WHERE     (PropertyID = 10)

GO
/****** Object:  View [dbo].[FirstLinesLithostratigraphy]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[FirstLinesLithostratigraphy]
AS
SELECT     CollectionEventID, PropertyID, DisplayText, PropertyURI, PropertyHierarchyCache, PropertyValue, ResponsibleName, ResponsibleAgentURI, Notes, 
                      AverageValueCache
FROM         dbo.CollectionEventProperty
WHERE     (PropertyID = 30)


GO
GRANT SELECT ON [dbo].[FirstLinesLithostratigraphy] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesMTB]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[FirstLinesMTB]
AS
SELECT     CollectionEventID, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, DeterminationDate, DistanceToLocation, 
                      DirectionToLocation, ResponsibleName, ResponsibleAgentURI, AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache
FROM         dbo.CollectionEventLocalisation
WHERE     (LocalisationSystemID = 3)
GO
GRANT SELECT ON [dbo].[FirstLinesMTB] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesNamedArea]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[FirstLinesNamedArea]
AS
SELECT     CollectionEventID, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, DeterminationDate, DistanceToLocation, 
                      DirectionToLocation, ResponsibleName, ResponsibleAgentURI, AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache
FROM         dbo.CollectionEventLocalisation
WHERE     (LocalisationSystemID = 7)

GO
GRANT SELECT ON [dbo].[FirstLinesNamedArea] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesSamplingPlot]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[FirstLinesSamplingPlot]
AS
SELECT     CollectionEventID, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, DeterminationDate, DistanceToLocation, 
                      DirectionToLocation, ResponsibleName, ResponsibleAgentURI, AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache
FROM         dbo.CollectionEventLocalisation
WHERE     (LocalisationSystemID = 13)
GO
GRANT SELECT ON [dbo].[FirstLinesSamplingPlot] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstLinesCollectionSpecimen]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
     CREATE VIEW [dbo].[FirstLinesCollectionSpecimen] AS SELECT     dbo.CollectionSpecimen.CollectionSpecimenID, dbo.CollectionSpecimen.AccessionNumber AS Accession_number,                        dbo.CollectionSpecimen.DataWithholdingReason AS Data_withholding_reason,                        dbo.CollectionEvent.DataWithholdingReason AS Data_withholding_reason_for_collection_event,                        dbo.FirstLinesCollectionAgent.DataWithholdingReason AS Data_withholding_reason_for_collector,                        dbo.CollectionEvent.CollectorsEventNumber AS Collectors_event_number, dbo.CollectionEvent.CollectionDay AS Collection_day,                        dbo.CollectionEvent.CollectionMonth AS Collection_month, dbo.CollectionEvent.CollectionYear AS Collection_year,                        dbo.CollectionEvent.CollectionDateSupplement AS Collection_date_supplement, dbo.CollectionEvent.CollectionTime AS Collection_time,                        dbo.CollectionEvent.CollectionTimeSpan AS Collection_time_span, dbo.CollectionEvent.CountryCache AS Country,                        dbo.CollectionEvent.LocalityDescription AS Locality_description, dbo.CollectionEvent.HabitatDescription AS Habitat_description,                        dbo.CollectionEvent.CollectingMethod AS Collecting_method, dbo.CollectionEvent.Notes AS Collection_event_notes,                        dbo.FirstLinesNamedArea.Location1 AS Named_area, dbo.FirstLinesNamedArea.Location2 AS NamedAreaLocation2, NULL                        AS Remove_link_to_gazetteer, dbo.FirstLinesNamedArea.DistanceToLocation AS Distance_to_location,                        dbo.FirstLinesNamedArea.DirectionToLocation AS Direction_to_location, dbo.FirstLinesCoordinatesWGS84.Location1 AS Longitude,                        dbo.FirstLinesCoordinatesWGS84.Location2 AS Latitude, dbo.FirstLinesCoordinatesWGS84.LocationAccuracy AS Coordinates_accuracy, NULL                        AS Link_to_GoogleMaps, dbo.FirstLinesAltitude.Location1 AS Altitude_from, dbo.FirstLinesAltitude.Location2 AS Altitude_to,                        dbo.FirstLinesAltitude.LocationAccuracy AS Altitude_accuracy, dbo.FirstLinesMTB.Location1 AS MTB, dbo.FirstLinesMTB.Location2 AS Quadrant,                        dbo.FirstLinesMTB.LocationNotes AS Notes_for_MTB, dbo.FirstLinesSamplingPlot.Location1 AS Sampling_plot,                        dbo.FirstLinesSamplingPlot.Location2 AS Link_to_SamplingPlots, NULL AS Remove_link_to_SamplingPlots,                        dbo.FirstLinesSamplingPlot.LocationAccuracy AS Accuracy_of_sampling_plot,                        dbo.FirstLinesSamplingPlot.AverageLatitudeCache AS Latitude_of_sampling_plot,                        dbo.FirstLinesSamplingPlot.AverageLongitudeCache AS Longitude_of_sampling_plot,                        dbo.FirstLinesGeographicRegion.DisplayText AS Geographic_region, dbo.FirstLinesLithostratigraphy.DisplayText AS Lithostratigraphy,                        dbo.FirstLinesChronostratigraphy.DisplayText AS Chronostratigraphy, dbo.FirstLinesCollectionAgent.CollectorsName AS Collectors_name,                        dbo.FirstLinesCollectionAgent.CollectorsAgentURI AS Link_to_DiversityAgents, NULL AS Remove_link_for_collector,                        dbo.FirstLinesCollectionAgent.CollectorsNumber AS Collectors_number, dbo.FirstLinesCollectionAgent.Notes AS Notes_about_collector,                        dbo.CollectionSpecimen.AccessionDay AS Accession_day, dbo.CollectionSpecimen.AccessionMonth AS Accession_month,                        dbo.CollectionSpecimen.AccessionYear AS Accession_year, dbo.CollectionSpecimen.AccessionDateSupplement AS Accession_date_supplement,                        dbo.CollectionSpecimen.DepositorsName AS Depositors_name,                        dbo.CollectionSpecimen.DepositorsAgentURI AS Depositors_link_to_DiversityAgents, NULL AS Remove_link_for_Depositor,                        dbo.CollectionSpecimen.DepositorsAccessionNumber AS Depositors_accession_number,                        dbo.CollectionSpecimen.ExsiccataAbbreviation AS Exsiccata_abbreviation,                        dbo.CollectionSpecimen.ExsiccataURI AS Link_to_DiversityExsiccatae, NULL AS Remove_link_to_exsiccatae,                        dbo.FirstLinesIdentificationUnit.ExsiccataNumber AS Exsiccata_number, dbo.CollectionSpecimen.OriginalNotes AS Original_notes,                        dbo.CollectionSpecimen.AdditionalNotes AS Additional_notes, dbo.CollectionSpecimen.InternalNotes AS Internal_notes,                        dbo.CollectionSpecimen.LabelTitle AS Label_title, dbo.CollectionSpecimen.LabelType AS Label_type,                        dbo.CollectionSpecimen.LabelTranscriptionState AS Label_transcription_state,                        dbo.CollectionSpecimen.LabelTranscriptionNotes AS Label_transcription_notes, dbo.CollectionSpecimen.Problems,                        dbo.FirstLinesIdentificationUnit.TaxonomicGroup AS Taxonomic_group, dbo.FirstLinesIdentificationUnit.RelationType AS Relation_type,                        dbo.FirstLinesIdentificationUnit.ColonisedSubstratePart AS Colonised_substrate_part, dbo.FirstLinesIdentificationUnit.LifeStage AS Life_stage,                        dbo.FirstLinesIdentificationUnit.Gender, dbo.FirstLinesIdentificationUnit.NumberOfUnits AS Number_of_units,                        dbo.FirstLinesIdentificationUnit.Circumstances, dbo.FirstLinesIdentificationUnit.OrderCache AS Order_of_taxon,                        dbo.FirstLinesIdentificationUnit.FamilyCache AS Family_of_taxon, dbo.FirstLinesIdentificationUnit.UnitIdentifier AS Identifier_of_organism,                        dbo.FirstLinesIdentificationUnit.UnitDescription AS Description_of_organism, dbo.FirstLinesIdentificationUnit.OnlyObserved AS Only_observed,                        dbo.FirstLinesIdentificationUnit.Notes AS Notes_for_organism, dbo.FirstLinesIdentification.TaxonomicName AS Taxonomic_name,                        dbo.FirstLinesIdentification.NameURI AS Link_to_DiversityTaxonNames, NULL AS Remove_link_for_identification,                        dbo.FirstLinesIdentification.VernacularTerm AS Vernacular_term, dbo.FirstLinesIdentification.IdentificationDay AS Identification_day,                        dbo.FirstLinesIdentification.IdentificationMonth AS Identification_month, dbo.FirstLinesIdentification.IdentificationYear AS Identification_year,                        dbo.FirstLinesIdentification.IdentificationCategory AS Identification_category,                        dbo.FirstLinesIdentification.IdentificationQualifier AS Identification_qualifier, dbo.FirstLinesIdentification.TypeStatus AS Type_status,                        dbo.FirstLinesIdentification.TypeNotes AS Type_notes, dbo.FirstLinesIdentification.Notes AS Notes_for_identification,                        dbo.FirstLinesIdentification.ReferenceTitle AS Reference_title, dbo.FirstLinesIdentification.ReferenceURI AS Link_to_DiversityReferences, NULL                        AS Remove_link_for_reference, dbo.FirstLinesIdentification.ResponsibleName AS Responsible,                        dbo.FirstLinesIdentification.ResponsibleAgentURI AS Link_to_DiversityAgents_for_responsible, NULL AS Remove_link_for_determiner,                        dbo.FirstLinesIdentificationUnitAnalysis.DisplayText AS Analysis,                        dbo.FirstLinesIdentificationUnitAnalysis.AnalysisID,                        dbo.FirstLinesIdentificationUnitAnalysis.AnalysisNumber AS Analysis_number,                        dbo.FirstLinesIdentificationUnitAnalysis.AnalysisResult AS Analysis_result,                        dbo.FirstLinesSecondUnit.TaxonomicGroup AS Taxonomic_group_of_second_organism,                        dbo.FirstLinesSecondUnitIdentification.TaxonomicName AS Taxonomic_name_of_second_organism,                        dbo.FirstLinesSecondUnitIdentification.NameURI AS Link_to_DiversityTaxonNames_of_second_organism, NULL                        AS Remove_link_for_second_organism, dbo.FirstLinesSecondUnitIdentification.VernacularTerm AS Vernacular_term_of_second_organism,                        dbo.FirstLinesCollectionSpecimenPart.CollectionID AS Collection, dbo.FirstLinesCollectionSpecimenPart.MaterialCategory AS Material_category,                        dbo.FirstLinesCollectionSpecimenPart.StorageLocation AS Storage_location, dbo.FirstLinesCollectionSpecimenPart.Stock,                        dbo.FirstLinesCollectionSpecimenPart.PreparationMethod AS Preparation_method,                        dbo.FirstLinesCollectionSpecimenPart.PreparationDate AS Preparation_date, dbo.FirstLinesCollectionSpecimenPart.Notes AS Notes_for_part,                        dbo.FirstLinesCollectionSpecimenTransaction._TransactionID, dbo.FirstLinesCollectionSpecimenTransaction._Transaction,                        dbo.FirstLinesCollectionSpecimenOnLoan._TransactionID AS On_loan, dbo.CollectionEvent.CollectionEventID AS _CollectionEventID,                        dbo.FirstLinesIdentificationUnit.IdentificationUnitID AS _IdentificationUnitID,                        dbo.FirstLinesIdentification.IdentificationSequence AS _IdentificationSequence, dbo.FirstLinesSecondUnit.IdentificationUnitID AS _SecondUnitID,                        dbo.FirstLinesSecondUnitIdentification.IdentificationSequence AS _SecondSequence,                        dbo.FirstLinesCollectionSpecimenPart.SpecimenPartID AS _SpecimenPartID,                        dbo.FirstLinesCoordinatesWGS84.AverageLatitudeCache AS _CoordinatesAverageLatitudeCache,                        dbo.FirstLinesCoordinatesWGS84.AverageLongitudeCache AS _CoordinatesAverageLongitudeCache,                        dbo.FirstLinesCoordinatesWGS84.LocationNotes AS _CoordinatesLocationNotes,                        dbo.FirstLinesGeographicRegion.PropertyURI AS _GeographicRegionPropertyURI,                        dbo.FirstLinesLithostratigraphy.PropertyURI AS _LithostratigraphyPropertyURI,                        dbo.FirstLinesChronostratigraphy.PropertyURI AS _ChronostratigraphyPropertyURI,                        dbo.FirstLinesNamedArea.AverageLatitudeCache AS _NamedAverageLatitudeCache,                        dbo.FirstLinesNamedArea.AverageLongitudeCache AS _NamedAverageLongitudeCache,                        dbo.FirstLinesLithostratigraphy.PropertyHierarchyCache AS _LithostratigraphyPropertyHierarchyCache,                        dbo.FirstLinesChronostratigraphy.PropertyHierarchyCache AS _ChronostratigraphyPropertyHierarchyCache,                        dbo.FirstLinesSecondUnit.FamilyCache AS _SecondUnitFamilyCache, dbo.FirstLinesSecondUnit.OrderCache AS _SecondUnitOrderCache,                        dbo.FirstLinesAltitude.AverageAltitudeCache AS _AverageAltitudeCache FROM         dbo.FirstLinesCollectionAgent RIGHT OUTER JOIN                       dbo.FirstLinesIdentification RIGHT OUTER JOIN                       dbo.FirstLinesIdentificationUnit LEFT OUTER JOIN                       dbo.FirstLinesIdentificationUnitAnalysis ON                        dbo.FirstLinesIdentificationUnit.CollectionSpecimenID = dbo.FirstLinesIdentificationUnitAnalysis.CollectionSpecimenID AND                        dbo.FirstLinesIdentificationUnit.IdentificationUnitID = dbo.FirstLinesIdentificationUnitAnalysis.IdentificationUnitID ON                        dbo.FirstLinesIdentification.CollectionSpecimenID = dbo.FirstLinesIdentificationUnit.CollectionSpecimenID AND                        dbo.FirstLinesIdentification.IdentificationUnitID = dbo.FirstLinesIdentificationUnit.IdentificationUnitID RIGHT OUTER JOIN                       dbo.FirstLinesCollectionSpecimenTransaction RIGHT OUTER JOIN                       dbo.FirstLinesCollectionSpecimenOnLoan RIGHT OUTER JOIN                       dbo.CollectionSpecimenID_UserAvailable INNER JOIN                       dbo.CollectionSpecimen ON dbo.CollectionSpecimenID_UserAvailable.CollectionSpecimenID = dbo.CollectionSpecimen.CollectionSpecimenID ON                        dbo.FirstLinesCollectionSpecimenOnLoan.CollectionSpecimenID = dbo.CollectionSpecimen.CollectionSpecimenID ON                        dbo.FirstLinesCollectionSpecimenTransaction.CollectionSpecimenID = dbo.CollectionSpecimen.CollectionSpecimenID ON                        dbo.FirstLinesIdentificationUnit.CollectionSpecimenID = dbo.CollectionSpecimen.CollectionSpecimenID LEFT OUTER JOIN                       dbo.FirstLinesSecondUnit LEFT OUTER JOIN                       dbo.FirstLinesSecondUnitIdentification ON                        dbo.FirstLinesSecondUnit.CollectionSpecimenID = dbo.FirstLinesSecondUnitIdentification.CollectionSpecimenID AND                        dbo.FirstLinesSecondUnit.IdentificationUnitID = dbo.FirstLinesSecondUnitIdentification.IdentificationUnitID ON                        dbo.CollectionSpecimen.CollectionSpecimenID = dbo.FirstLinesSecondUnit.CollectionSpecimenID ON                        dbo.FirstLinesCollectionAgent.CollectionSpecimenID = dbo.CollectionSpecimen.CollectionSpecimenID LEFT OUTER JOIN                       dbo.FirstLinesNamedArea RIGHT OUTER JOIN                       dbo.FirstLinesGeographicRegion RIGHT OUTER JOIN                       dbo.FirstLinesLithostratigraphy RIGHT OUTER JOIN                       dbo.FirstLinesSamplingPlot RIGHT OUTER JOIN                       dbo.CollectionEvent ON dbo.FirstLinesSamplingPlot.CollectionEventID = dbo.CollectionEvent.CollectionEventID LEFT OUTER JOIN                       dbo.FirstLinesChronostratigraphy ON dbo.CollectionEvent.CollectionEventID = dbo.FirstLinesChronostratigraphy.CollectionEventID ON                        dbo.FirstLinesLithostratigraphy.CollectionEventID = dbo.CollectionEvent.CollectionEventID LEFT OUTER JOIN                       dbo.FirstLinesMTB ON dbo.CollectionEvent.CollectionEventID = dbo.FirstLinesMTB.CollectionEventID ON                        dbo.FirstLinesGeographicRegion.CollectionEventID = dbo.CollectionEvent.CollectionEventID LEFT OUTER JOIN                       dbo.FirstLinesAltitude ON dbo.CollectionEvent.CollectionEventID = dbo.FirstLinesAltitude.CollectionEventID LEFT OUTER JOIN                       dbo.FirstLinesCoordinatesWGS84 ON dbo.CollectionEvent.CollectionEventID = dbo.FirstLinesCoordinatesWGS84.CollectionEventID ON                        dbo.FirstLinesNamedArea.CollectionEventID = dbo.CollectionEvent.CollectionEventID ON                        dbo.CollectionSpecimen.CollectionEventID = dbo.CollectionEvent.CollectionEventID LEFT OUTER JOIN                       dbo.FirstLinesCollectionSpecimenPart ON dbo.CollectionSpecimen.CollectionSpecimenID = dbo.FirstLinesCollectionSpecimenPart.CollectionSpecimenID  ; 
GO
GRANT SELECT ON [dbo].[FirstLinesCollectionSpecimen] TO [User] AS [dbo]
GO

/****** Object:  View [dbo].[AnnotationEvent]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   Annotation        ##########################################################################################
--######   Views for linked tables     ################################################################################
--#####################################################################################################################

CREATE VIEW [dbo].[AnnotationEvent]
AS
SELECT        AnnotationID, ReferencedID AS CollectionEventID, ReferencedAnnotationID, AnnotationType, Title, Annotation, URI, ReferenceDisplayText, ReferenceURI, 
                         SourceDisplayText, SourceURI, IsInternal
FROM            dbo.Annotation
WHERE        (ReferencedTable = N'CollectionEvent')

GO
GRANT SELECT ON [dbo].[AnnotationEvent] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[AnnotationPart]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[AnnotationPart]
AS
SELECT        AnnotationID, ReferencedID AS SpecimenPartID, ReferencedAnnotationID, AnnotationType, Title, Annotation, URI, ReferenceDisplayText, ReferenceURI, 
                         SourceDisplayText, SourceURI, IsInternal
FROM            dbo.Annotation
WHERE        (ReferencedTable = N'CollectionSpecimenPart')

GO
GRANT SELECT ON [dbo].[AnnotationPart] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[AnnotationSpecimen]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[AnnotationSpecimen]
AS
SELECT        AnnotationID, ReferencedID AS CollectionSpecimenID, ReferencedAnnotationID, AnnotationType, Title, Annotation, URI, ReferenceDisplayText, ReferenceURI, 
                         SourceDisplayText, SourceURI, IsInternal
FROM            dbo.Annotation
WHERE        (ReferencedTable = N'CollectionSpecimen')

GO
GRANT SELECT ON [dbo].[AnnotationSpecimen] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[AnnotationUnit]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[AnnotationUnit]
AS
SELECT        AnnotationID, ReferencedID AS IdentificationUnitID, ReferencedAnnotationID, AnnotationType, Title, Annotation, URI, ReferenceDisplayText, ReferenceURI, 
                         SourceDisplayText, SourceURI, IsInternal
FROM            dbo.Annotation
WHERE        (ReferencedTable = N'IdentificationUnit')

GO
GRANT SELECT ON [dbo].[AnnotationUnit] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[ApplicationSearchItemPrimaryKeyColumns]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[ApplicationSearchItemPrimaryKeyColumns]
AS
SELECT     TOP 100 PERCENT t.Table_Name, MAX(c.Column_Name) AS Expr1
FROM         INFORMATION_SCHEMA.TABLE_CONSTRAINTS t INNER JOIN
                      INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE c ON t.Constraint_Name = c.Constraint_Name
WHERE     (t.Constraint_Type = 'Primary key') AND (t.Table_Name NOT LIKE '%_Enum%')
GROUP BY t.Table_Name
HAVING      (COUNT(*) = 1)
ORDER BY t.Table_Name
GO
GRANT SELECT ON [dbo].[ApplicationSearchItemPrimaryKeyColumns] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[ApplicationSearchItemPrimaryKeyColumns] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[ApplicationSearchMenuFields]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[ApplicationSearchMenuFields]
AS
SELECT     TOP 100 PERCENT dbo.sysobjects.name AS TableName, dbo.syscolumns.name AS ColumnName, dbo.systypes.name AS DataType, 
                      dbo.syscolumns.length
FROM         dbo.syscolumns INNER JOIN
                      dbo.sysobjects ON dbo.syscolumns.id = dbo.sysobjects.id INNER JOIN
                      dbo.systypes ON dbo.syscolumns.xtype = dbo.systypes.xtype
WHERE     (dbo.sysobjects.xtype = 'U') AND (dbo.systypes.name <> N'sysname') AND (NOT (dbo.syscolumns.name LIKE N'%ID')) AND 
                      (NOT (dbo.syscolumns.name LIKE N'%Sequence')) AND (dbo.sysobjects.name IN (N'CollectionSpecimen', 'CollectionAgent', 'IdentificationUnit', 
                      'Identification', 'CollectionStorage', 'Collection', 'CollectionEvent', 'CollectionExchange', 'CollectionImage', 'CollectionExpedition'))
ORDER BY dbo.sysobjects.name, dbo.syscolumns.name

GO
GRANT SELECT ON [dbo].[ApplicationSearchMenuFields] TO [Editor] AS [dbo]
GO
GRANT SELECT ON [dbo].[ApplicationSearchMenuFields] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[ApplicationSearchSelectionStrings_Core]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   ApplicationSearchSelectionStrings_Core - adaption to DSGVO   ###############################################
--######   bugfix for remnants with user name instead of user ID   ####################################################
--#####################################################################################################################

CREATE VIEW [dbo].[ApplicationSearchSelectionStrings_Core]
AS
SELECT      SQLStringIdentifier, ItemTable, SQLString, Description
FROM            dbo.ApplicationSearchSelectionStrings
WHERE        (UserName = dbo.UserID())
and ISNUMERIC(UserName) = 1
union
SELECT        SQLStringIdentifier, ItemTable, SQLString, Description
FROM            dbo.ApplicationSearchSelectionStrings
WHERE        (UserName = User_Name())
and ISNUMERIC(UserName) = 0
GO
GRANT SELECT ON [dbo].[ApplicationSearchSelectionStrings_Core] TO [User] AS [dbo]
GO

/****** Object:  View [dbo].[CollectionSpecimenID_AvailableReadOnly]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   CollectionSpecimenID_AvailableReadOnly - include sUser_sName()  ############################################
--#####################################################################################################################

CREATE VIEW [dbo].[CollectionSpecimenID_AvailableReadOnly]
AS
SELECT        P.CollectionSpecimenID
FROM            dbo.CollectionProject AS P INNER JOIN
                         dbo.ProjectUser AS U ON P.ProjectID = U.ProjectID
WHERE        (U.LoginName = USER_NAME() OR U.LoginName = sUSER_sNAME()) AND (U.ReadOnly = 1) AND (P.CollectionSpecimenID NOT IN
                             (SELECT        P.CollectionSpecimenID
                               FROM            dbo.CollectionProject AS P INNER JOIN
                                                         dbo.ProjectUser AS U ON P.ProjectID = U.ProjectID
                               WHERE        (U.LoginName = USER_NAME() OR U.LoginName = sUSER_sNAME()) AND (U.ReadOnly = 0)))
GROUP BY P.CollectionSpecimenID

GO
GRANT SELECT ON [dbo].[CollectionSpecimenID_AvailableReadOnly] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionSpecimenID_ReadOnly]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   CollectionSpecimenID_ReadOnly - include sUser_sName()  #####################################################
--#####################################################################################################################

CREATE VIEW [dbo].[CollectionSpecimenID_ReadOnly]
AS
SELECT        P.CollectionSpecimenID
FROM            dbo.CollectionProject AS P INNER JOIN
dbo.ProjectUser AS U ON P.ProjectID = U.ProjectID
WHERE        (U.LoginName = USER_NAME() OR U.LoginName = sUSER_sNAME()) AND (U.ReadOnly = 1) 
GROUP BY P.CollectionSpecimenID
GO
GRANT SELECT ON [dbo].[CollectionSpecimenID_ReadOnly] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[CollectionSpecimenRelationInvers]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   CollectionSpecimenRelationInvers   ######################################################################################
--#####################################################################################################################

CREATE VIEW [dbo].[CollectionSpecimenRelationInvers]
AS 
SELECT TOP 100 PERCENT substring(R.RelatedSpecimenURI, len(dbo.baseURL()) + 1, 255) AS CollectionSpecimenID,
R.CollectionSpecimenID AS RelatedSpecimenCollectionSpecimenID, S.AccessionNumber AS RelatedSpecimenAccessionNumber, 
R.RelationType, R.RelatedSpecimenCollectionID AS RelatedSpecimenCollectionID, 
R.Notes
FROM CollectionSpecimenRelation R, CollectionSpecimen S  
WHERE (R.IsInternalRelationCache = 1)  
AND S.CollectionSpecimenID = R.CollectionSpecimenID 
and not R.RelatedSpecimenURI IS NULL
and R.RelatedSpecimenURI like dbo.BaseURL() + '%'
ORDER BY RelatedSpecimenDisplayText

GO
GRANT SELECT ON [dbo].[CollectionSpecimenRelationInvers] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[FirstCollectionAgent]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[FirstCollectionAgent]
AS
SELECT     CollectionSpecimenID, CollectorsName, CollectorsAgentURI, CollectorsSequence, CollectorsNumber, Notes, DataWithholdingReason
FROM         dbo.CollectionAgent AS Agent
WHERE     EXISTS
                          (SELECT     CollectionSpecimenID
                            FROM          dbo.CollectionAgent AS A
                            GROUP BY CollectionSpecimenID
                            HAVING      (Agent.CollectionSpecimenID = CollectionSpecimenID) AND (MIN(CollectorsName) = Agent.CollectorsName))
GO
GRANT SELECT ON [dbo].[FirstCollectionAgent] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[IdentificationSequenceMax]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[IdentificationSequenceMax]
AS
SELECT     CollectionSpecimenID, IdentificationUnitID, MAX(IdentificationSequence) AS IdentificationSequenceMax
FROM         dbo.Identification
GROUP BY CollectionSpecimenID, IdentificationUnitID
GO
GRANT SELECT ON [dbo].[IdentificationSequenceMax] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[IdentifierEvent]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   Views for linked table CollectionEvent     #################################################################
--#####################################################################################################################

CREATE VIEW [dbo].[IdentifierEvent]
AS
SELECT        ID, ReferencedID AS CollectionEventID, Type, Identifier, URL, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID
FROM            ExternalIdentifier
WHERE        (ReferencedTable = N'CollectionEvent')

GO
GRANT SELECT ON [dbo].[IdentifierEvent] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[IdentifierPart]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   Views for linked table CollectionSpecimenPart     ##########################################################
--#####################################################################################################################

CREATE VIEW [dbo].[IdentifierPart]
AS
SELECT        ID, ReferencedID AS SpecimenPartID, Type, Identifier, URL, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID
FROM            ExternalIdentifier
WHERE        (ReferencedTable = N'CollectionSpecimenPart')

GO
GRANT SELECT ON [dbo].[IdentifierPart] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[IdentifierSpecimen]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   Views for linked table CollectionSpecimen     ##############################################################
--#####################################################################################################################

CREATE VIEW [dbo].[IdentifierSpecimen]
AS
SELECT        ID, ReferencedID AS CollectionSpecimenID, Type, Identifier, URL, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID
FROM            ExternalIdentifier
WHERE        (ReferencedTable = N'CollectionSpecimen')

GO
GRANT SELECT ON [dbo].[IdentifierSpecimen] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[IdentifierTransaction]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--#####################################################################################################################
--######   ExternalIdentifier        ##################################################################################
--######   Views for linked table Transaction     #####################################################################
--#####################################################################################################################

CREATE VIEW [dbo].[IdentifierTransaction]
AS
SELECT        ID, ReferencedID AS TransactionID, Type, Identifier, URL, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID
FROM            ExternalIdentifier
WHERE        (ReferencedTable = N'Transaction')

GO
GRANT SELECT ON [dbo].[IdentifierTransaction] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[IdentifierUnit]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   Views for linked table IdentificationUnit     ##############################################################
--#####################################################################################################################

CREATE VIEW [dbo].[IdentifierUnit]
AS
SELECT        ID, ReferencedID AS IdentificationUnitID, Type, Identifier, URL, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID
FROM            ExternalIdentifier
WHERE        (ReferencedTable = N'IdentificationUnit')

GO
GRANT SELECT ON [dbo].[IdentifierUnit] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[ManagerSpecimenPartList]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[ManagerSpecimenPartList]
AS
SELECT     TOP (100) PERCENT CASE WHEN CollectionSpecimenPart.AccessionNumber IS NULL OR
                      CollectionSpecimenPart.AccessionNumber = '' THEN CollectionSpecimen.AccessionNumber ELSE CollectionSpecimenPart.AccessionNumber END AS AccessionNumber,
                       dbo.CollectionSpecimenPart.CollectionSpecimenID, dbo.CollectionSpecimenPart.SpecimenPartID, 
                      dbo.CollectionSpecimen.AccessionNumber AS AccessionNumberSpecimen, dbo.CollectionSpecimenPart.AccessionNumber AS AccessionNumberPart, 
                      dbo.CollectionSpecimenPart.MaterialCategory, dbo.CollectionSpecimenPart.CollectionID, ManagerCollectionList_1.CollectionName
FROM         dbo.CollectionSpecimenPart INNER JOIN
                      dbo.CollectionSpecimen ON dbo.CollectionSpecimenPart.CollectionSpecimenID = dbo.CollectionSpecimen.CollectionSpecimenID INNER JOIN
                      dbo.ManagerCollectionList() AS ManagerCollectionList_1 ON dbo.CollectionSpecimenPart.CollectionID = ManagerCollectionList_1.CollectionID
WHERE     (dbo.CollectionSpecimenPart.AccessionNumber <> N'') OR
                      (dbo.CollectionSpecimen.AccessionNumber <> N'')
ORDER BY AccessionNumber

GO
/****** Object:  View [dbo].[ProjectList]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   ProjectList - include ProjectURI to enable Backlink search  ################################################
--#####################################################################################################################

CREATE VIEW [dbo].[ProjectList]
AS
SELECT        TOP (100) PERCENT dbo.ProjectProxy.Project, dbo.ProjectUser.ProjectID, CAST(dbo.ProjectUser.ReadOnly AS int) AS ReadOnly, dbo.ProjectProxy.ProjectURI
FROM            dbo.ProjectUser INNER JOIN
                         dbo.ProjectProxy ON dbo.ProjectUser.ProjectID = dbo.ProjectProxy.ProjectID
WHERE        (dbo.ProjectUser.LoginName = USER_NAME())
GROUP BY dbo.ProjectProxy.Project, dbo.ProjectUser.ProjectID, CAST(dbo.ProjectUser.ReadOnly AS int), dbo.ProjectProxy.ProjectURI
ORDER BY dbo.ProjectProxy.Project
GO
GRANT SELECT ON [dbo].[ProjectList] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[ProjectListNotReadOnly]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######   ProjectListNotReadOnly  ####################################################################################
--#####################################################################################################################

CREATE VIEW [dbo].[ProjectListNotReadOnly]
AS
SELECT     TOP 100 PERCENT P.Project, U.ProjectID
FROM         dbo.ProjectUser U INNER JOIN
                      dbo.ProjectProxy P ON U.ProjectID = P.ProjectID
WHERE     U.LoginName = USER_NAME() AND (U.[ReadOnly] = 0 OR U.[ReadOnly] IS NULL)
GROUP BY P.Project, U.ProjectID
ORDER BY P.Project


GO
GRANT SELECT ON [dbo].[ProjectListNotReadOnly] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[RequesterSpecimenPartList]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[RequesterSpecimenPartList]
AS
SELECT     TOP (100) PERCENT CASE WHEN CollectionSpecimenPart.AccessionNumber IS NULL OR
                      CollectionSpecimenPart.AccessionNumber = '' THEN CollectionSpecimen.AccessionNumber ELSE CollectionSpecimenPart.AccessionNumber END AS AccessionNumber,
                       dbo.CollectionSpecimenPart.CollectionSpecimenID, dbo.CollectionSpecimenPart.SpecimenPartID, 
                      dbo.CollectionSpecimen.AccessionNumber AS AccessionNumberSpecimen, dbo.CollectionSpecimenPart.AccessionNumber AS AccessionNumberPart, 
                      dbo.CollectionSpecimenPart.MaterialCategory, dbo.CollectionSpecimenPart.CollectionID, dbo.RequesterCollectionList.CollectionName
FROM         dbo.CollectionSpecimenPart INNER JOIN
                      dbo.CollectionSpecimen ON dbo.CollectionSpecimenPart.CollectionSpecimenID = dbo.CollectionSpecimen.CollectionSpecimenID INNER JOIN
                      dbo.RequesterCollectionList() ON dbo.CollectionSpecimenPart.CollectionID = dbo.RequesterCollectionList.CollectionID
WHERE     (dbo.CollectionSpecimenPart.AccessionNumber <> N'') OR
                      (dbo.CollectionSpecimen.AccessionNumber <> N'')
ORDER BY AccessionNumber

GO
/****** Object:  View [dbo].[TransactionPermit]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   TransactionPermit - adding column Investigator  ############################################################
--#####################################################################################################################

CREATE VIEW [dbo].[TransactionPermit]
AS
SELECT        TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, MaterialCategory, MaterialCollectors, MaterialSource, FromTransactionPartnerName, FromTransactionNumber, 
                         ToTransactionPartnerName, ToTransactionNumber, NumberOfUnits, TransactionComment, Investigator, BeginDate, AgreedEndDate, DateSupplement, InternalNotes, ToRecipient, ResponsibleName, TransactionID
FROM            dbo.[Transaction]
WHERE        (TransactionType IN (N'permit'))
GO
GRANT SELECT ON [dbo].[TransactionPermit] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[UserGroups]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[UserGroups]
AS
SELECT     TOP (100) PERCENT CASE WHEN [CombinedNameCache] IS NULL THEN [LoginName] ELSE [CombinedNameCache] END AS CombinedNameCache, 
                      dbo.UserProxy.LoginName, sysusers_1.name AS UserGroup
FROM         sys.sysmembers INNER JOIN
                      sys.sysusers ON sys.sysmembers.memberuid = sys.sysusers.uid INNER JOIN
                      sys.sysusers AS sysusers_1 ON sys.sysmembers.groupuid = sysusers_1.uid INNER JOIN
                      dbo.UserProxy ON sys.sysusers.name = dbo.UserProxy.LoginName
ORDER BY CombinedNameCache

GO
/****** Object:  View [dbo].[ViewBaseURL]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   ViewBaseURL       ##########################################################################################
--#####################################################################################################################

CREATE VIEW [dbo].[ViewBaseURL]
	AS
	SELECT dbo.BaseURL() AS BaseURL
GO
GRANT SELECT ON [dbo].[ViewBaseURL] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[ViewCollectionEventImage]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   ViewCollectionEventImage for linked server  ################################################################
--#####################################################################################################################


CREATE VIEW [dbo].[ViewCollectionEventImage]
AS
SELECT        CollectionEventID, URI, ResourceURI, ImageType, Notes, CAST(Description AS nvarchar(MAX)) AS Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, 
                         LicenseHolderAgentURI, LicenseYear, DataWithholdingReason
FROM            dbo.CollectionEventImage
GO
GRANT SELECT ON [dbo].[ViewCollectionEventImage] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[ViewCollectionEventSeriesImage]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   ViewCollectionEventSeriesImage for linked server  ##########################################################
--#####################################################################################################################


CREATE VIEW [dbo].[ViewCollectionEventSeriesImage]
AS
SELECT        SeriesID, URI, ResourceURI, ImageType, Notes, CAST(Description AS nvarchar(MAX)) AS Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, 
                         LicenseHolderAgentURI, LicenseYear, DataWithholdingReason
FROM            dbo.CollectionEventSeriesImage
GO
GRANT SELECT ON [dbo].[ViewCollectionEventSeriesImage] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[ViewCollectionImage]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   ViewCollectionImage  for linked server  ####################################################################
--#####################################################################################################################


CREATE VIEW [dbo].[ViewCollectionImage]
AS
SELECT        CollectionID, URI, ImageType, Notes, CAST(Description AS nvarchar(MAX)) AS Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, 
                         LicenseYear, DataWithholdingReason
FROM            dbo.CollectionImage
GO
GRANT SELECT ON [dbo].[ViewCollectionImage] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[ViewCollectionSpecimenImage]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   ViewCollectionSpecimenImage for linked server  #############################################################
--#####################################################################################################################


CREATE VIEW [dbo].[ViewCollectionSpecimenImage]
AS
SELECT        CollectionSpecimenID, URI, ResourceURI, SpecimenPartID, IdentificationUnitID, ImageType, Notes, CAST(Description AS nvarchar(MAX)) AS Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, 
                         LicenseType, LicenseURI, LicenseHolder, LicenseHolderAgentURI, LicenseYear, LicenseNotes, DataWithholdingReason, DisplayOrder, InternalNotes
FROM            dbo.CollectionSpecimenImage
GO
GRANT SELECT ON [dbo].[ViewCollectionSpecimenImage] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[ViewDiversityWorkbenchModule]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   ViewDiversityWorkbenchModule     ###########################################################################
--#####################################################################################################################

CREATE VIEW [dbo].[ViewDiversityWorkbenchModule]
AS
SELECT dbo.DiversityWorkbenchModule() AS DiversityWorkbenchModule
GO
GRANT SELECT ON [dbo].[ViewDiversityWorkbenchModule] TO [User] AS [dbo]
GO
/****** Object:  View [dbo].[ViewIdentificationUnitGeoAnalysis]    Script Date: 06.04.2021 17:13:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   ViewIdentificationUnitGeoAnalysis for linked server  #######################################################
--#####################################################################################################################


CREATE VIEW [dbo].[ViewIdentificationUnitGeoAnalysis]
AS
SELECT        CollectionSpecimenID, IdentificationUnitID, AnalysisDate, Geography.ToString() AS Geography, Geometry.ToString() AS Geometry, ResponsibleName, ResponsibleAgentURI, Notes
FROM            dbo.IdentificationUnitGeoAnalysis
GO
GRANT SELECT ON [dbo].[ViewIdentificationUnitGeoAnalysis] TO [User] AS [dbo]
GO
INSERT [dbo].[AnnotationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Annotation', N'Annotation', N'Annotation', NULL, 1, NULL, NULL, N'50765d8e-222a-e111-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[AnnotationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Problem', N'Problem', N'Problem', NULL, 1, NULL, NULL, N'60b8e5f8-3527-e111-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[CollCircumstances_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'bred', N'animal born in captivity (domestic, zoo, or farm animales)', N'bred', NULL, 1, NULL, NULL, N'bbb46d30-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollCircumstances_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'captivity', N'wild animal or plant raised in captivity', N'captivity', NULL, 1, NULL, NULL, N'bcb46d30-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollCircumstances_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'cultivated', N'cultivated in enclosed conditions (greenhouse plants, fungi, bacteria, etc. in laboratory or biotechnology conditions)', N'cultivated', NULL, 1, NULL, NULL, N'bdb46d30-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollCircumstances_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'experiment', N'material cultivated or treated under experimental conditions (including, e.g., infection experiments)', N'experiment', NULL, 1, NULL, NULL, N'beb46d30-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollCircumstances_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'imported', N'imported material of uncertain provenence (e.g. food items)', N'imported', NULL, 1, NULL, NULL, N'bfb46d30-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollCircumstances_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'natural', N'occurrence under natural conditions', N'natural', NULL, 1, NULL, NULL, N'c0b46d30-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollCircumstances_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'planted', N'planted in open agriculture, horticulture, or silviculture', N'planted', NULL, 1, NULL, NULL, N'c1b46d30-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollCircumstances_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'unknown', N'unknown circumstances of occurrence', N'unknown', NULL, 1, NULL, NULL, N'c2b46d30-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollCollectionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [Icon], [RowGUID]) VALUES (N'box', N'box', N'box', NULL, 1, NULL, NULL, NULL, N'68be5541-51fc-e811-8184-809ad4898767')
GO
INSERT [dbo].[CollCollectionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [Icon], [RowGUID]) VALUES (N'cupboard', N'cupboard', N'cupboard', NULL, 1, NULL, NULL, NULL, N'66be5541-51fc-e811-8184-809ad4898767')
GO
INSERT [dbo].[CollCollectionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [Icon], [RowGUID]) VALUES (N'drawer', N'drawer', N'drawer', NULL, 1, NULL, NULL, NULL, N'67be5541-51fc-e811-8184-809ad4898767')
GO
INSERT [dbo].[CollCollectionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [Icon], [RowGUID]) VALUES (N'institution', N'institution', N'institution', NULL, 1, NULL, NULL, NULL, N'69be5541-51fc-e811-8184-809ad4898767')
GO
INSERT [dbo].[CollCollectionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [Icon], [RowGUID]) VALUES (N'radioactive', N'Place where radioactive objects are stored', N'radioactive', NULL, 1, NULL, NULL, NULL, N'6cbe5541-51fc-e811-8184-809ad4898767')
GO
INSERT [dbo].[CollCollectionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [Icon], [RowGUID]) VALUES (N'room', N'room', N'room', NULL, 1, NULL, NULL, NULL, N'6abe5541-51fc-e811-8184-809ad4898767')
GO
INSERT [dbo].[CollCollectionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [Icon], [RowGUID]) VALUES (N'steel locker', N'steel locker', N'steel locker', NULL, 1, NULL, NULL, NULL, N'6bbe5541-51fc-e811-8184-809ad4898767')
GO
INSERT [dbo].[CollDateCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'actual', N'The given date is the real date', N'actual', 1, 1, NULL, NULL, N'c3b46d30-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollDateCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'collection date', N'The date when the specimen was collected', N'collection date', 2, 1, NULL, NULL, N'c4b46d30-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollDateCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'estimated', N'The given date was estimated by the user', N'estimated', 3, 1, NULL, NULL, N'c5b46d30-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollDateCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'system', N'The given date was generated by the system', N'system', 4, 1, NULL, NULL, N'c6b46d30-2f6d-de11-871c-001ec9d7ae4b')
GO
SET IDENTITY_INSERT [dbo].[Collection] ON 
;
INSERT [dbo].[Collection] ([CollectionID], [CollectionParentID], [CollectionName], [CollectionAcronym], [AdministrativeContactName], [AdministrativeContactAgentURI], [Description], [Location], [CollectionOwner], [DisplayOrder], [Type], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) 
VALUES (-1, NULL, N'No collection', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, CAST(N'2013-02-01T11:07:12.430' AS DateTime), N'dbo', CAST(N'2013-02-01T11:07:12.430' AS DateTime), N'dbo', N'c167c024-576c-e211-94c0-001ec9d7ae4b')
;
SET IDENTITY_INSERT [dbo].[Collection] OFF
GO
INSERT [dbo].[CollEventDateCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'actual', N'The given date is the real date', N'actual', 1, 1, NULL, NULL, N'01a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventDateCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'estimated', N'The given date was estimated by the user', N'estimated', 3, 1, NULL, NULL, N'03a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventDateCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'system', N'The given date was generated by the system', N'system', 4, 1, NULL, NULL, N'04a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'aerial photography', NULL, N'aerial photography', 4, 1, NULL, NULL, N'05a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'audio', N'audio file related to an event', N'sound', 10, 1, NULL, NULL, N'52219de2-6b21-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'audio (for transcription)', N'audio file of spoken comments related to an event that might be deleted after transcription into the database', N'sound /recorded speech', 11, 1, NULL, N'audio', N'e3b1fa0d-27c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'biotope photography', NULL, N'biotope photography', 5, 1, NULL, NULL, N'06a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'documentation', N'a still image of a document or paperwork associated with an event, e. g. field books', N'documentation', 6, 1, NULL, NULL, N'f31691df-cda2-e311-acb0-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'drawing,  painting', N'original line or color drawing of an event', N'drawing,  painting', 8, 1, NULL, NULL, N'f41691df-cda2-e311-acb0-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'image', N'still image of any raster or vector format without any further information regarding the content type, e. g. graphic designs, plans and maps, vector graphics 2D, 3D models', N'image', 7, 1, NULL, NULL, N'51219de2-6b21-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'landscape photography', NULL, N'landscape photography', 3, 1, NULL, NULL, N'07a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'map', NULL, N'map', 2, 0, NULL, N'image', N'08a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'photograph', N'photographic still image of an event; e. g. trap, trawl net', N'photograph', 3, 1, NULL, NULL, N'3373d810-51cd-df11-8a46-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'supporting files', N'text-xml or text-WKT encoded files, assigned to multimedia objects', N'supporting files', 14, 1, NULL, NULL, N'f51691df-cda2-e311-acb0-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'video', N'e. g. video file related to an event', N'moving image', 12, 1, NULL, NULL, N'20d5cebd-54bb-df11-ab79-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventSeriesImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'aerial photography', NULL, N'aerial photography', 4, 1, NULL, NULL, N'09a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventSeriesImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'audio', N'audio file related to an event or event series', N'sound', 10, 1, NULL, NULL, N'54219de2-6b21-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventSeriesImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'audio (for transcription)', N'audio file of spoken comments related to an event or event series that might be deleted after transcription into the database', N'sound /recorded speech', 11, 1, NULL, N'audio', N'e4b1fa0d-27c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventSeriesImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'documentation', N'a still image of a document or paperwork associated with an event series, e. g. field books', N'documentation', 6, 1, NULL, NULL, N'f61691df-cda2-e311-acb0-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventSeriesImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'drawing,  painting', N'original line or color drawing of an event series', N'drawing,  painting', 8, 1, NULL, NULL, N'f81691df-cda2-e311-acb0-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventSeriesImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'image', N'still image of any raster or vector format without any further information regarding the content type, e. g. graphic designs, plans and maps, vector graphics 2D, 3D models', N'image', 7, 1, NULL, NULL, N'53219de2-6b21-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventSeriesImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'landscape photography', NULL, N'landscape photography', 3, 1, NULL, NULL, N'0aa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventSeriesImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'map', NULL, N'map', 5, 0, NULL, N'image', N'0ba1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventSeriesImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'moving image', N'e. g. video file related to an event series', N'moving image', 12, 1, NULL, NULL, N'f91691df-cda2-e311-acb0-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventSeriesImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'photograph', N'photographic still image of an event series; e. g. trap, trawl net', N'photograph', 1, 1, NULL, NULL, N'f71691df-cda2-e311-acb0-001ec9d7ae4b')
GO
INSERT [dbo].[CollEventSeriesImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'supporting files', N'text-xml or text-WKT encoded files, assigned to multimedia objects', N'supporting files', 14, 1, NULL, NULL, N'fa1691df-cda2-e311-acb0-001ec9d7ae4b')
GO
INSERT [dbo].[CollExchangeType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'borrow', NULL, N'borrow', 4, 1, NULL, NULL, N'0ca1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollExchangeType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'exchange', NULL, N'exchange', 2, 1, NULL, NULL, N'0da1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollExchangeType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'gift', N'gift ', N'gift', 1, 1, NULL, NULL, N'0ea1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollExchangeType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'loan', NULL, N'loan', 3, 1, NULL, NULL, N'0fa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'absence', N'When nomenclatural type material has been used up in previous studies, or if a mixed collection contains e.g. several fungi but none fits the protologue', N'absence', 1, 1, NULL, NULL, N'10a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'confirmation', N'The examination confirms a previous identification', N'confirmation', 2, 1, NULL, NULL, N'11a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'correction', N'Correction of a misidentification supposedly due to a typing error.', N'correction', 3, 1, NULL, NULL, N'12a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'determination', N'The determination of the material results in a new identification or correction', N'determination', 4, 1, NULL, NULL, N'13a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'dubious', N'The material is assumed as dubiously belonging to the identified taxon or the observation is assumed as dubiously belonging  to the identified taxon', N'dubious', 5, 1, NULL, NULL, N'14a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'expert assignment', N'The assignment of occurrence data to a new taxon following expert opinion, without study of material', N'expert assignment', 11, 1, NULL, NULL, N'b1f9b798-5c46-e911-8190-e928b84c451d')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'implicit', N'The identification can be logically deduced from the type material, e.g. in the case of Yes/No type specimens.', N'implicit', 6, 1, NULL, NULL, N'15a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'negative', N'The material is identified as not belonging to the identified taxon or the observation is verified as not belonging  to the identified taxon', N'negative', 7, 1, NULL, NULL, N'16a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'preference', N'Assigning preference to an older determination over the most recent one. Differs from a confirmation only in that the object has not been re-examined. The choice is based on the expertise of the person effecting the earlier identification', N'preference', 8, 1, NULL, NULL, N'17a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'renaming', N'e.g. assigning a species to a new genus or a purely nomenclatural change', N'renaming', 9, 1, NULL, NULL, N'18a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'revision', N'The correction of a former determination of the material', N'revision', 10, 1, NULL, NULL, N'70e58623-5f33-e411-80d9-a9b1a993a97e')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'type annotation', N'annotated as original material (e. g. syntype, paratype), e.g. done by a scientist by adding type labels to the material as part of a curatorial process', N'type annotation', 200, 1, NULL, NULL, N'd0fa7fa5-7147-e111-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'type designation', N'designated as type material (i. e. lectotype, neotype, epitype or their duplicates; ICBN 2006, Art. 7.5, 7.10-11 + N2, Art. 9.7-11, 9.20, 9A, Art. 37.3; nomenclatural action undertaken by the person who is treating the nomenclature of the taxon)', N'type designation', 220, 1, NULL, NULL, N'd1fa7fa5-7147-e111-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'type indication', N'indicated as type material  (ICBN 2006, Art. 37.1-4, 37A, Art. 7.5, Art. 24.3; any nomenclatural action, e. g. by the person who described the taxon, other than type designation)', N'type indication', 210, 1, NULL, NULL, N'd2fa7fa5-7147-e111-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationDateCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'actual', N'The given date is the real date', N'actual', 1, 1, NULL, NULL, N'19a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationDateCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'collection date', N'The collection date has been taken as the identification date', N'collection date', 2, 1, NULL, NULL, N'1aa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationDateCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'estimated', N'The given date was estimated by the user', N'estimated', 3, 1, NULL, NULL, N'1ba1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationDateCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'system', N'The given date was generated by the system', N'system', 4, 1, NULL, NULL, N'1ca1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'', N'(select this for identifications that are certain)', N'', 10, 1, NULL, NULL, N'1da1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'?', N'unspecified doubtful identification (aff. or cf., or applicable taxonomic rank not known)', N'?', 20, 1, NULL, NULL, N'1ea1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'aff. forma', N'''affinis'' = similar to, but probably not the named forma', N'aff. forma', 30, 1, NULL, NULL, N'1fa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'aff. gen.', N'''affinis'' = similar to, but probably not the named genus', N'aff. gen.', 40, 1, NULL, NULL, N'20a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'aff. sp.', N'''affinis'' = similar to, but probably not the named species', N'aff. sp.', 50, 1, NULL, NULL, N'21a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'aff. subsp.', N'''affinis'' = similar to, but probably not the named subspecies', N'aff. subsp.', 60, 1, NULL, NULL, N'22a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'aff. var.', N'''affinis'' = similar to, but probably not the named variety', N'aff. var.', 70, 1, NULL, NULL, N'23a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'agg.', N'aggregate', N'agg.', 80, 1, NULL, NULL, N'24a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'cf. forma', N'doubtful identification of forma or forma specialis. Example: ''Ech. ferruginea cf. f. rubra''', N'cf. forma', 90, 1, NULL, NULL, N'25a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'cf. gen.', N'doubtful genus identification. Examples: ''cf. Abies'', ''?Abies''', N'cf. gen.', 100, 1, NULL, NULL, N'26a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'cf. hybrid', N'doubtful identification of hybrid. Example: cf. Salix alba x fragilis', N'cf. hybrid', 135, 1, NULL, NULL, N'531564b0-a3b5-df11-ab79-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'cf. sp.', N'doubtful species identification (genus identification certain). Example: ''Abies cf. alba''', N'cf. sp.', 110, 1, NULL, NULL, N'27a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'cf. subsp.', N'doubtful identification of subspecies. Example: ''Abies alba cf. ssp. alba''', N'cf. subsp.', 120, 1, NULL, NULL, N'28a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'cf. var.', N'doubtful identification of variety. Example: ''Echinonema ferruginea cf. var. campestris''', N'cf. var.', 130, 1, NULL, NULL, N'29a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N's. l.', N'sensu lato', N's. l.', 140, 1, NULL, NULL, N'2aa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N's. str.', N'sensu stricto', N's. str.', 150, 1, NULL, NULL, N'2ba1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'sp.', N'only the genus is given, the information relates to a single, unspecified species', N'sp.', 160, 1, NULL, NULL, N'2ca1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'sp. nov.', N'only the genus is given, it is assumed that the unidentified species is new', N'sp. nov.', 170, 1, NULL, NULL, N'2da1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollIdentificationQualifier_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'spp.', N'only the genus is given, the information covers several unspecified species', N'spp.', 180, 1, NULL, NULL, N'2ea1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollLabelTranscriptionState_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'complete', N'all data from label transferred in database', N'complete', 7, 1, NULL, NULL, N'2fa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollLabelTranscriptionState_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'curator review required', N'curator for transcription / review required', N'curator review required', 3, 1, NULL, NULL, N'30a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollLabelTranscriptionState_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'extern review required', N'extern curator for transcription / review required', N'extern review required', 4, 1, NULL, NULL, N'31a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollLabelTranscriptionState_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'final curator review', N'specimen has been finally reviewed by curator', N'final curator review', 6, 1, NULL, NULL, N'32a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollLabelTranscriptionState_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'first curator review', N'specimen has been reviewed by curator for first time', N'first curator review', 5, 1, NULL, NULL, N'33a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollLabelTranscriptionState_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'incomplete', N'transcription started by technical staff', N'incomplete', 2, 1, NULL, NULL, N'34a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollLabelTranscriptionState_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'not started', N'transcription not started', N'not started', 1, 1, NULL, NULL, N'35a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollLabelType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'handwriting', N'all data in handwriting', N'handwriting', 3, 1, NULL, NULL, N'36a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollLabelType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'mixed', N'data typed with handwriting comments', N'mixed', 2, 1, NULL, NULL, N'37a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollLabelType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'typed', N'all data typed', N'typed', 1, 1, NULL, NULL, N'38a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'bones', N'bones or skeleton from vertebrates', N'bones', 500, 1, NULL, N'preserved specimen', N'39a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'complete skeleton', N'complete skeleton', N'complete skeleton', 502, 1, NULL, N'bones', N'3aa1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'cones', N'cones of e.g. Gymnospermae, not stored together with the herbarium sheet', N'cones', 400, 0, NULL, N'preserved specimen', N'3ba1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'cultures', N'living cultures of organisms', N'cultures', 30, 1, NULL, N'living specimen', N'3ca1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'DNA lyophilised', N'DNA lyophilised', N'DNA lyophilised', 91, 1, NULL, N'DNA sample', N'49a9f8c6-7b7e-e611-8136-f9e85bafd01e', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'DNA sample', N'DNA sample', N'DNA sample', 90, 1, NULL, N'other specimen', N'3da1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'drawing', N'original line or color drawing', N'drawing', 100, 1, NULL, N'drawing or photograph', N'3ea1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'drawing or photograph', N'A record describing a static visual representation (digital or physical)', N'drawing or photograph', 3100, 1, NULL, N'medium', N'3fa1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'dried specimen', N'dried specimen', N'dried specimen', 25, 1, NULL, N'preserved specimen', N'2443e76d-8b90-de11-872f-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'earth science specimen', N'A record describing a geo-scientific object which is no pure mineral, rock or fossil specimen (but a mixture), or a geo-scientific specimen with unknown traits', N'earth science specimen', 810, 1, NULL, N'other specimen', N'ea902d03-2928-e811-816a-f7fced133562', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'egg', N'egg, e.g. of a bird or insect', N'egg', 114, 1, NULL, N'other specimen', N'6123e654-b300-e111-a05d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'fossil bones', N'fossil bones or skeleton from vertebrates', N'fossil bones', 700, 1, NULL, N'fossil specimen', N'5eb5bdc5-e909-e011-828d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'fossil complete skeleton', N'fossil complete skeleton of a vertrebrate', N'fossil complete skeleton', 702, 1, NULL, N'fossil bones', N'60b5bdc5-e909-e011-828d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'fossil incomplete skeleton', N'fossil incomplete skeleton of a vertrebrate', N'fossil incomplete skeleton', 705, 1, NULL, N'fossil bones', N'62b5bdc5-e909-e011-828d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'fossil otolith', N'fossil otolith of fishes', N'fossil otolith', 708, 1, NULL, N'fossil bones', N'65b5bdc5-e909-e011-828d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'fossil postcranial skeleton', N'fossil postcranial skeleton of a vertrebrate', N'fossil postcranial skeleton', 703, 1, NULL, N'fossil bones', N'61b5bdc5-e909-e011-828d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'fossil scales', N'fossil scales of fish', N'fossil scales', 710, 1, NULL, N'fossil specimen', N'5ab5bdc5-e909-e011-828d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'fossil shell', N'fossil shell of animal', N'fossil shell', 711, 1, NULL, N'fossil specimen', N'5bb5bdc5-e909-e011-828d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'fossil single bones', N'fossil single bones of a vertrebrate', N'fossil single bones', 706, 1, NULL, N'fossil bones', N'63b5bdc5-e909-e011-828d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'fossil skull', N'fossil skull of a vertrebrate', N'fossil skull', 701, 1, NULL, N'fossil bones', N'5fb5bdc5-e909-e011-828d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'fossil specimen', N'A record describing a preserved specimen that is a fossil', N'fossil specimen', 23, 1, NULL, N'specimen', N'40a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'fossil tooth', N'fossil tooth of an animal', N'fossil tooth', 706, 1, NULL, N'fossil bones', N'64b5bdc5-e909-e011-828d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'herbarium sheets', N'capsules or sheets as stored in a botanical collection', N'herbarium sheets', 10, 1, NULL, N'dried specimen', N'41a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'human observation', N'A record describing an output of a human observation process', N'human observation', 2200, 0, NULL, N'observation', N'42a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'icones', N'icones, images etc. stored in a biological collection', N'icones', 120, 1, NULL, N'drawing or photograph', N'43a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'incomplete skeleton', N'incomplete skeleton', N'incomplete skeleton', 505, 1, NULL, N'bones', N'44a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'living specimen', N'A record describing a specimen which is alive (not preserved)', N'living specimen', 22, 1, NULL, N'specimen', N'45a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'machine observation', N'A record describing an output of a machine observation process', N'machine observation', 2300, 0, NULL, N'observation', N'46a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'material sample', N'A record describing the physical result of a sampling (or subsampling) event (sample either preserved or destructively processed)', N'material sample', 820, 1, NULL, N'other specimen', N'eb902d03-2928-e811-816a-f7fced133562', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'medium', N'medium like sound recordings, videos, images and the like', N'medium', 3000, 1, NULL, NULL, N'47a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'micr. slide', N'glass plate with specimen for microscopic study', N'micr. slide', 60, 1, NULL, N'other specimen', N'48a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'mineral specimen', N'A record describing a preserved specimen which is a mineral', N'mineral specimen', 800, 1, NULL, N'other specimen', N'e9902d03-2928-e811-816a-f7fced133562', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'mould', N'mould of animal', N'mould', 713, 1, NULL, N'fossil specimen', N'5db5bdc5-e909-e011-828d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'nest', N'nest, e.g. of a bird or insect', N'nest', 114, 1, NULL, N'other specimen', N'a1a06e0d-44fe-e011-a05d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'observation', N'observation', N'observation', 2000, 0, NULL, NULL, N'49a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'other specimen', N'A record describing a specimen which is not indicated as preserved, living, fossil or mineral', N'other specimen', 24, 1, NULL, N'specimen', N'4aa1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'otolith', N'otolith of fishes', N'otolith', 508, 1, NULL, N'bones', N'0134052e-c2c7-df11-8a46-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'pelt', N'pelt, skin or fur of an animal', N'pelt', 550, 1, NULL, N'preserved specimen', N'4ba1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'photogr. print', N'photographic print (color or black/white)', N'photogr. print', 130, 1, NULL, N'drawing or photograph', N'4ca1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'photogr. slide', N'image in the form of a photographic slide for projection', N'photogr. slide', 140, 1, NULL, N'drawing or photograph', N'4da1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'postcranial skeleton', N'postcranial skeleton', N'postcranial skeleton', 503, 1, NULL, N'bones', N'4ea1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'preserved specimen', N'A record describing a preserved specimen (not living)', N'preserved specimen', 21, 1, NULL, N'specimen', N'4fa1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'SEM table', N'table with specimen for Scanning electron microscopy', N'SEM table', 70, 1, NULL, N'other specimen', N'50a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'shell', N'shell e.g. of a snail', N'shell', 600, 1, NULL, N'preserved specimen', N'51a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'single bones', N'single bones', N'single bones', 504, 1, NULL, N'bones', N'52a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'skull', N'skull of a vertebrate', N'skull', 501, 1, NULL, N'bones', N'53a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'sound', N'sound recoding', N'sound', 112, 1, NULL, N'medium', N'54a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'specimen', N'specimen stored in a collection', N'specimen', 20, 1, NULL, NULL, N'55a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'TEM specimen', N'specimen preparation for Transmission electron microscopy', N'TEM specimen', 80, 1, NULL, N'other specimen', N'56a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'thin section', N'thin section', N'thin section', 62, 1, NULL, N'other specimen', N'57a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'tissue sample', N'tissue sample', N'tissue sample', 95, 1, NULL, N'other specimen', N'92785392-e8b9-e011-9556-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'tooth', N'tooth of an animal', N'tooth', 602, 1, NULL, N'bones', N'58a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'trace', N'trace e.g. footprints of an animal', N'trace', 111, 1, NULL, N'other specimen', N'59a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'trace fossil', N'trace fossil of animal', N'trace fossil', 712, 1, NULL, N'fossil specimen', N'5cb5bdc5-e909-e011-828d-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollMaterialCategory_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'vial', N'vial, flask or similar container', N'vial', 40, 1, NULL, N'preserved specimen', N'5aa1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollRetrievalType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'human observation', N'A record describing an output of a human observation process', N'human observation', NULL, 1, NULL, NULL, N'fb5eb9e5-f9cb-e511-811d-8595d0613680', NULL)
GO
INSERT [dbo].[CollRetrievalType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'literature', N'A record describing an output of a literature research', N'literature', NULL, 1, NULL, NULL, N'fd5eb9e5-f9cb-e511-811d-8595d0613680', NULL)
GO
INSERT [dbo].[CollRetrievalType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'machine observation', N'A record describing an output of a machine observation process', N'machine observation', NULL, 1, NULL, NULL, N'fc5eb9e5-f9cb-e511-811d-8595d0613680', NULL)
GO
INSERT [dbo].[CollSpecimenImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'audio', N'e. g. audio file related to a specimen, observation or unit', N'sound', 10, 1, NULL, NULL, N'e0b1fa0d-27c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[CollSpecimenImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'audio (for transcription)', N'e. g. audio file of spoken comments related to a specimen, observation or unit that might be deleted after transcription into the database', N'sound /recorded speech', 11, 1, NULL, N'audio', N'e1b1fa0d-27c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[CollSpecimenImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'drawing', N'original line or color drawing and painting of a specimen, observation or unit', N'drawing, painting', 2, 1, NULL, N'image', N'5ba1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollSpecimenImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'image', N'still image of any raster or vector  format without any further information regarding the content type, e. g. graphic designs, plans and maps, vector graphics 2D, 3D models', N'image', 7, 1, NULL, NULL, N'50219de2-6b21-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[CollSpecimenImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'label', N'a still image of a document or paperwork associated with a specimen, observation or unit, e. g. herbarium label, file card', N'documentation', 1, 1, N'replacement for label', N'image', N'5ca1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollSpecimenImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'LM photograph', N'photographic still image of a specimen, observation or unit from light microscopy', N'LM photograph', 6, 1, N'replacement for label', N'image', N'f11691df-cda2-e311-acb0-001ec9d7ae4b')
GO
INSERT [dbo].[CollSpecimenImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'photograph', N'photographic still image of a specimen, observation or unit; e. g. macro images of an object', N'photograph', 3, 1, NULL, NULL, N'5ea1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollSpecimenImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'SEM image', N'photographic still image of a specimen, observation or unit from scanning electron microscopy', N'SEM photograph', 4, 1, NULL, N'image', N'5fa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollSpecimenImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'supporting files', N'text-xml or text-WKT encoded files, assigned to multimedia objects', N'supporting files', 14, 1, NULL, NULL, N'f21691df-cda2-e311-acb0-001ec9d7ae4b')
GO
INSERT [dbo].[CollSpecimenImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'TEM image', N'photographic still image of a specimen, observation or unit from transmission electron microscopy', N'TEM photograph', 5, 1, NULL, N'image', N'60a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollSpecimenImageType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'video', N'e. g. video file related to an specimen, observation or unit', N'moving image', 12, 1, NULL, NULL, N'e2b1fa0d-27c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[CollSpecimenRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Duplicate', N'specimen or specimen part from the same location and time, designated by the same collector as such (may be one organism or not)', N'Duplicate', NULL, 1, NULL, NULL, N'61a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollSpecimenRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'public database', N'public database', N'public database', NULL, 1, NULL, NULL, N'fa5eb9e5-f9cb-e511-811d-8595d0613680')
GO
INSERT [dbo].[CollSpecimenRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Same location', N'different specimens from the same location, but potentially different time and collector', N'Same location', NULL, 1, NULL, NULL, N'a17e3e55-d215-e111-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[CollSpecimenRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Specimen part', N'material originated from one specimen, e.g. dried material + cultured material or wet material + DNA or tissue sample', N'Same origin', NULL, 1, NULL, NULL, N'62a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'alga', N'alga', N'alga', 100, 1, NULL, NULL, N'63a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'amphibian', N'amphibian', N'amphibian', 505, 1, NULL, N'vertebrate', N'78e58623-5f33-e411-80d9-a9b1a993a97e', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'animal', N'Animalia (= Metazoa)', N'animal', 420, 1, NULL, NULL, N'70a0c5b5-cda2-e311-acb0-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'arthropod', N'Arthropoda: insects, spiders, crabs etc.', N'arthropod', 450, 1, NULL, N'evertebrate', N'64a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'bacterium', N'bacteria/prokaryotic', N'bacterium', 20, 1, NULL, NULL, N'65a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'bird', N'bird', N'bird', 550, 1, NULL, N'vertebrate', N'66a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'bryophyte', N'Marchantiomorpha (liverworts), Anthocerotophyta (hornworts) and Bryophyta (mosses)', N'bryophyte', 110, 1, NULL, NULL, N'67a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'cnidaria', N'Cnidaria: sea anemones, corals, jellyfish, sea pens, hydra', N'cnidaria', 2010, 1, NULL, N'evertebrate', N'2343e76d-8b90-de11-872f-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'echinoderm', N'Echinodermata: sea urchins, starfish, and their allies', N'echinoderm', 490, 1, NULL, N'evertebrate', N'68a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'evertebrate', N'Animalia (= Metazoa) excl. Chordata', N'evertebrate', 2010, 1, NULL, N'animal', N'2243e76d-8b90-de11-872f-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'fish', N'fish', N'fish', 500, 1, NULL, N'vertebrate', N'69a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'fungus', N'Eumycota: mushrooms, sac fungi, yeast, molds, rusts, smuts, etc.', N'fungus', 210, 1, NULL, NULL, N'6aa1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'gall', N'growth modification or deformation of plant tissue or fungal plectenchyma, induced by a different organism ', N'gall', 122, 1, NULL, NULL, N'01d61cc2-88ce-e211-b5fc-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'insect', N'Hexapoda: insects, springtails, diplurans, and proturans', N'insect', 480, 1, NULL, N'arthropod', N'6ba1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'lichen', N'Lichenized Eumycota', N'lichen', 200, 1, NULL, NULL, N'6ca1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'mammal', N'mammal', N'mammal', 520, 1, NULL, N'vertebrate', N'6da1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'mineral', N'A record describing a preserved specimen which is a mineral', N'mineral', 1021, 1, NULL, NULL, N'9f4fb78b-fdf4-e611-8142-eb3a8f374edf', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'mollusc', N'Mollusca: Snails, clams, mussels, squids, octopi, chitons, and tusk shells', N'mollusc', 400, 1, NULL, N'evertebrate', N'6ea1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'myxomycete', N'Myxomycota', N'slime mould', 300, 1, NULL, NULL, N'6fa1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'other', N'other/anorganic', N'other', 1000, 1, NULL, NULL, N'70a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'plant', N'Lycophytes, ferns and seedplants', N'plant', 120, 1, NULL, NULL, N'71a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'reptile', N'reptile', N'reptile', 510, 1, NULL, N'vertebrate', N'91a0d2ee-d753-e011-bf26-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'rock', N'A record describing a preserved specimen which is a rock', N'rock', 1020, 1, NULL, NULL, N'9e4fb78b-fdf4-e611-8142-eb3a8f374edf', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'soil', N'soil', N'soil', 1100, 1, NULL, NULL, N'72a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'soil horizon', N'soil horizon', N'soil horizon', 1101, 1, NULL, N'soil', N'ec3f84dc-9996-eb11-81e0-df2fbe8129fa', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'spider', N'Spider: Including Araneae (Mesothelae, Mygalomorphae and Araneomorphae)', N'spider', NULL, 1, NULL, N'arthropod', N'c6f00a2b-210d-e611-8127-a40c2a1cec7f', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'unknown', N'unknown group', N'unknown', 200, 0, NULL, NULL, N'73a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'vertebrate', N'Chordata', N'vertebrate', 495, 1, NULL, N'animal', N'74a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTaxonomicGroup_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID], [Icon]) VALUES (N'virus', N'virus', N'virus', 10, 1, NULL, NULL, N'75a1c738-2f6d-de11-871c-001ec9d7ae4b', NULL)
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'borrow', NULL, N'borrowing', NULL, 0, N'BeginDate', NULL, N'76a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'embargo', N'Temporary data embargo for specimen that should not be published within the specified period', N'embargo', NULL, 1, N'BeginDate', NULL, N'00d61cc2-88ce-e211-b5fc-001ec9d7ae4b')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'exchange', NULL, N'exchange', NULL, 1, N'BeginDate', NULL, N'77a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'forwarding', N'a forwarding of specimens of a loan to another institution', N'forwarding', NULL, 1, N'BeginDate', NULL, N'72e58623-5f33-e411-80d9-a9b1a993a97e')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'gift', NULL, N'gift', NULL, 1, N'BeginDate', NULL, N'78a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'inventory', NULL, N'inventory', NULL, 1, N'AccessionNumber', NULL, N'79a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'loan', NULL, N'loan', NULL, 1, N'BeginDate', NULL, N'7aa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'permanent loan', N'permanent loan', N'permanent loan', NULL, 1, NULL, NULL, N'65be5541-51fc-e811-8184-809ad4898767')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'permit', N'permit or certificate for the collection of specimen', N'permit', NULL, 1, N'BeginDate', NULL, N'73e58623-5f33-e411-80d9-a9b1a993a97e')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'purchase', NULL, N'purchase', NULL, 1, N'BeginDate', NULL, N'7ba1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'regulation', N'a regulation, provisio or stipulation e.g. in the context of the Nagoya protocoll', N'regulation', NULL, 1, NULL, NULL, N'2c680981-1d2a-e911-818a-9b6212152bc8')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'removal', N'the removal of specimens from an institution, e.g. by damage, loss etc.', N'removal', NULL, 1, N'BeginDate', NULL, N'ed2a0036-b03e-e611-812d-83916174842e')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'request', NULL, N'request', NULL, 0, N'BeginDate', NULL, N'7ca1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'return', N'a partial return of a loan', N'return', NULL, 1, N'BeginDate', NULL, N'71e58623-5f33-e411-80d9-a9b1a993a97e')
GO
INSERT [dbo].[CollTransactionType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'transaction group', N'the superior dataset for a group of transactions', N'transaction group', NULL, 1, NULL, NULL, N'74e58623-5f33-e411-80d9-a9b1a993a97e')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'allolectotype', N'A paralectotype specimen that is the opposite sex of the lectotype. The term is not regulated by the ICZN. [Zoo.]', N'allolectotype', 1, 1, NULL, NULL, N'7da1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'alloneotype', N'A paraneotype specimen that is the opposite sex of the neotype. The term is not regulated by the ICZN. [Zoo.]', N'alloneotype', 2, 1, NULL, NULL, N'7ea1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'allotype', N'A paratype specimen designated from the type series by the original author that is the opposite sex of the holotype. The term is not regulated by the ICZN. [Zoo.]', N'allotype', 3, 1, NULL, NULL, N'7fa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'conserved type', N'The one specimen or other element conserved as type for a name of a subdivision of a genus or of an infraspecific taxonand listed in ICN, App. III and IV (typ. cons.)', N'conserved type', 40, 1, NULL, NULL, N'6dbe5541-51fc-e811-8184-809ad4898767')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'cotype', N'A deprecated term no longer recognized in the ICZN; formerly used for either syntype or paratype [see ICZN Recommendation 73E]. [Zoo.]', N'cotype', 4, 1, NULL, NULL, N'80a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'epitype', N'An epitype is a specimen or illustration selected to serve as an interpretative type when any kind of holotype, lectotype, etc. is demonstrably ambiguous and cannot be critically identified for purposes of the precise application of the name of a taxon (see Art. ICBN 9.7, 9.18). An epitype supplements, rather than replaces existing types. [Bot./Bio.]', N'epitype', 5, 1, NULL, NULL, N'81a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'ex-Epitype', N'A strain or cultivation derived from epitype material. Ex-types are not regulated by the botanical or zoological code. [Bot.]', N'ex-Epitype', 6, 1, NULL, NULL, N'82a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'ex-Holotype', N'A strain or cultivation derived from holotype material. Ex-types are not regulated by the botanical or zoological code. [Zoo./Bot.]', N'ex-Holotype', 7, 1, NULL, NULL, N'83a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'ex-Isotype', N'A strain or cultivation derived from isotype material. Ex-types are not regulated by the botanical or zoological code. [Zoo./Bot.]', N'ex-Isotype', 8, 1, NULL, NULL, N'84a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'ex-Lectotype', N'A strain or cultivation derived from lectotype material. Ex-types are not regulated by the botanical or zoological code. [Zoo./Bot.]', N'ex-Lectotype', 9, 1, NULL, NULL, N'85a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'ex-Neotype', N'A strain or cultivation derived from neotype material. Ex-types are not regulated by the botanical or zoological code. [Zoo./Bot.]', N'ex-Neotype', 10, 1, NULL, NULL, N'86a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'ex-Paratype', N'A strain or cultivation derived from paratype material. Ex-types are not regulated by the botanical or zoological code. [Zoo./Bot.]', N'ex-Paratype', 11, 1, NULL, NULL, N'87a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'ex-Syntype', N'A strain or cultivation derived from neotype material. Ex-types are not regulated by the botanical or zoological code. [Zoo./Bot.]', N'ex-Syntype', 12, 1, NULL, NULL, N'88a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'ex-Type', N'A strain or cultivation derived from some kind of type material. Ex-types are not regulated by the botanical or zoological code. [Zoo./Bot.]', N'ex-Type', 13, 1, NULL, NULL, N'89a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'hapantotype', N'One or more preparations of directly related individuals representing distinct stages in the life cycle, which together form the type in an extant species of protistan [ICZN Article 72.5.4]. A hapantotype, while a series of individuals, is a holotype that must not be restricted by lectotype selection. If a hapantotype is found to contain individuals of more than one species, however, components may be excluded until it contains individuals of only one species [ICZN Article 73.3.2]. [Zoo.]', N'hapantotype', 14, 1, NULL, NULL, N'8aa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'holotype', N'The one specimen or other element used or designated by the original author at the time of publication of the original description as the nomenclatural type of a species or infraspecific taxon. A holotype may be ''explicit'' if it is clearly stated in the originating publication or ''implicit'' if it is the single specimen proved to have been in the hands of the originating author when the description was published. [Zoo./Bot./Bio.]', N'holotype', 15, 1, NULL, NULL, N'8ba1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'iconotype', N'A drawing or photograph (also called ''phototype'') of a type specimen. Note: the term "iconotype" is not used in the ICBN, but implicit in, e. g., ICBN Art. 7 and 38. [Zoo./Bot.]', N'iconotype', 16, 1, NULL, NULL, N'8ca1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'isoepitype', N'a duplicate of an epitype', N'isoepitype', 11, 1, NULL, NULL, N'50546f4f-89d3-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'isolectotype', N'A duplicate of a lectotype, compare lectotype. [Bot.]', N'isolectotype', 17, 1, NULL, NULL, N'8da1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'isoneotype', N'A duplicate of a neotype, compare neotype. [Bot.]', N'isoneotype', 18, 1, NULL, NULL, N'8ea1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'isoparatype', N'A duplicate of a paratype', N'isoparatype', 40, 1, NULL, NULL, N'8fa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'isosyntype', N'A duplicate of a syntype, compare isotype = duplicate of holotype. [Bot.]', N'isosyntype', 19, 1, NULL, NULL, N'90a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'isotype', N'An isotype is any duplicate of the holotype (i. e. part of a single gathering made by a collector at one time, from which the holotype was derived); it is always a specimen (ICBN Art. 7). [Bot.]', N'isotype', 20, 1, NULL, NULL, N'91a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'lectotype', N'A specimen or other element designated subsequent to the publication of the original description from the original material (syntypes or paratypes) to serve as nomenclatural type. Lectotype designation can occur only where no holotype was designated at the time of publication or if it is missing (ICBN Art. 7, ICZN Art. 74). [Zoo./Bot.] -- Note: the BioCode defines lectotype as selection from holotype material in cases where the holotype material contains more than one taxon [Bio.].', N'lectotype', 21, 1, NULL, NULL, N'92a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'neotype', N'A specimen designated as nomenclatural type subsequent to the publication of the original description in cases where the original holotype, lectotype, all paratypes and syntypes are lost or destroyed, or suppressed by the (botanical or zoological) commission on nomenclature. In zoology also called "Standard specimen" or "Representative specimen". [Zoo./Bot./Bio.]', N'neotype', 22, 1, NULL, NULL, N'93a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'not a type', N'For specimens erroneously labelled as types an explicit negative statement may be desirable. [General]', N'not a type', 23, 1, NULL, NULL, N'94a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'original material', N'Specimens and illustrations indicated in the protologue of a name (see ICBN Art. 9 Note 2 for details)', N'original material', 24, 1, NULL, NULL, N'95a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'paralectotype', N'All of the specimens in the syntype series of a species or infraspecific taxon other than the lectotype itself. Also called "lectoparatype". [Zoo.]', N'paralectotype', 24, 1, NULL, NULL, N'96a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'paraneotype', N'All of the specimens in the syntype series of a species or infraspecific taxon other than the neotype itself. Also called "neoparatype". [Zoo.]', N'paraneotype', 25, 1, NULL, NULL, N'97a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'paratype', N'All of the specimens in the type series of a species or infraspecific taxon other than the holotype (and, in botany, isotypes). Paratypes must have been at the disposition of the author at the time when the original description was created and must have been designated and indicated in the publication. Judgment must be exercised on paratype status, for only rarely are specimens explicitly cited as paratypes, but usually as "specimens examined," "other material seen", etc. [Zoo./Bot.]', N'paratype', 26, 1, NULL, NULL, N'98a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'plastoholotype', N'A copy or cast of holotype material (compare Plastotype).', N'plastoholotype', 27, 1, NULL, NULL, N'99a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'plastoisotype', N'A copy or cast of isotype material (compare Plastotype).', N'plastoisotype', 28, 1, NULL, NULL, N'9aa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'plastolectotype', N'A copy or cast of lectotype material (compare Plastotype).', N'plastolectotype', 29, 1, NULL, NULL, N'9ba1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'plastoneotype', N'A copy or cast of neotype material (compare Plastotype).', N'plastoneotype', 30, 1, NULL, NULL, N'9ca1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'plastoparatype', N'A copy or cast of paratype material (compare Plastotype).', N'plastoparatype', 31, 1, NULL, NULL, N'9da1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'plastosyntype', N'A copy or cast of syntype material (compare Plastotype).', N'plastosyntype', 32, 1, NULL, NULL, N'9ea1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'plastotype', N'A copy or cast of type material, esp. relevant for fossil types. Not regulated by the botanical or zoological code (?). [Zoo./Bot.]', N'plastotype', 33, 1, NULL, NULL, N'9fa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'secondary type', N'A referred, described, measured or figured specimen in the original publication (including a neo/lectotypification publication) that is not a primary type.', N'secondary type', 34, 1, NULL, NULL, N'a0a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'supplementary type', N'A referred, described, measured or figured specimen in a revision of a previously described taxon.', N'supplementary type', 35, 1, NULL, NULL, N'a1a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'syntype', N'One of the series of specimens used to describe a species or infraspecific taxon when neither a single holotype by the original author, nor a lectotype in a subsequent publication has been designated. The syntypes collectively constitute the name-bearing type. [Zoo./Bot.]', N'syntype', 36, 1, NULL, NULL, N'a2a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'topotype', N'One or more specimens collected at the same location as the type series (type locality), regardless of whether they are part of the type series. Topotypes are not regulated by the botanical or zoological code. Also called "locotype". [Zoo./Bot.]', N'topotype', 37, 1, NULL, NULL, N'a3a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'type', N'a) A specimen designated or indicated any kind of type of a species or infraspecific taxon. If possible more specific type terms (holotype, syntype, etc.) should be applied. b) the type name of a name of higher rank for taxa above the species rank. [General]', N'type', 38, 1, NULL, NULL, N'a4a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollTypeStatus_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'typotype', N'the specimen used to prepare an illustration where the latter is the type', N'typotype', 39, 1, NULL, NULL, N'a5a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Association', N'in association with (unspecific statement if no further information about interaction b/w 2 organisms is available)', N'Association', 30, 1, NULL, NULL, N'a6a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Child of', N'child association (i.e. in the literal genetical sense, not in an abstract sense)', N'Child of', 191, 1, NULL, NULL, N'03d61cc2-88ce-e211-b5fc-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Endophytic in', N'endophytic organism growing in plants without causing symptoms (possibly mutualistic or opportunistic parasite)', N'Endophytic in', 50, 1, NULL, NULL, N'a7a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Found on', N'Organism found on 2nd organism ', N'Found on', 35, 1, NULL, NULL, N'608d6b49-7767-e111-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Growing on', N'substrate statement: organism growing on 2nd organism, living stages directly observed (i.e. assoc. not due to diaspores alone)', N'Growing on', 33, 1, NULL, NULL, N'a8a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Isolated from', N'substrate statement: organism isolated from 2nd organism, no living stages observed (i.e. possibly due to surface contamination)', N'Isolated from', 36, 1, NULL, NULL, N'a9a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Lichenization', N'mutualistic symbiosis between a fungus and algae (= 2nd organism)', N'Lichenization', 55, 1, NULL, NULL, N'aaa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Mutant of', N'A mutant of the parent organism', N'Mutant of', 200, 1, NULL, NULL, N'c067c024-576c-e211-94c0-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Mutualism', N'mutualistic symbiosis, both partners profit from each other', N'Mutualism', 40, 1, NULL, NULL, N'aba1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Mycorrhiza of', N'mycorrhizal association of a fungus with a plant (= 2nd organism)', N'Mycorrhiza of', 45, 1, NULL, NULL, N'aca1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Parasitic (accid.)', N'parasitic on an ''accidential host'' (in the sense of Nannfeldt): with strong infection pressure, another organism growing between infected organisms may become infected.', N'Parasitic (accid.)', 135, 1, NULL, NULL, N'ada1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Parasitic (facul.)', N'facultatively parasitic on host (= 2nd organism)', N'Parasitic (facul.)', 130, 1, NULL, NULL, N'aea1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Parasitic (oblig.)', N'obligately parasitic on host (= 2nd organism)', N'Parasitic (oblig.)', 120, 1, NULL, NULL, N'afa1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Parasitic (quest.)', N'questionably parasitic on host (= 2nd organism), parasitic interaction is presumed, but doubtful/unverified', N'Parasitic (quest.)', 110, 1, NULL, NULL, N'b0a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Parasitic on', N'the taxon is parasitizing its host (regardless of type, i.e. holo-/meta-/hemi-biotrophic, or pertho-/necrotrophic)', N'Parasitic on', 100, 1, NULL, NULL, N'b1a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Parent/Child', N'parent/child association (i.e. in the literal genetical sense, not in an abstract sense)', N'Parent/Child', 190, 1, NULL, NULL, N'b2a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Part of', N'belongs to the same organism resp. unit, e.g. a branch is part of a tree', N'Part of', 150, 1, NULL, NULL, N'b3a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Pollinator of', N'organism 1 is the pollinator of a plant (organism 2)', N'Pollinator of', 180, 1, NULL, NULL, N'b4a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Predator/Food', N'organism 1 is the predator of organism 2 (i. e. 2 is food of 1)', N'Predator/Food', 185, 1, NULL, NULL, N'b5a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Saprophytic on', N'organism growing saprophytic on 2nd organism, living stages directly observed (i.e. assoc. not due to diaspores alone)', N'Saprophytic on', 34, 1, NULL, NULL, N'712f5ace-1c15-e111-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[CollUnitRelationType_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Sibling', N'both organisms are siblings (have the same parents)', N'Sibling', 191, 1, NULL, NULL, N'b6a1c738-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'509e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.AnalysisID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'48821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.AnalysisParentID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4c821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.AnalysisURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'50821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.Description', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'de821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.DisplayText', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'00831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a8831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e4831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'42841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'48841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.MeasurementUnit', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8c841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'96841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'44851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f0264314-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.AnalysisID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'100d592f-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.AnalysisResult', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'120d592f-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.Description', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'140d592f-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.DisplayOrder', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'160d592f-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.DisplayText', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'180d592f-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1a0d592f-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'529e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.AnalysisID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'46821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1a841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'70841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5e851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.TaxonomicGroup', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9e851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollCircumstances_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'50a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'52a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum.Code.actual', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'802f2022-bbc7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum.Code.collection date', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'812f2022-bbc7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum.Code.estimated', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'822f2022-bbc7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum.Code.system', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'832f2022-bbc7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'549e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.AdministrativeContactAgentURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3a821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.AdministrativeContactName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3c821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionAcronym', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'60821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'74821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7c821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionOwner', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7e821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionParentID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'80821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.Description', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'da821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.DisplayOrder', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f2821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.Location', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8a831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'94831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fa831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'34841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'56841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'52851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'569e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectionSpecimenID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'92821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectorsAgentURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a0821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectorsName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a4821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectorsNumber', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a6821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectorsSequence', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a8821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.DataWithholdingReason', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b4821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c2831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'cc831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0e841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7c841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b2841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'74851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'589e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectingMethod', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5e821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionDate', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'62821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionDateCategory', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'64821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionDateSupplement', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'66821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionDay', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'68821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionEventID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6a821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionMonth', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7a821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionTime', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9a821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionTimeSpan', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9c821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionYear', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9e821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectorsEventNumber', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a2821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CountryCache', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ae821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.DataWithholdingReason', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b0821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.HabitatDescription', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'40831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LocalityDescription', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'88831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b0831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'dc831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'24841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'66841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a2841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.ReferenceDetails', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8088fec5-41fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.ReferenceTitle', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'00851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.ReferenceURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'06851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7e851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.SeriesID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'88851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.Version', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ce851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5a9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.CollectionEventID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6e821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.DataWithholdingReason', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ba821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.ImageType', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'60831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'96831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f6831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'36841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'54841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'94841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.ResourceURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1c851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'54851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.URI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c8851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5c9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.AverageAltitudeCache', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'52821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.AverageLatitudeCache', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'54821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.AverageLongitudeCache', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'56821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.CollectionEventID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'70821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.DeterminationDate', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e4821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.DirectionToLocation', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e6821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.DistanceToLocation', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0a831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.Geography', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'703c397d-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LocalisationSystemID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'80831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.Location1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8c831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.Location2', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8e831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LocationAccuracy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'90831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LocationNotes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'92831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'98831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f2831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3a841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'52841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.ResponsibleAgentURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'22851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.ResponsibleName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'34851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'56851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5e9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.AverageValueCache', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'58821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.CollectionEventID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'72821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.DisplayText', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'02831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'aa831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ea831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'44841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'46841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a0841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.PropertyHierarchyCache', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ee841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.PropertyID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f0841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.PropertyURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f8841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.PropertyValue', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fa841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.ResponsibleAgentURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'24851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.ResponsibleName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'32851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'46851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'609e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.DateCache', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'be821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.DateEnd', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'20ef9c70-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.DateStart', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'22ef9c70-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.Description', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd2821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.Geography', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'24ef9c70-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b4831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd8831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2a841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'62841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a8841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7a851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.SeriesCode', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'84851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.SeriesID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'86851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.SeriesParentID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8c851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'629e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.DataWithholdingReason', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b8821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.ImageType', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5e831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9c831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ee831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'30841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5a841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'92841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.ResourceURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1e851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4a851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.SeriesID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8a851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.URI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c6851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'649e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.Disabled', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e8821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalAttribute_NameID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'22831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceAuthors', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'24831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'26831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceInstitution', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2a831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2c831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2e831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceVersion', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'30831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.InternalNotes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6a831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.PreferredSequence', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c8841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.Rights', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'38851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3c851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'669e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager.AdministratingCollectionID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'38821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager.LoginName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fe831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6e851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'689e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.CollectionSpecimenID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'86821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ae831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e0831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'20841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'68841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.Project', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a05028ba-b1b8-de11-ac33-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.ProjectID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ea841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'82851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionRequester', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f0483ff4-1510-df11-8314-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6a9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionDate', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'22821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionDateCategory', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'24821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionDateSupplement', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'26821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionDay', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'28821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionMonth', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2a821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionNumber', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2c821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionYear', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'30821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AdditionalNotes', N'CollectionSpecimen.Notes', NULL, NULL, NULL, NULL, NULL, NULL, N'34821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.CollectionEventID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6c821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.CollectionID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'76821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.CollectionSpecimenID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8a821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.DataWithholdingReason', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b2821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Depositor', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7ffb1c03-b39e-de11-ac33-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.DepositorsAccessionNumber', N'CollectionSpecimen.Depositor', NULL, NULL, NULL, NULL, NULL, NULL, N'c8821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.DepositorsAgentURI', N'CollectionSpecimen.Depositor', NULL, NULL, NULL, NULL, NULL, NULL, N'ca821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.DepositorsName', N'CollectionSpecimen.Depositor', NULL, NULL, NULL, NULL, NULL, NULL, N'cc821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ExsiccataAbbreviation', N'Exsiccata', NULL, NULL, NULL, NULL, NULL, NULL, N'18831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ExsiccataURI', N'Exsiccata', NULL, NULL, NULL, NULL, NULL, NULL, N'1e831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ExternalDatasourceID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'28831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ExternalIdentifier', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'32831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.InternalNotes', N'CollectionSpecimen.Notes', NULL, NULL, NULL, NULL, NULL, NULL, N'66831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Label', N'CollectionSpecimen.Label', NULL, NULL, NULL, NULL, NULL, NULL, N'6f4df454-cf9e-de11-ac33-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LabelTitle', N'CollectionSpecimen.Label', NULL, NULL, NULL, NULL, NULL, NULL, N'72831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LabelTranscriptionNotes', N'CollectionSpecimen.Label', NULL, NULL, NULL, NULL, NULL, NULL, N'74831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LabelTranscriptionState', N'CollectionSpecimen.Label', NULL, NULL, NULL, NULL, NULL, NULL, N'76831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LabelType', N'CollectionSpecimen.Label', NULL, NULL, NULL, NULL, NULL, NULL, N'78831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b8831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd6831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2c841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5e841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'dff82daf-b19e-de11-ac33-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.OriginalNotes', N'CollectionSpecimen.Notes', NULL, NULL, NULL, NULL, NULL, NULL, N'be841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Problems', N'CollectionSpecimen.Notes', NULL, NULL, NULL, NULL, NULL, NULL, N'd0841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ReferenceDetails', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'81da5627-45fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ReferenceTitle', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fe841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ReferenceURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'08851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'78851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Version', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd0851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6c9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.CollectionSpecimenID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8e821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.DataWithholdingReason', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b6821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.IdentificationUnitID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5a831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.ImageType', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'62831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c0831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ce831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0c841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'80841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b0841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.ResourceURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1a851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'72851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.SpecimenPartID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'92851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.URI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c4851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6e9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.AccessionNumber', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2e821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.CollectionID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'78821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.CollectionSpecimenID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8c821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.DerivedFromSpecimenPartID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ce821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c6831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c8831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'10841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7a841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.MaterialCategory', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'82841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ae841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.PartSublabel', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c6841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.PreparationDate', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ca841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.PreparationMethod', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'cc841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'68851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.SpecimenPartID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'94851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.Stock', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9a851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.StorageLocation', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9c851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'709e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.CollectionSpecimenID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'98821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c4831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ca831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'12841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'78841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ac841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ProcessingDate', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd2841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ProcessingDuration', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd4841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ProcessingID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd6841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.Protocoll', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fc841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ResponsibleAgentURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'26851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ResponsibleName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'30851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'66851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.SpecimenPartID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'98851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'729e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.CollectionSpecimenID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'82821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.IsInternalRelationCache', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6e831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a4831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f4831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'38841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4e841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9a841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelatedSpecimenCollectionID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0a851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelatedSpecimenDescription', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0c851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelatedSpecimenDisplayText', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0e851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelatedSpecimenURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'10851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelationType', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'16851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'40851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'749e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.CollectionSpecimenID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'90821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.IsOnLoan', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'70831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogInsertedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'02841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogInsertedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'08841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0a841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7e841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'70851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.SpecimenPartID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'90851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.TransactionID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b2851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollEventDateCategory_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'54a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollEventImageType_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'56a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollEventSeriesImageType_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'58a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollExchangeType_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5aa8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollIdentificationCategory_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5ca8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollIdentificationDateCategory_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5ea8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollIdentificationQualifier_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'60a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollLabelTranscriptionState_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'62a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollLabelType_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'64a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'66a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.bones', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'90c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.complete skeleton', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'91c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.cones', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'92c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.cultures', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'93c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.DNA sample', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'94c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.drawing', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'95c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.drawing or photograph', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'96c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.dried specimen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'97c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.fossile specimen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'98c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.herbarium sheets', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'99c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.human observation', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9ac05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.icones', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9bc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.incomplete skeleton', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9cc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.living specimen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9dc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.machine observation', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9ec05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.medium', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9fc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.micr. slide', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a0c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.observation', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a1c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.other specimen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a2c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.pelt', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a3c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.photogr. print', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a4c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.photogr. slide', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a5c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.postcranial skeleton', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a6c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.preserved specimen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a7c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.SEM table', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a8c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.shell', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a9c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.single bones', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'aac05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.skull', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'abc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.sound', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'acc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.specimen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'adc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.TEM specimen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'aec05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.thin section', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'afc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.tooth', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b0c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.trace', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b1c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.vial', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b2c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'68a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.audio', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'00857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.audio (for transcription)', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'01857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.drawing', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'02857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.label', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'03857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.other', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'04857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.photography', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'05857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.SEM image', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'06857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.TEM image', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'07857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.video', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'08857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenRelationType_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6aa8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6ca8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.alga', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'20616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.arthropode', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'21616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.bacterium', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'22616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.bird', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'23616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.bryophyte', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'24616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.cnidaria', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'25616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.echinoderm', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'26616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.evertebrate', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'27616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.fish', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'28616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.fungus', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'29616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.insect', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2a616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.lichen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2b616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.mammal', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2c616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.mollusc', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2d616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.myxomycete', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2e616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.other', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2f616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.plant', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'30616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.soil', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'31616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.unknown', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'32616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.vertebrate', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'33616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.virus', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'34616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6ea8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.borrow', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'00483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.exchange', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'01483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.gift', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'02483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.inventory', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'03483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.loan', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'04483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.purchase', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'05483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.request', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'06483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTypeStatus_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'70a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollUnitRelationType_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'72a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'DataWithholdingReason', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2063d55f-27e0-de11-8f1d-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'769e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.DisplayGroup', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ee821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.Entity', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0e831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a2831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e8831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3e841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4c841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9c841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.Obsolete', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b8841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3e851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'74a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.CollectionManagement', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'203383f4-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.CollectionManagement.Mobile', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'213383f4-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'223383f4-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.Observation', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'233383f4-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.Observation.Mobile', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'243383f4-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityLanguageCode_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'76a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'789e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.Abbreviation', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'20821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.Description', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'dc821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.DisplayText', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'04831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.Entity', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0c831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.EntityContext', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'14831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LanguageCode', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7a831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a0831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ec831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3c841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'50841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9e841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3a851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7a9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.Entity', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'10831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.EntityContext', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'12831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.EntityUsage', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'16831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a6831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e6831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'40841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4a841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'98841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.PresetValue', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ce841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'42851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'78a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage_Enum.Code.hidden', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f0121482-6d91-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage_Enum.Code.inapplicable', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f1121482-6d91-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage_Enum.Code.read_only', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f2121482-6d91-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Exsiccata', N'Exsiccata', NULL, NULL, NULL, NULL, NULL, NULL, N'70a5918d-94c4-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ExternalRequestCredentials ', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f2483ff4-1510-df11-8314-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7c9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.CollectionSpecimenID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'84821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationCategory', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'42831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationDate', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'44831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationDateCategory', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'46831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationDateSupplement', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'48831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationDay', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4a831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationMonth', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4c831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationQualifier', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4e831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationSequence', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'50831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationUnitID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'52831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationYear', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5c831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9e831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f8831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'32841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'58841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.NameURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8e841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'90841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ReferenceDetails', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'019a52ff-45fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ReferenceTitle', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'02851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ReferenceURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'04851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ResponsibleAgentURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'20851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ResponsibleName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'36851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'48851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.TaxonomicName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a2851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.TypeNotes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'bc851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.TypeStatus', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'be851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.VernacularTerm', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'cc851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7e9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.Circumstances', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5c821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.CollectionSpecimenID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'94821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.ColonisedSubstratePart', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'aa821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.DisplayOrder', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f8821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.ExsiccataIdentification', N'Exsiccata', NULL, NULL, NULL, NULL, NULL, NULL, N'1a831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.ExsiccataNumber', N'Exsiccata', NULL, NULL, NULL, NULL, NULL, NULL, N'1c831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.FamilyCache', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'34831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.Gender', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3e831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.IdentificationUnitID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'56831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LastIdentificationCache', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7c831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LifeStage', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7e831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'bc831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd2831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1e841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6c841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'aa841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.NumberOfUnits', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b4841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.OnlyObserved', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ba841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.OrderCache', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'bc841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.RelatedUnitID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'12851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.RelationType', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'14851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'60851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.TaxonomicGroup', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a0851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.UnitDescription', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c0851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.UnitIdentifier', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c2851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'809e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.AnalysisDate', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'40821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.AnalysisID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'42821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.AnalysisNumber', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4a821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.AnalysisResult', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4e821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.CollectionSpecimenID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'88821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.ExternalAnalysisURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'20831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.IdentificationUnitID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'54831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b2831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'da831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'26841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'64841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a6841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.ResponsibleAgentURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2a851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.ResponsibleName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2c851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'76851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.SpecimenPartID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8e851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'50705294-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.AnalysisDate', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a07b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.CollectionSpecimenID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a27b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.Geography', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a47b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.Geometry', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a67b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.IdentificationUnitID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a87b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4093dbe8-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4293dbe8-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4493dbe8-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4693dbe8-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'aa7b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.ResponsibleAgentURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ac7b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.ResponsibleName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ae7b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4893dbe8-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'829e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.CollectionSpecimenID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'96821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.Description', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd0821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.DisplayOrder', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f6821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.IdentificationUnitID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'58831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogInsertedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'04841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogInsertedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'06841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'14841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'74841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5a851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.SpecimenPartID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'96851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LanguageCode_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7aa8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'849e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DefaultAccuracyOfLocalisation', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c0821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DefaultMeasurementUnit', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c6821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.Description', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd6821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DescriptionLocation1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e0821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DescriptionLocation2', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e2821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayEnable', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ea821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayOrder', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f4821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayText', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fc821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayTextLocation1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'06831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayTextLocation2', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'08831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'82831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1054dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.10', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1954dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.11', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1a54dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.12', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1b54dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.13', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1c54dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.14', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1d54dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.15', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1e54dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.18', NULL, NULL, NULL, CAST(N'2014-10-07T14:36:00.600' AS DateTime), N'dbo', CAST(N'2014-10-07T14:36:00.600' AS DateTime), N'dbo', N'207ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.19', NULL, NULL, NULL, CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', N'247ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.2', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1154dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.20', NULL, NULL, NULL, CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', N'287ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.21', NULL, NULL, NULL, CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', N'2c7ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.3', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1254dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.3.Quadrant', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd0506b50-41c5-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.4', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1354dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.4.AltitudeTo', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'105dfab6-20e0-de11-8f1d-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.5', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1454dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.6', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1554dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.7', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1654dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.8', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1754dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.9', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1854dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'84831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemParentID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'86831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.ParsingMethodName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c4841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4c851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'MeasurementUnit_Enum', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7ca8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'869e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.Description', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd4821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.DisplayText', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fa821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ac831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e2831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'22841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6a841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.Notes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a4841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.ProcessingID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'dc841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.ProcessingParentID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'de841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.ProcessingURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e0841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'80851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'889e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'16841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'76841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.MaterialCategory', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'84841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.ProcessingID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd8841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5c851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8a9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.AnalysisID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'44821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b6831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'de831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'28841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'60841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.ProjectID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ec841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7c851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8c9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'be831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd0831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'18841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'72841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.ProcessingID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'da841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.ProjectID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e8841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'62851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8e9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy.Project', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e2841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy.ProjectID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e6841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6c851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'909e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser.LoginName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'00841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser.ProjectID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e4841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6a851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'929e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DefaultAccuracyOfProperty', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c2821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DefaultMeasurementUnit', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c4821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.Description', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd8821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DisplayEnabled', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ec821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DisplayOrder', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f0821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DisplayText', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fe821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.ParsingMethodName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c2841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f2841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b0bc660c-5991-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.10', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b1bc660c-5991-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.20', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b2bc660c-5991-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.30', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b3bc660c-5991-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.40', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'90fc3184-44c5-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f4841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyParentID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f6841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'58851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Substrate', N'Substrate', NULL, NULL, NULL, NULL, NULL, NULL, N'7020f3f2-93c4-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'949e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ActualEndDate', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'32821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.AdministratingCollectionID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'36821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.AgreedEndDate', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3e821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.BeginDate', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5a821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.FromCollectionID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'36831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.FromTransactionNumber', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'38831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.FromTransactionPartnerAgentURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3a831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.FromTransactionPartnerName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3c831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.InternalNotes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'64831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.Investigator', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6c831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ba831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd4831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1c841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6e841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.MaterialCategory', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'86841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.MaterialCollectors', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'88841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.MaterialDescription', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8a841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.NumberOfUnits', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b6841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ParentTransactionID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c0841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ReportingCategory', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'18851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ResponsibleAgentURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'28851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ResponsibleName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2e851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'64851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ToCollectionID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a4851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ToTransactionNumber', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a6851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ToTransactionPartnerAgentURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a8851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ToTransactionPartnerName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'aa851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.TransactionComment', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ac851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.TransactionID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b0851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.TransactionTitle', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b8851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.TransactionType', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ba851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'969e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.Date', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'bc821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.InternalNotes', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'68831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogCreatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9a831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogCreatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f0831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogUpdatedBy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2e841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogUpdatedWhen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5c841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4e851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.TransactionDocument', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ae851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.TransactionID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b4851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.TransactionText', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b6851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'989e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy.CombinedNameCache', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ac821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy.LoginName', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fc831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy.RowGUID', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'50851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[Entity] ([Entity], [DisplayGroup], [Notes], [Obsolete], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy.UserURI', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ca851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityAccessibility_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'inapplicable', N'the entity is inapplicable', N'inapplicable', NULL, 1, NULL, NULL, N'71516485-47e4-e011-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityAccessibility_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'no_restrictions', N'there are no restrictions to access this entity', N'no restrictions', NULL, 1, NULL, NULL, N'70999f8e-47e4-e011-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityAccessibility_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'read_only', N'the access is limited to read only', N'read only', NULL, 1, NULL, NULL, N'70516485-47e4-e011-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityContext_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'CollectionManagement', N'Management of scientifc collections like herbaria', N'Collection management', NULL, 1, NULL, N'General', N'f0b0a076-8b90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityContext_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'CollectionManagement.Mobile', N'Management of scientifc collections using a mobile device', N'Collection management - mobile', NULL, 1, NULL, N'CollectionManagement', N'f1b0a076-8b90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityContext_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'General', N'General context', N'General', NULL, 1, NULL, NULL, N'f2b0a076-8b90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityContext_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Observation', N'Recoding observations', N'Observation', NULL, 1, NULL, N'General', N'f3b0a076-8b90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityContext_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'Observation.Mobile', N'Recoding observations using a mobile device', N'Observation - mobile', NULL, 1, NULL, N'Observation', N'f4b0a076-8b90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityDetermination_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'calculated', N'the value is calculated from other entries', N'calculated', NULL, 1, NULL, NULL, N'c1874299-47e4-e011-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityDetermination_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'service_link', N'the value represents a link to a module', N'service link', NULL, 1, NULL, NULL, N'd086343d-ece5-e011-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityDetermination_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'user_defined', N'the value can be defined by the user', N'user defined', NULL, 1, NULL, NULL, N'c0874299-47e4-e011-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityLanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'de-DE', NULL, N'Deutsch', NULL, 1, NULL, NULL, N'2043e76d-8b90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityLanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'en-US', NULL, N'Englisch', NULL, 1, NULL, NULL, N'2143e76d-8b90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis', N'de-DE', N'General', N'Analyse', N'Analyse', N'Typen der Analyse', NULL, NULL, NULL, NULL, NULL, N'8036ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis', N'en-US', N'General', N'Analysis', N'Analysis', N'Analysis types used within the database', NULL, NULL, NULL, NULL, NULL, N'519e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.AnalysisID', N'de-DE', N'General', NULL, NULL, N'ID der Analyse (PK)', NULL, NULL, NULL, NULL, NULL, N'8136ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.AnalysisID', N'en-US', N'General', NULL, NULL, N'ID of the analysis (Primary key)', NULL, NULL, NULL, NULL, NULL, N'49821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.AnalysisParentID', N'de-DE', N'General', NULL, N'Übergeord.', N'ID der übergeordneten Analyse', NULL, NULL, NULL, NULL, NULL, N'8236ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.AnalysisParentID', N'en-US', N'General', NULL, N'Superior', N'Analysis ID of the parent analysis if it belongs to a certain type documented in this table', NULL, NULL, NULL, NULL, NULL, N'4d821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.AnalysisURI', N'de-DE', N'General', NULL, N'URI', N'Webseite der externen Dokumentation der Analyse', NULL, NULL, NULL, NULL, NULL, N'8336ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.AnalysisURI', N'en-US', N'General', NULL, N'URI', N'URI referring to an external documentation of the analysis', NULL, NULL, NULL, NULL, NULL, N'51821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.Description', N'de-DE', N'General', NULL, N'Beschreibung', N'Beschreibung der Analyse', NULL, NULL, NULL, NULL, NULL, N'8436ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.Description', N'en-US', N'General', NULL, N'Description', N'Description of the analysis', NULL, NULL, NULL, NULL, NULL, N'df821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.DisplayText', N'de-DE', N'General', NULL, N'Anzeigetext', N'Name der Analyse e.g. auf Benutzeroberfläche', NULL, NULL, NULL, NULL, NULL, N'8536ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.DisplayText', N'en-US', N'General', NULL, N'Display text', N'Name of the analysis as e.g. shown in user interface', NULL, NULL, NULL, NULL, NULL, N'01831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8636ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'a9831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8736ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'e5831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8836ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'43841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8936ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'49841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.MeasurementUnit', N'de-DE', N'General', NULL, N'Einheit', N'Die Messeinheit die für die Analyse benutzt wurde, e.g. mm, µmol, kg', NULL, NULL, NULL, NULL, NULL, N'8a36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.MeasurementUnit', N'en-US', N'General', NULL, N'Unit', N'The measurement unit used for the analysis, e.g. mm, µmol, kg', NULL, NULL, NULL, NULL, NULL, N'8d841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.Notes', N'de-DE', N'General', NULL, N'Notiz', N'Anmerkungen zur Analyse', NULL, NULL, NULL, NULL, NULL, N'8b36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.Notes', N'en-US', N'General', NULL, N'Note', N'Notes concerning this analysis', NULL, NULL, NULL, NULL, NULL, N'97841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8c36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'45851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f0de6a39-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult', N'en-US', N'General', NULL, NULL, N'Value lists for analysis types with predefined values, e.g. "0, 1, 2, 3, ..." for Red list category. Includes description etc. for the values in the list.', NULL, NULL, NULL, NULL, NULL, N'f1264314-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.AnalysisID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f1de6a39-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.AnalysisID', N'en-US', N'General', NULL, NULL, N'ID of the analysis (Primary key)', NULL, NULL, NULL, NULL, NULL, N'110d592f-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.AnalysisResult', N'de-DE', N'General', N'Ergebniswert', N'Ergeb.', N'Der kategorisierte Wert der Analyse', NULL, NULL, NULL, NULL, NULL, N'f2de6a39-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.AnalysisResult', N'en-US', N'General', N'Result', N'Result', N'The categorized value of the analysis', NULL, NULL, NULL, NULL, NULL, N'130d592f-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.Description', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f3de6a39-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.Description', N'en-US', N'General', NULL, NULL, N'Description of enumerated object, displayed in the user interface', NULL, NULL, NULL, NULL, NULL, N'150d592f-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.DisplayOrder', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f4de6a39-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.DisplayOrder', N'en-US', N'General', NULL, NULL, N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.', NULL, NULL, NULL, NULL, NULL, N'170d592f-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.DisplayText', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f5de6a39-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.DisplayText', N'en-US', N'General', NULL, NULL, N'Short abbreviated description of the object, displayed in the user interface', NULL, NULL, NULL, NULL, NULL, N'190d592f-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.Notes', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f6de6a39-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisResult.Notes', N'en-US', N'General', NULL, NULL, N'Internal development notes about usage, definition, etc. of an enumerated object', NULL, NULL, NULL, NULL, NULL, N'1b0d592f-8ec8-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup', N'de-DE', N'General', NULL, NULL, N'Die Typen der Analyse die für eine taxonomische Gruppe verfügbar sind', NULL, NULL, NULL, NULL, NULL, N'8d36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup', N'en-US', N'General', NULL, NULL, N'The types of analysis that are available for a taxonomic group', NULL, NULL, NULL, NULL, NULL, N'539e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.AnalysisID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8e36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.AnalysisID', N'en-US', N'General', NULL, NULL, N'Analysis ID, foreign key of table Analysis.', NULL, NULL, NULL, NULL, NULL, N'47821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8f36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'1b841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9036ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'71841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9136ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'5f851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.TaxonomicGroup', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9236ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.TaxonomicGroup', N'en-US', N'General', NULL, NULL, N'Taxonomic group the organism identified by this unit belongs to. Groups listed in table CollTaxonomicGroup_Enum  (= foreign key)', NULL, NULL, NULL, NULL, NULL, N'9f851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollCircumstances_Enum', N'de-DE', N'General', NULL, NULL, N'Umstände des Vorkommens des Organimus', NULL, NULL, NULL, NULL, NULL, N'9336ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollCircumstances_Enum', N'en-US', N'General', NULL, NULL, N'Circumstances of the occurence of the organisms', NULL, NULL, NULL, NULL, NULL, N'51a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum', N'de-DE', N'General', NULL, NULL, N'Die Kategorie des Sammeldatums', NULL, NULL, NULL, NULL, NULL, N'9436ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum', N'en-US', N'General', NULL, NULL, N'The categories for the collection date', NULL, NULL, NULL, NULL, NULL, N'53a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum.Code.actual', N'de-DE', N'General', N'aktuell', N'aktuell', N'Das angegebene Datum ist das aktuelle Datum', NULL, NULL, NULL, NULL, NULL, N'007a5f2c-bbc7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum.Code.actual', N'en-US', N'General', N'actual', N'actual', N'The given date is the real date', NULL, NULL, NULL, NULL, NULL, N'842f2022-bbc7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum.Code.collection date', N'de-DE', N'General', N'Sammeldatum', N'Samm.Dat.', N'Das Datum zu dem der Beleg gesammelt wurde', NULL, NULL, NULL, NULL, NULL, N'017a5f2c-bbc7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum.Code.collection date', N'en-US', N'General', N'collection date', N'collection date', N'The date when the specimen was collected', NULL, NULL, NULL, NULL, NULL, N'852f2022-bbc7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum.Code.estimated', N'de-DE', N'General', N'geschätzt', NULL, N'Das angegebere Datum wurde geschätzt', NULL, NULL, NULL, NULL, NULL, N'027a5f2c-bbc7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum.Code.estimated', N'en-US', N'General', N'estimated', N'estimated', N'The given date was estimated by the user', NULL, NULL, NULL, NULL, NULL, N'862f2022-bbc7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum.Code.system', N'de-DE', N'General', N'System', NULL, N'Das angegebene Datum wurde durch das Programm ermittelt', NULL, NULL, NULL, NULL, NULL, N'037a5f2c-bbc7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum.Code.system', N'en-US', N'General', N'system', N'system', N'The given date was generated by the system', NULL, NULL, NULL, NULL, NULL, N'872f2022-bbc7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection', N'de-DE', N'General', NULL, NULL, N'Die Sammlungen in welchen die Belege gelagert werden', NULL, NULL, NULL, NULL, NULL, N'9536ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection', N'en-US', N'General', NULL, NULL, N'The collections where the specimen are stored', NULL, NULL, NULL, NULL, NULL, N'559e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.AdministrativeContactAgentURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9636ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.AdministrativeContactAgentURI', N'en-US', N'General', NULL, NULL, N'The URI of the person or organisation responsible for the Collection e.g. as provided by the module DiversityAgents', NULL, NULL, NULL, NULL, NULL, N'3b821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.AdministrativeContactName', N'de-DE', N'General', NULL, N'Verwalt.', N'Der Name der Person oder Organisation die für die Sammlung verantwortlich sind', NULL, NULL, NULL, NULL, NULL, N'9736ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.AdministrativeContactName', N'en-US', N'General', NULL, N'Admin.', N'The name of the person or organisation responsible for this collection', NULL, NULL, NULL, NULL, NULL, N'3d821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionAcronym', N'de-DE', N'General', NULL, N'Akronym', N'Ein eindeutiger Codd für die Sammlung, e.g. der Code des Index Herbariorum', NULL, NULL, NULL, NULL, NULL, N'9836ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionAcronym', N'en-US', N'General', NULL, N'Acronym', N'A unique code for the Collection, e.g. the herbarium code from Index Herbariorum', NULL, NULL, NULL, NULL, NULL, N'61821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9936ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionID', N'en-US', N'General', NULL, NULL, N'Unique reference ID for the collection (= Primary key)', NULL, NULL, NULL, NULL, NULL, N'75821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionName', N'de-DE', N'General', NULL, N'Namen', N'Der Name der Sammlung (e.g. ''Zoologische Staatssammlung'') oder der Teilsammlung (e.g. ''Zapfensammlung''). Dieser Text sollte kurz sein. Benutzen die das Feld Beschreibung für eine ausführlicher Beschreibung der Sammlung', NULL, NULL, NULL, NULL, NULL, N'9a36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionName', N'en-US', N'General', NULL, N'Name', N'Name of the collection (e. g. ''Herbarium Kew'') or subcollection (e. g. ''cone collection'', ''alcohol preservations''). This text should be kept relatively short, use Description for additional information', NULL, NULL, NULL, NULL, NULL, N'7d821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionOwner', N'de-DE', N'General', NULL, N'Besitzer', N'Der Besitzer der Sammlung wie e.g. auf einem Etikett. Sollte vorhanden sein falls keine übergeordnete Sammlung eingetragen ist', NULL, NULL, NULL, NULL, NULL, N'9b36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionOwner', N'en-US', N'General', NULL, N'Owner', N'The owner of the collection as e.g. printed on a label, should be given if CollectionParentID is null', NULL, NULL, NULL, NULL, NULL, N'7f821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionParentID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9c36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionParentID', N'en-US', N'General', NULL, NULL, N'For a subcollection within another collection: CollectionID of the collection to which the subcollection belongs. Empty for an independent collection', NULL, NULL, NULL, NULL, NULL, N'81821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.Description', N'de-DE', N'General', NULL, N'Beschreibung', N'Eine kurze Beschreibung der Sammlung', NULL, NULL, NULL, NULL, NULL, N'9d36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.Description', N'en-US', N'General', NULL, N'Description', N'A short description of the collection', NULL, NULL, NULL, NULL, NULL, N'db821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.DisplayOrder', N'de-DE', N'General', NULL, N'Reihenf.', N'Die Reihenfolge in der die Sammlungen angezeigt werden sollen. Die Reihenfolge kann geändert werden, aber die Werte sollten eindeutig sein.', NULL, NULL, NULL, NULL, NULL, N'9e36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.DisplayOrder', N'en-US', N'General', NULL, N'Order', N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.', NULL, NULL, NULL, NULL, NULL, N'f3821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.Location', N'de-DE', N'General', NULL, N'Ort', N'Optional - Ort der Sammlung, e.g. die Nummer innerhalb eines Ordnungssystems oder die des Raums in der die (Teil-)Sammlung liegt', NULL, NULL, NULL, NULL, NULL, N'9f36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.Location', N'en-US', N'General', NULL, N'Location', N'Optionally location of the collection, e.g. the number within a file system or a description of the room(s) housing the (sub)collection', NULL, NULL, NULL, NULL, NULL, N'8b831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a036ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'95831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a136ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'fb831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a236ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'35841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a336ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'57841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a436ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'53851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent', N'de-DE', N'General', N'Sammler', NULL, N'Die Sammler des Belegs', NULL, NULL, NULL, NULL, NULL, N'a536ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent', N'de-DE', N'Observation', N'Beobachter', NULL, N'Der Beobachter des Objekts', NULL, NULL, NULL, NULL, NULL, N'3c0270b2-44db-de11-8f1d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent', N'en-US', N'General', N'Collector', NULL, N'The collector(s) of collection specimens', NULL, NULL, NULL, NULL, NULL, N'579e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent', N'en-US', N'Observation', N'Observer', NULL, N'The observer of the object', NULL, NULL, NULL, NULL, NULL, N'3d0270b2-44db-de11-8f1d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectionSpecimenID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a636ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectionSpecimenID', N'en-US', N'General', NULL, NULL, N'Refers to ID of CollectionEvent (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'93821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectorsAgentURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a736ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectorsAgentURI', N'en-US', N'General', NULL, NULL, N'The URI of the Agent, e.g. as stored within the module DiversityAgents', NULL, NULL, NULL, NULL, NULL, N'a1821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectorsName', N'de-DE', N'General', N'Sammler', N'Sammler', N'Name des Sammlers', NULL, NULL, NULL, NULL, NULL, N'a836ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectorsName', N'en-US', N'General', N'Collector', N'Collector', N'Name of the Collector', NULL, NULL, NULL, NULL, NULL, N'a5821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectorsNumber', N'de-DE', N'General', N'Sammelnummer', N'Samm.Nr.', N'Die einem Beleg zugeordnete Sammelnummer (Feldnummer)', NULL, NULL, NULL, NULL, NULL, N'a936ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectorsNumber', N'en-US', N'General', N'Collectors number', N'Coll.Nr.', N'Number assigned to a specimen or a batch of specimens by the collector during the collection event (= ''field number'')', NULL, NULL, NULL, NULL, NULL, N'a7821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectorsSequence', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'aa36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectorsSequence', N'en-US', N'General', NULL, NULL, N'The order of collectors in a team. Automatically set by the database system', NULL, NULL, NULL, NULL, NULL, N'a9821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.DataWithholdingReason', N'de-DE', N'General', N'Datensperre für Sammler', N'Pub.Sperre', N'Falls der Datensatz nicht publiziert werden soll, der Grund hierfür, ansonsten leer', NULL, NULL, NULL, NULL, NULL, N'ab36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.DataWithholdingReason', N'en-US', N'General', N'Data withholding reason for collector', N'Withhold.', N'If the dataset is withhold, the reason for withholding the data, otherwise null', NULL, NULL, NULL, NULL, NULL, N'b5821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ac36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'c3831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ad36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'cd831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ae36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'0f841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'af36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'7d841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.Notes', N'de-DE', N'General', N'Notiz', N'Notiz', N'Notizen zum Sammler, e.g. wenn der Name unsicher ist', NULL, NULL, NULL, NULL, NULL, N'b036ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.Notes', N'en-US', N'General', N'Note', N'Note', N'Notes about the collector, e.g. if the name is uncertain', NULL, NULL, NULL, NULL, NULL, N'b3841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b136ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'75851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent', N'de-DE', N'General', N'Sammelereignis', N'Ort u. Zeit', N'Das Sammereignis während dem die Objekte gesammelt wurden', NULL, NULL, NULL, NULL, NULL, N'b236ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent', N'en-US', N'General', N'Collection event', N'Event', N'The collection event where the specimen was collected', NULL, NULL, NULL, NULL, NULL, N'599e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectingMethod', N'de-DE', N'General', N'Sammelmethode', N'Methode', N'Beschreibung der Methode die für die Sammlung der Proben benutzt wurde, e.g. Fallen, Feuchte Kammer, Schleppnetz', NULL, NULL, NULL, NULL, NULL, N'b336ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectingMethod', N'en-US', N'General', N'Collecting method', N'Col.meth.', N'Description of the method used for collecting the samples, e.g. traps, moist chambers, drag net', NULL, NULL, NULL, NULL, NULL, N'5f821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionDate', N'de-DE', N'General', N'Sammeldatum', N'Datum', NULL, NULL, NULL, NULL, NULL, NULL, N'b436ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionDate', N'en-US', N'General', N'Collection date', N'Date', N'The date of the event calulated from the entries in CollectionDay, -Month and -Year.', NULL, NULL, NULL, NULL, NULL, N'63821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionDateCategory', N'de-DE', N'General', NULL, N'Kategorie', N'Kategorie des Datums der Aufsammlung e.g. "system", "geschätzt"', NULL, NULL, NULL, NULL, NULL, N'b536ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionDateCategory', N'en-US', N'General', NULL, N'Category', N'Category of the date of the collection event e.g. "system", "estimated"', NULL, NULL, NULL, NULL, NULL, N'65821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionDateSupplement', N'de-DE', N'General', N'Ergänzung des Sammeldatums', N'Suppl.', N'Zusätzliche Information zum Sammlungsdatum, e.g. ''Ende Sommer 1985'', ''erstes Quartal'', 188  1892. Das Datums des Endes einer Aufsammlung falls diese einen längeren Zeitraum umfasst.', NULL, NULL, NULL, NULL, NULL, N'b636ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionDateSupplement', N'en-US', N'General', N'Collection date supplement', N'Suppl.', N'Verbal or additional collection date information, e.g.  ''end of summer 1985'', ''first quarter'', ''1888-1892''.  The end date if the collection event comprises a period. The time of the event if necessary.', NULL, NULL, NULL, NULL, NULL, N'67821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionDay', N'de-DE', N'General', N'Sammeltag', N'Tag', N'Der Tag des Datums der Aufsammlung oder der Tag des Beginns derselben', NULL, NULL, NULL, NULL, NULL, N'b736ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionDay', N'en-US', N'General', N'Collection day', N'day', N'The day of the date of the event or when the collection event started', NULL, NULL, NULL, NULL, NULL, N'69821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionEventID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b836ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionEventID', N'en-US', N'General', NULL, NULL, N'Unique ID for the collection event  (= Primary key)', NULL, NULL, NULL, NULL, NULL, N'6b821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionMonth', N'de-DE', N'General', N'Sammelmonat', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b936ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionMonth', N'en-US', N'General', N'Collection month', NULL, N'The month of the date  of the event or when the collection event started', NULL, NULL, NULL, NULL, NULL, N'7b821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionTime', N'de-DE', N'General', N'Sammelzeit', N'Zeit', N'Der Zeitpunkt an den das Sammelereignis gestartet wurde', NULL, NULL, NULL, NULL, NULL, N'ba36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionTime', N'en-US', N'General', N'Collection time', N'Time', N'The time of the event or when the collection event started', NULL, NULL, NULL, NULL, NULL, N'9b821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionTimeSpan', N'de-DE', N'General', N'Sammeldauer', N'Z.Spanne', NULL, NULL, NULL, NULL, NULL, NULL, N'bb36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionTimeSpan', N'en-US', N'General', N'Collection time span', N'T.span', N'The time span e.g. in seconds of the collection event', NULL, NULL, NULL, NULL, NULL, N'9d821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionYear', N'de-DE', N'General', N'Sammeljahr', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'bc36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionYear', N'en-US', N'General', N'Collection year', NULL, N'The year of the date  of the event or when the collection event started', NULL, NULL, NULL, NULL, NULL, N'9f821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectorsEventNumber', N'de-DE', N'General', N'Nummer des Sammelorts', N'Nr.', N'Die einer Aufsammlung zugewiesene Nummer (= Feldnummer)', NULL, NULL, NULL, NULL, NULL, N'bd36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectorsEventNumber', N'en-US', N'General', N'Number of the collection event', N'No.', N'Number assigned to a collection event  by the collector (= ''field number'')', NULL, NULL, NULL, NULL, NULL, N'a3821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CountryCache', N'de-DE', N'General', N'Land', N'Land', N'Das Land in dem die Aufsammlung stattfand. Zwischengespeicherter Wert, ermittelt über einen geographischen Eintrag', NULL, NULL, NULL, NULL, NULL, N'be36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CountryCache', N'en-US', N'General', N'Country', N'Country', N'The country where the collection event took place. Cached value derived from an geographic entry', NULL, NULL, NULL, NULL, NULL, N'af821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.DataWithholdingReason', N'de-DE', N'General', N'Datensperre für Sammelort', N'Pub.Sperre', N'Falls der Datensatz nicht publiziert werden soll, der Grund hierfür, ansonsten leer', NULL, NULL, NULL, NULL, NULL, N'bf36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.DataWithholdingReason', N'en-US', N'General', N'Data withholding reason for collection event', N'Withhold.', N'If the dataset is withhold, the reason for withholding the data, otherwise null', NULL, NULL, NULL, NULL, NULL, N'b1821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.HabitatDescription', N'de-DE', N'General', N'Beschreibung des Habitats', N'Habitat', N'Geo-ökologische Beschreibung des Standorts, genau wie im Original Etikett (d.h. ohne Korrekturen während der Dateneingabe)', NULL, NULL, NULL, NULL, NULL, N'c036ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.HabitatDescription', N'en-US', N'General', N'Description of the habitat', N'Habitat', N'Geo-ecological description of the locality, exactly as written on the original label (i.e. without corrections during data entry)', NULL, NULL, NULL, NULL, NULL, N'41831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LocalityDescription', N'de-DE', N'General', N'Beschreibung des Sammelorts', N'Sammelort', N'Bescheibung des Orts der Aufsammlung, genau wie im Etikett beschrieben (ohne Korrektur während der Dateneingabe)', NULL, NULL, NULL, NULL, NULL, N'c136ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LocalityDescription', N'en-US', N'General', N'Locality description', N'Locality', N'Locality description of the locality, exactly as written on the original label (i.e. without corrections during data entry)', NULL, NULL, NULL, NULL, NULL, N'89831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c236ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'b1831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c336ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'dd831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c436ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'25841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c536ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'67841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.Notes', N'de-DE', N'General', N'Notizen', N'Notizen', N'Notizen zum Sammerereignis', NULL, NULL, NULL, NULL, NULL, N'c636ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.Notes', N'en-US', N'General', N'Notes', N'Notes', N'Notes about the collection event', NULL, NULL, NULL, NULL, NULL, N'a3841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.ReferenceDetails', N'de-DE', N'General', N'Details', N'Details', N'Der genaue Bereich innerhalb der Publikation, e.g. Seitenzahlen, Abbidlungen', NULL, NULL, NULL, NULL, NULL, N'd0220d54-6ffc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.ReferenceDetails', N'en-US', N'General', N'Details', N'Details', N'The exact part within the publication, e.g. pages, images', NULL, NULL, NULL, NULL, NULL, N'8188fec5-41fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.ReferenceTitle', N'de-DE', N'General', N'Literatur', N'Lit.', N'Der Titel der Publikation in der das Sammelereignis publiziert wurde. Dies ist nur ein zwischengespeicherter Wert wenn eine Verknüpfung zum Literaturmodul vorhanden ist', NULL, NULL, NULL, NULL, NULL, N'c736ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.ReferenceTitle', N'en-US', N'General', N'Reference', N'Ref.', N'The title of the publication where the collection event was published. Note this is only a cached value where ReferenceURI is present', NULL, NULL, NULL, NULL, NULL, N'01851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.ReferenceURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c836ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.ReferenceURI', N'en-US', N'General', NULL, NULL, N'URI (e.g. LSID) of the source publication where the collection event is published, may e.g. refer to the module DiversityReferences', NULL, NULL, NULL, NULL, NULL, N'07851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c936ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'7f851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.SeriesID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ca36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.SeriesID', N'en-US', N'General', NULL, NULL, N'The ID of the related expedition. Relates to the PK of the table CollectionExpedition (Foreign key). ', NULL, NULL, NULL, NULL, NULL, N'89851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.Version', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'cb36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.Version', N'en-US', N'General', NULL, NULL, N'The version of the dataset. Automatically set by the system.', NULL, NULL, NULL, NULL, NULL, N'cf851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage', N'de-DE', N'General', N'Bilder des Sammelorts', NULL, N'Bilder die den Ort der Aufsammlung zeigen', NULL, NULL, NULL, NULL, NULL, N'cc36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage', N'en-US', N'General', N'Images of the collection event', NULL, N'The images showing the site of the collection event', NULL, NULL, NULL, NULL, NULL, N'5b9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.CollectionEventID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'cd36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.CollectionEventID', N'en-US', N'General', NULL, NULL, N'Unique ID for the collection event  (= Primary key)', NULL, NULL, NULL, NULL, NULL, N'6f821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.DataWithholdingReason', N'de-DE', N'General', N'Datensperre für Bild von Sammelort', N'Pub.Sperre', N'Falls der Datensatz nicht publiziert werden soll, der Grund hierfür, ansonsten leer', NULL, NULL, NULL, NULL, NULL, N'ce36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.DataWithholdingReason', N'en-US', N'General', N'Data withholding reason for specimen', N'Withhold.', N'If the dataset is withhold, the reason for withholding the data, otherwise null', NULL, NULL, NULL, NULL, NULL, N'bb821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.ImageType', N'de-DE', N'General', NULL, N'Typ', N'Der Typ des Bilds, e.g. Karte, Foto', NULL, NULL, NULL, NULL, NULL, N'cf36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.ImageType', N'en-US', N'General', NULL, N'Type', N'Type of the image, e.g. map, photography', NULL, NULL, NULL, NULL, NULL, N'61831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd036ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'97831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd136ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'f7831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd236ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'37841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd336ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'55841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.Notes', N'de-DE', N'General', NULL, N'Notiz', N'Anmerkung zum Bild des Sammelorts', NULL, NULL, NULL, NULL, NULL, N'd436ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.Notes', N'en-US', N'General', NULL, N'Note', N'Notes to this image concerning the collection event', NULL, NULL, NULL, NULL, NULL, N'95841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.ResourceURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd536ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.ResourceURI', N'en-US', N'General', NULL, NULL, N'The URI of the resource (e.g. see module DiversityResources)', NULL, NULL, NULL, NULL, NULL, N'1d851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd636ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'55851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.URI', N'de-DE', N'General', NULL, N'URI', N'Die vollständige Adresse des Bilds (URI). Dies ist nur ein zwischengespeicherter Wert, falls der Datensatz mit dem Modul DiversityResources verknüpft ist.', NULL, NULL, NULL, NULL, NULL, N'd736ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.URI', N'en-US', N'General', NULL, N'URI', N'The complete URI address of the image. This is only a cached value if ResourceID is available referring to the module DiversityResources', NULL, NULL, NULL, NULL, NULL, N'c9851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation', N'de-DE', N'General', N'Geographie des Sammelpunkts', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd836ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation', N'en-US', N'General', N'Localisation of the collection event', NULL, N'The geographic localisation of a collection event', NULL, NULL, NULL, NULL, NULL, N'5d9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.AverageAltitudeCache', N'de-DE', N'General', N'Höhe (mNN)', N'Höhe', N'Berechnete Höhe, ermittelt aus den Angaben', NULL, NULL, NULL, NULL, NULL, N'd936ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.AverageAltitudeCache', N'en-US', N'General', N'Altitude (mNN)', N'Alt.', N'Calculated altitude as parsed from the location fields', NULL, NULL, NULL, NULL, NULL, N'53821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.AverageLatitudeCache', N'de-DE', N'General', N'Geogr. Breite', N'Breite', N'Geographische Breite, berechnet aus den Eingaben', NULL, NULL, NULL, NULL, NULL, N'da36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.AverageLatitudeCache', N'en-US', N'General', N'Latitude', N'Lat.', N'Calculated latitude as parsed from the location fields', NULL, NULL, NULL, NULL, NULL, N'55821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.AverageLongitudeCache', N'de-DE', N'General', N'Geogr. Länge', N'Länge', N'Geographische Länge, berechnet aus dem Eingaben', NULL, NULL, NULL, NULL, NULL, N'db36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.AverageLongitudeCache', N'en-US', N'General', N'Longitude', N'Long.', N'Calculated longitude as parsed from the location fields', NULL, NULL, NULL, NULL, NULL, N'57821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.CollectionEventID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'dc36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.CollectionEventID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of CollectionEvent (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'71821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.DeterminationDate', N'de-DE', N'General', NULL, N'Datum', N'Datum der Bestimmung der Geographischen Lage', NULL, NULL, NULL, NULL, NULL, N'dd36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.DeterminationDate', N'en-US', N'General', NULL, N'Date', N'Date of the determination of the geographical localisation', NULL, NULL, NULL, NULL, NULL, N'e5821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.DirectionToLocation', N'de-DE', N'General', N'Richtung zum Sammelort', N'Richtung', N'Richtung vom angegebenen Ort zum wirklichen Ort der Aufsammlung (Grad rel. zu Nord)', NULL, NULL, NULL, NULL, NULL, N'de36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.DirectionToLocation', N'en-US', N'General', N'Direction to collection site', N'Direction', N'Direction from the specified place to the real location of the collection event (Degrees rel. to north)', NULL, NULL, NULL, NULL, NULL, N'e7821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.DistanceToLocation', N'de-DE', N'General', N'Abstand vom Sammelort', N'Abstand', N'Abstand vom angegebenen Ort zum wirklichen Ort der Aufsammlung (m)', NULL, NULL, NULL, NULL, NULL, N'df36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.DistanceToLocation', N'en-US', N'General', N'Distance to collection site', N'Distance', N'Distance from the specified place to the real location of the collection event (m)', NULL, NULL, NULL, NULL, NULL, N'0b831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.Geography', N'de-DE', N'General', NULL, NULL, N'Die Geographie der Ortsbestimmung', NULL, NULL, NULL, NULL, NULL, N'409c179c-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.Geography', N'en-US', N'General', NULL, NULL, N'The geography of the localisation', NULL, NULL, NULL, NULL, NULL, N'713c397d-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LocalisationSystemID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e036ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LocalisationSystemID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of LocalisationSystem (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'81831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.Location1', N'de-DE', N'General', NULL, N'Loc.1', N'Erstes Feld der geographischen Angabe, e.g. Name des Orts, unterer Wert eines Bereichs', NULL, NULL, NULL, NULL, NULL, N'e136ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.Location1', N'en-US', N'General', NULL, N'Loc.1', N'Either a named location selected from a thesaurus (e. g. ''Germany, Bavaria, Kleindingharting'') or altitude range or other values (e. g. 100-200 m)', NULL, NULL, NULL, NULL, NULL, N'8d831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.Location2', N'de-DE', N'General', NULL, N'Loc.2', N'2. Feld der geograpischen Angabe, e.g. oberer Wert eines Bereichs', NULL, NULL, NULL, NULL, NULL, N'e236ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.Location2', N'en-US', N'General', NULL, N'Loc.2', N'Corresponding value to Location1 e.g. ID or URI of gazetteer or thesaurus', NULL, NULL, NULL, NULL, NULL, N'8f831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LocationAccuracy', N'de-DE', N'General', N'Genauigkeit', N'Genauigk.', N'Die Genauigkeit der Angaben', NULL, NULL, NULL, NULL, NULL, N'e336ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LocationAccuracy', N'en-US', N'General', N'Accuracy', N'Accuracy', N'The accuracy of the determination of this locality', NULL, NULL, NULL, NULL, NULL, N'91831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LocationNotes', N'de-DE', N'General', N'Notiz', N'Notiz', N'Anmerkung zur geographischen Angabe', NULL, NULL, NULL, NULL, NULL, N'e436ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LocationNotes', N'en-US', N'General', N'Note', N'Note', N'Notes on the location', NULL, NULL, NULL, NULL, NULL, N'93831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e536ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'99831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e636ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'f3831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e736ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'3b841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e836ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'53841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.ResponsibleAgentURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e936ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.ResponsibleAgentURI', N'en-US', N'General', NULL, NULL, N'URI of the person or organisation responsible for the data (see e.g. module DiversityAgents)', NULL, NULL, NULL, NULL, NULL, N'23851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.ResponsibleName', N'de-DE', N'General', NULL, N'Verantwort.', N'Der Name der Person oder Organisation die für den Eintrag verantwortlich ist', NULL, NULL, NULL, NULL, NULL, N'ea36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.ResponsibleName', N'en-US', N'General', NULL, N'Respons.', N'The name of the agent (person or organization) responsible for this entry.', NULL, NULL, NULL, NULL, NULL, N'35851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'eb36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'57851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty', N'de-DE', N'General', N'Eigenschaften des Sammelorts', NULL, N'Eigenschaften des Sammelorts, e.g. Stratigraphie, Vegetationstyp. Die Einträge können mit dem Modul DiversityScientificTerms verknüpft sein', NULL, NULL, NULL, NULL, NULL, N'ec36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty', N'en-US', N'General', N'Property of the collecton site', NULL, N'A property of a collection site, e.g. stratigraphy, vegetation. May refer to Diversity Workbench module DiversityScientificTerms', NULL, NULL, NULL, NULL, NULL, N'5f9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.AverageValueCache', N'de-DE', N'General', NULL, N'Mittel', N'Für numerische Werte - der errechnete Mittelwert', NULL, NULL, NULL, NULL, NULL, N'ed36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.AverageValueCache', N'en-US', N'General', NULL, N'Average', N'For numeric values - a cached average value according to the', NULL, NULL, NULL, NULL, NULL, N'59821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.CollectionEventID', N'de-DE', N'General', NULL, NULL, N'Bezieht sich auf die ID der Tabelle CollectionEvent', NULL, NULL, NULL, NULL, NULL, N'ee36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.CollectionEventID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of CollectionEvent (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'73821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.DisplayText', N'de-DE', N'General', NULL, NULL, N'Der Text der Standordeigenschaft der in der Benutzeroberfläche angezeigt wird', NULL, NULL, NULL, NULL, NULL, N'ef36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.DisplayText', N'en-US', N'General', NULL, NULL, N'The text for the property as shown e.g. in a user interface', NULL, NULL, NULL, NULL, NULL, N'03831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f036ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'ab831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f136ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'eb831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f236ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'45841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f336ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'47841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.Notes', N'de-DE', N'General', NULL, N'Notiz', N'Anmerkung über die Eigenschaften eines Sammelorts', NULL, NULL, NULL, NULL, NULL, N'f436ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.Notes', N'en-US', N'General', NULL, N'Note', N'Notes about the property of the colletion site.', NULL, NULL, NULL, NULL, NULL, N'a1841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.PropertyHierarchyCache', N'de-DE', N'General', NULL, N'Hierarchie', N'Die gesamte Hierarchie des Eintrags mit allen übergeordnete Einträgen', NULL, NULL, NULL, NULL, NULL, N'f536ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.PropertyHierarchyCache', N'en-US', N'General', NULL, N'Hierarchy', N'A cached text of the complete name of the descriptor including superior categories if present', NULL, NULL, NULL, NULL, NULL, N'ef841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.PropertyID', N'de-DE', N'General', NULL, NULL, N'Die ID der Tabelle Property', NULL, NULL, NULL, NULL, NULL, N'f636ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.PropertyID', N'en-US', N'General', NULL, NULL, N'The ID of the property of the collection event, foreign key, see table Property', NULL, NULL, NULL, NULL, NULL, N'f1841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.PropertyURI', N'de-DE', N'General', NULL, N'URI', N'URI die sich auf externe Datenquelle bezieht, e.g. DiversityScientificTerms', NULL, NULL, NULL, NULL, NULL, N'f736ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.PropertyURI', N'en-US', N'General', NULL, N'URI', N'URI referring to an external datasource e.g. DiversityScientificTerms', NULL, NULL, NULL, NULL, NULL, N'f9841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.PropertyValue', N'de-DE', N'General', NULL, N'Wert', N'Der Wert der erfassten Eigenschaft, e.g. Temperatur, pH etc.', NULL, NULL, NULL, NULL, NULL, N'f836ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.PropertyValue', N'en-US', N'General', NULL, N'Value', N'The value of a captured feature  e.g. temperature, pH, vegetation etc. If there is a range this is the lower or first value', NULL, NULL, NULL, NULL, NULL, N'fb841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.ResponsibleAgentURI', N'de-DE', N'General', NULL, NULL, N'URI der Person oder Organisation die für die Daten verantwortlich sind (Bezug zu Modul DiversityAgents)', NULL, NULL, NULL, NULL, NULL, N'f936ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.ResponsibleAgentURI', N'en-US', N'General', NULL, NULL, N'URI of the person or organisation responsible for the data (see e.g. module DiversityAgents)', NULL, NULL, NULL, NULL, NULL, N'25851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.ResponsibleName', N'de-DE', N'General', NULL, N'Bearbeit.', N'Der Name der für den Eintrag verantwortlichen Person oder Organisation', NULL, NULL, NULL, NULL, NULL, N'fa36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.ResponsibleName', N'en-US', N'General', NULL, N'Respons.', N'The name of the agent (person or organization) responsible for this entry.', NULL, NULL, NULL, NULL, NULL, N'33851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fb36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'47851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries', N'de-DE', N'General', N'Sammelserie', N'Serie', N'Serie von Sammelereignissen', NULL, NULL, NULL, NULL, NULL, N'fc36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries', N'en-US', N'General', N'Collection event series', N'Series', N'The series within which collection events take place', NULL, NULL, NULL, NULL, NULL, N'619e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.DateCache', N'de-DE', N'General', N'Datum des Beginns', N'Datum', N'Das erste Datum der Sammelereignisse dieser Sammelserie', NULL, NULL, NULL, NULL, NULL, N'fd36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.DateCache', N'en-US', N'General', N'Start date', N'Date', N'The first date of the depending events', NULL, NULL, NULL, NULL, NULL, N'bf821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.DateEnd', N'de-DE', N'General', NULL, NULL, N'Datum und Zeit des Endes der Serie der Sammelereignisse', NULL, NULL, NULL, NULL, NULL, N'419c179c-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.DateEnd', N'en-US', N'General', NULL, NULL, N'The date and time when the collection event series ended', NULL, NULL, NULL, NULL, NULL, N'21ef9c70-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.DateStart', N'de-DE', N'General', NULL, NULL, N'Datum und Zeit des Anfangs der Serie der Sammelereignisse', NULL, NULL, NULL, NULL, NULL, N'429c179c-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.DateStart', N'en-US', N'General', NULL, NULL, N'The date and time when the collection event series started', NULL, NULL, NULL, NULL, NULL, N'23ef9c70-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.Description', N'de-DE', N'General', NULL, N'Beschreibung', N'Die Beschreibung der Serie der Sammelereignisse wie sie e.g. in einem Label erscheinen soll', NULL, NULL, NULL, NULL, NULL, N'fe36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.Description', N'en-US', N'General', NULL, N'Description', N'The description of the event series as it will be printed on e.g. the label', NULL, NULL, NULL, NULL, NULL, N'd3821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.Geography', N'de-DE', N'General', NULL, NULL, N'Die Geographie der Serie der Sammelereignisse', NULL, NULL, NULL, NULL, NULL, N'439c179c-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.Geography', N'en-US', N'General', NULL, NULL, N'The geography of the collection event series', NULL, NULL, NULL, NULL, NULL, N'25ef9c70-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ff36ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'b5831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'd9831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'2b841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'63841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.Notes', N'de-DE', N'General', N'Notiz', N'Notiz', N'Anmerkungen über diese Serie von Sammelorten', NULL, NULL, NULL, NULL, NULL, N'0337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.Notes', N'en-US', N'General', N'Note', N'Note', N'Notes about this event series', NULL, NULL, NULL, NULL, NULL, N'a9841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'7b851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.SeriesCode', N'de-DE', N'General', N'Code', N'Code', N'Benutzerdefinierter Code der Sammelserie', NULL, NULL, NULL, NULL, NULL, N'0537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.SeriesCode', N'en-US', N'General', N'Code', N'Code', N'The user defined code for an collection event series', NULL, NULL, NULL, NULL, NULL, N'85851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.SeriesID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.SeriesID', N'en-US', N'General', NULL, NULL, N'Primary key. The ID for this expedition  (= Primary key)', NULL, NULL, NULL, NULL, NULL, N'87851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.SeriesParentID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.SeriesParentID', N'en-US', N'General', NULL, NULL, N'The ID of the superior expedition', NULL, NULL, NULL, NULL, NULL, N'8d851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage', N'de-DE', N'General', N'Bilder der Sammelserie', NULL, N'Bilder der Sammelserie, e.g. einer Expedition oder einer Problefläche', NULL, NULL, NULL, NULL, NULL, N'0837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage', N'en-US', N'General', N'Images of the collection event series', NULL, N'The images showing the sites of a collection event series, e.g. an expedition or sampling plot', NULL, NULL, NULL, NULL, NULL, N'639e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.DataWithholdingReason', N'de-DE', N'General', N'Datensperre für Bild von Sammelserie', N'Pub.Sperre', N'Falls der Datensatz nicht publiziert werden soll, die Gründe hierfür, ansonsten leer', NULL, NULL, NULL, NULL, NULL, N'0937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.DataWithholdingReason', N'en-US', N'General', N'Data withholding reason', N'Withhold.', N'If the dataset is withhold, the reason for withholding the data, otherwise null', NULL, NULL, NULL, NULL, NULL, N'b9821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.ImageType', N'de-DE', N'General', N'Typ des Mediums', N'Typ', N'Typ des Bilds, e.g. Landkarte', NULL, NULL, NULL, NULL, NULL, N'0a37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.ImageType', N'en-US', N'General', N'Type of the medium', N'Type', N'Type of the image, e.g. map', NULL, NULL, NULL, NULL, NULL, N'5f831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0b37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'9d831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0c37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'ef831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0d37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'31841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0e37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'5b841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.Notes', N'de-DE', N'General', N'Anmerkung', N'Notiz', N'Anmerkung zu diesem Bild', NULL, NULL, NULL, NULL, NULL, N'0f37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.Notes', N'en-US', N'General', N'Note', N'Note', N'Notes to this image concerning the collection event', NULL, NULL, NULL, NULL, NULL, N'93841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.ResourceURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.ResourceURI', N'en-US', N'General', NULL, NULL, N'The URI of the resource (e.g. see module DiversityResources)', NULL, NULL, NULL, NULL, NULL, N'1f851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'4b851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.SeriesID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.SeriesID', N'en-US', N'General', NULL, NULL, N'Unique ID for the collection event series  (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'8b851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.URI', N'de-DE', N'General', NULL, N'URI', N'Die vollständige Adresse des Mediums. Falls das Medium mit einem externen Modul wie DiversityResources verknüpft ist, ist dies nur ein zwischengespeicherter Wert', NULL, NULL, NULL, NULL, NULL, N'1337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.URI', N'en-US', N'General', NULL, N'URI', N'The complete URI address of the medium. This is only a cached value if the medium is linked to an external module like DiversityResources', NULL, NULL, NULL, NULL, NULL, N'c7851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource', N'en-US', N'General', NULL, NULL, N'CollectionExternalDatasource document the sources of the names.', NULL, NULL, NULL, NULL, NULL, N'659e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.Disabled', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.Disabled', N'en-US', N'General', NULL, NULL, N'If this source should be disabled for selection of names e.g. in picklists', NULL, NULL, NULL, NULL, NULL, N'e9821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalAttribute_NameID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalAttribute_NameID', N'en-US', N'General', NULL, NULL, N'The table and field name in the external data collection to which CollectionExternalID refers', NULL, NULL, NULL, NULL, NULL, N'23831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceAuthors', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceAuthors', N'en-US', N'General', NULL, NULL, N'The persons or institutions responsible for the external database', NULL, NULL, NULL, NULL, NULL, N'25831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceID', N'en-US', N'General', NULL, NULL, N'An ID to identify an external data collection of collection specimen (primary key, the ID has no meaning outside of the DiversityWorkbench system)', NULL, NULL, NULL, NULL, NULL, N'27831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceInstitution', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceInstitution', N'en-US', N'General', NULL, NULL, N'The institution responsible for the external database', NULL, NULL, NULL, NULL, NULL, N'2b831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceName', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1a37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceName', N'en-US', N'General', NULL, NULL, N'The name of the data collection that has been integrated or can be linked to for further analysis', NULL, NULL, NULL, NULL, NULL, N'2d831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1b37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceURI', N'en-US', N'General', NULL, NULL, N'The URI of the database provider resp. the external database', NULL, NULL, NULL, NULL, NULL, N'2f831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceVersion', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1c37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.ExternalDatasourceVersion', N'en-US', N'General', NULL, NULL, N'The version of this data collection (either official version number, or dates when the collection was integrated)', NULL, NULL, NULL, NULL, NULL, N'31831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.InternalNotes', N'de-DE', N'General', NULL, N'Int.Notiz', N'Interne Anmerkungen', NULL, NULL, NULL, NULL, NULL, N'1d37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.InternalNotes', N'en-US', N'General', NULL, N'Int.Note', N'Internal notes concerning this data collection', NULL, NULL, NULL, NULL, NULL, N'6b831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.PreferredSequence', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1e37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.PreferredSequence', N'en-US', N'General', NULL, NULL, N'For selection in e.g. picklists: of several equal names only the name from the source with the lowest preferred sequence will be provided.', NULL, NULL, NULL, NULL, NULL, N'c9841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.Rights', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1f37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.Rights', N'en-US', N'General', NULL, NULL, N'A description of copyright agreements or permission to use data from the external database', NULL, NULL, NULL, NULL, NULL, N'39851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'3d851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager', N'en-US', N'General', NULL, NULL, N'Collection managers within DiversityCollection, responsible of specimen transactions', NULL, NULL, NULL, NULL, NULL, N'679e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager.AdministratingCollectionID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager.AdministratingCollectionID', N'en-US', N'General', NULL, NULL, N'ID for the collection for which the Manager has the right to administrate the transaction. Corresponds to AdministratingCollectionID in table Transaction.', NULL, NULL, NULL, NULL, NULL, N'39821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager.LoginName', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager.LoginName', N'en-US', N'General', NULL, NULL, N'A login name which the user uses  for access the DivesityWorkbench, Microsoft domains, etc..', NULL, NULL, NULL, NULL, NULL, N'ff831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'6f851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject', N'de-DE', N'General', N'Projekte', N'Projekte', N'Die Projekte denen der Beleg zugeordnet wurde', NULL, NULL, NULL, NULL, NULL, N'2537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject', N'en-US', N'General', N'Projects', N'Projects', N'The projects within which the collection specimen were placed', NULL, NULL, NULL, NULL, NULL, N'699e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.CollectionSpecimenID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.CollectionSpecimenID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of CollectionSpecimen (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'87821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'af831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'e1831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'21841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2a37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'69841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.Project', N'de-DE', N'General', N'Projekt', N'Projekt', N'Die Projekte denen der Beleg zugeordnet wurde', NULL, NULL, NULL, NULL, NULL, N'8043e3db-b1b8-de11-ac33-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.Project', N'en-US', N'General', N'Project', N'Project', N'The projects within which the collection specimen were placed', NULL, NULL, NULL, NULL, NULL, N'a15028ba-b1b8-de11-ac33-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.ProjectID', N'de-DE', N'General', N'Projekt', N'Projekt', N'ID des Projekts zu dem der Beleg gehoert (Projekte werden im Modul DiversityProjects definiert)', NULL, NULL, NULL, NULL, NULL, N'2b37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.ProjectID', N'en-US', N'General', N'Project', N'Project', N'ID of the project to which the specimen belongs (Projects are defined in DiversityProjects)', NULL, NULL, NULL, NULL, NULL, N'eb841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2c37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'83851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionRequester', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'40929700-651d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionRequester', N'en-US', N'General', NULL, NULL, N'Requesters within DiversityCollection, responsible of specimen transactions', NULL, NULL, NULL, NULL, NULL, N'f1483ff4-1510-df11-8314-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen', N'de-DE', N'General', N'Sammlungsbeleg', N'Beleg', N'Daten die sich direkt auf den Sammlungsbeleg beziehen', NULL, NULL, NULL, NULL, NULL, N'2d37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen', N'de-DE', N'Observation', N'Beobachtete Gruppe', N'Gruppe', N'Die beobachtete Gruppe von Organismen', NULL, NULL, NULL, NULL, NULL, N'f94ea253-fc92-de11-9944-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen', N'en-US', N'General', N'Collection specimen', N'Specimen', N'The data directly attributed to the collection specimen', NULL, NULL, NULL, NULL, NULL, N'6b9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen', N'en-US', N'Observation', N'Observed group', N'Group', N'The observed group of organisms', NULL, NULL, NULL, NULL, NULL, N'a93b1a49-fc92-de11-9944-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionDate', N'de-DE', N'General', NULL, N'Zug.Dat.', N'Das Datum des Zugangs, ermittelt aus den Angaben für Zugangstag, -Monat und -Jahr', NULL, NULL, NULL, NULL, NULL, N'2e37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionDate', N'en-US', N'General', NULL, N'Acc.date', N'The date of the accession calculated from the entries in AccessionDay, -Month and -Year', NULL, NULL, NULL, NULL, NULL, N'23821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionDateCategory', N'de-DE', N'General', NULL, N'Kat.', N'Kategorie des Zugangsdatums', NULL, NULL, NULL, NULL, NULL, N'2f37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionDateCategory', N'en-US', N'General', NULL, N'Cat.', N'Category of the date of the access e.g. "system", "estimated"  (= foreign key, see  in table xColl_DateCategory_Enum)', NULL, NULL, NULL, NULL, NULL, N'25821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionDateSupplement', N'de-DE', N'General', N'Zugangsdatum Ergänzungen', N'Suppl.', N'Zusätzliche Information zum Zugangsdatum, z.B.: ''Spätsommer'', ''erstes Quartal''', NULL, NULL, NULL, NULL, NULL, N'3037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionDateSupplement', N'en-US', N'General', N'Accession date supplement', N'Suppl.', N'Verbal or additional accession date information, e.g. ''end of summer 1985'', ''first quarter'', ''1888-1892''', NULL, NULL, NULL, NULL, NULL, N'27821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionDay', N'de-DE', N'General', N'Tag Zugang', NULL, N'Der Tag des Zugangsdatums', NULL, NULL, NULL, NULL, NULL, N'3137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionDay', N'en-US', N'General', N'Accession day', NULL, N'The day of the date  when the specimen was acquired in the collection', NULL, NULL, NULL, NULL, NULL, N'29821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionMonth', N'de-DE', N'General', N'Monat Zugang', NULL, N'Der Monat des Zugangsdatums', NULL, NULL, NULL, NULL, NULL, N'3237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionMonth', N'en-US', N'General', N'Accession month', NULL, N'The month of the date  when the specimen was acquired in the collection', NULL, NULL, NULL, NULL, NULL, N'2b821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionNumber', N'de-DE', N'General', N'Zugangsnummer', N'Beleg Nr.', N'Zugangsnummer eines Belegs in der Sammlung', NULL, NULL, NULL, NULL, NULL, N'3337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionNumber', N'en-US', N'General', N'Accession number', N'Acc. Nr.', N'Accession number of the specimen within the collection, e.g. "M-29834752"', NULL, NULL, NULL, NULL, NULL, N'2d821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionYear', N'de-DE', N'General', N'Jahr Zugang', NULL, N'Das Jahr des Zugangsdatums', NULL, NULL, NULL, NULL, NULL, N'3437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AccessionYear', N'en-US', N'General', N'Accession year', NULL, N'The year of the date  when the specimen was acquired in the collection', NULL, NULL, NULL, NULL, NULL, N'31821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AdditionalNotes', N'de-DE', N'General', N'Zusätzliche Notizen', N'Zusätzl.', N'Zusätzliche Notizen durch den Editor des Belegs, e.g. zweifelhafte Bestimmung', NULL, NULL, NULL, NULL, NULL, N'3537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.AdditionalNotes', N'en-US', N'General', N'Additional notes', N'Additional', N'Additional notes made by the editor of the specimen record, e. g. ''doubtful identification/locality''', NULL, NULL, NULL, NULL, NULL, N'35821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.CollectionEventID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.CollectionEventID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of CollectionEvent (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'6d821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.CollectionID', N'de-DE', N'General', NULL, N'Sammlung', N'Die Sammlung in der ein Beleg abgelegt ist', NULL, NULL, NULL, NULL, NULL, N'3737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.CollectionID', N'en-US', N'General', NULL, N'Collection', N'ID of the Collection as stored in table Collection (= foreign key, see table Collection)', NULL, NULL, NULL, NULL, NULL, N'77821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.CollectionSpecimenID', N'de-DE', N'General', N'Beleg ID', NULL, N'Eindeutige ID des Belegs der Sammlung', NULL, NULL, NULL, NULL, NULL, N'3837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.CollectionSpecimenID', N'en-US', N'General', N'Specimen ID', NULL, N'Unique reference ID for the collection specimen record', NULL, NULL, NULL, NULL, NULL, N'8b821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.DataWithholdingReason', N'de-DE', N'General', N'Datensperre für Beleg', N'Pub.Sperre', N'Falls der Datensatz nicht publiziert werden soll, der Grund hierfür, ansonsten leer', NULL, NULL, NULL, NULL, NULL, N'3937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.DataWithholdingReason', N'en-US', N'General', N'Data withholding reason for specimen', N'Withhold.', N'If the dataset is withhold, the reason for withholding the data, otherwise null', NULL, NULL, NULL, NULL, NULL, N'b3821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Depositor', N'de-DE', N'General', N'Herkunft', N'Herkunft', NULL, NULL, NULL, NULL, NULL, NULL, N'1f8c5d66-cf9e-de11-ac33-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Depositor', N'en-US', N'General', N'Depositor', N'Depositor', NULL, NULL, NULL, NULL, NULL, NULL, N'7f02db33-b39e-de11-ac33-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.DepositorsAccessionNumber', N'de-DE', N'General', N'Nr. Herkunft', N'Nr. Herk.', N'Zugangsnummer des Beleg in der vorgehenden oder Originalsammlung, e.g. ''D-23948''', NULL, NULL, NULL, NULL, NULL, N'3a37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.DepositorsAccessionNumber', N'en-US', N'General', N'Depositors accession number', N'Dep.Acc.Nr.', N'Accession number of the specimen within the previous or original collection, e.g. ''D-23948''', NULL, NULL, NULL, NULL, NULL, N'c9821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.DepositorsAgentURI', N'de-DE', N'General', N'Verknüpfung mit DiversityAgents', NULL, N'Die URI der Herkunft - Verbindung zum Modul DiversityAgents', NULL, NULL, NULL, NULL, NULL, N'3b37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.DepositorsAgentURI', N'en-US', N'General', N'Depositors link to DiversityAgents', NULL, N'The URI of the depositor(s) (person or organization responsible for deposition)', NULL, NULL, NULL, NULL, NULL, N'cb821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.DepositorsName', N'de-DE', N'General', N'Herkunft', N'Herkunft', N'Der Name der ursprünglichen Sammlung resp. der Person von der der Beleg stammt. Wo ganze Sammlungen übergeben wurden sollte hier auch der Name der Sammlung stehen,  e.g. Herbarium P. Döbbeler', NULL, NULL, NULL, NULL, NULL, N'3c37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.DepositorsName', N'en-US', N'General', N'Depositor', N'Depositor', N'The name of the depositor(s) (person or organization responsible for deposition). Where entire collections are deposited, this should also contain the collection name (e.g. ''Herbarium P. Döbbler'')', NULL, NULL, NULL, NULL, NULL, N'cd821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ExsiccataAbbreviation', N'de-DE', N'General', N'Exsikkatenserie (Abk.)', N'Exsikkat.', N'Falls der Beleg ein Exsikkat ist: Standard Abkürzung des Exsikkats (nicht notwendigerweise eindeutig; Editoren oder Herausgabeorte können sich mit der Zeit ändern)', NULL, NULL, NULL, NULL, NULL, N'3d37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ExsiccataAbbreviation', N'en-US', N'General', N'Exsiccata series (abbr.)', N'Exsiccat.', N'If specimen is an exsiccata: Standard abbreviation of the exsiccata (not necessarily a unique identifier; editors or publication places may change over time)', NULL, NULL, NULL, NULL, NULL, N'19831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ExsiccataURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3e37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ExsiccataURI', N'en-US', N'General', NULL, NULL, N'If specimen is an exsiccata: The URI of the Exsiccata series, e.g. as stored within the DiversityExsiccata module', NULL, NULL, NULL, NULL, NULL, N'1f831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ExternalDatasourceID', N'de-DE', N'General', NULL, N'Quelle', N'Die externe Datenquelle aus der die Belege importiert wurden', NULL, NULL, NULL, NULL, NULL, N'3f37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ExternalDatasourceID', N'en-US', N'General', NULL, N'Source', N'An ID to identify an external data collection of collection specimen (primary key, the ID has no meaning outside of the DiversityWorkbench system)', NULL, NULL, NULL, NULL, NULL, N'29831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ExternalIdentifier', N'de-DE', N'General', NULL, N'Ext. ID', N'Der Schlüssel des exernen Belegs wie er in der externen Datenquelle definiert wurde', NULL, NULL, NULL, NULL, NULL, N'4037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ExternalIdentifier', N'en-US', N'General', NULL, N'Ext. ID', N'The identifier of the external specimen as defined in the external datasource', NULL, NULL, NULL, NULL, NULL, N'33831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.InternalNotes', N'de-DE', N'General', N'Interne Anmerkungen', N'Intern', N'Interne Notizen die nicht e.g. auf Webseiten publiziert werden sollte', NULL, NULL, NULL, NULL, NULL, N'4137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.InternalNotes', N'en-US', N'General', N'Internal notes', N'Internal', N'Internal notes that should not be published e.g. on websites', NULL, NULL, NULL, NULL, NULL, N'67831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Label', N'de-DE', N'General', N'Etikett', N'Etikett', NULL, NULL, NULL, NULL, NULL, NULL, N'208c5d66-cf9e-de11-ac33-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Label', N'en-US', N'General', N'Label', N'Label', NULL, NULL, NULL, NULL, NULL, NULL, N'704df454-cf9e-de11-ac33-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LabelTitle', N'de-DE', N'General', N'Titel des Etiketts', N'Titel', N'Der Titel des Etiketts, e.g. für den Druck von Etiketten', NULL, NULL, NULL, NULL, NULL, N'4237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LabelTitle', N'en-US', N'General', N'Label title', N'Title', N'The title of the label e.g. for printing labels.', NULL, NULL, NULL, NULL, NULL, N'73831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LabelTranscriptionNotes', N'de-DE', N'General', N'Notitzen zum Übertrag des Etiketts', N'Notiz', N'Anmerkungen des Benutzers bezüglich des Übertrages des Etiketts in die Datenbank', NULL, NULL, NULL, NULL, NULL, N'4337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LabelTranscriptionNotes', N'en-US', N'General', N'Notes for the label transcription', N'Note', N'User defined notes concerning the transcription of the label into the database', NULL, NULL, NULL, NULL, NULL, N'75831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LabelTranscriptionState', N'de-DE', N'General', N'Stand des Übertrags', N'Stand', N'Der Stand des Übertrags des Label in die Datenbank', NULL, NULL, NULL, NULL, NULL, N'4437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LabelTranscriptionState', N'en-US', N'General', N'State of the label transcription', N'State', N'The state of the transcription of a label into the database: ''Not started'', ''incomplete'', ''complete''', NULL, NULL, NULL, NULL, NULL, N'77831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LabelType', N'de-DE', N'General', N'Typ des Etiketts', N'Typ', N'Typ des Etiketts - gedruckt, Schreibmaschine, handschriftlich etc.', NULL, NULL, NULL, NULL, NULL, N'4537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LabelType', N'en-US', N'General', N'Type of the label', N'Type', N'Printed, typewritten, typewritten with handwriting added, entirely in handwriting, etc.', NULL, NULL, NULL, NULL, NULL, N'79831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogCreatedBy', N'de-DE', N'General', N'Angelegt von', N'Angel.von', N'Wer den Datensatz angelegt hat', NULL, NULL, NULL, NULL, NULL, N'4637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogCreatedBy', N'en-US', N'General', N'Created by', N'Creat.by', N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'b9831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogCreatedWhen', N'de-DE', N'General', N'Anlagedatum', N'Anl.Dat.', N'Der Zeitpunkt zu dem der Datensatz angelegt wurde', NULL, NULL, NULL, NULL, NULL, N'4737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogCreatedWhen', N'en-US', N'General', N'Creation date', N'Cre.dat.', N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'd7831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'2d841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'5f841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Notes', N'de-DE', N'General', N'Notizen', N'Notizen', N'Notizen zum Beleg', NULL, NULL, NULL, NULL, NULL, N'4fc522e7-b19e-de11-ac33-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Notes', N'en-US', N'General', N'Notes', N'Notes', N'Notes about the collection specimen', NULL, NULL, NULL, NULL, NULL, N'2f1774dc-b19e-de11-ac33-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.OriginalNotes', N'de-DE', N'General', N'Original Anmerkung', N'Original', N'Die Anmerkungen auf dem Etikett des Belegs, entweder vom Sammler oder aus einer späteren Revision', NULL, NULL, NULL, NULL, NULL, N'4a37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.OriginalNotes', N'en-US', N'General', N'Original notes', N'Original', N'Notes found on the label of the specimen, by the original collector or from a later revision', NULL, NULL, NULL, NULL, NULL, N'bf841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Problems', N'de-DE', N'General', N'Probleme', N'Probleme', N'Beschreibung eines Problem das Während der Bearbeitung der Daten aufgetreten ist. Nach Lösung des Problems sollte der Eintrag wieder gelöscht werden. Für wissenschaftliche Problem bitte das Feld Zusätzliche Anmerkungen verwenden.', NULL, NULL, NULL, NULL, NULL, N'4b37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Problems', N'en-US', N'General', N'Problems', N'Problems', N'Description of a problem that occurred during data editing. Typically these entries should be deleted after help has been obtained. Do not enter scientific problems here; use AdditionalNotes for such permanent problems!', NULL, NULL, NULL, NULL, NULL, N'd1841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ReferenceDetails', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'41929700-651d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ReferenceDetails', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'82da5627-45fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ReferenceTitle', N'de-DE', N'General', N'Literatur', N'Lit.', N'Der Title der Publikation in dem der Beleg publiziert wurde. Falls der Eintrag mit dem Literaturmodul verknüpf ist, ist dies nur ein zwischengespeicherter Wert', NULL, NULL, NULL, NULL, NULL, N'4c37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ReferenceTitle', N'en-US', N'General', N'Reference', N'Ref.', N'The title of the publication where the specimen was published. Note this is only a cached value where ReferenceURI is present', NULL, NULL, NULL, NULL, NULL, N'ff841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ReferenceURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4d37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.ReferenceURI', N'en-US', N'General', NULL, NULL, N'URI (e.g. LSID) of reference where specimen is published, e.g. referring to the module DiversityReferences', NULL, NULL, NULL, NULL, NULL, N'09851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4e37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'79851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Version', N'de-DE', N'General', NULL, N'Version', N'Die Version des Datensatzes', NULL, NULL, NULL, NULL, NULL, N'4f37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.Version', N'en-US', N'General', NULL, N'Version', N'The version of the dataset', NULL, NULL, NULL, NULL, NULL, N'd1851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage', N'de-DE', N'General', N'Bilder des Belegs', NULL, N'Die Bilder und Medien eines Belegs oder eines Organismus in diesem Beleg', NULL, NULL, NULL, NULL, NULL, N'5037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage', N'en-US', N'General', N'Images of the specimen', NULL, N'The images and media of a collection specimen or of an identification unit within this specimen', NULL, NULL, NULL, NULL, NULL, N'6d9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.CollectionSpecimenID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.CollectionSpecimenID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of CollectionSpecimen (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'8f821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.DataWithholdingReason', N'de-DE', N'General', N'Datensperre für Bild von Beleg', N'Pub.Sperre', N'Falls der Datensatz nicht publiziert werden soll, der Grund hierfür, ansonsten leer', NULL, NULL, NULL, NULL, NULL, N'5237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.DataWithholdingReason', N'en-US', N'General', N'Data withholding reason for image of specimen', N'Withhold.', N'If the dataset is withhold, the reason for withholding the data, otherwise null', NULL, NULL, NULL, NULL, NULL, N'b7821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.IdentificationUnitID', N'de-DE', N'General', NULL, N'Organism.', N'Das Bild oder Medium bezieht nur auf einen Organismus innerhalb des Belegs', NULL, NULL, NULL, NULL, NULL, N'5337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.IdentificationUnitID', N'en-US', N'General', NULL, N'Organism', N'If image refers to only one out of several identification units for a specimen, refers to the ID of an IdentificationUnit for a CollectionSpecimen (= foreign key)', NULL, NULL, NULL, NULL, NULL, N'5b831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.ImageType', N'de-DE', N'General', NULL, N'Typ', N'Typ des Bilds bzw. Mediums, e.g. Etikett, Tonaufnahme', NULL, NULL, NULL, NULL, NULL, N'5437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.ImageType', N'en-US', N'General', NULL, N'Type', N'Type of the image resp. medium, e.g. label, audio', NULL, NULL, NULL, NULL, NULL, N'63831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'c1831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'cf831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'0d841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'81841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.Notes', N'de-DE', N'General', NULL, N'Notiz', N'Anmerkungen zum Bild des Beleges', NULL, NULL, NULL, NULL, NULL, N'5937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.Notes', N'en-US', N'General', NULL, N'Note', N'Notes about the specimen image', NULL, NULL, NULL, NULL, NULL, N'b1841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.ResourceURI', N'de-DE', N'General', NULL, N'Quelle', N'Die Quelle des Bilds in externem Modul DiversityResources', NULL, NULL, NULL, NULL, NULL, N'5a37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.ResourceURI', N'en-US', N'General', NULL, N'Resour.', N'The URI of the image, e.g. as stored in the module DiversityResources. ', NULL, NULL, NULL, NULL, NULL, N'1b851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5b37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'73851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.SpecimenPartID', N'de-DE', N'General', NULL, N'Teil', N'Optional: Der Teil eines Belegs, falls sich das Medium auf einen Teil des Beleg bezieht', NULL, NULL, NULL, NULL, NULL, N'5c37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.SpecimenPartID', N'en-US', N'General', NULL, N'Part', N'Optional: If the dataset is related to a part of a specimen, the ID of a related part (= foreign key)', NULL, NULL, NULL, NULL, NULL, N'93851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.URI', N'de-DE', N'General', NULL, N'URI', N'Die vollständige Adresse (URI) des Bilds bzw. Mediums', NULL, NULL, NULL, NULL, NULL, N'5d37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.URI', N'en-US', N'General', NULL, N'URI', N'The complete URI address of the image resp. medium. This is only a cached value if ResourceID is available referring to the module DiversityResources', NULL, NULL, NULL, NULL, NULL, N'c5851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart', N'de-DE', N'General', N'Teil eines Belegs', NULL, N'Teil eines Belegs incl. einer evtl. vorhandenen Hierarchie der Teile', NULL, NULL, NULL, NULL, NULL, N'5e37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart', N'en-US', N'General', N'Part of a specimen', NULL, N'Parts of a collection specimen. Includes a possible hierarchy of the parts', NULL, NULL, NULL, NULL, NULL, N'6f9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.AccessionNumber', N'de-DE', N'General', N'Nr. Teilbeleg', N'Nr. Teilbel.', N'Beleg Nr. des Teil eines Belegs in der Sammlung falls diese von der Nr. des Hauptbelegs abweicht', NULL, NULL, NULL, NULL, NULL, N'5f37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.AccessionNumber', N'en-US', N'General', N'Nr. Specimen part', N'Nr. part', N'Accession number of the part of the specimen within the collection if it is different from the accession number of the specimen as stored in the table CollectionSpecimen, e.g. "M-29834752"', NULL, NULL, NULL, NULL, NULL, N'2f821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.CollectionID', N'de-DE', N'General', N'Sammlung', N'Sammlung', N'Die Sammlung in der der Teilbeleg lagert', NULL, NULL, NULL, NULL, NULL, N'6037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.CollectionID', N'en-US', N'General', N'Collection', N'Collection', N'The Collection where the part of the specimen is located', NULL, NULL, NULL, NULL, NULL, N'79821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.CollectionSpecimenID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.CollectionSpecimenID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of CollectionSpecimen (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'8d821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.DerivedFromSpecimenPartID', N'de-DE', N'General', NULL, NULL, N'Der Teil des Belegs aus dem der aktuelle Teil gewonnen wurde', NULL, NULL, NULL, NULL, NULL, N'6237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.DerivedFromSpecimenPartID', N'en-US', N'General', NULL, NULL, N'The part of the specimen from which the current specimen is derived from', NULL, NULL, NULL, NULL, NULL, N'cf821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'c7831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'c9831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'11841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'7b841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.MaterialCategory', N'de-DE', N'General', N'Typ des Materials', N'Material', N'Die Kategorie des Materials, e.g. Herbarbeleg, Zeichnung, Objektträger', NULL, NULL, NULL, NULL, NULL, N'6737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.MaterialCategory', N'en-US', N'General', N'Material category', N'Mat. cat.', N'Material category of specimen. Examples: ''herbarium sheets'', ''drawings'', ''microscopic slides'' etc. (= foreign key, see table CollMaterialCategory_Enum)', NULL, NULL, NULL, NULL, NULL, N'83841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.Notes', N'de-DE', N'General', N'Notiz', N'Notiz', N'Anmerkungen zum gelagerten Teil des Belegs', NULL, NULL, NULL, NULL, NULL, N'6837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.Notes', N'en-US', N'General', N'Note', N'Note', N'Notes concerning the storage of the sample', NULL, NULL, NULL, NULL, NULL, N'af841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.PartSublabel', N'de-DE', N'General', N'Kennung des Teils', N'Teilkenn.', N'Die Kennung für den Teil des Belegs, e.g. falls Duplikate eines Belegs eine eigene Nummer haben', NULL, NULL, NULL, NULL, NULL, N'6937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.PartSublabel', N'en-US', N'General', N'Label of part', N'Part', N'The label for a part of a specimen, e.g. if duplicats of a specimen have a separate number', NULL, NULL, NULL, NULL, NULL, N'c7841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.PreparationDate', N'de-DE', N'General', N'Präparationsdatum', N'Datum', N'Das Datum und die Zeit zu der das Teil präpariert wurde e.g. wann es vom Hauptbeleg getrennt wurde', NULL, NULL, NULL, NULL, NULL, N'6a37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.PreparationDate', N'en-US', N'General', N'Preparation date', N'Date', N'The date and time when the part was preparated e.g when it was separated from the source object', NULL, NULL, NULL, NULL, NULL, N'cb841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.PreparationMethod', N'de-DE', N'General', N'Präparationsmethode', N'Methode', N'Die Methode der Präparation für den Teilbeleg, e.g. die Methode der Inoculation einer Kultur', NULL, NULL, NULL, NULL, NULL, N'6b37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.PreparationMethod', N'en-US', N'General', N'Preparation method', N'Method', N'The method used for the preparation of the part of the specimen, e.g. the inoculation method for cultures', NULL, NULL, NULL, NULL, NULL, N'cd841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6c37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'69851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.SpecimenPartID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6d37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.SpecimenPartID', N'en-US', N'General', NULL, NULL, N'ID for a part of a specimen (part of primary key)', NULL, NULL, NULL, NULL, NULL, N'95851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.Stock', N'de-DE', N'General', N'Bestand', N'Bestand', N'Bestand an getrennten Lagereinheiten falls vorhanden, e.g. mehrere Schachteln oder Gefäße (max. 255)', NULL, NULL, NULL, NULL, NULL, N'6e37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.Stock', N'en-US', N'General', N'Stock', N'Stock', N'Number of stock units if the specimen is stored in separated units e.g. several boxes or vessels (max. 255)', NULL, NULL, NULL, NULL, NULL, N'9b851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.StorageLocation', N'de-DE', N'General', N'Ablageort', N'Ablageort', N'Ein Code der den Platz der Lagerung des Belegs innerhalb der Sammlung kennzeichnet. Oft wird hierfür der wissenschaftliche Namen verwendet', NULL, NULL, NULL, NULL, NULL, N'6f37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.StorageLocation', N'en-US', N'General', N'Storage location', N'Stor. loc.', N'A code identifying the place where the specimen is stored within the collection. Frequently the accepted scientific name is used as storage location code.', NULL, NULL, NULL, NULL, NULL, N'9d851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing', N'de-DE', N'General', NULL, NULL, N'Die Bearbeitung die auf den Beleg angewandt wurde', NULL, NULL, NULL, NULL, NULL, N'7037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing', N'en-US', N'General', NULL, NULL, N'The processing that was applied to a collection specimen', NULL, NULL, NULL, NULL, NULL, N'719e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.CollectionSpecimenID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.CollectionSpecimenID', N'en-US', N'General', NULL, NULL, N'Refers to ID of CollectionSpecimen (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'99821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'c5831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'cb831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'13841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'79841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.Notes', N'de-DE', N'General', NULL, N'Notiz', N'Anmerkungen zum Bearbeitungsverfahren', NULL, NULL, NULL, NULL, NULL, N'7637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.Notes', N'en-US', N'General', NULL, N'Note', N'Notes about the processing', NULL, NULL, NULL, NULL, NULL, N'ad841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ProcessingDate', N'de-DE', N'General', N'Zeitpunkt der Bearbeitung', N'Datum', N'Datum und Zeit der Bearbeitung', NULL, NULL, NULL, NULL, NULL, N'7737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ProcessingDate', N'en-US', N'General', N'Date of the processing', N'Date', N'Date and time of the start of the processing', NULL, NULL, NULL, NULL, NULL, N'd3841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ProcessingDuration', N'de-DE', N'General', N'Bearbeitungsdauer', N'Dauer', N'Die Dauer der Bearbeitung (e.g. 5 min) oder das Ende der Bearbeitung, angefangen mit dem Datum der Bearbeitung (e.g. 23.5.2008)', NULL, NULL, NULL, NULL, NULL, N'7837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ProcessingDuration', N'en-US', N'General', N'Processing duration', N'Duration', N'The duration of the processing including the unit (e.g. 5 min) or the end of the processing starting at the processingDate (e.g. 23.05.2008)', NULL, NULL, NULL, NULL, NULL, N'd5841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ProcessingID', N'de-DE', N'General', NULL, N'Typ', N'Typ der Bearbeitung', NULL, NULL, NULL, NULL, NULL, N'7937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ProcessingID', N'en-US', N'General', NULL, N'Type', N'Type of the processing', NULL, NULL, NULL, NULL, NULL, N'd7841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.Protocoll', N'de-DE', N'General', NULL, N'Protokoll', N'Der Titel des Bearbeitungsprotokolls', NULL, NULL, NULL, NULL, NULL, N'7a37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.Protocoll', N'en-US', N'General', NULL, N'Protocoll', N'The label of the processing protocoll', NULL, NULL, NULL, NULL, NULL, N'fd841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ResponsibleAgentURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7b37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ResponsibleAgentURI', N'en-US', N'General', NULL, NULL, N'URI of the person or institution responsible for the determination (= foreign key) as stored in the module DiversityAgents.', NULL, NULL, NULL, NULL, NULL, N'27851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ResponsibleName', N'de-DE', N'General', NULL, N'Bearbeit.', N'Der Name der veranwortlichen Person oder Institution', NULL, NULL, NULL, NULL, NULL, N'7c37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ResponsibleName', N'en-US', N'General', NULL, N'Respons.', N'Name of the responsible person or institution', NULL, NULL, NULL, NULL, NULL, N'31851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7d37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'67851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.SpecimenPartID', N'de-DE', N'General', NULL, NULL, N'Optional: Falls sich der Datensatz auf einen Teil des Beleg bezieht', NULL, NULL, NULL, NULL, NULL, N'7e37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.SpecimenPartID', N'en-US', N'General', NULL, NULL, N'Optional: If the dataset is related to a part of a specimen', NULL, NULL, NULL, NULL, NULL, N'99851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation', N'de-DE', N'General', N'Beziehungen des Belegs', N'Beziehungen', N'Die Beziehung eines Beleg zu einem anderen Beleg', NULL, NULL, NULL, NULL, NULL, N'7f37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation', N'en-US', N'General', N'Relations of the specimen', N'Relations', N'The relations of a collection specimen to other collection specimen', NULL, NULL, NULL, NULL, NULL, N'739e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.CollectionSpecimenID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.CollectionSpecimenID', N'en-US', N'General', NULL, NULL, N'Unique reference ID for the collection specimen record (primary key)', NULL, NULL, NULL, NULL, NULL, N'83821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.IsInternalRelationCache', N'de-DE', N'General', NULL, N'Intern', N'Falls der andere Beleg als Datensatz in der gleichen Datenbank vorliegt', NULL, NULL, NULL, NULL, NULL, N'8137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.IsInternalRelationCache', N'en-US', N'General', NULL, N'Internal', N'If the relation represents a connection between specimen in this database', NULL, NULL, NULL, NULL, NULL, N'6f831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'a5831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'f5831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'39841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'4f841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.Notes', N'de-DE', N'General', NULL, N'Notiz', N'Anmerkungen zur Beziehung zwischen den Belegen', NULL, NULL, NULL, NULL, NULL, N'8637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.Notes', N'en-US', N'General', NULL, N'Note', N'Notes on the relation to the specimen', NULL, NULL, NULL, NULL, NULL, N'9b841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelatedSpecimenCollectionID', N'de-DE', N'General', NULL, N'Sammlung', N'Die Sammlung in der der andere Beleg liegt', NULL, NULL, NULL, NULL, NULL, N'8737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelatedSpecimenCollectionID', N'en-US', N'General', NULL, N'Collection', N'The Collection in which the related specimen is stored', NULL, NULL, NULL, NULL, NULL, N'0b851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelatedSpecimenDescription', N'de-DE', N'General', NULL, N'Beschreibung', N'Beschreibung des anderen Belegs', NULL, NULL, NULL, NULL, NULL, N'8837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelatedSpecimenDescription', N'en-US', N'General', NULL, N'Description', N'Description of the related specimen', NULL, NULL, NULL, NULL, NULL, N'0d851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelatedSpecimenDisplayText', N'de-DE', N'General', NULL, N'Beleg', N'Die Bezeichung des anderen Belegs', NULL, NULL, NULL, NULL, NULL, N'8937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelatedSpecimenDisplayText', N'en-US', N'General', NULL, N'Specimen', N'The name of a related specimen as shown e.g. in a user interface', NULL, NULL, NULL, NULL, NULL, N'0f851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelatedSpecimenURI', N'de-DE', N'General', NULL, N'URI/Nr.', N'URI des anderen Belegs oder die Nummer des Duplikats falls es der selbe Beleg ist', NULL, NULL, NULL, NULL, NULL, N'8a37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelatedSpecimenURI', N'en-US', N'General', NULL, N'URI/No.', N'URI of the related specimen or the number of the duplicate if the same specimen', NULL, NULL, NULL, NULL, NULL, N'11851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelationType', N'de-DE', N'General', NULL, N'Typ', N'Der Typ der Beziehung zwischen den Belegen', NULL, NULL, NULL, NULL, NULL, N'8b37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelationType', N'en-US', N'General', NULL, N'Type', N'Type of the relation between the specimen (= foreign key, see table CollRelationType_Enum)', NULL, NULL, NULL, NULL, NULL, N'17851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8c37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'41851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction', N'de-DE', N'General', N'Transaktionen des Belegs', NULL, N'Transaktionen in die der Beleg involviert war', NULL, NULL, NULL, NULL, NULL, N'8d37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction', N'en-US', N'General', N'Transactions of the specimen', NULL, N'The transactions in which a specimen was involved', NULL, NULL, NULL, NULL, NULL, N'759e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.CollectionSpecimenID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8e37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.CollectionSpecimenID', N'en-US', N'General', NULL, NULL, N'Refers to ID of CollectionSpecimen (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'91821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.IsOnLoan', N'de-DE', N'General', N'Beleg ist verliehen', N'Verliehen', N'Ob der Beleg ausgeleihen ist', NULL, NULL, NULL, NULL, NULL, N'8f37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.IsOnLoan', N'en-US', N'General', N'Specimen is on loan', N'Is on loan', N'True if a specimen is on loan', NULL, NULL, NULL, NULL, NULL, N'71831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogInsertedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogInsertedBy', N'en-US', N'General', NULL, NULL, N'Name of user who first entered (typed or imported) the data.', NULL, NULL, NULL, NULL, NULL, N'03841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogInsertedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogInsertedWhen', N'en-US', N'General', NULL, NULL, N'Date and time when the data were first entered (typed or imported) into this database.', NULL, NULL, NULL, NULL, NULL, N'09841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Name of user who last updated the data.', NULL, NULL, NULL, NULL, NULL, N'0b841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'Date and time when the data were last updated.', NULL, NULL, NULL, NULL, NULL, N'7f841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'71851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.SpecimenPartID', N'de-DE', N'General', NULL, N'Teil', N'Der Teil des Belegs der in die Transaktion involviert ist', NULL, NULL, NULL, NULL, NULL, N'9537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.SpecimenPartID', N'en-US', N'General', NULL, N'Part', N'The part of the specimen that is involved in the transaction', NULL, NULL, NULL, NULL, NULL, N'91851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.TransactionID', N'de-DE', N'General', NULL, N'Transact.', N'Die Transaktion in die der Beleg involviert ist', NULL, NULL, NULL, NULL, NULL, N'9637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.TransactionID', N'en-US', N'General', NULL, N'Transact.', N'The transaction in which the specimen is involved', NULL, NULL, NULL, NULL, NULL, N'b3851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollEventDateCategory_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollEventDateCategory_Enum', N'en-US', N'General', NULL, NULL, N'The categoies of the collection date', NULL, NULL, NULL, NULL, NULL, N'55a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollEventImageType_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollEventImageType_Enum', N'en-US', N'General', NULL, NULL, N'The types of the images taken from a collection event', NULL, NULL, NULL, NULL, NULL, N'57a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollEventSeriesImageType_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollEventSeriesImageType_Enum', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'59a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollExchangeType_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9a37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollExchangeType_Enum', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'5ba8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollIdentificationCategory_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9b37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollIdentificationCategory_Enum', N'en-US', N'General', NULL, NULL, N'The categories of an identification, e.g. determination, confirmation etc.', NULL, NULL, NULL, NULL, NULL, N'5da8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollIdentificationDateCategory_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9c37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollIdentificationDateCategory_Enum', N'en-US', N'General', NULL, NULL, N'The categories of the identification date', NULL, NULL, NULL, NULL, NULL, N'5fa8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollIdentificationQualifier_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9d37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollIdentificationQualifier_Enum', N'en-US', N'General', NULL, NULL, N'The identification qualifiers, e.g. cf. spec., s.l. etc.', NULL, NULL, NULL, NULL, NULL, N'61a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollLabelTranscriptionState_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9e37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollLabelTranscriptionState_Enum', N'en-US', N'General', NULL, NULL, N'The states of the transcription of a label', NULL, NULL, NULL, NULL, NULL, N'63a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollLabelType_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9f37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollLabelType_Enum', N'en-US', N'General', NULL, NULL, N'The types of a label, e.g. handwritten, typed etc.', NULL, NULL, NULL, NULL, NULL, N'65a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum', N'de-DE', N'General', N'Material Kategorien', NULL, N'Die Material Kategoiren der Belege, e.g. Objektträger, Kutlur etc.', NULL, NULL, NULL, NULL, NULL, N'a037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum', N'en-US', N'General', N'Material categories', NULL, N'The material categories of the specimen, e.g. slide, culture etc.', NULL, NULL, NULL, NULL, NULL, N'67a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.bones', N'de-DE', N'General', N'Knochen', N'Knochen', N'Knochen oder Skelett von Wirbeltieren', NULL, NULL, NULL, NULL, NULL, N'103e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.bones', N'en-US', N'General', N'bones', N'bones', N'bones or skeleton from vertebrates', NULL, NULL, NULL, NULL, NULL, N'b3c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.complete skeleton', N'de-DE', N'General', N'Vollständiges Skelett', N'vollst. Skel.', N'Vollständiges Skelett', NULL, NULL, NULL, NULL, NULL, N'113e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.complete skeleton', N'en-US', N'General', N'complete skeleton', N'complete skeleton', N'complete skeleton', NULL, NULL, NULL, NULL, NULL, N'b4c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.cones', N'de-DE', N'General', N'cones', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'123e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.cones', N'en-US', N'General', N'cones', N'cones', N'cones of e.g. Gymnospermae, not stored together with the herbarium sheet', NULL, NULL, NULL, NULL, NULL, N'b5c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.cultures', N'de-DE', N'General', N'Kultur', N'Kultur', N'lebende Kultur von Organimen', NULL, NULL, NULL, NULL, NULL, N'133e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.cultures', N'en-US', N'General', N'cultures', N'cultures', N'living cultures of organisms', NULL, NULL, NULL, NULL, NULL, N'b6c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.DNA sample', N'de-DE', N'General', N'DNA Probe', N'DNA Probe', N'DNA Probe', NULL, NULL, NULL, NULL, NULL, N'143e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.DNA sample', N'en-US', N'General', N'DNA sample', N'DNA sample', N'DNA sample', NULL, NULL, NULL, NULL, NULL, N'b7c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.drawing', N'de-DE', N'General', N'Zeichnung', N'Zeichnung', N'Original Strich- oder Farbzeichnung', NULL, NULL, NULL, NULL, NULL, N'153e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.drawing', N'en-US', N'General', N'drawing', N'drawing', N'original line or color drawing', NULL, NULL, NULL, NULL, NULL, N'b8c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.drawing or photograph', N'de-DE', N'General', N'Zeichnung oder Fotographie', N'Zeichn. / Foto', N'Zeichnung oder Fotographie', NULL, NULL, NULL, NULL, NULL, N'163e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.drawing or photograph', N'en-US', N'General', N'drawing or photograph', N'drawing or photograp', N'drawing or photograph', NULL, NULL, NULL, NULL, NULL, N'b9c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.dried specimen', N'de-DE', N'General', N'Getrockneter Beleg', N'Getr. Beleg', N'Getrockneter Beleg', NULL, NULL, NULL, NULL, NULL, N'173e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.dried specimen', N'en-US', N'General', N'dried specimen', N'dried specimen', N'dried specimen', NULL, NULL, NULL, NULL, NULL, N'bac05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.fossile specimen', N'de-DE', N'General', N'fossile specimen', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'183e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.fossile specimen', N'en-US', N'General', N'fossile specimen', N'fossile specimen', N'fossile specimen', NULL, NULL, NULL, NULL, NULL, N'bbc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.herbarium sheets', N'de-DE', N'General', N'Herbarbogen', N'Herbarbogen', N'Kapsel oder Herbarbogen e.g. in einer botanischen Sammlung', NULL, NULL, NULL, NULL, NULL, N'193e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.herbarium sheets', N'en-US', N'General', N'herbarium sheets', N'herbarium sheets', N'capsules or sheets as stored in a botanical collection', NULL, NULL, NULL, NULL, NULL, N'bcc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.human observation', N'de-DE', N'General', N'Beobachtung durch Person', N'Beob. durch Pers.', N'Beobachtung durch Person', NULL, NULL, NULL, NULL, NULL, N'1a3e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.human observation', N'en-US', N'General', N'human observation', N'human observation', N'human observation', NULL, NULL, NULL, NULL, NULL, N'bdc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.icones', N'de-DE', N'General', N'Bilder', N'Bilder', N'Bilder e.g. gelagert in einer botanischen Sammlung', NULL, NULL, NULL, NULL, NULL, N'1b3e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.icones', N'en-US', N'General', N'icones', N'icones', N'icones, images etc. stored in a botanical collection', NULL, NULL, NULL, NULL, NULL, N'bec05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.incomplete skeleton', N'de-DE', N'General', N'Unvollständiges Skelett', N'Unvollst. Skelett', N'Unvollständiges Skelett', NULL, NULL, NULL, NULL, NULL, N'1c3e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.incomplete skeleton', N'en-US', N'General', N'incomplete skeleton', N'incomplete skeleton', N'incomplete skeleton', NULL, NULL, NULL, NULL, NULL, N'bfc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.living specimen', N'de-DE', N'General', N'Lebender Organismus', N'Lebend. Org.', N'Lebender Organismus', NULL, NULL, NULL, NULL, NULL, N'1d3e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.living specimen', N'en-US', N'General', N'living specimen', N'living specimen', N'living specimen', NULL, NULL, NULL, NULL, NULL, N'c0c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.machine observation', N'de-DE', N'General', N'Maschinelle Beobachtung', N'Maschin. Beob.', N'Maschinelle Beobachtung', NULL, NULL, NULL, NULL, NULL, N'1e3e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.machine observation', N'en-US', N'General', N'machine observation', N'machine observation', N'machine observation', NULL, NULL, NULL, NULL, NULL, N'c1c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.medium', N'de-DE', N'General', N'Medium', N'Medium', N'Medium wie Tonaufnahme, Video, Bilder etc.', NULL, NULL, NULL, NULL, NULL, N'1f3e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.medium', N'en-US', N'General', N'medium', N'medium', N'medium like sound recordings, videos, images and the like', NULL, NULL, NULL, NULL, NULL, N'c2c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.micr. slide', N'de-DE', N'General', N'Objektträger', N'Objektträger', N'Objektträger mit Objekt für mikroskopische Untersuchungen', NULL, NULL, NULL, NULL, NULL, N'203e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.micr. slide', N'en-US', N'General', N'micr. slide', N'micr. slide', N'glass plate with specimen for microscopic study', NULL, NULL, NULL, NULL, NULL, N'c3c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.observation', N'de-DE', N'General', N'Beobachtung', N'Beobachtung', N'Beobachtung', NULL, NULL, NULL, NULL, NULL, N'213e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.observation', N'en-US', N'General', N'observation', N'observation', N'observation', NULL, NULL, NULL, NULL, NULL, N'c4c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.other specimen', N'de-DE', N'General', N'Andere Belege', N'And. Beleg', N'Andere Belege', NULL, NULL, NULL, NULL, NULL, N'223e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.other specimen', N'en-US', N'General', N'other specimen', N'other specimen', N'other specimen', NULL, NULL, NULL, NULL, NULL, N'c5c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.pelt', N'de-DE', N'General', N'Pelz', N'Pelz', N'Pelz, Haut etc. von Tier', NULL, NULL, NULL, NULL, NULL, N'233e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.pelt', N'en-US', N'General', N'pelt', N'pelt', N'pelt, skin or fur of an animal', NULL, NULL, NULL, NULL, NULL, N'c6c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.photogr. print', N'de-DE', N'General', N'Gedruckte Fotographie', N'Foto', N'Gedruckte Fotographie in Farbe oder schwarz-weiss', NULL, NULL, NULL, NULL, NULL, N'243e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.photogr. print', N'en-US', N'General', N'photogr. print', N'photogr. print', N'photographic print (color or black/white)', NULL, NULL, NULL, NULL, NULL, N'c7c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.photogr. slide', N'de-DE', N'General', N'Diapositiv', N'Dia', N'Diapositiv aus eine Diasammlung', NULL, NULL, NULL, NULL, NULL, N'253e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.photogr. slide', N'en-US', N'General', N'photogr. slide', N'photogr. slide', N'image in the form of a photographic slide for projection', NULL, NULL, NULL, NULL, NULL, N'c8c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.postcranial skeleton', N'de-DE', N'General', N'Skelett ohne Schädel', N'Skel. o. Schädel', N'Skelett ohne Schädel', NULL, NULL, NULL, NULL, NULL, N'263e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.postcranial skeleton', N'en-US', N'General', N'postcranial skeleton', N'postcranial skeleton', N'postcranial skeleton', NULL, NULL, NULL, NULL, NULL, N'c9c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.preserved specimen', N'de-DE', N'General', N'Konservierter Beleg', N'Kons. Beleg', N'Konservierter Beleg', NULL, NULL, NULL, NULL, NULL, N'273e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.preserved specimen', N'en-US', N'General', N'preserved specimen', N'preserved specimen', N'preserved specimen', NULL, NULL, NULL, NULL, NULL, N'cac05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.SEM table', N'de-DE', N'General', N'REM präparat', N'REM präp.', N'Objekthalter mit Objekt für Rasterelektornenmikroskopie', NULL, NULL, NULL, NULL, NULL, N'283e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.SEM table', N'en-US', N'General', N'SEM table', N'SEM table', N'table with specimen for Scanning electron microscopy', NULL, NULL, NULL, NULL, NULL, N'cbc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.shell', N'de-DE', N'General', N'Schale', N'Schale', N'Schale e.g. einer Schnecke', NULL, NULL, NULL, NULL, NULL, N'293e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.shell', N'en-US', N'General', N'shell', N'shell', N'shell e.g. of a snail', NULL, NULL, NULL, NULL, NULL, N'ccc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.single bones', N'de-DE', N'General', N'Einzele Knochen', N'Einz. Knochen', N'Einzele Knochen', NULL, NULL, NULL, NULL, NULL, N'2a3e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.single bones', N'en-US', N'General', N'single bones', N'single bones', N'single bones', NULL, NULL, NULL, NULL, NULL, N'cdc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.skull', N'de-DE', N'General', N'Schädel', N'Schädel', N'Schädel eines Wirbeltiers', NULL, NULL, NULL, NULL, NULL, N'2b3e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.skull', N'en-US', N'General', N'skull', N'skull', N'skull of a vertrebrate', NULL, NULL, NULL, NULL, NULL, N'cec05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.sound', N'de-DE', N'General', N'Tonaufnahme', N'Ton', N'Tonaufnahme', NULL, NULL, NULL, NULL, NULL, N'2c3e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.sound', N'en-US', N'General', N'sound', N'sound', N'sound recoding', NULL, NULL, NULL, NULL, NULL, N'cfc05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.specimen', N'de-DE', N'General', N'Beleg', N'Beleg', N'Beleg - gelagert in einer Sammlung', NULL, NULL, NULL, NULL, NULL, N'2d3e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.specimen', N'en-US', N'General', N'specimen', N'specimen', N'specimen stored in a collection', NULL, NULL, NULL, NULL, NULL, N'd0c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.TEM specimen', N'de-DE', N'General', N'TEM Objektträger', N'TEM Objekt.', N'Objekt auf Objektträger für Transelektronenmikroskopie', NULL, NULL, NULL, NULL, NULL, N'2e3e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.TEM specimen', N'en-US', N'General', N'TEM specimen', N'TEM specimen', N'specimen preparation for Transmission electron microscopy', NULL, NULL, NULL, NULL, NULL, N'd1c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.thin section', N'de-DE', N'General', N'Dünnschliff', N'Dünnschliff', N'Dünnschliff', NULL, NULL, NULL, NULL, NULL, N'2f3e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.thin section', N'en-US', N'General', N'thin section', N'thin section', N'thin section', NULL, NULL, NULL, NULL, NULL, N'd2c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.tooth', N'de-DE', N'General', N'Zahn', N'Zahn', N'Zahn eines Tiers', NULL, NULL, NULL, NULL, NULL, N'303e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.tooth', N'en-US', N'General', N'tooth', N'tooth', N'tooth of an animal', NULL, NULL, NULL, NULL, NULL, N'd3c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.trace', N'de-DE', N'General', N'Spur', N'Spur', N'Spur, e.g. Fußspur eines Tiers', NULL, NULL, NULL, NULL, NULL, N'313e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.trace', N'en-US', N'General', N'trace', N'trace', N'trace e.g. footprints of an animal', NULL, NULL, NULL, NULL, NULL, N'd4c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.vial', N'de-DE', N'General', N'Ampulle', N'Ampulle', N'Ampulle, Glasfläschen etc.', NULL, NULL, NULL, NULL, NULL, N'323e58ba-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum.Code.vial', N'en-US', N'General', N'vial', N'vial', N'vial, flask or simlar container', NULL, NULL, NULL, NULL, NULL, N'd5c05fb0-5091-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum', N'en-US', N'General', NULL, NULL, N'The type of an image of a specimen, e.g. label', NULL, NULL, NULL, NULL, NULL, N'69a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.audio', N'de-DE', N'General', N'Audio', NULL, N'Audioaufnahme, e.g. der Gesang eines beobachteten Vogels', NULL, NULL, NULL, NULL, NULL, N'12857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.audio', N'en-US', N'General', N'audio', N'audio', N'audio record of e.g. the song of an observed bird', NULL, NULL, NULL, NULL, NULL, N'09857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.audio (for transcription)', N'de-DE', N'General', N'audio (zum Übertrag)', NULL, N'Tonaufnahme eines gesprochenen Kommentars der nach Übertrag in die Datenbank gelöscht werden kann', NULL, NULL, NULL, NULL, NULL, N'13857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.audio (for transcription)', N'en-US', N'General', N'audio (for transcription)', N'audio (for transcrip', N'audio record of spoken comments that can be deleted after transcription into the database', NULL, NULL, NULL, NULL, NULL, N'0a857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.drawing', N'de-DE', N'General', N'Zeichung', NULL, N'Strich- oder Farbzeichnung', NULL, NULL, NULL, NULL, NULL, N'14857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.drawing', N'en-US', N'General', N'drawing', N'drawing', N'original line or color drawing', NULL, NULL, NULL, NULL, NULL, N'0b857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.label', N'de-DE', N'General', N'Etikett', NULL, N'Etikett eines Belegs', NULL, NULL, NULL, NULL, NULL, N'15857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.label', N'en-US', N'General', N'label', N'label', N'label of a specimen', NULL, NULL, NULL, NULL, NULL, N'0c857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.other', N'de-DE', N'General', N'andere', NULL, N'Medium von anderem Typ', NULL, NULL, NULL, NULL, NULL, N'16857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.other', N'en-US', N'General', N'other', N'other', N'image of different type', NULL, NULL, NULL, NULL, NULL, N'0d857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.photography', N'de-DE', N'General', N'Fotografie', NULL, N'Fotografische Abbildung eines Belegs', NULL, NULL, NULL, NULL, NULL, N'17857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.photography', N'en-US', N'General', N'photography', N'photography', N'photographic image of a specimen', NULL, NULL, NULL, NULL, NULL, N'0e857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.SEM image', N'de-DE', N'General', N'REM Bild', NULL, N'Aufnahme von Rasterelektronenmikroskop', NULL, NULL, NULL, NULL, NULL, N'18857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.SEM image', N'en-US', N'General', N'SEM image', N'SEM image', N'image from Scanning electron microscopy', NULL, NULL, NULL, NULL, NULL, N'0f857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.TEM image', N'de-DE', N'General', N'TEM Bild', NULL, N'Bild von Transelektronenmikroskop', NULL, NULL, NULL, NULL, NULL, N'19857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.TEM image', N'en-US', N'General', N'TEM image', N'TEM image', N'image from Transmission electron microscopy', NULL, NULL, NULL, NULL, NULL, N'10857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.video', N'de-DE', N'General', N'Video', NULL, N'Videoaufnahme e.g. eines beobachteten Organismus', NULL, NULL, NULL, NULL, NULL, N'1a857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum.Code.video', N'en-US', N'General', N'video', N'video', N'video record of e.g. an observed organism', NULL, NULL, NULL, NULL, NULL, N'11857884-c1c7-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenRelationType_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenRelationType_Enum', N'en-US', N'General', NULL, NULL, N'Types of the relation between specimen', NULL, NULL, NULL, NULL, NULL, N'6ba8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum', N'de-DE', N'General', N'Taxonomische Gruppen', NULL, N'Die Taxonomischen Gruppen der Organismen', NULL, NULL, NULL, NULL, NULL, N'a337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum', N'en-US', N'General', N'Taxonomic groups', NULL, N'The taxonomic groups of the organisms', NULL, NULL, NULL, NULL, NULL, N'6da8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.alga', N'de-DE', N'General', N'Alge', N'Alge', N'Alge', NULL, NULL, NULL, NULL, NULL, N'a437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.alga', N'en-US', N'General', N'alga', N'alga', N'alga', NULL, NULL, NULL, NULL, NULL, N'35616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.arthropode', N'de-DE', N'General', N'Gliederfüßler', N'Gliederfüßler', N'Arthropoda: Insekten, Spinnen, Krebstiere etd.', NULL, NULL, NULL, NULL, NULL, N'a537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.arthropode', N'en-US', N'General', N'arthropode', N'arthropode', N'Arthropoda: insects, spiders, crabs etc.', NULL, NULL, NULL, NULL, NULL, N'36616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.bacterium', N'de-DE', N'General', N'Bakterium', N'Bakterium', N'Bakterium / Prokaryont', NULL, NULL, NULL, NULL, NULL, N'a637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.bacterium', N'en-US', N'General', N'bacterium', N'bacterium', N'bacteria/prokaryotic', NULL, NULL, NULL, NULL, NULL, N'37616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.bird', N'de-DE', N'General', N'Vogel', N'Vogel', N'Vogel', NULL, NULL, NULL, NULL, NULL, N'a737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.bird', N'en-US', N'General', N'bird', N'bird', N'bird', NULL, NULL, NULL, NULL, NULL, N'38616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.bryophyte', N'de-DE', N'General', N'Moos', N'Moos', N'Marchantiomorpha (Lebermoose), Anthocerotophyta (Hornmoose) and Bryophyta (Laubmoose)', NULL, NULL, NULL, NULL, NULL, N'a837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.bryophyte', N'en-US', N'General', N'bryophyte', N'bryophyte', N'Marchantiomorpha (liverworts), Anthocerotophyta (hornworts) and Bryophyta (mosses)', NULL, NULL, NULL, NULL, NULL, N'39616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.cnidaria', N'de-DE', N'General', N'Hohltier', N'Hohltier', N'Cnidaria: Seeanemonen, Korallen, Quallen, Seefedern, etc.', NULL, NULL, NULL, NULL, NULL, N'a937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.cnidaria', N'en-US', N'General', N'cnidaria', N'cnidaria', N'Cnidaria: sea anemones, corals, jellyfish, sea pens, hydra', NULL, NULL, NULL, NULL, NULL, N'3a616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.echinoderm', N'de-DE', N'General', N'Stachelhäuter', N'Stachelhäuter', N'Echinodermata: Seeigel, Seesterne und Verwandte', NULL, NULL, NULL, NULL, NULL, N'aa37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.echinoderm', N'en-US', N'General', N'echinoderm', N'echinoderm', N'Echinodermata: sea urchins, starfish, and their allies', NULL, NULL, NULL, NULL, NULL, N'3b616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.evertebrate', N'de-DE', N'General', N'Wirbellose', N'Wirbellose', N'Tiere ohne Wirbeltiere', NULL, NULL, NULL, NULL, NULL, N'ab37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.evertebrate', N'en-US', N'General', N'evertebrate', N'evertebrate', N'Animalia (= Metazoa) excl. Chordata', NULL, NULL, NULL, NULL, NULL, N'3c616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.fish', N'de-DE', N'General', N'Fisch', N'Fisch', N'Fisch', NULL, NULL, NULL, NULL, NULL, N'ac37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.fish', N'en-US', N'General', N'fish', N'fish', N'fish', NULL, NULL, NULL, NULL, NULL, N'3d616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.fungus', N'de-DE', N'General', N'Pilz', N'Pilz', N'Eumycota: Höhere Pilze, Hefen, Schimmel etc.', NULL, NULL, NULL, NULL, NULL, N'ad37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.fungus', N'en-US', N'General', N'fungus', N'fungus', N'Eumycota: mushrooms, sac fungi, yeast, molds, rusts, smuts, etc.', NULL, NULL, NULL, NULL, NULL, N'3e616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.insect', N'de-DE', N'General', N'Insekt', N'Insekt', N'Hexapoda: Insekten, Springschwäzen etc.', NULL, NULL, NULL, NULL, NULL, N'ae37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.insect', N'en-US', N'General', N'insect', N'insect', N'Hexapoda: insects, springtails, diplurans, and proturans', NULL, NULL, NULL, NULL, NULL, N'3f616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.lichen', N'de-DE', N'General', N'Flechte', N'Flechte', N'Lichenisierte Eumycota', NULL, NULL, NULL, NULL, NULL, N'af37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.lichen', N'en-US', N'General', N'lichen', N'lichen', N'Lichenized Eumycota', NULL, NULL, NULL, NULL, NULL, N'40616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.mammal', N'de-DE', N'General', N'Säuger', N'Säuger', N'Säuger', NULL, NULL, NULL, NULL, NULL, N'b037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.mammal', N'en-US', N'General', N'mammal', N'mammal', N'mammal', NULL, NULL, NULL, NULL, NULL, N'41616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.mollusc', N'de-DE', N'General', N'Mollusk', N'Mollusk', N'Mollusca: Schnecken, Muscheln, Tintenfische etc.', NULL, NULL, NULL, NULL, NULL, N'b137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.mollusc', N'en-US', N'General', N'mollusc', N'mollusc', N'Mollusca: Snails, clams, mussels, squids, octopi, chitons, and tusk shells', NULL, NULL, NULL, NULL, NULL, N'42616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.myxomycete', N'de-DE', N'General', N'Schleimpilz', N'Schleimpilz', N'Myxomycota', NULL, NULL, NULL, NULL, NULL, N'b237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.myxomycete', N'en-US', N'General', N'slime mould', N'myxomycete', N'Myxomycota', NULL, NULL, NULL, NULL, NULL, N'43616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.other', N'de-DE', N'General', N'Anderes', N'Anderes', N'Anderes / anorganisches', NULL, NULL, NULL, NULL, NULL, N'b337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.other', N'en-US', N'General', N'other', N'other', N'other/anorganic', NULL, NULL, NULL, NULL, NULL, N'44616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.plant', N'de-DE', N'General', N'Pflanze', N'Pflanze', N'Bärlappe, Farne und Samenpflanzen', NULL, NULL, NULL, NULL, NULL, N'b437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.plant', N'en-US', N'General', N'plant', N'plant', N'Lycophytes, ferns and seedplants', NULL, NULL, NULL, NULL, NULL, N'45616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.soil', N'de-DE', N'General', N'Boden', N'Boden', N'Boden', NULL, NULL, NULL, NULL, NULL, N'b537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.soil', N'en-US', N'General', N'soil', N'soil', N'soil', NULL, NULL, NULL, NULL, NULL, N'46616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.unknown', N'de-DE', N'General', N'Unbekannt', N'Unbekannt', N'Unbekannte Gruppe', NULL, NULL, NULL, NULL, NULL, N'b637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.unknown', N'en-US', N'General', N'unknown', N'unknown', N'unknown group', NULL, NULL, NULL, NULL, NULL, N'47616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.vertebrate', N'de-DE', N'General', N'Wirbeltier', N'Wirbeltier', N'Chordata', NULL, NULL, NULL, NULL, NULL, N'b737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.vertebrate', N'en-US', N'General', N'vertebrate', N'vertebrate', N'Chordata', NULL, NULL, NULL, NULL, NULL, N'48616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.virus', N'de-DE', N'General', N'Virus', N'Virus', N'Virus', NULL, NULL, NULL, NULL, NULL, N'b837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum.Code.virus', N'en-US', N'General', N'virus', N'virus', N'virus', NULL, NULL, NULL, NULL, NULL, N'49616b46-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum', N'en-US', N'General', NULL, NULL, N'The types of the transactions of the specimen, e.g. loan, exchange', NULL, NULL, NULL, NULL, NULL, N'6fa8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.borrow', N'de-DE', N'General', N'borrow', N'Ausleihe', NULL, NULL, NULL, NULL, NULL, NULL, N'20666262-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.borrow', N'en-US', N'General', N'borrow', N'borrow', NULL, NULL, NULL, NULL, NULL, NULL, N'07483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.exchange', N'de-DE', N'General', N'Tausch', N'Tausch', NULL, NULL, NULL, NULL, NULL, NULL, N'21666262-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.exchange', N'en-US', N'General', N'exchange', N'exchange', NULL, NULL, NULL, NULL, NULL, NULL, N'08483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.gift', N'de-DE', N'General', N'Geschenk', N'Geschenk', NULL, NULL, NULL, NULL, NULL, NULL, N'22666262-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.gift', N'en-US', N'General', N'gift', N'gift', NULL, NULL, NULL, NULL, NULL, NULL, N'09483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.inventory', N'de-DE', N'General', N'Inventur', N'Inventur', NULL, NULL, NULL, NULL, NULL, NULL, N'23666262-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.inventory', N'en-US', N'General', N'inventory', N'inventory', NULL, NULL, NULL, NULL, NULL, NULL, N'0a483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.loan', N'de-DE', N'General', N'Leihe', N'Leihe', NULL, NULL, NULL, NULL, NULL, NULL, N'24666262-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.loan', N'en-US', N'General', N'loan', N'loan', NULL, NULL, NULL, NULL, NULL, NULL, N'0b483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.purchase', N'de-DE', N'General', N'Kauf', N'Kauf', NULL, NULL, NULL, NULL, NULL, NULL, N'25666262-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.purchase', N'en-US', N'General', N'purchase', N'purchase', NULL, NULL, NULL, NULL, NULL, NULL, N'0c483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.request', N'de-DE', N'General', N'request', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'26666262-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum.Code.request', N'en-US', N'General', N'request', N'request', NULL, NULL, NULL, NULL, NULL, NULL, N'0d483154-58c2-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTypeStatus_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ba37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTypeStatus_Enum', N'en-US', N'General', NULL, NULL, N'The type stati of the identifications, e.g. Isotype', NULL, NULL, NULL, NULL, NULL, N'71a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollUnitRelationType_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'bb37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollUnitRelationType_Enum', N'en-US', N'General', NULL, NULL, N'The type of relation between organisms within one specimen, e.g. Growing on', NULL, NULL, NULL, NULL, NULL, N'73a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'DataWithholdingReason', N'de-DE', N'General', N'Datensperre', N'Sperre', N'Daten für Publikation  gesperrt', NULL, NULL, NULL, NULL, NULL, N'6130b69e-27e0-de11-8f1d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'DataWithholdingReason', N'en-US', N'General', N'Data withholding reason', N'Withhold.', N'Data are not to be published', NULL, NULL, NULL, NULL, NULL, N'2163d55f-27e0-de11-8f1d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'bc37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity', N'en-US', N'General', NULL, NULL, N'The entities in an application e.g. the tables and columns in a database', NULL, NULL, NULL, NULL, NULL, N'779e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.DisplayGroup', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'bd37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.DisplayGroup', N'en-US', N'General', NULL, NULL, N'If DiversityWorkbench entities should be displayed in a group, the name of the group', NULL, NULL, NULL, NULL, NULL, N'ef821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.Entity', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'be37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.Entity', N'en-US', N'General', NULL, NULL, N'The name of the entity, e.g. Table.Column.Content within the database or a unique string for e.g. a message within the DiversityWorkbench e.g. "DiversityWorkbench.Message.Connection.NoAccess", PK', NULL, NULL, NULL, NULL, NULL, N'0f831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'bf37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'a3831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'e9831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'3f841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'4d841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.Notes', N'de-DE', N'General', NULL, N'Notiz', N'Anmerkung zur Entität', NULL, NULL, NULL, NULL, NULL, N'c337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.Notes', N'en-US', N'General', NULL, N'Note', N'Notes about the entity', NULL, NULL, NULL, NULL, NULL, N'9d841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.Obsolete', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.Obsolete', N'en-US', N'General', NULL, NULL, N'True if an entity is obsolete. Obsolete entities may be kept to ensure compatibility with older modules', NULL, NULL, NULL, NULL, NULL, N'b9841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'3f851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum', N'de-DE', N'General', NULL, NULL, N'Der Kontext in dem das Programm verwendet wird, e.g. Sammlungsverwaltung, Kartierung', NULL, NULL, NULL, NULL, NULL, N'c637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum', N'en-US', N'General', NULL, NULL, N'The context in which the application is used, e.g. Collection-administration, field-mapping', NULL, NULL, NULL, NULL, NULL, N'75a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.CollectionManagement', N'de-DE', N'CollectionManagement', N'Sammlungsverwaltung', N'Sammlungsverwaltung', N'Verwaltung von wissenschaftlichen Sammlungen wie e.g. Herbarien', NULL, NULL, NULL, NULL, NULL, N'607b4fff-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.CollectionManagement', N'en-US', N'CollectionManagement', N'Collection management', N'CollectionManagement', N'Management of scientifc collections like herbaria', NULL, NULL, NULL, NULL, NULL, N'253383f4-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.CollectionManagement.Mobile', N'de-DE', N'CollectionManagement.Mobile', N'Sammlungsverwaltung - mobil', NULL, N'Verwaltung wissenschaftlicher Sammlungen mit mobilem Gerät', NULL, NULL, NULL, NULL, NULL, N'617b4fff-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.CollectionManagement.Mobile', N'en-US', N'CollectionManagement.Mobile', N'Collection management - mobile', N'Coll. Manag. moblie', N'Management of scientifc collections using a mobile device', NULL, NULL, NULL, NULL, NULL, N'263383f4-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.General', N'de-DE', N'General', N'Allgemein', N'Allgem.', N'Allgemeiner Kontext', NULL, NULL, NULL, NULL, NULL, N'627b4fff-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.General', N'en-US', N'General', N'General', N'General', N'General context', NULL, NULL, NULL, NULL, NULL, N'273383f4-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.Observation', N'de-DE', N'Observation', N'Beobachtung', N'Beobachtung', N'Aufnahme von Beobachtungen', NULL, NULL, NULL, NULL, NULL, N'637b4fff-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.Observation', N'en-US', N'Observation', N'Observation', N'Observation', N'Recoding observations', NULL, NULL, NULL, NULL, NULL, N'283383f4-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.Observation.Mobile', N'de-DE', N'Observation.Mobile', N'Beobachtung - mobil', N'Beobachtung.Mobil', N'Aufnahme von Beobachtungen mit mobliem Gerät', NULL, NULL, NULL, NULL, NULL, N'647b4fff-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum.Code.Observation.Mobile', N'en-US', N'Observation.Mobile', N'Observation - mobile', N'Observation.Mobile', N'Recoding observations using a mobile device', NULL, NULL, NULL, NULL, NULL, N'293383f4-17d8-de11-bd28-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityLanguageCode_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityLanguageCode_Enum', N'en-US', N'General', NULL, NULL, N'The codes for the languages used for the entities', NULL, NULL, NULL, NULL, NULL, N'77a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation', N'en-US', N'General', NULL, NULL, N'The description of the entity in a certain context in different languages', NULL, NULL, NULL, NULL, NULL, N'799e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.Abbreviation', N'de-DE', N'General', N'Abkürzung', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.Abbreviation', N'en-US', N'General', N'Abbreviation', NULL, N'The abbreviation for the entity as shown e.g. in  a user interface', NULL, NULL, NULL, NULL, NULL, N'21821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.Description', N'de-DE', N'General', N'Beschreibung', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ca37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.Description', N'en-US', N'General', N'Description', NULL, N'The description of the entity', NULL, NULL, NULL, NULL, NULL, N'dd821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.DisplayText', N'de-DE', N'General', N'Anzeigetext', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'cb37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.DisplayText', N'en-US', N'General', N'Display text', NULL, N'The text for the entity as shown e.g. in  a user interface', NULL, NULL, NULL, NULL, NULL, N'05831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.Entity', N'de-DE', N'General', N'Entität', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'cc37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.Entity', N'en-US', N'General', N'Entity', NULL, N'The name of the entity. Foreign key, relates to table Entity', NULL, NULL, NULL, NULL, NULL, N'0d831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.EntityContext', N'de-DE', N'General', N'Kontext', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'cd37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.EntityContext', N'en-US', N'General', N'Context', NULL, N'The context for the representation, e.g. "Exchange with ABCD", "collection management" or "observation" as defined in table EntityContext_Enum', NULL, NULL, NULL, NULL, NULL, N'15831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LanguageCode', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ce37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LanguageCode', N'en-US', N'General', NULL, NULL, N'ISO 639: 2-letter codes for the language of the content', NULL, NULL, NULL, NULL, NULL, N'7b831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'cf37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'a1831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'ed831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'3d841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'51841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.Notes', N'de-DE', N'General', NULL, N'Notiz', N'Anmerkungen zur Darstellung der Entität', NULL, NULL, NULL, NULL, NULL, N'd337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.Notes', N'en-US', N'General', NULL, N'Note', N'Notes about the representation of the entity', NULL, NULL, NULL, NULL, NULL, N'9f841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'3b851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage', N'en-US', N'General', NULL, NULL, N'The usage of an entity in a certain context, e.g. hidden, readonly', NULL, NULL, NULL, NULL, NULL, N'7b9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.Entity', N'de-DE', N'General', N'Entität', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.Entity', N'en-US', N'General', N'Entity', NULL, N'The name of the entity. Foreign key, relates to table Entity', NULL, NULL, NULL, NULL, NULL, N'11831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.EntityContext', N'de-DE', N'General', N'Kontext', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.EntityContext', N'en-US', N'General', N'Context', NULL, N'The context for the representation, e.g. "Exchange with ABCD", "collection management" or "observation" as defined in table EntityContext_Enum', NULL, NULL, NULL, NULL, NULL, N'13831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.EntityUsage', N'de-DE', N'General', N'Verwendung', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.EntityUsage', N'en-US', N'General', N'Usage', NULL, N'How the entity should be used within a certain context, e.g. "hidden" as defined in table EntityUsage_Enum', NULL, NULL, NULL, NULL, NULL, N'17831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'a7831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'da37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'e7831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'db37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'41841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'dc37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'4b841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.Notes', N'de-DE', N'General', NULL, N'Notiz', N'Anmerkung zur Benutzung der Entität', NULL, NULL, NULL, NULL, NULL, N'dd37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.Notes', N'en-US', N'General', NULL, N'Note', N'Notes about the usage of the entity', NULL, NULL, NULL, NULL, NULL, N'99841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.PresetValue', N'de-DE', N'General', N'Voreingestellter Wert', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'de37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.PresetValue', N'en-US', N'General', N'Preset value', NULL, N'If a value is preset the value resp. SQL statement for the value, e.g. ''determination'' for identifications when using a mobile device during an expedition', NULL, NULL, NULL, NULL, NULL, N'cf841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'df37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'43851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage_Enum', N'en-US', N'General', NULL, NULL, N'The usage of an entity, e.g. hidden, readonly', NULL, NULL, NULL, NULL, NULL, N'79a8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage_Enum.Code.hidden', N'de-DE', N'General', N'versteckt', N'versteckt', N'Die Entität ist auf der Benutzeroberfläche nicht sichtbar', NULL, NULL, NULL, NULL, NULL, N'e0859a98-6d91-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage_Enum.Code.hidden', N'en-US', N'General', N'hidden', N'hidden', N'The entity is hidden from a user interface', NULL, NULL, NULL, NULL, NULL, N'f3121482-6d91-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage_Enum.Code.inapplicable', N'de-DE', N'General', N'nicht anwendbar', N'nicht anwendbar', N'Diese Entität ist im gegebenen Kontext nicht anwendbar', NULL, NULL, NULL, NULL, NULL, N'e1859a98-6d91-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage_Enum.Code.inapplicable', N'en-US', N'General', N'inapplicable', N'inapplicable', N'This entity is not applicable in the given context', NULL, NULL, NULL, NULL, NULL, N'f4121482-6d91-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage_Enum.Code.read_only', N'de-DE', N'General', N'nur lesend', N'nur lesend', N'Der Zugriff auf diese Entität ist auf Lesen beschränkt', NULL, NULL, NULL, NULL, NULL, N'90dad0a3-6d91-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage_Enum.Code.read_only', N'en-US', N'General', N'read only', N'read only', N'The access to this entity is restricted to read only', NULL, NULL, NULL, NULL, NULL, N'f5121482-6d91-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Exsiccata', N'de-DE', N'General', N'Exsikkat', N'Exsikk.', NULL, NULL, NULL, NULL, NULL, NULL, N'a02cc9ad-94c4-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Exsiccata', N'en-US', N'General', N'Exsiccata', N'Exsicc.', NULL, NULL, NULL, NULL, NULL, NULL, N'71a5918d-94c4-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ExternalRequestCredentials ', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'42929700-651d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ExternalRequestCredentials ', N'en-US', N'General', NULL, NULL, N'External requestors with the permission to create a request for a loan', NULL, NULL, NULL, NULL, NULL, N'f3483ff4-1510-df11-8314-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification', N'de-DE', N'General', N'Bestimmungen', N'Best.', N'Die Bestimmungen eines Organismus innerhalb eines Belegs', NULL, NULL, NULL, NULL, NULL, N'e137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification', N'en-US', N'General', N'Identification / name changes', N'Ident.', N'The identifications of the organisms within a specimen', NULL, NULL, NULL, NULL, NULL, N'7d9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.CollectionSpecimenID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.CollectionSpecimenID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of CollectionSpecimen (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'85821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationCategory', N'de-DE', N'General', N'Kategorie der Bestimmung', N'Kategorie', N'Kategorie der Bestimmung, e.g. Bestimmung, Bestätigung', NULL, NULL, NULL, NULL, NULL, N'e337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationCategory', N'en-US', N'General', N'Category of the identification', N'Category', N'Category of the identification e.g. ''determination'', ''confirmation'', ''absence''  (= foreign key, see table CollIdentificationCategory_Enum)', NULL, NULL, NULL, NULL, NULL, N'43831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationDate', N'de-DE', N'General', N'Bestimmungsdatum', N'Datum', N'Das Datum der Bestimmung', NULL, NULL, NULL, NULL, NULL, N'e437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationDate', N'en-US', N'General', N'Identfication date', N'Date', N'The date of the identification calculated from the entries in IdentificationDay, -Month and -Year', NULL, NULL, NULL, NULL, NULL, N'45831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationDateCategory', N'de-DE', N'General', N'Kategorie des Datums', N'Kat.', N'Kategorie des Bestimmungsdatums, e.g. System, geschätzt', NULL, NULL, NULL, NULL, NULL, N'e537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationDateCategory', N'en-US', N'General', N'Date category', N'Cat.', N'Category of the date of the identification e.g. "system", "estimated"  (= foreign key, see  in table CollDateCategory_Enum)', NULL, NULL, NULL, NULL, NULL, N'47831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationDateSupplement', N'de-DE', N'General', NULL, N'Suppl.', N'Ergänzung des Datums der Bestimmung, e.g. Ende Sommer 1987, erstes Quartal etc.', NULL, NULL, NULL, NULL, NULL, N'e637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationDateSupplement', N'en-US', N'General', NULL, N'Suppl.', N'Verbal or additional identification date information, e.g. ''end of summer 1985'', ''first quarter'', ''1888-1892''', NULL, NULL, NULL, NULL, NULL, N'49831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationDay', N'de-DE', N'General', N'Tag', N'Tag', N'Der Tag der Bestimmung', NULL, NULL, NULL, NULL, NULL, N'e737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationDay', N'en-US', N'General', N'day', N'day', N'The day of the identification event', NULL, NULL, NULL, NULL, NULL, N'4b831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationMonth', N'de-DE', N'General', N'Monat', NULL, N'Der Monat der Bestimmung', NULL, NULL, NULL, NULL, NULL, N'e837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationMonth', N'en-US', N'General', N'month', NULL, N'The month of the identification event', NULL, NULL, NULL, NULL, NULL, N'4d831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationQualifier', N'de-DE', N'General', N'Qualifizierer', N'Quali.', N'Qualifizierung der Bestimmung, e.g. cf., sp. nov.', NULL, NULL, NULL, NULL, NULL, N'e937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationQualifier', N'en-US', N'General', N'Qualifier', N'Quali.', N'Qualification of the identification e.g. "cf."," aff.", "sp. nov."  (= foreign key, see table CollIdentificationQualifier_Enum)', NULL, NULL, NULL, NULL, NULL, N'4f831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationSequence', N'de-DE', N'General', NULL, N'Reihenfolge', N'Die Reihenfolge der Bestimmung. Die letzte Bestimmung (mit der höchsten Reihenfolge) wird als die gültige betrachtet', NULL, NULL, NULL, NULL, NULL, N'ea37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationSequence', N'en-US', N'General', NULL, N'Sequence', N'The sequence of the identifications. The last identification (having the highest sequence) is regarded as valid', NULL, NULL, NULL, NULL, NULL, N'51831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationUnitID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'eb37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationUnitID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of IdentficationUnit (= foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'53831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationYear', N'de-DE', N'General', N'Jahr', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ec37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationYear', N'en-US', N'General', N'Year', NULL, N'The year of the identification event. The year may be empty if only the day or month are known.', NULL, NULL, NULL, NULL, NULL, N'5d831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ed37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Login of the user who created the dataset', NULL, NULL, NULL, NULL, NULL, N'9f831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ee37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'Date and time when the dataset was created', NULL, NULL, NULL, NULL, NULL, N'f9831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ef37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Login of the user who changed the dataset', NULL, NULL, NULL, NULL, NULL, N'33841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f037ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'Date and time when the dataset was changed', NULL, NULL, NULL, NULL, NULL, N'59841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.NameURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f137ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.NameURI', N'en-US', N'General', NULL, NULL, N'The URI of the taxonomic name, e.g. as provided by the module DiversityTaxonNames.', NULL, NULL, NULL, NULL, NULL, N'8f841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.Notes', N'de-DE', N'General', N'Bemerkung', N'Notiz', N'Benutzerdefinierte Bemerkungen, e.g. der Grund für eine Neubestimmung / Wechsel des Namens etc.', NULL, NULL, NULL, NULL, NULL, N'f237ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.Notes', N'en-US', N'General', N'Notes', N'Note', N'User defined notes, e.g. the reason for a re-determination / change of the name, etc.', NULL, NULL, NULL, NULL, NULL, N'91841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ReferenceDetails', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'43929700-651d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ReferenceDetails', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'029a52ff-45fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ReferenceTitle', N'de-DE', N'General', N'Literatur', N'Lit.', N'Der Titel der Publikation in der die Bestimmung publiziert wurde. Dies ist nur ein zwischengespeicherter Wert wenn eine Verknüpfung zum Literaturmodul vorhanden ist', NULL, NULL, NULL, NULL, NULL, N'f337ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ReferenceTitle', N'en-US', N'General', N'Reference', N'Ref.', N'Publications or authoritative opinions of scientist used during the identification process. Example: enter ''Schmeil-Fitschen 1995'' if this field flora was used.', NULL, NULL, NULL, NULL, NULL, N'03851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ReferenceURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f437ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ReferenceURI', N'en-US', N'General', NULL, NULL, N'The URI of the reference e.g. as provided by the module DiversityReferences', NULL, NULL, NULL, NULL, NULL, N'05851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ResponsibleAgentURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f537ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ResponsibleAgentURI', N'en-US', N'General', NULL, NULL, N'URI of the person or institution responsible for the determination (= foreign key) as stored in the module DiversityAgents.', NULL, NULL, NULL, NULL, NULL, N'21851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ResponsibleName', N'de-DE', N'General', N'Bestimmer', NULL, N'Name der für die Bestimmung verantwortlichen Person oder Institution', NULL, NULL, NULL, NULL, NULL, N'f637ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.ResponsibleName', N'en-US', N'General', N'Name of the derterminer', NULL, N'Name of the person or institution responsible for the determination', NULL, NULL, NULL, NULL, NULL, N'37851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f737ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'49851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.TaxonomicName', N'de-DE', N'General', N'Wissenschaftlicher Name', N'Tax. Name', N'Gültiger Name der Art (einschließlich der Autoren sofern vorhanden, e.g.: ''Rosa canina L.'')', NULL, NULL, NULL, NULL, NULL, N'f837ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.TaxonomicName', N'en-US', N'General', N'Taxonomic name', N'Tax. name', N'Valid name of the species (including the taxonomic author where available. Example: ''Rosa canina L.''', NULL, NULL, NULL, NULL, NULL, N'a3851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.TypeNotes', N'de-DE', N'General', N'Notiz zum Typ', N'Notiz Typ', N'Anmerkungen zur Typifizierung des Belegs', NULL, NULL, NULL, NULL, NULL, N'f937ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.TypeNotes', N'en-US', N'General', N'Type notes', N'Type notes', N'Notes concerning the typification of this specimen', NULL, NULL, NULL, NULL, NULL, N'bd851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.TypeStatus', N'de-DE', N'General', N'Typus', N'Typus', N'Falls der Organismus der Typus Beleg für einen wissenschaftlichen Namen ist, e.g. Holotyp', NULL, NULL, NULL, NULL, NULL, N'fa37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.TypeStatus', N'en-US', N'General', N'Type status', N'Type st.', N'If identification unit is type of a taxonomic name: holotype, syntype, etc. (= foreign key, see table CollTypeStatus_Enum)', NULL, NULL, NULL, NULL, NULL, N'bf851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.VernacularTerm', N'de-DE', N'General', N'Umgangssprachlicher Name', N'Dt.Bezeich.', N'Nicht wissenschaftlicher Name, e.g. Kiefer, Kalkstein, Konifere', NULL, NULL, NULL, NULL, NULL, N'fb37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.VernacularTerm', N'en-US', N'General', N'Vernacular term', N'Vern.term', N'Name or term other than a taxonomic (= scientific) name, e.g. ''pine'', ''limestone'', ''conifer'', ''hardwood''', NULL, NULL, NULL, NULL, NULL, N'cd851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit', N'de-DE', N'General', N'Organismus', NULL, N'Organismus in einem Sammlungsbeleg', NULL, NULL, NULL, NULL, NULL, N'fc37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit', N'en-US', N'General', N'Organism', NULL, N'Organism that is present in or on a collection specimen', NULL, NULL, NULL, NULL, NULL, N'7f9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.Circumstances', N'de-DE', N'General', N'Umstände', N'Umstände', N'Umstände des Vorkommens eines Organismus', NULL, NULL, NULL, NULL, NULL, N'fd37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.Circumstances', N'en-US', N'General', N'Circumstances', N'Circumst.', N'Circumstances of the occurence of the organism', NULL, NULL, NULL, NULL, NULL, N'5d821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.CollectionSpecimenID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fe37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.CollectionSpecimenID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of CollectionSpecimen (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'95821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.ColonisedSubstratePart', N'de-DE', N'General', N'Besiedelter Teil des Substrats', N'Besied. Teil', N'Falls es eine Beziehung zu einem Substrat gibt: Der Teil des Substrats der besiedelt wird, e.g. Blatt (falls ein Pilz auf den Blättern des Wirts wächst)', NULL, NULL, NULL, NULL, NULL, N'ff37ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.ColonisedSubstratePart', N'en-US', N'General', N'Colonised substrate part', N'Colon. part', N'If a substrate association exists: part of the substrate that is affected in the interaction (e.g. ''leaves'' if a fungus is growing on the leaves of an infected plant)', NULL, NULL, NULL, NULL, NULL, N'ab821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.DisplayOrder', N'de-DE', N'General', N'Reihenfolge', N'Reihenfolge', N'Die Reihenfolge in der die Organismen in einem Beleg erscheinen, e.g. auf einem Etikett wo das erste als Überschrift und die übrigen im Text darunter gedruckt werden. 0 bedeutet, dass der Organismus nicht erscheinen soll.', NULL, NULL, NULL, NULL, NULL, N'0038ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.DisplayOrder', N'en-US', N'General', N'Display order', N'Display ord.', N'The sequence in which the units within this specimen will appear on e.g. a label where the first unit may be printed in the header and others  in the text below. 0 means the unit should not appear on a label.', NULL, NULL, NULL, NULL, NULL, N'f9821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.ExsiccataIdentification', N'de-DE', N'General', NULL, N'Exsikkat Best.', N'Die Bestimmung die innerhalb des Exsikkats verwendet wurde', NULL, NULL, NULL, NULL, NULL, N'0138ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.ExsiccataIdentification', N'en-US', N'General', NULL, N'Exsiccata Ident.', N'Refers to the IdentificationSequence in Identification (= foreign key). The name under which the collection specimen resp. this unit is published within an exsiccata.', NULL, NULL, NULL, NULL, NULL, N'1b831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.ExsiccataNumber', N'de-DE', N'General', N'Exs. Nummer', N'Exs. Nr.', N'Falls der Beleg ein Exsiccat ist: die Nummer in der Exsikkaten-Serie', NULL, NULL, NULL, NULL, NULL, N'0238ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.ExsiccataNumber', N'en-US', N'General', N'Exs. number', N'Exs. No.', N'If specimen is an exsiccata: Number of current specimen within the exsiccata series', NULL, NULL, NULL, NULL, NULL, N'1d831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.FamilyCache', N'de-DE', N'General', N'Familie', N'Familie', N'Ein zwischengespeicherter Wert der Familie der letzten Bestimmung des Taxon. Kann vom Editor gesetzt werden, falls NameURI in der Tabelle Identification leer ist, ansonsten vom Programm gesetzt.', NULL, NULL, NULL, NULL, NULL, N'0338ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.FamilyCache', N'en-US', N'General', N'Family', N'Family', N'A cached value of the family of the taxon of the last identification. Can be set by the editor if NameURI  in table Identification is NULL, otherwise set by the system.', NULL, NULL, NULL, NULL, NULL, N'35831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.Gender', N'de-DE', N'General', N'Geschlecht', N'Geschlecht', N'Das Geschlecht des Organismus, e.g. ''männlich''', NULL, NULL, NULL, NULL, NULL, N'0438ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.Gender', N'en-US', N'General', N'Gender', N'Gender', N'The gender of the identification unit, e.g. ''male''', NULL, NULL, NULL, NULL, NULL, N'3f831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.IdentificationUnitID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0538ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.IdentificationUnitID', N'en-US', N'General', NULL, NULL, N'ID of the identification unit (= part of Primary key). Usually one of possibly several organisms present on the collection specimen. Example: parasite with hyperparasite on plant leaf = 3 units,', NULL, NULL, NULL, NULL, NULL, N'57831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LastIdentificationCache', N'de-DE', N'General', NULL, N'Letzt.Best.', N'Die letzte Bestimmung des Organimus', NULL, NULL, NULL, NULL, NULL, N'0638ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LastIdentificationCache', N'en-US', N'General', NULL, N'Last. ident.', N'The last identification of the organism', NULL, NULL, NULL, NULL, NULL, N'7d831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LifeStage', N'de-DE', N'General', N'Stadium', N'Stadium', N'Beispiele: ''II, II'' für Sporengenerationen von Rostpilzen oder ''Samen, ''Keimling'' etc. bei höheren Pflanzen', NULL, NULL, NULL, NULL, NULL, N'0738ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LifeStage', N'en-US', N'General', N'Life stage', N'Life stage', N'Examples: ''II, III'' for spore generations of rusts or ''seed'', ''seedling'' etc. for higher plants', NULL, NULL, NULL, NULL, NULL, N'7f831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0838ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'bd831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0938ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'd3831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0a38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'1f841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0b38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'6d841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.Notes', N'de-DE', N'General', N'Notiz', N'Notiz', N'Anmerkungen zum Organismus', NULL, NULL, NULL, NULL, NULL, N'0c38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.Notes', N'en-US', N'General', N'Note', N'Note', N'Further information on the identification unit or interaction, e. g. infection symptoms like ''producing galls''', NULL, NULL, NULL, NULL, NULL, N'ab841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.NumberOfUnits', N'de-DE', N'General', N'Organismenanzahl', N'Anzahl', N'Die Anzahl der Einheiten des Organismus, e.g. 400 Käfer in einer Flasche', NULL, NULL, NULL, NULL, NULL, N'0d38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.NumberOfUnits', N'en-US', N'General', N'Number of units', N'No. of units', N'The number of units of this identification unit, e.g. 400 beetle in a bottle', NULL, NULL, NULL, NULL, NULL, N'b5841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.OnlyObserved', N'de-DE', N'General', N'Nur beobachtet', N'Nur beob.', N'Wahr falls der Organismus nur beobachtet wurde. Er ist daher im Sammlungsbeleg nicht vorhanden. E.g. ein Baum unter dem Mykorrhizapilze gesammelt wurden.', NULL, NULL, NULL, NULL, NULL, N'0e38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.OnlyObserved', N'en-US', N'General', N'Only observed', N'Only obs.', N'True if the organism was only observed rather than collected. It is therefore not present on the preserved specimen. Example: Tree under which the collected mycorrhizal fungus grew.', NULL, NULL, NULL, NULL, NULL, N'bb841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.OrderCache', N'de-DE', N'General', N'Ordnung', N'Ordnung', N'Ein zwischengespeicherter Wert der Ordnung der letzten Bestimmung des Taxon. Kann vom Editor gesetzt werden, falls NameURI in der Tabelle Identification leer ist, ansonsten vom Programm gesetzt.', NULL, NULL, NULL, NULL, NULL, N'0f38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.OrderCache', N'en-US', N'General', N'Order', N'Order', N'A cached value of the order of the taxon of the last identification. Can be set by the editor if NameURI in table Identification is NULL, otherwise set by the system.', NULL, NULL, NULL, NULL, NULL, N'bd841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.RelatedUnitID', N'de-DE', N'General', NULL, N'Substr.', N'Der andere Organismus innerhalb des Belegs bzw. das Substrat auf dem der Organismus wächst', NULL, NULL, NULL, NULL, NULL, N'1038ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.RelatedUnitID', N'en-US', N'General', NULL, N'Substr.', N'The IdentificationUnitID of the organism or substrate, on which this organism is growing (= foreign key)', NULL, NULL, NULL, NULL, NULL, N'13851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.RelationType', N'de-DE', N'General', N'Typ der Beziehung', N'Beziehung', N'Die Beziehung eines Organismus zu seinem Substrat, e.g. Parasitismus, Symbiose etc. wie in Tabelle CollRelationType_Enum  (= Fremdschlüssel)', NULL, NULL, NULL, NULL, NULL, N'1138ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.RelationType', N'en-US', N'General', N'Relation type', N'Substr. rel.', N'The relation of an unit to its substrate, e.g. parasitism, symbiosis etc. as stored in CollRelationType_Enum  (= foreign key)', NULL, NULL, NULL, NULL, NULL, N'15851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1238ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'61851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.TaxonomicGroup', N'de-DE', N'General', N'Taxonomische Gruppe', N'Tax. Gru.', N'Taxonomische Gruppe des Organismus.', NULL, NULL, NULL, NULL, NULL, N'1338ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.TaxonomicGroup', N'en-US', N'General', N'Taxonomic group', N'Tax. group', N'Taxonomic group the organism identified by this unit belongs to', NULL, NULL, NULL, NULL, NULL, N'a1851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.UnitDescription', N'de-DE', N'General', N'Beschreibung', N'Beschreib.', N'Beschreibung des Organismus, insbes. wenn nicht der gesamte Organismus sondern Teile davon vorhanden sind, e.g. das Nest oder der Gesang eines Vogels', NULL, NULL, NULL, NULL, NULL, N'1438ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.UnitDescription', N'en-US', N'General', N'Description', N'Descript.', N'Description of the unit, esp. if not the whole organism but parts or remnants of it were present or observed, e.g. a nest of an insect or a song of a bird', NULL, NULL, NULL, NULL, NULL, N'c1851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.UnitIdentifier', N'de-DE', N'General', N'Kennung', N'Kennung', N'Kennung eines Organismus, e.g. die Nummer eines Baums auf einer Versuchsfläche', NULL, NULL, NULL, NULL, NULL, N'1538ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.UnitIdentifier', N'en-US', N'General', N'Identifier', N'Identifier', N'An identifier for the identification of the unit e.g. a number painted on a tree within an experimental plot', NULL, NULL, NULL, NULL, NULL, N'c3851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis', N'de-DE', N'General', N'Analyse', NULL, N'Die Analysen die für einen Organismus durchgeführt wurden', NULL, NULL, NULL, NULL, NULL, N'1638ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis', N'en-US', N'General', N'Analysis', NULL, N'The analysis values taken from an identification unit', NULL, NULL, NULL, NULL, NULL, N'819e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.AnalysisDate', N'de-DE', N'General', N'Datum', N'Datum', N'Das Datum der Analyse', NULL, NULL, NULL, NULL, NULL, N'1738ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.AnalysisDate', N'en-US', N'General', N'Date', N'Date', N'The date of the analysis', NULL, NULL, NULL, NULL, NULL, N'41821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.AnalysisID', N'de-DE', N'General', N'Typ der Analyse', N'Typ', N'Der Typ der Analyse', NULL, NULL, NULL, NULL, NULL, N'1838ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.AnalysisID', N'en-US', N'General', N'Anaysis type', N'Type', N'The type of the analysis', NULL, NULL, NULL, NULL, NULL, N'43821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.AnalysisNumber', N'de-DE', N'General', N'Nr. der Analyse', N'Nr.', N'Nummer der Analyse', NULL, NULL, NULL, NULL, NULL, N'1938ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.AnalysisNumber', N'en-US', N'General', N'No. of the analysis', N'No.', N'Number of the analysis', NULL, NULL, NULL, NULL, NULL, N'4b821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.AnalysisResult', N'de-DE', N'General', N'Ergebnis', N'Ergebnis', N'Ergebnis der Analyse', NULL, NULL, NULL, NULL, NULL, N'1a38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.AnalysisResult', N'en-US', N'General', N'Result', N'Result', N'The result of the analysis', NULL, NULL, NULL, NULL, NULL, N'4f821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.CollectionSpecimenID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1b38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.CollectionSpecimenID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of CollectionSpecimen (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'89821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.ExternalAnalysisURI', N'de-DE', N'General', NULL, N'Ext.URI', N'Die URI einer Analyse in einer externen Quelle', NULL, NULL, NULL, NULL, NULL, N'1c38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.ExternalAnalysisURI', N'en-US', N'General', NULL, N'Ext.URI', N'An URI for an analysis as defined in an external datasoure', NULL, NULL, NULL, NULL, NULL, N'21831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.IdentificationUnitID', N'de-DE', N'General', NULL, N'Organ.', N'Der Organismus innerhalb des Belegs an dem die Analyse durchgeführt wurde', NULL, NULL, NULL, NULL, NULL, N'1d38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.IdentificationUnitID', N'en-US', N'General', NULL, N'Unit', N'Refers to the ID of IdentficationUnit (= foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'55831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1e38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'b3831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1f38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'db831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2038ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'27841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2138ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'65841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.Notes', N'de-DE', N'General', N'Notiz', N'Notiz', N'Anmerkungen zur Analyse', NULL, NULL, NULL, NULL, NULL, N'2238ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.Notes', N'en-US', N'General', N'Note', N'Note', N'Notes concerning this analysis', NULL, NULL, NULL, NULL, NULL, N'a7841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.ResponsibleAgentURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2338ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.ResponsibleAgentURI', N'en-US', N'General', NULL, NULL, N'URI of the person or institution responsible for the determination (= foreign key) as stored in the module DiversityAgents.', NULL, NULL, NULL, NULL, NULL, N'2b851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.ResponsibleName', N'de-DE', N'General', N'Verantwortliche Person', N'Veranwort.', N'Name der Person oder Institution die für die Anlayse verantwortlich ist', NULL, NULL, NULL, NULL, NULL, N'2438ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.ResponsibleName', N'en-US', N'General', N'Name of the responsible', N'Respons.', N'Name of the person or institution responsible for the determination', NULL, NULL, NULL, NULL, NULL, N'2d851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2538ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'77851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.SpecimenPartID', N'de-DE', N'General', NULL, N'Teil', N'Der Teil an dem die Analyse ausgeführt wurde', NULL, NULL, NULL, NULL, NULL, N'2638ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.SpecimenPartID', N'en-US', N'General', NULL, N'Part', N'ID of the part of a specimen (optional, Foreign key) if the analysis was done with a part of the specimen (see table CollectionSpecimenPart).', NULL, NULL, NULL, NULL, NULL, N'8f851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'44929700-651d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'51705294-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.AnalysisDate', N'de-DE', N'General', NULL, NULL, N'Das Datum der Analyse', NULL, NULL, NULL, NULL, NULL, N'45929700-651d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.AnalysisDate', N'en-US', N'General', NULL, NULL, N'The date of the analysis', NULL, NULL, NULL, NULL, NULL, N'a17b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.CollectionSpecimenID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'46929700-651d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.CollectionSpecimenID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of CollectionSpecimen (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'a37b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.Geography', N'de-DE', N'General', NULL, NULL, N'Die Geographie des Organismus als WGS84 Koordinaten + Höhe', NULL, NULL, NULL, NULL, NULL, N'47929700-651d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.Geography', N'en-US', N'General', NULL, NULL, N'The geography of the identification unit according to WGS84, e.g. a point (latitide, longitude and altitude)', NULL, NULL, NULL, NULL, NULL, N'a57b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.Geometry', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'48929700-651d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.Geometry', N'en-US', N'General', NULL, NULL, N'The geometry of the identifiction unit, e.g. an area', NULL, NULL, NULL, NULL, NULL, N'a77b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.IdentificationUnitID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'49929700-651d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.IdentificationUnitID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of IdentficationUnit (= foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'a97b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'449c179c-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'4193dbe8-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'459c179c-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'4393dbe8-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'469c179c-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'4593dbe8-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'479c179c-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'4793dbe8-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.Notes', N'de-DE', N'General', NULL, NULL, N'Notizen zur Analyse', NULL, NULL, NULL, NULL, NULL, N'4a929700-651d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.Notes', N'en-US', N'General', NULL, NULL, N'Notes concerning this analysis', NULL, NULL, NULL, NULL, NULL, N'ab7b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.ResponsibleAgentURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4b929700-651d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.ResponsibleAgentURI', N'en-US', N'General', NULL, NULL, N'URI of the person or institution responsible for the determination (= foreign key) as stored in the module DiversityAgents.', NULL, NULL, NULL, NULL, NULL, N'ad7b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.ResponsibleName', N'de-DE', N'General', NULL, NULL, N'Der Name der für die Analyse verantwortlichen Person', NULL, NULL, NULL, NULL, NULL, N'4c929700-651d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.ResponsibleName', N'en-US', N'General', NULL, NULL, N'Name of the person or institution responsible for the determination', NULL, NULL, NULL, NULL, NULL, N'af7b16b1-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'489c179c-971f-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'4993dbe8-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart', N'de-DE', N'General', NULL, NULL, N'Die Liste der Organismen die sich in einem Teil des Belegs befinden', NULL, NULL, NULL, NULL, NULL, N'2738ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart', N'en-US', N'General', NULL, NULL, N'The list of the organisms that are found in a part of the specimen', NULL, NULL, NULL, NULL, NULL, N'839e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.CollectionSpecimenID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2838ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.CollectionSpecimenID', N'en-US', N'General', NULL, NULL, N'Refers to the ID of CollectionSpecimen (= Foreign key and part of primary key)', NULL, NULL, NULL, NULL, NULL, N'97821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.Description', N'de-DE', N'General', NULL, N'Beschreibung', N'Beschreibung des Organismus insbesondere wenn nicht der ganze Organismus sondern nur Teile in der Sammlung liegen, e.g. das Nest eines Vogels', NULL, NULL, NULL, NULL, NULL, N'2938ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.Description', N'en-US', N'General', NULL, N'Description', N'A description of the unit, esp. if not a whole unit but e.g. parts of it are stored in the collection, e.g. a nest of a bird', NULL, NULL, NULL, NULL, NULL, N'd1821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.DisplayOrder', N'de-DE', N'General', NULL, NULL, N'Die Reihenfolge in der die Organismen in einem Beleg erscheinen, e.g. auf einem Etikett wo das erste als Überschrift und die übrigen im Text darunter gedruckt werden. 0 bedeutet, dass der Organismus nicht erscheinen soll.', NULL, NULL, NULL, NULL, NULL, N'2a38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.DisplayOrder', N'en-US', N'General', NULL, NULL, N'The sequence in which the units within this part will appear on e.g. a label where the first unit may be printed in the header and others  in the text below. 0 means the unit should not appear on a label.', NULL, NULL, NULL, NULL, NULL, N'f7821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.IdentificationUnitID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2b38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.IdentificationUnitID', N'en-US', N'General', NULL, NULL, N'ID of the identification unit (= part of Primary key). Usually one of possibly several organisms present on the collection specimen. Example: parasite with hyperparasite on plant leaf = 3 units,', NULL, NULL, NULL, NULL, NULL, N'59831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogInsertedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2c38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogInsertedBy', N'en-US', N'General', NULL, NULL, N'Name of user who first entered (typed or imported) the data.', NULL, NULL, NULL, NULL, NULL, N'05841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogInsertedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2d38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogInsertedWhen', N'en-US', N'General', NULL, NULL, N'Date and time when the data were first entered (typed or imported) into this database.', NULL, NULL, NULL, NULL, NULL, N'07841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2e38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Name of user who last updated the data.', NULL, NULL, NULL, NULL, NULL, N'15841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'2f38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'Date and time when the data were last updated.', NULL, NULL, NULL, NULL, NULL, N'75841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3038ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'5b851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.SpecimenPartID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3138ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.SpecimenPartID', N'en-US', N'General', NULL, NULL, N'ID of the part of a specimen (optional, Foreign key) if the identification unit is located on a part of the specimen (see table CollectionSpecimenPart).', NULL, NULL, NULL, NULL, NULL, N'97851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LanguageCode_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3238ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LanguageCode_Enum', N'en-US', N'General', NULL, NULL, N'The codes for the languages', NULL, NULL, NULL, NULL, NULL, N'7ba8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem', N'de-DE', N'General', N'Lokalisationssystem', NULL, N'Das geographische System zur Bestimmung der Lokalität, e.g. Koordinaten etc.', NULL, NULL, NULL, NULL, NULL, N'3338ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem', N'en-US', N'General', N'Localisation system', NULL, N'The geographic localisation systems, e.g. coordinates', NULL, NULL, NULL, NULL, NULL, N'859e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DefaultAccuracyOfLocalisation', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3438ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DefaultAccuracyOfLocalisation', N'en-US', N'General', NULL, NULL, N'The default for the accuracy of values that can be reached with this method', NULL, NULL, NULL, NULL, NULL, N'c1821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DefaultMeasurementUnit', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3538ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DefaultMeasurementUnit', N'en-US', N'General', NULL, NULL, N'The default measurement unit for the localisation system, e.g. m, geograpic coordinates', NULL, NULL, NULL, NULL, NULL, N'c7821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.Description', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3638ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.Description', N'en-US', N'General', NULL, NULL, N'Description of the localisation method', NULL, NULL, NULL, NULL, NULL, N'd7821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DescriptionLocation1', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3738ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DescriptionLocation1', N'en-US', N'General', NULL, NULL, N'Description of the attribute Location1 in the table CollectionGeography as displayed in the user interface', NULL, NULL, NULL, NULL, NULL, N'e1821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DescriptionLocation2', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3838ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DescriptionLocation2', N'en-US', N'General', NULL, NULL, N'Description of the attribute Location2 in the table CollectionGeography as displayed in the user interface', NULL, NULL, NULL, NULL, NULL, N'e3821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayEnable', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3938ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayEnable', N'en-US', N'General', NULL, NULL, N'Specifies if this item is enabled to be used within the database. LocalisationSystems can be disabled to avoid seeing them, but to keep the definition for the future.', NULL, NULL, NULL, NULL, NULL, N'eb821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayOrder', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3a38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayOrder', N'en-US', N'General', NULL, NULL, N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.', NULL, NULL, NULL, NULL, NULL, N'f5821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayText', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3b38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayText', N'en-US', N'General', NULL, NULL, N'Short abbreviated description of the localisation system as displayed in the user interface', NULL, NULL, NULL, NULL, NULL, N'fd821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayTextLocation1', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3c38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayTextLocation1', N'en-US', N'General', NULL, NULL, N'Short abbreviated description of the attribute Location1 in the table CollectionGeography as displayed in the user interface', NULL, NULL, NULL, NULL, NULL, N'07831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayTextLocation2', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3d38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.DisplayTextLocation2', N'en-US', N'General', NULL, NULL, N'Short abbreviated description of the attribute Location2 in the table CollectionGeography as displayed in the user interface', NULL, NULL, NULL, NULL, NULL, N'09831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3e38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID', N'en-US', N'General', NULL, NULL, N'Unique ID for the localisation system (= Primary key)', NULL, NULL, NULL, NULL, NULL, N'83831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.1', N'de-DE', N'General', N'Top50 (deutsche Landesvermessung)', NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'3f38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.1', N'en-US', N'General', N'Top50 (deutsche Landesvermessung)', N'Top50 (deutsche Land', N'Top50 (deutsche Landesvermessung)', NULL, NULL, NULL, NULL, NULL, N'1f54dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.10', N'de-DE', N'General', N'Exposition (von / bis)', N'Exposition', N'Exposition e.g. eines Hangs [von / bis]', NULL, NULL, NULL, NULL, NULL, N'4038ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.10', N'en-US', N'General', N'Exposition', N'Exposition', N'Exposition of e.g. a hillside in relation to the sun [from / to]', NULL, NULL, NULL, NULL, NULL, N'2854dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.11', N'de-DE', N'General', N'Hangneigung (von / bis)', N'Neigung', N'Neigung einer Oberfläche, e.g. eines Hangs [von / bis]', NULL, NULL, NULL, NULL, NULL, N'4138ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.11', N'en-US', N'General', N'Slope', N'Slope', N'Slope or steepness of the surface of e.g. a hillside [from / to]', NULL, NULL, NULL, NULL, NULL, N'2954dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.12', N'de-DE', N'General', N'Koordinaten PD', N'Koord. PD', N'Geograpischen Koordinaten beruhend auf Potsdam Datum [Länge / Breite]', NULL, NULL, NULL, NULL, NULL, N'4238ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.12', N'en-US', N'General', N'Coordinaten PD', N'Coord. PD', N'Geographic coordinates based on the Potsdam-Datum using the  Bessel-Ellipsoid [Longitude / Latitude]', NULL, NULL, NULL, NULL, NULL, N'2a54dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.13', N'de-DE', N'General', N'Probefläche', N'Probefläche', N'Benutzerdefinierte Probefläche oder benanntes geographisches Gebiet, e.g. Capensis  [Name / URI]', NULL, NULL, NULL, NULL, NULL, N'4338ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.13', N'en-US', N'General', N'Sampling plot', N'Sampling plot', N'Either user defined Sampling plots or named geographical areas e.g. Capensis [Name / URI]', NULL, NULL, NULL, NULL, NULL, N'2b54dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.14', N'de-DE', N'General', N'Tiefe (von / bis)', N'Tiefe', N'Tiefe in Meters unter der Oberfläche e.g. eines Wasserkörpers in dem gesammelt wurde [von / bis]', NULL, NULL, NULL, NULL, NULL, N'4438ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.14', N'en-US', N'General', N'Depth', N'Depth', N'Depth in meters below the surface of e.g. a water body at which the collection was made [from / to]', NULL, NULL, NULL, NULL, NULL, N'2c54dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.15', N'de-DE', N'General', N'Höhe (von / bis)', N'Höhe', N'Höhe resp. Abstand vom Boden e.g. falls das gesammelte Objekt in einem Baum gesammelt wurde  [von / bis]', NULL, NULL, NULL, NULL, NULL, N'4538ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.15', N'en-US', N'General', N'Height', N'Height', N'Height resp. distance from groundlevel when e.g. located in a tree [from / to]', NULL, NULL, NULL, NULL, NULL, N'2d54dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.18', N'de-DE', N'General', N'Benannter Ort (DiversityGazetteer)', N'Benannter Ort', N'Benannter Ort (DiversityGazetteer) [Name / URI]', NULL, CAST(N'2014-10-07T14:36:00.600' AS DateTime), N'dbo', CAST(N'2014-10-07T14:36:00.600' AS DateTime), N'dbo', N'217ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.18', N'en-US', N'General', N'Named area (DiversityGazetteer)', N'Named area', N'Named area (DiversityGazetteer) [Name / URI]', NULL, CAST(N'2014-10-07T14:36:00.600' AS DateTime), N'dbo', CAST(N'2014-10-07T14:36:00.600' AS DateTime), N'dbo', N'227ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.19', N'de-DE', N'General', N'Benannter Ort (DiversityGazetteer)', N'Benannter Ort', N'Benannter Ort (DiversityGazetteer) [Name / URI]', NULL, CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', N'257ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.19', N'en-US', N'General', N'Named area (DiversityGazetteer)', N'Named area', N'Named area (DiversityGazetteer) [Name / URI]', NULL, CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', N'267ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.2', N'de-DE', N'General', N'Gauss-Krüger Koordinaten', N'GK Koord.', N'Gauss-Krüger Koordinaten [R / H]', NULL, NULL, NULL, NULL, NULL, N'4638ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.2', N'en-US', N'General', N'Gauss-Krüger coordinates', N'GK coordi.', N'Gauss-Krüger coordinates [R / H]', NULL, NULL, NULL, NULL, NULL, N'2054dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.20', N'de-DE', N'General', N'Benannter Ort (DiversityGazetteer)', N'Benannter Ort', N'Benannter Ort (DiversityGazetteer) [Name / URI]', NULL, CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', N'297ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.20', N'en-US', N'General', N'Named area (DiversityGazetteer)', N'Named area', N'Named area (DiversityGazetteer) [Name / URI]', NULL, CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', N'2a7ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.21', N'de-DE', N'General', N'Benannter Ort (DiversityGazetteer)', N'Benannter Ort', N'Benannter Ort (DiversityGazetteer) [Name / URI]', NULL, CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', N'2d7ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.21', N'en-US', N'General', N'Named area (DiversityGazetteer)', N'Named area', N'Named area (DiversityGazetteer) [Name / URI]', NULL, CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', CAST(N'2014-10-07T14:36:00.613' AS DateTime), N'dbo', N'2e7ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.3', N'de-DE', N'General', N'TK25 (MTB / Quadrant)', N'MTB', N'Das Gauss-Krüger Gitter in D, A und CH basierend auf Karten im Maßstab 1:25000, früher MTB', NULL, NULL, NULL, NULL, NULL, N'4738ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.3', N'en-US', N'General', N'TK25 (MTB / Quadrant)', N'MTB', N'The UTM grid used in D, A and CH based on the maps 1:25000, former MTB', NULL, NULL, NULL, NULL, NULL, N'2154dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.3.Quadrant', N'de-DE', N'General', N'Quadrant', N'Quadrant', N'Der Quadrant in einem Gauss-Krüger Gitter in D, A and CH basierend auf 1:25000 Karten, früher MTB', NULL, NULL, NULL, NULL, NULL, N'50f05078-41c5-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.3.Quadrant', N'en-US', N'General', N'Quadrant', N'Quadrant', N'The quadrant in the UTM grid used in D, A and CH based on the maps 1:25000, former MTB', NULL, NULL, NULL, NULL, NULL, N'd1506b50-41c5-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.4', N'de-DE', N'General', N'Höhe mNN (von / bis)', N'Höhe (mNN)', N'Höhe über Meeresspiegel (mNN) [von / bis]', NULL, NULL, NULL, NULL, NULL, N'4838ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.4', N'en-US', N'General', N'Altitude (mNN)', N'Altitude (mNN)', N'Altitude above seelevel (mNN) [from / to]', NULL, NULL, NULL, NULL, NULL, N'2254dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.4.AltitudeTo', N'de-DE', N'General', N'Höhe bis', N'Höhe bis', N'Meereshöhe, oberer Wert (mNN)', NULL, NULL, NULL, NULL, NULL, N'705aa4ff-20e0-de11-8f1d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.4.AltitudeTo', N'en-US', N'General', N'Altitude to', N'Alt. to', N'upper value of the altitude (mNN)', NULL, NULL, NULL, NULL, NULL, N'715aa4ff-20e0-de11-8f1d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.5', N'de-DE', N'General', N'mNN (barometric)', N'mNN (barometric)', N'mNN (barometric) [von / bis]', NULL, NULL, NULL, NULL, NULL, N'4938ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.5', N'en-US', N'General', N'mNN (barometric)', N'mNN (barometric)', N'mNN (barometric) [from / to]', NULL, NULL, NULL, NULL, NULL, N'2354dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.6', N'de-DE', N'General', N'Greenwich Koordinaten', N'Greenwich Koord.', N'Greenwich Koordinaten [Länge / Breite]', NULL, NULL, NULL, NULL, NULL, N'4a38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.6', N'en-US', N'General', N'Greenwich Coordinates', N'Greenwich Coord.', N'Greenwich Coordinates [Longitude / Latitude]', NULL, NULL, NULL, NULL, NULL, N'2454dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.7', N'de-DE', N'General', N'Benannter Ort (DiversityGazetteer)', N'Benannter Ort', N'Benannter Ort (DiversityGazetteer) [Name / URI]', NULL, NULL, NULL, NULL, NULL, N'4b38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.7', N'en-US', N'General', N'Named area (DiversityGazetteer)', N'Named area', N'Named area (DiversityGazetteer) [Name / URI]', NULL, NULL, NULL, NULL, NULL, N'2554dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.8', N'de-DE', N'General', N'Koordinaten WGS84 (Länge / Breite)', N'Koord. WGS84', N'Koordinaten des  World Geodetic System 1984 [Länge / Breite]', NULL, NULL, NULL, NULL, NULL, N'4c38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.8', N'en-US', N'General', N'Coordinates WGS84 (Longitude / Latitude)', N'Coord. WGS84', N'Coordinates of the World Geodetic System 1984 [Longitude / Latitude]', NULL, NULL, NULL, NULL, NULL, N'2654dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.9', N'de-DE', N'General', N'Koordinaten', N'Koord.', N'Koordinaten [Länge / Breite]', NULL, NULL, NULL, NULL, NULL, N'4d38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemID.9', N'en-US', N'General', N'Coordinates', N'Coord.', N'Coordinates [Longitude / Latitude]', NULL, NULL, NULL, NULL, NULL, N'2754dedd-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemName', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4e38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemName', N'en-US', N'General', NULL, NULL, N'Name of the system used for the determination of the place of the collection, e. g. Gauss-Krüger, MTB, GIS', NULL, NULL, NULL, NULL, NULL, N'85831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemParentID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4f38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.LocalisationSystemParentID', N'en-US', N'General', NULL, NULL, N'LocalisationSystemID of the superior LocalisationSystem', NULL, NULL, NULL, NULL, NULL, N'87831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.ParsingMethodName', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5038ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.ParsingMethodName', N'en-US', N'General', NULL, NULL, N'Internal value, specifying a programming method used for parsing text in fields Location1/Location2 in table CollectionLocalisation', NULL, NULL, NULL, NULL, NULL, N'c5841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5138ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'4d851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'MeasurementUnit_Enum', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5238ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'MeasurementUnit_Enum', N'en-US', N'General', NULL, NULL, N'The measurement units, e.g. m', NULL, NULL, NULL, NULL, NULL, N'7da8b1a8-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5338ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing', N'en-US', N'General', NULL, NULL, N'The processings of the specimen', NULL, NULL, NULL, NULL, NULL, N'879e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.Description', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5438ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.Description', N'en-US', N'General', NULL, NULL, N'Description of the processing', NULL, NULL, NULL, NULL, NULL, N'd5821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.DisplayText', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5538ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.DisplayText', N'en-US', N'General', NULL, NULL, N'The display text of the processing as shown e.g. in a user interface', NULL, NULL, NULL, NULL, NULL, N'fb821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5638ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'ad831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5738ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'e3831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5838ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'23841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5938ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'6b841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.Notes', N'de-DE', N'General', NULL, N'Notiz', N'Anmerkung zur Bearbeitung', NULL, NULL, NULL, NULL, NULL, N'5a38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.Notes', N'en-US', N'General', NULL, N'Note', N'Notes about the processing', NULL, NULL, NULL, NULL, NULL, N'a5841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.ProcessingID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5b38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.ProcessingID', N'en-US', N'General', NULL, NULL, N'ID of the processing (Primary key)', NULL, NULL, NULL, NULL, NULL, N'dd841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.ProcessingParentID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5c38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.ProcessingParentID', N'en-US', N'General', NULL, NULL, N'The ID of the superior type of the processing', NULL, NULL, NULL, NULL, NULL, N'df841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.ProcessingURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5d38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.ProcessingURI', N'en-US', N'General', NULL, NULL, N'An URI for a processing as defined in an external datasource', NULL, NULL, NULL, NULL, NULL, N'e1841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5e38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'81851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5f38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory', N'en-US', N'General', NULL, NULL, N'The processings that are possible for a certain material category', NULL, NULL, NULL, NULL, NULL, N'899e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6038ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'17841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6138ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'77841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.MaterialCategory', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6238ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.MaterialCategory', N'en-US', N'General', NULL, NULL, N'Material category of specimen. Examples: ''herbarium sheets'', ''drawings'', ''microscopic slides'' etc.', NULL, NULL, NULL, NULL, NULL, N'85841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.ProcessingID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6338ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.ProcessingID', N'en-US', N'General', NULL, NULL, N'ID of the processing. Refers to ProcessingID in table Processing (foreign key)', NULL, NULL, NULL, NULL, NULL, N'd9841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6438ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'5d851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6538ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'8b9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.AnalysisID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6638ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.AnalysisID', N'en-US', N'General', NULL, NULL, N'ID of the analysis (Primary key)', NULL, NULL, NULL, NULL, NULL, N'45821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6738ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'b7831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6838ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'df831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6938ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'29841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6a38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'61841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.ProjectID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6b38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.ProjectID', N'en-US', N'General', NULL, NULL, N'ID of the project to which the specimen belongs (Projects are defined in DiversityProjects)', NULL, NULL, NULL, NULL, NULL, N'ed841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6c38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'7d851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6d38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing', N'en-US', N'General', NULL, NULL, N'The types of processing available within a project', NULL, NULL, NULL, NULL, NULL, N'8d9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6e38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'bf831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6f38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'd1831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7038ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'19841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7138ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'73841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.ProcessingID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7238ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.ProcessingID', N'en-US', N'General', NULL, NULL, N'ID of the Processing (Primary key)', NULL, NULL, NULL, NULL, NULL, N'db841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.ProjectID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7338ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.ProjectID', N'en-US', N'General', NULL, NULL, N'ID of the project to which the specimen belongs (Projects are defined in DiversityProjects)', NULL, NULL, NULL, NULL, NULL, N'e9841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7438ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'63851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7538ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy', N'en-US', N'General', NULL, NULL, N'The projects as stored in the module DiversityProjects', NULL, NULL, NULL, NULL, NULL, N'8f9e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy.Project', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7638ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy.Project', N'en-US', N'General', NULL, NULL, N'The name or title of the project as shown in a user interface  (Projects are defined in DiversityProjects)', NULL, NULL, NULL, NULL, NULL, N'e3841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy.ProjectID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7738ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy.ProjectID', N'en-US', N'General', NULL, NULL, N'ID of the project to which the specimen belongs (Projects are defined in DiversityProjects)', NULL, NULL, NULL, NULL, NULL, N'e7841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7838ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'6d851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7938ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser', N'en-US', N'General', NULL, NULL, N'The projects that a user can access', NULL, NULL, NULL, NULL, NULL, N'919e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser.LoginName', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7a38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser.LoginName', N'en-US', N'General', NULL, NULL, N'A login name which the user uses  for access the DivesityWorkbench, Microsoft domains, etc..', NULL, NULL, NULL, NULL, NULL, N'01841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser.ProjectID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7b38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser.ProjectID', N'en-US', N'General', NULL, NULL, N'ID of the project to which the specimen belongs (Projects are defined in DiversityProjects)', NULL, NULL, NULL, NULL, NULL, N'e5841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7c38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'6b851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property', N'de-DE', N'General', N'Eigenschaft des Sammelorts', N'Merkm. d. Orts', N'Eigenschaften die für einen Sammelort angegeben werden können', NULL, NULL, NULL, NULL, NULL, N'7d38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property', N'en-US', N'General', N'Collection site property', N'Site prop.', N'The list of the properties that can be specified for the collection site', NULL, NULL, NULL, NULL, NULL, N'939e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DefaultAccuracyOfProperty', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7e38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DefaultAccuracyOfProperty', N'en-US', N'General', NULL, NULL, N'The default for the accuracy of values that can be reached with this method', NULL, NULL, NULL, NULL, NULL, N'c3821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DefaultMeasurementUnit', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7f38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DefaultMeasurementUnit', N'en-US', N'General', NULL, NULL, N'The default measurement unit for the characterisation system, e.g. pH', NULL, NULL, NULL, NULL, NULL, N'c5821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.Description', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8038ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.Description', N'en-US', N'General', NULL, NULL, N'Description of the characterisation method', NULL, NULL, NULL, NULL, NULL, N'd9821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DisplayEnabled', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8138ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DisplayEnabled', N'en-US', N'General', NULL, NULL, N'Specifies if this item is enabled to be used within the database. Properties can be disabled to avoid seeing them, but to keep the definition for the future.', NULL, NULL, NULL, NULL, NULL, N'ed821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DisplayOrder', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8238ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DisplayOrder', N'en-US', N'General', NULL, NULL, N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.', NULL, NULL, NULL, NULL, NULL, N'f1821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DisplayText', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8338ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.DisplayText', N'en-US', N'General', NULL, NULL, N'Short abbreviated description of the characterisation system as displayed in the user interface', NULL, NULL, NULL, NULL, NULL, N'ff821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.ParsingMethodName', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8438ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.ParsingMethodName', N'en-US', N'General', NULL, NULL, N'Internal value, specifying a programming method used for parsing the contents in table CollectionEventProperty', NULL, NULL, NULL, NULL, NULL, N'c3841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8538ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID', N'en-US', N'General', NULL, NULL, N'Unique ID for the property (= Primary key)', NULL, NULL, NULL, NULL, NULL, N'f3841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.1', N'de-DE', N'General', N'European Nature Information System (EUNIS)', N'EUNIS', NULL, NULL, NULL, NULL, NULL, NULL, N'a0ae1d14-5991-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.1', N'en-US', N'General', N'European Nature Information System (EUNIS)', N'EUNIS', N'European Nature Information System, http://eunis.eea.eu.int/index.jsp', NULL, NULL, NULL, NULL, NULL, N'b4bc660c-5991-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.10', N'de-DE', N'General', N'Geografische Regionen', N'Geogr. Reg.', N'Geographische Regionen - Import aus Tabelle Naturraum der Datenbank Mykologie aus Görlitz', NULL, NULL, NULL, NULL, NULL, N'a1ae1d14-5991-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.10', N'en-US', N'General', N'Geographic regions', N'Geogr. reg.', N'Geographic regions - Import from table Naturraum of the datebase Mykologie from Görlitz', NULL, NULL, NULL, NULL, NULL, N'b5bc660c-5991-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.20', N'de-DE', N'General', N'Chronostratigraphie', N'Chronostratigr.', N'Chronostratigraphie nach Angaben der Bayerischen Staatssammlung für Paläontologie', NULL, NULL, NULL, NULL, NULL, N'a2ae1d14-5991-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.20', N'en-US', N'General', N'Chronostratigraphy', N'Chronostratigr.', N'Chronostratigraphy according to the Bayerische Staatssammlung für Paläontologie', NULL, NULL, NULL, NULL, NULL, N'b6bc660c-5991-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.30', N'de-DE', N'General', N'Lithostratigraphie', N'Lithostratigr.', N'Lithostratigraphie nach Angaben der Bayerischen Staatssammlung für Paläontologie', NULL, NULL, NULL, NULL, NULL, N'a3ae1d14-5991-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.30', N'en-US', N'General', N'Lithostratigraphy', N'Lithostratigr.', N'Lithostratigraphy according to the Bayerische Staatssammlung für Paläontologie', NULL, NULL, NULL, NULL, NULL, N'b7bc660c-5991-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.40', N'de-DE', N'General', N'Lebensraumtyp (LfU)', N'Lebensr.', N'Lebensraumtypen (Bayerisches Landesamt für Umwelt)', NULL, NULL, NULL, NULL, NULL, N'70924d8e-44c5-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyID.40', N'en-US', N'General', N'Biotop type', N'Biotop', N'Biotop types (Bayerisches Landesamt für Umwelt)', NULL, NULL, NULL, NULL, NULL, N'91fc3184-44c5-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyName', N'de-DE', N'General', NULL, NULL, N'Der Name des System das für die Charakterisierung des Standorts verwendet wird, e.g. Lithostratigraphie', NULL, NULL, NULL, NULL, NULL, N'8638ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyName', N'en-US', N'General', NULL, NULL, N'Name of the system used for the characterisation of the collection site, e. g. Lithostratigraphy', NULL, NULL, NULL, NULL, NULL, N'f5841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyParentID', N'de-DE', N'General', NULL, NULL, N'PropertyID der übergeordneten Property', NULL, NULL, NULL, NULL, NULL, N'8738ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.PropertyParentID', N'en-US', N'General', NULL, NULL, N'PropertyID of the superior Property', NULL, NULL, NULL, NULL, NULL, N'f7841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8838ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'59851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Substrate', N'de-DE', N'General', N'Substrat', N'Substr.', N'Das Substrat auf dem ein Organimus wächst', NULL, NULL, NULL, NULL, NULL, N'd0544f43-94c4-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Substrate', N'en-US', N'General', N'Substrate', N'Substr.', N'The substrate on which an organism is growing on', NULL, NULL, NULL, NULL, NULL, N'7120f3f2-93c4-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction', N'de-DE', N'General', N'Transaktion', N'Transaktion', N'Transaktionen wie Ausleihen, Geschenke, Tausch etc. von Belegen die temporär oder permanent von einer zu anderen Sammlung gelangen', NULL, NULL, NULL, NULL, NULL, N'8938ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction', N'en-US', N'General', N'Transaction', N'Transaction', N'Transactions like loan, borrow, gift, exchange etc. of specimen if they are e.g. permanently or temporary transfered from one collection to another', NULL, NULL, NULL, NULL, NULL, N'959e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ActualEndDate', N'de-DE', N'General', NULL, NULL, N'Ende einer Transaktion nach einer Verlängerung wenn e.g. für eine Ausleihe eine Verlängerung bis zu diesem Datum gewährt wurde.', NULL, NULL, NULL, CAST(N'2014-09-03T13:40:45.437' AS DateTime), N'dbo', N'8a38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ActualEndDate', N'en-US', N'General', NULL, NULL, N'Actual end of the transaction after a prolonation when e.g. the date of return for a loan was prolonged by the owner', NULL, NULL, NULL, CAST(N'2014-09-03T13:40:45.437' AS DateTime), N'dbo', N'33821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.AdministratingCollectionID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8b38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.AdministratingCollectionID', N'en-US', N'General', NULL, NULL, N'ID of the collection thas is responsible for the administration of the transaction.', NULL, NULL, NULL, NULL, NULL, N'37821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.AgreedEndDate', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8c38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.AgreedEndDate', N'en-US', N'General', NULL, NULL, N'End of the transaction period, e.g. if the time for borrowing the specimen is restricted', NULL, NULL, NULL, NULL, NULL, N'3f821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.BeginDate', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8d38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.BeginDate', N'en-US', N'General', NULL, NULL, N'Date when the transaction started', NULL, NULL, NULL, NULL, NULL, N'5b821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.FromCollectionID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8e38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.FromCollectionID', N'en-US', N'General', NULL, NULL, N'The ID of the collection from which the specimen were transfered, e.g. the donating collection of a gift', NULL, NULL, NULL, NULL, NULL, N'37831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.FromTransactionNumber', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8f38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.FromTransactionNumber', N'en-US', N'General', NULL, NULL, N'Number or code by which a transaction may be recorded by the administration of the source of the specimen, e.g. the donating collection of a gift', NULL, NULL, NULL, NULL, NULL, N'39831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.FromTransactionPartnerAgentURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9038ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.FromTransactionPartnerAgentURI', N'en-US', N'General', NULL, NULL, N'The URI of the transaction partner (see e.g. module DiversityAgents)', NULL, NULL, NULL, NULL, NULL, N'3b831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.FromTransactionPartnerName', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9138ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.FromTransactionPartnerName', N'en-US', N'General', NULL, NULL, N'Name of  the person or institution  from which the specimen were transfered, e.g. the donator of a gift', NULL, NULL, NULL, NULL, NULL, N'3d831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.InternalNotes', N'de-DE', N'General', NULL, N'Int.Notiz', N'Interne Anmerkungen zur Transaktion die nicht e.g. auf einer Webseite publiziert werden sollen', NULL, NULL, NULL, NULL, NULL, N'9238ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.InternalNotes', N'en-US', N'General', NULL, N'Int.note', N'Internal notes about this transaction, not to be published e.g. on a web page', NULL, NULL, NULL, NULL, NULL, N'65831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.Investigator', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9338ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.Investigator', N'en-US', N'General', NULL, NULL, N'The investigator for whose study a transacted material was sent', NULL, NULL, NULL, NULL, NULL, N'6d831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9438ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'bb831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9538ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'd5831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9638ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'1d841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9738ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'6f841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.MaterialCategory', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9838ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.MaterialCategory', N'en-US', N'General', NULL, NULL, N'Material category of specimen. Examples: ''herbarium sheets'', ''drawings'', ''microscopic slides'' etc.', NULL, NULL, NULL, NULL, NULL, N'87841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.MaterialCollectors', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9938ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.MaterialCollectors', N'en-US', N'General', NULL, NULL, N'The collectors of the material', NULL, NULL, NULL, NULL, NULL, N'89841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.MaterialDescription', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9a38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.MaterialDescription', N'en-US', N'General', NULL, NULL, N'ID of the project to which the transaction belongs (Projects are defined in DiversityProjects)', NULL, NULL, NULL, NULL, NULL, N'8b841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.NumberOfUnits', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9b38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.NumberOfUnits', N'en-US', N'General', NULL, NULL, N'The number of units that were (initially) included in the transaction', NULL, NULL, NULL, NULL, NULL, N'b7841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ParentTransactionID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9c38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ParentTransactionID', N'en-US', N'General', NULL, NULL, N'The ID of a preceeding transaction of a superior transaction if transactions are organized in a hierarchy', NULL, NULL, NULL, NULL, NULL, N'c1841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ReportingCategory', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9d38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ReportingCategory', N'en-US', N'General', NULL, NULL, N'A group defined for the transaction, e. g. a taxonomic group as used for exchange balancing', NULL, NULL, NULL, NULL, NULL, N'19851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ResponsibleAgentURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9e38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ResponsibleAgentURI', N'en-US', N'General', NULL, NULL, N'The URI of the person, team or organisation responsible for the data (see e.g. module DiversityAgents)', NULL, NULL, NULL, NULL, NULL, N'29851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ResponsibleName', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9f38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ResponsibleName', N'en-US', N'General', NULL, NULL, N'The person responsible for this transaction', NULL, NULL, NULL, NULL, NULL, N'2f851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a038ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'65851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ToCollectionID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a138ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ToCollectionID', N'en-US', N'General', NULL, NULL, N'The ID of the collection to which the specimen were transfered, e.g. the receiver of a gift', NULL, NULL, NULL, NULL, NULL, N'a5851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ToTransactionNumber', N'de-DE', N'General', NULL, N'Inv.Nr.', N'Nummer oder Code mit der die Transaktion durch die Verwaltung der Zielorganisationen gekennzeichnet wird', NULL, NULL, NULL, NULL, NULL, N'a238ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ToTransactionNumber', N'en-US', N'General', NULL, N'Inv.No.', N'Number or code by which a transaction may be recorded by the administration of the destination of the specimen, e.g. the receiving collection of a gift', NULL, NULL, NULL, NULL, NULL, N'a7851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ToTransactionPartnerAgentURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a338ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ToTransactionPartnerAgentURI', N'en-US', N'General', NULL, NULL, N'The URI of the transaction partner (see e.g. module DiversityAgents)', NULL, NULL, NULL, NULL, NULL, N'a9851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ToTransactionPartnerName', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a438ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.ToTransactionPartnerName', N'en-US', N'General', NULL, NULL, N'Name of  the person or institution  to which the specimen were transfered, e.g. the receiver of a gift', NULL, NULL, NULL, NULL, NULL, N'ab851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.TransactionComment', N'de-DE', N'General', NULL, NULL, N'An den Transaktionspartner gerichtete Bemerkungen zum ausgetauschten Material', NULL, NULL, NULL, NULL, NULL, N'a538ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.TransactionComment', N'en-US', N'General', NULL, NULL, N'Comments about the exchanged material addressed to the transaction partner', NULL, NULL, NULL, NULL, NULL, N'ad851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.TransactionID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a638ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.TransactionID', N'en-US', N'General', NULL, NULL, N'Unique ID for the transaction (= Primary key)', NULL, NULL, NULL, NULL, NULL, N'b1851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.TransactionTitle', N'de-DE', N'General', NULL, N'Transact.', N'Der Titel der Transaktion wie e.g. an der Benutzeroberfläche gezeigt', NULL, NULL, NULL, NULL, NULL, N'a738ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.TransactionTitle', N'en-US', N'General', NULL, N'Transact.', N'The title of the transaction as e.g. shown in an user interface', NULL, NULL, NULL, NULL, NULL, N'b9851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.TransactionType', N'de-DE', N'General', NULL, NULL, N'Der Typ der Transaktion, e.g. Geschenk, Tausch, Kauf und deren Richtung', NULL, NULL, NULL, NULL, NULL, N'a838ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.TransactionType', N'en-US', N'General', NULL, NULL, N'Type of the transaction e.g. gift in or out, exchange in or out, purchase in or out', NULL, NULL, NULL, NULL, NULL, N'bb851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument', N'de-DE', N'General', NULL, NULL, N'Die Geschichte der Transaktionen resp. die Dokumente die damit verknüpft sind', NULL, NULL, NULL, NULL, NULL, N'a938ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument', N'en-US', N'General', NULL, NULL, N'The history of transactions resp. the documents connected to the transactions', NULL, NULL, NULL, NULL, NULL, N'979e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.Date', N'de-DE', N'General', NULL, NULL, N'Das Datum der Transaktion', NULL, NULL, NULL, NULL, NULL, N'aa38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.Date', N'en-US', N'General', NULL, NULL, N'The date of the event of a transaction', NULL, NULL, NULL, NULL, NULL, N'bd821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.InternalNotes', N'de-DE', N'General', NULL, N'Int.Notiz', N'Interne Notizen zum Transaktionsereignis', NULL, NULL, NULL, NULL, NULL, N'ab38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.InternalNotes', N'en-US', N'General', NULL, N'Int.note', N'Internal notes about this transaction event', NULL, NULL, NULL, NULL, NULL, N'69831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogCreatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ac38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogCreatedBy', N'en-US', N'General', NULL, NULL, N'Who created this dataset', NULL, NULL, NULL, NULL, NULL, N'9b831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogCreatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ad38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogCreatedWhen', N'en-US', N'General', NULL, NULL, N'The time when this dataset was created', NULL, NULL, NULL, NULL, NULL, N'f1831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogUpdatedBy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ae38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogUpdatedBy', N'en-US', N'General', NULL, NULL, N'Who was the last to update this dataset', NULL, NULL, NULL, NULL, NULL, N'2f841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogUpdatedWhen', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'af38ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogUpdatedWhen', N'en-US', N'General', NULL, NULL, N'The last time when this dataset was updated', NULL, NULL, NULL, NULL, NULL, N'5d841992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b038ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'4f851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.TransactionDocument', N'de-DE', N'General', NULL, NULL, N'Ein Scan des Dokuments da mit dem Transaktionsereignis verknüpft ist', NULL, NULL, NULL, NULL, NULL, N'b138ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.TransactionDocument', N'en-US', N'General', NULL, NULL, N'A scanned document connected to this transaction event', NULL, NULL, NULL, NULL, NULL, N'af851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.TransactionID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b238ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.TransactionID', N'en-US', N'General', NULL, NULL, N'Unique ID for the Transaction, refers to table Transaction  (= Part of primary key and foreign key)', NULL, NULL, NULL, NULL, NULL, N'b5851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.TransactionText', N'de-DE', N'General', NULL, NULL, N'Der Text des Dokuments', NULL, NULL, NULL, NULL, NULL, N'b338ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.TransactionText', N'en-US', N'General', NULL, NULL, N'The text of a transaction document', NULL, NULL, NULL, NULL, NULL, N'b7851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b438ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy', N'en-US', N'General', NULL, NULL, N'The user as stored in the module DiversityUsers', NULL, NULL, NULL, NULL, NULL, N'999e0280-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy.CombinedNameCache', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b538ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy.CombinedNameCache', N'en-US', N'General', NULL, NULL, N'The short name of the user, e.g. P. Smith', NULL, NULL, NULL, NULL, NULL, N'ad821992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy.LoginName', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b638ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy.LoginName', N'en-US', N'General', NULL, NULL, N'A login name which the user uses  for access the DivesityWorkbench, Microsoft domains, etc..', NULL, NULL, NULL, NULL, NULL, N'fd831992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy.RowGUID', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b738ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy.RowGUID', N'en-US', N'General', NULL, NULL, N'', NULL, NULL, NULL, NULL, NULL, N'51851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy.UserURI', N'de-DE', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b838ce94-bb90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityRepresentation] ([Entity], [LanguageCode], [EntityContext], [DisplayText], [Abbreviation], [Description], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy.UserURI', N'en-US', N'General', NULL, NULL, N'URI of a user in a remote module, e.g. refering to UserInfo.UserID in database DiversityUsers', NULL, NULL, NULL, NULL, NULL, N'cb851992-8c90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'45f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'46f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'47f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'48f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Analysis.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f001436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'49f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4af62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'AnalysisTaxonomicGroup.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f101436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollCircumstances_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a59c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollDateCategory_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a69c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'70a9b796-47fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.CollectionParentID', N'General', NULL, NULL, NULL, NULL, N'Graphische Darstellung', NULL, NULL, NULL, NULL, N'4009b4b0-47fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4bf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4cf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4df62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4ef62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Collection.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f201436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectionSpecimenID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4076267d-41fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.CollectorsSequence', N'General', NULL, NULL, NULL, N'getdate()', NULL, NULL, NULL, NULL, NULL, N'f5921a90-8e90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'4ff62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'50f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'51f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'52f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionAgent.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f301436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectionDate', N'General', NULL, NULL, NULL, N'getdate()', NULL, NULL, NULL, NULL, NULL, N'604ac670-8f90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.CollectorsEventNumber', N'General', NULL, NULL, NULL, NULL, N'selten gebraucht', NULL, NULL, NULL, NULL, N'6029873e-42fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'53f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'54f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'55f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'56f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f401436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEvent.Version', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'601b55da-8e90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.CollectionEventID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'10626167-42fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'57f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'58f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'59f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5af62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventImage.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f501436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.AverageAltitudeCache', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'20edba3c-8f90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.AverageLatitudeCache', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'90d7d643-8f90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.AverageLongitudeCache', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'15066e4e-8f90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.CollectionEventID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e01ff7d4-42fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LocalisationSystemID', N'General', NULL, NULL, NULL, NULL, N'Darstellung über LocalisationSystemName aus LocalisationSystem', NULL, NULL, NULL, NULL, N'e0abd5ba-42fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5bf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5cf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5df62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5ef62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventLocalisation.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f601436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.AverageValueCache', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'20e498f3-8f90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.CollectionEventID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'e094b162-aefb-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'5ff62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'60f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'61f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'62f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.PropertyHierarchyCache', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7007b900-9090-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventProperty.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f701436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.DateCache', N'General', NULL, NULL, NULL, NULL, N'Obsolete, use DateStart and DateEnd instead', NULL, NULL, NULL, NULL, N'40989559-9090-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'63f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'64f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'65f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'66f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f801436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeries.SeriesID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a0f5b183-43fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'67f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'68f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'69f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6af62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f901436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionEventSeriesImage.SeriesID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'90961ea4-43fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionExternalDatasource.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fa01436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager.LoginName', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6bf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionManager.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fb01436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.CollectionSpecimenID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f0fc7ba7-44fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6cf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6df62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6ef62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'6ff62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.ProjectID', N'General', NULL, NULL, NULL, NULL, N'Darstellung über Project aus Tabelle ProjectProxy', NULL, NULL, NULL, NULL, N'009078f8-44fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionProject.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fc01436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'70f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'71f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'72f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'73f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimen.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fd01436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.CollectionSpecimenID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'c09b815a-45fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.IdentificationUnitID', N'General', NULL, NULL, NULL, NULL, N'Darstellung über LastIdentificationCache aus Tabelle IdentificationUnit', NULL, NULL, NULL, NULL, N'001ccc86-45fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'74f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'75f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'76f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'77f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenImage.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'fe01436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.CollectionID', N'General', NULL, NULL, NULL, NULL, N'Darstellung über CollectionName aus Tabelle Collection', NULL, NULL, NULL, NULL, N'60d1150f-68fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.CollectionSpecimenID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'61d1150f-68fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'78f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'79f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7af62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7bf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenPart.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ff01436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.CollectionSpecimenID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b0152b51-68fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7cf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7df62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7ef62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'7ff62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.ProcessingID', N'General', NULL, NULL, NULL, NULL, N'Darstellung über DisplayText aus Tabelle Processing', NULL, NULL, NULL, NULL, N'c0cad676-68fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenProcessing.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0002436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.CollectionSpecimenID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'90506fec-68fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'80f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'81f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'82f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'83f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RelatedSpecimenCollectionID', N'General', NULL, NULL, NULL, NULL, N'Darstellung über CollectionName aus Tabelle Collection', NULL, NULL, NULL, NULL, N'50df7a0f-69fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenRelation.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0102436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogInsertedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'84f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogInsertedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'85f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'86f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'87f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollectionSpecimenTransaction.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0202436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollEventDateCategory_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a79c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollEventImageType_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a89c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollEventSeriesImageType_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a99c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollExchangeType_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'aa9c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollIdentificationCategory_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ab9c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollIdentificationDateCategory_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ac9c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollIdentificationQualifier_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ad9c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollLabelTranscriptionState_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ae9c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollLabelType_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'af9c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollMaterialCategory_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b09c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenImageType_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b19c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollSpecimenRelationType_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b29c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTaxonomicGroup_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b39c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTransactionType_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b49c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollTypeStatus_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b59c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'CollUnitRelationType_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b69c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'30ca3ccb-9190-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'88f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'89f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8af62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8bf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Entity.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0302436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityContext_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b79c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityLanguageCode_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b89c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'31ca3ccb-9190-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8cf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8df62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8ef62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'8ff62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityRepresentation.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0402436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'32ca3ccb-9190-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'90f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'91f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'92f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'93f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0502436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'EntityUsage_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b99c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.CollectionSpecimenID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a095e5ee-45fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationDate', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd0682422-9290-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.IdentificationUnitID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'009a52ff-45fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'94f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'95f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'96f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'97f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Identification.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0602436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.CollectionSpecimenID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'906580c5-46fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LastIdentificationCache', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'106a7ca6-9290-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'98f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'99f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9af62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9bf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.RelatedUnitID', N'General', NULL, NULL, NULL, NULL, N'Graphische Darstellung', NULL, NULL, NULL, NULL, N'5024c5f2-46fc-de11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnit.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0702436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9cf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9df62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9ef62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'9ff62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitAnalysis.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0802436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.CollectionSpecimenID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'70e2d7e5-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.IdentificationUnitID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'71e2d7e5-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd0b6aaf2-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd1b6aaf2-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'80098efd-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'81098efd-691d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.ResponsibleAgentURI', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f07fe2f9-641d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitGeoAnalysis.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f0832954-6a1d-df11-ae09-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.CollectionSpecimenID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'100cec84-5000-df11-a841-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogInsertedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a0f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogInsertedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a1f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a2f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a3f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IdentificationUnitInPart.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0902436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LanguageCode_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'ba9c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'f0a9291f-9390-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LocalisationSystem.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0a02436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'MeasurementUnit_Enum', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'bb9c481d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a4f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a5f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a6f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a7f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Processing.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0b02436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a8f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'a9f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProcessingMaterialCategory.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0c02436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'aaf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'abf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'acf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'adf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectAnalysis.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0d02436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'aef62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'aff62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b0f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b1f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProcessing.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0e02436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'601ca796-9390-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectProxy.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'0f02436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'40209f9c-9390-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser.LoginName', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b2f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ProjectUser.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1002436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1090aba5-9390-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Property.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1102436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b3f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b4f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b5f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b6f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Transaction.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1202436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogCreatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b7f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogCreatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b8f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogUpdatedBy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'b9f62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.LogUpdatedWhen', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'baf62159-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'TransactionDocument.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1302436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'd08338c9-9390-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage] ([Entity], [EntityContext], [Accessibility], [Determination], [Visibility], [PresetValue], [Notes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UserProxy.RowGUID', N'General', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, N'1402436d-8d90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'hidden', N'The entity is hidden from a user interface', N'hidden', 2, 1, NULL, NULL, N'f5b0a076-8b90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'inapplicable', N'This entity is not applicable in the given context', N'inapplicable', 3, 1, NULL, NULL, N'f6b0a076-8b90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityUsage_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'read_only', N'The access to this entity is restricted to read only', N'read only', 1, 1, NULL, NULL, N'f7b0a076-8b90-de11-872f-001ec9d7ae4b')
GO
INSERT [dbo].[EntityVisibility_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'hidden', N'the entity is hidden', N'hidden', NULL, 1, NULL, NULL, N'107929a3-47e4-e011-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityVisibility_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'optional', N'the visibility of the entity is optional', N'optional', NULL, 1, NULL, NULL, N'117929a3-47e4-e011-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[EntityVisibility_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [InternalNotes], [ParentCode], [RowGUID]) VALUES (N'visible', N'the entity is visible', N'visible', NULL, 1, NULL, NULL, N'127929a3-47e4-e011-a05d-001ec9d7ae4b')
GO
INSERT [dbo].[ExternalIdentifierType] ([Type], [ParentType], [URL], [Description], [InternalNotes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'DOI', N'ID', NULL, N'Digital Object Identifier', NULL, CAST(N'2016-06-30T12:48:41.500' AS DateTime), N'DWB-DEVEL\mweiss', CAST(N'2016-06-30T12:48:41.500' AS DateTime), N'DWB-DEVEL\mweiss', N'4fa9ab58-1a56-49f2-908d-4f9108cb20a7')
GO
INSERT [dbo].[ExternalIdentifierType] ([Type], [ParentType], [URL], [Description], [InternalNotes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'ID', NULL, NULL, N'External Identifier', NULL, CAST(N'2016-06-30T12:48:41.500' AS DateTime), N'DWB-DEVEL\mweiss', CAST(N'2016-06-30T12:48:41.500' AS DateTime), N'DWB-DEVEL\mweiss', N'd43ea6a5-be76-4b55-8b09-b64a2e36ac93')
GO
INSERT [dbo].[ExternalIdentifierType] ([Type], [ParentType], [URL], [Description], [InternalNotes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'IPEN number', N'ID', NULL, N'Number of the International Plant Exchange Network', NULL, CAST(N'2016-06-30T12:48:41.500' AS DateTime), N'DWB-DEVEL\mweiss', CAST(N'2016-06-30T12:48:41.500' AS DateTime), N'DWB-DEVEL\mweiss', N'e9895555-5231-4168-a61a-b20de271ce63')
GO
INSERT [dbo].[ExternalIdentifierType] ([Type], [ParentType], [URL], [Description], [InternalNotes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'LSID', N'ID', NULL, N'Life Science Identifiers', NULL, CAST(N'2016-06-30T12:48:41.500' AS DateTime), N'DWB-DEVEL\mweiss', CAST(N'2016-06-30T12:48:41.500' AS DateTime), N'DWB-DEVEL\mweiss', N'053463fd-134d-40ca-a8d4-aaf00d048768')
GO
INSERT [dbo].[ExternalIdentifierType] ([Type], [ParentType], [URL], [Description], [InternalNotes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Regulation', NULL, NULL, NULL, NULL, CAST(N'2016-09-19T17:14:37.593' AS DateTime), N'DWB-DEVEL\mweiss', CAST(N'2016-09-19T17:14:37.593' AS DateTime), N'DWB-DEVEL\mweiss', N'364a09b1-6c0d-41f4-bab3-d1a8963a35e3')
GO
INSERT [dbo].[ExternalIdentifierType] ([Type], [ParentType], [URL], [Description], [InternalNotes], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'UUID', N'ID', NULL, N'Universally Unique Identifier', NULL, CAST(N'2016-06-30T12:48:41.500' AS DateTime), N'DWB-DEVEL\mweiss', CAST(N'2016-06-30T12:48:41.500' AS DateTime), N'DWB-DEVEL\mweiss', N'b5fdbd25-6abf-40f3-8a37-6d86696ae19c')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'af', N'Afrikaans', N'Afrikaans', NULL, 1, NULL, N'0x0036', N'dcf9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'ar', N'Arabisch', N'Arabisch', NULL, 1, NULL, N'0x0001', N'ddf9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'az', N'Aserbaidschanisch', N'Aserbaidschanisch', NULL, 1, NULL, N'0x002C', N'def9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'be', N'Belarussisch', N'Belarussisch', NULL, 1, NULL, N'0x0023', N'dff9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'bg', N'Bulgarisch', N'Bulgarisch', NULL, 1, NULL, N'0x0002', N'e0f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'ca', N'Katalanisch', N'Katalanisch', NULL, 1, NULL, N'0x0003', N'e1f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'cs', N'Tschechisch', N'Tschechisch', NULL, 1, NULL, N'0x0005', N'e2f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'da', N'Dänisch', N'Dänisch', NULL, 1, NULL, N'0x0006', N'e3f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'de', N'Deutsch', N'Deutsch', NULL, 1, NULL, N'0x0007', N'e4f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'el', N'Griechisch', N'Griechisch', NULL, 1, NULL, N'0x0008', N'e5f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'en', N'Englisch', N'Englisch', NULL, 1, NULL, N'0x0009', N'e6f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'es', N'Spanisch', N'Spanisch', NULL, 1, NULL, N'0x000A', N'e7f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'et', N'Estnisch', N'Estnisch', NULL, 1, NULL, N'0x0025', N'e8f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'eu', N'Baskisch', N'Baskisch', NULL, 1, NULL, N'0x002D', N'e9f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'fa', N'Farsi', N'Farsi', NULL, 1, NULL, N'0x0029', N'eaf9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'fi', N'Finnisch', N'Finnisch', NULL, 1, NULL, N'0x000B', N'ebf9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'fo', N'Färingisch', N'Färingisch', NULL, 1, NULL, N'0x0038', N'ecf9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'fr', N'Französisch', N'Französisch', NULL, 1, NULL, N'0x000C', N'edf9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'gl', N'Galizisch', N'Galizisch', NULL, 1, NULL, N'0x0056', N'eef9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'gu', N'Gujarati', N'Gujarati', NULL, 1, NULL, N'0x0047', N'eff9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'he', N'Hebräisch', N'Hebräisch', NULL, 1, NULL, N'0x000D', N'f0f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'hi', N'Hindi', N'Hindi', NULL, 1, NULL, N'0x0039', N'f1f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'hr', N'Kroatisch', N'Kroatisch', NULL, 1, NULL, N'0x001A', N'f2f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'hu', N'Ungarisch', N'Ungarisch', NULL, 1, NULL, N'0x000E', N'f3f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'hy', N'Armenisch', N'Armenisch', NULL, 1, NULL, N'0x002B', N'f4f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'id', N'Indonesisch', N'Indonesisch', NULL, 1, NULL, N'0x0021', N'f5f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'is', N'Isländisch', N'Isländisch', NULL, 1, NULL, N'0x000F', N'f6f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'it', N'Italienisch', N'Italienisch', NULL, 1, NULL, N'0x0010', N'f7f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'ja', N'Japanisch', N'Japanisch', NULL, 1, NULL, N'0x0011', N'f8f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'ka', N'Georgisch', N'Georgisch', NULL, 1, NULL, N'0x0037', N'f9f9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'kk', N'Kasachisch', N'Kasachisch', NULL, 1, NULL, N'0x003F', N'faf9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'kn', N'Kannada', N'Kannada', NULL, 1, NULL, N'0x004B', N'fbf9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'ko', N'Koreanisch', N'Koreanisch', NULL, 1, NULL, N'0x0012', N'fcf9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'ky', N'Kirgisisch', N'Kirgisisch', NULL, 1, NULL, N'0x0040', N'fdf9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'lt', N'Litauisch', N'Litauisch', NULL, 1, NULL, N'0x0027', N'fef9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'lv', N'Lettisch', N'Lettisch', NULL, 1, NULL, N'0x0026', N'fff9403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'mk', N'Mazedonisch', N'Mazedonisch', NULL, 1, NULL, N'0x002F', N'00fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'mn', N'Mongolisch', N'Mongolisch', NULL, 1, NULL, N'0x0050', N'01fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'mr', N'Marathi', N'Marathi', NULL, 1, NULL, N'0x004E', N'02fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'ms', N'Malaiisch', N'Malaiisch', NULL, 1, NULL, N'0x003E', N'03fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'nl', N'Niederländisch', N'Niederländisch', NULL, 1, NULL, N'0x0013', N'04fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'no', N'Norwegisch', N'Norwegisch', NULL, 1, NULL, N'0x0014', N'05fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'pa', N'Punjabi', N'Punjabi', NULL, 1, NULL, N'0x0046', N'06fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'pl', N'Polnisch', N'Polnisch', NULL, 1, NULL, N'0x0015', N'07fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'pt', N'Portugiesisch', N'Portugiesisch', NULL, 1, NULL, N'0x0016', N'08fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'ro', N'Rumänisch', N'Rumänisch', NULL, 1, NULL, N'0x0018', N'09fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'ru', N'Russisch', N'Russisch', NULL, 1, NULL, N'0x0019', N'0afa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'sa', N'Sanskrit', N'Sanskrit', NULL, 1, NULL, N'0x004F', N'0bfa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'sk', N'Slowakisch', N'Slowakisch', NULL, 1, NULL, N'0x001B', N'0cfa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'sl', N'Slowenisch', N'Slowenisch', NULL, 1, NULL, N'0x0024', N'0dfa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'sq', N'Albanisch', N'Albanisch', NULL, 1, NULL, N'0x001C', N'0efa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'sv', N'Schwedisch', N'Schwedisch', NULL, 1, NULL, N'0x001D', N'0ffa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'sw', N'Swahili', N'Swahili', NULL, 1, NULL, N'0x0041', N'10fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'ta', N'Tamil', N'Tamil', NULL, 1, NULL, N'0x0049', N'11fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'te', N'Telugu', N'Telugu', NULL, 1, NULL, N'0x004A', N'12fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'th', N'Thai', N'Thai', NULL, 1, NULL, N'0x001E', N'13fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'tr', N'Türkisch', N'Türkisch', NULL, 1, NULL, N'0x001F', N'14fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'tt', N'Tatarisch', N'Tatarisch', NULL, 1, NULL, N'0x0044', N'15fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'uk', N'Ukrainisch', N'Ukrainisch', NULL, 1, NULL, N'0x0022', N'16fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'ur', N'Urdu', N'Urdu', NULL, 1, NULL, N'0x0020', N'17fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'uz', N'Usbekisch', N'Usbekisch', NULL, 1, NULL, N'0x0043', N'18fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LanguageCode_Enum] ([Code], [Description], [DisplayText], [DisplayOrder], [DisplayEnable], [ParentCode], [InternalNotes], [RowGUID]) VALUES (N'vi', N'Vietnamesisch', N'Vietnamesisch', NULL, 1, NULL, N'0x002A', N'19fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (1, NULL, N'Top50 (deutsche Landesvermessung)', NULL, NULL, N'Top50', N'Top50 (deutsche Landesvermessung)', 1, 400, N'Top50 (deutsche Landesvermessung)', N'Place', NULL, N'coordinates', NULL, N'1afa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (2, 9, N'Gauss-Krüger coordinates', NULL, NULL, N'GK', N'Gauss-Krüger coordinates', 1, 120, N'Gauss-Krüger coordinates', N'R', N'R', N'H', N'H', N'1bfa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (3, NULL, N'MTB (A, CH, D)', NULL, NULL, N'MTB', N'MTB (A, CH, D)', 1, 300, N'Messtischblatt (MTB) / TK25 (used in A, CH, D)', N'MTB', N'Messtischblatt', N'Quadrant', N'Quadrant', N'1cfa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (4, NULL, N'Altitude (mNN)', NULL, N'm NN', N'Altitude', N'Altitude (mNN)', 1, 200, N'Altitude above sea level (mNN)', N'Alt.from', N'Altitude from', N'Alt.to', N'Altitude to', N'1dfa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (5, NULL, N'mNN (barometric)', NULL, N'm NN', N'Altitude', N'mNN (barometric)', 0, 210, N'mNN (barometric)', N'Alt.from', N'Altitude from', N'Alt.to', N'Altitude to', N'1efa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (6, 9, N'Greenwich Coordinates', NULL, NULL, N'Coordinates', N'Greenwich Coordinates', 1, 110, N'Greenwich Coordinates', N'Long. (EW)', N'Longitude (EW)', N'Lat. (NS)', N'Latitude (NS)', N'1ffa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (7, NULL, N'Named area (DiversityGazetteer)', NULL, NULL, N'Gazetteer', N'Named area (DiversityGazetteers)', 1, 10, N'Named area (DiversityGazetteers)', N'Location', N'Location', N'Thes. code', N'Thesaurus code', N'20fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (8, 9, N'Coordinates WGS84', NULL, NULL, N'Coordinates', N'Coord. WGS84', 1, 130, N'Coordinates of the World Geodetic System 1984', N'Long. (EW)', N'Longitude (East-West)', N'Lat. (NS)', N'Latitude (North-South)', N'21fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (9, NULL, N'Coordinates', NULL, NULL, N'Coordinates', N'Coordinates', 1, 100, N'Coordinates', N'EW', N'EW', N'NS', N'NS', N'22fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (10, NULL, N'Exposition', NULL, N'°', N'Exposition', N'Exposition', 1, 600, N'Exposition of e.g. a hillside in relation to the sun', N'Exp. from', N'Exposition from', N'to', N'Exposition to', N'23fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (11, NULL, N'Slope', NULL, N'°', N'Slope', N'Slope', 1, 700, N'Slope or steepness of the surface of e.g. a hillside', N'Slope from', N'Slope from', N'to', N'Slope to', N'24fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (12, 9, N'Coordinates PD', NULL, NULL, N'Coordinates', N'Coord. PD', 1, 131, N'Geographic coordinates based on the Potsdam-Datum using the  Bessel-Ellipsoid', N'Long. (EW)', N'Longitude (EW)', N'Lat. (NS)', N'Latitude (NS)', N'25fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (13, NULL, N'Sampling plot', NULL, NULL, N'SamplingPlot', N'Sampling plot (DiversitySamplingPlots)', 1, 20, N'A sampling plot. May be linked to the module DiversitySamplingPlots', N'Sampling plot', N'The name of the sampling plot. A cached value if the entry is linked to the module DiversitySamplingPlots', N'Link to module', N'The link to the module DiversitySamplingPlots', N'26fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (14, NULL, N'Depth', NULL, N'm', N'Height', N'Depth', 1, 201, N'Depth in meters below the surface of e.g. a water body at which the collection was made', N'Depth from', N'All material collected was at least this deep', N'to', N'All material collected was at most this deep', N'27fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (15, NULL, N'Height', NULL, N'm', N'Height', N'Height', 1, 202, N'Height resp. distance from groundlevel when e.g. located in a tree', N'Height from', N'All material collected was at least at this hight', N'to', N'All material collected was at most at this hight', N'28fa403e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (17, 3, N'ÖK', NULL, NULL, N'MTB', N'ÖK', 1, 305, N'Österreichische Karte, amtliches (topografisches) Kartenwerk Österreichs', N'ÖK', N'Österreichische Karte', N'Quadrant', N'Quadrant', N'309e4e40-4050-e311-892e-001ec9d7ae4b')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (18, 7, N'2. Named area (DiversityGazetteer)', NULL, NULL, N'Gazetteer', N'2. Named area (DiversityGazetteers)', 1, 11, N'2. Named area (DiversityGazetteers)', N'Location', N'Location', N'Thes. code', N'Thesaurus code', N'1f7ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (19, 7, N'3. Named area (DiversityGazetteer)', NULL, NULL, N'Gazetteer', N'3. Named area (DiversityGazetteers)', 1, 12, N'3. Named area (DiversityGazetteers)', N'Location', N'Location', N'Thes. code', N'Thesaurus code', N'237ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (20, 7, N'4. Named area (DiversityGazetteer)', NULL, NULL, N'Gazetteer', N'4. Named area (DiversityGazetteers)', 1, 13, N'4. Named area (DiversityGazetteers)', N'Location', N'Location', N'Thes. code', N'Thesaurus code', N'277ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[LocalisationSystem] ([LocalisationSystemID], [LocalisationSystemParentID], [LocalisationSystemName], [DefaultAccuracyOfLocalisation], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnable], [DisplayOrder], [Description], [DisplayTextLocation1], [DescriptionLocation1], [DisplayTextLocation2], [DescriptionLocation2], [RowGUID]) VALUES (21, 7, N'5. Named area (DiversityGazetteer)', NULL, NULL, N'Gazetteer', N'5. Named area (DiversityGazetteers)', 1, 14, N'5. Named area (DiversityGazetteers)', N'Location', N'Location', N'Thes. code', N'Thesaurus code', N'2b7ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[ProjectProxy] ([ProjectID], [Project], [ImageDescriptionTemplate], [ProjectURI], [CreateArchive], [ArchiveProtocol], [StableIdentifierBase], [StableIdentifierTypeID], [RowGUID], [LastChanges]) VALUES (0, N'DiversityWorkbench', NULL, NULL, NULL, NULL, NULL, NULL, N'604ddc82-2659-e011-bf26-001ec9d7ae4b', NULL)
GO
--INSERT [dbo].[ProjectUser] ([LoginName], [ProjectID], [ReadOnly]) VALUES (N'dbo', 0, 0)
--GO
INSERT [dbo].[Property] ([PropertyID], [PropertyParentID], [PropertyName], [DefaultAccuracyOfProperty], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnabled], [DisplayOrder], [Description], [PropertyURI], [RowGUID]) VALUES (1, NULL, N'European Nature Information System (EUNIS)', NULL, NULL, N'Vegetation', N'EUNIS 2003 (European Nature Information System)', 1, NULL, N'European Nature Information System, http://eunis.eea.eu.int/index.jsp', NULL, N'c00d4b3e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[Property] ([PropertyID], [PropertyParentID], [PropertyName], [DefaultAccuracyOfProperty], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnabled], [DisplayOrder], [Description], [PropertyURI], [RowGUID]) VALUES (10, NULL, N'Geographic regions', NULL, NULL, N'Vegetation', N'Geographic regions', 1, NULL, N'Import aus Tabelle Naturraum der Datenbank Mykologie aus Görlitz', NULL, N'c10d4b3e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[Property] ([PropertyID], [PropertyParentID], [PropertyName], [DefaultAccuracyOfProperty], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnabled], [DisplayOrder], [Description], [PropertyURI], [RowGUID]) VALUES (20, NULL, N'Chronostratigraphy', NULL, NULL, N'Stratigraphy', N'Chronostratigraphy', 1, NULL, N'Chronostratigraphie nach Angaben der Bayerischen Staatssammlung für Paläontologie', NULL, N'c20d4b3e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[Property] ([PropertyID], [PropertyParentID], [PropertyName], [DefaultAccuracyOfProperty], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnabled], [DisplayOrder], [Description], [PropertyURI], [RowGUID]) VALUES (30, NULL, N'Lithostratigraphy', NULL, NULL, N'Stratigraphy', N'Lithostratigraphy', 1, NULL, N'Lithostratigraphie nach Angaben der Bayerischen Staatssammlung für Paläontologie', NULL, N'c30d4b3e-2f6d-de11-871c-001ec9d7ae4b')
GO
INSERT [dbo].[Property] ([PropertyID], [PropertyParentID], [PropertyName], [DefaultAccuracyOfProperty], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnabled], [DisplayOrder], [Description], [PropertyURI], [RowGUID]) VALUES (40, NULL, N'Lebensraumtypen (LfU)', NULL, NULL, N'Vegetation', N'Lebensraumtyp (LfU)', 1, NULL, N'Lebensraumtypen (Bayerisches Landesamt für Umwelt)', NULL, N'10945e71-67b9-de11-af2c-001ec9d7ae4b')
GO
INSERT [dbo].[Property] ([PropertyID], [PropertyParentID], [PropertyName], [DefaultAccuracyOfProperty], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnabled], [DisplayOrder], [Description], [PropertyURI], [RowGUID]) VALUES (50, NULL, N'Pflanzengesellschaften', NULL, NULL, N'Vegetation', N'Pflanzengesellschaften', 1, NULL, NULL, NULL, N'30ec98e2-de0c-df11-8314-001ec9d7ae4b')
GO
INSERT [dbo].[Property] ([PropertyID], [PropertyParentID], [PropertyName], [DefaultAccuracyOfProperty], [DefaultMeasurementUnit], [ParsingMethodName], [DisplayText], [DisplayEnabled], [DisplayOrder], [Description], [PropertyURI], [RowGUID]) VALUES (60, NULL, N'Biostratigraphy', NULL, NULL, N'Stratigraphy', N'Biostratigraphy', 1, NULL, N'', NULL, N'2f7ae37d-1e4e-e411-80de-c467b81cc279')
GO
INSERT [dbo].[TransactionComment] ([Comment], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Determinavit labels are completely lacking.', CAST(N'2014-09-03T13:40:45.530' AS DateTime), N'dbo', CAST(N'2014-09-03T13:40:45.530' AS DateTime), N'dbo', N'76e58623-5f33-e411-80d9-a9b1a993a97e')
GO
INSERT [dbo].[TransactionComment] ([Comment], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Determinavit labels are partly lacking.', CAST(N'2014-09-03T13:40:45.530' AS DateTime), N'dbo', CAST(N'2014-09-03T13:40:45.530' AS DateTime), N'dbo', N'75e58623-5f33-e411-80d9-a9b1a993a97e')
GO
INSERT [dbo].[TransactionComment] ([Comment], [LogCreatedWhen], [LogCreatedBy], [LogUpdatedWhen], [LogUpdatedBy], [RowGUID]) VALUES (N'Please send a formal request for prolongation should this date be already passed.', CAST(N'2014-09-03T13:40:45.530' AS DateTime), N'dbo', CAST(N'2014-09-03T13:40:45.530' AS DateTime), N'dbo', N'77e58623-5f33-e411-80d9-a9b1a993a97e')
GO
--SET IDENTITY_INSERT [dbo].[UserProxy] ON 
--;
--INSERT [dbo].[UserProxy] ([LoginName], [CombinedNameCache], [CurrentProjectID], [ID]) VALUES (N'dbo', N'Owner of database', 0, 1)
--;
--SET IDENTITY_INSERT [dbo].[UserProxy] OFF
--GO
ALTER TABLE [dbo].[Analysis] ADD  CONSTRAINT [DF_Analysis_OnlyHierarchy]  DEFAULT ((0)) FOR [OnlyHierarchy]
GO
ALTER TABLE [dbo].[Analysis] ADD  CONSTRAINT [DF_Analysis_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[Analysis] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[Analysis] ADD  CONSTRAINT [DF_Analysis_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[Analysis] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[Analysis] ADD  CONSTRAINT [DF__Analysis__RowGUI__29A2D696]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Analysis_log] ADD  CONSTRAINT [DF_Analysis_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[Analysis_log] ADD  CONSTRAINT [DF_Analysis_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[Analysis_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[AnalysisResult] ADD  DEFAULT (suser_sname()) FOR [LogInsertedBy]
GO
ALTER TABLE [dbo].[AnalysisResult] ADD  CONSTRAINT [DF_AnalysisResult_LogInsertedWhen]  DEFAULT (getdate()) FOR [LogInsertedWhen]
GO
ALTER TABLE [dbo].[AnalysisResult] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[AnalysisResult] ADD  CONSTRAINT [DF_AnalysisResult_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[AnalysisResult] ADD  CONSTRAINT [DF_AnalysisResult_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[AnalysisTaxonomicGroup] ADD  CONSTRAINT [DF_AnalysisTaxonomicGroup_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[AnalysisTaxonomicGroup] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[AnalysisTaxonomicGroup] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Annotation] ADD  CONSTRAINT [DF_Annotation_AnnotationType]  DEFAULT (N'Annotation') FOR [AnnotationType]
GO
ALTER TABLE [dbo].[Annotation] ADD  CONSTRAINT [DF_Annotation_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[Annotation] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[Annotation] ADD  CONSTRAINT [DF_Annotation_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[Annotation] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[Annotation] ADD  CONSTRAINT [DF_Annotation_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Annotation_log] ADD  CONSTRAINT [DF_Annotation_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[Annotation_log] ADD  CONSTRAINT [DF_Annotation_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[Annotation_log] ADD  CONSTRAINT [DF_Annotation_Log_LogUser]  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[AnnotationType_Enum] ADD  CONSTRAINT [DF_AnnotationType_Enum_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[ApplicationSearchSelectionStrings] ADD  CONSTRAINT [DF_ApplicationCollSearchSelectionStrings_UserName]  DEFAULT (user_name()) FOR [UserName]
GO
ALTER TABLE [dbo].[ApplicationSearchSelectionStrings] ADD  CONSTRAINT [DF_ApplicationSearchSelectionStrings_ItemTable]  DEFAULT ('TaxonName') FOR [ItemTable]
GO
ALTER TABLE [dbo].[ApplicationSearchSelectionStrings] ADD  CONSTRAINT [DF_ApplicationSearchSelectionStrings_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[ApplicationSearchSelectionStrings] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[ApplicationSearchSelectionStrings] ADD  CONSTRAINT [DF_ApplicationSearchSelectionStrings_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[ApplicationSearchSelectionStrings] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollCircumstances_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollCollectionType_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollDateCategory_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Collection] ADD  CONSTRAINT [DF_Collection_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[Collection] ADD  CONSTRAINT [DF__Collectio__LogCr__25731E56]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[Collection] ADD  CONSTRAINT [DF_Collection_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[Collection] ADD  CONSTRAINT [DF__Collectio__LogUp__2667428F]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[Collection] ADD  CONSTRAINT [DF__Collectio__RowGU__2D73677A]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Collection_log] ADD  CONSTRAINT [DF_Collection_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[Collection_log] ADD  CONSTRAINT [DF_Collection_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[Collection_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionAgent] ADD  CONSTRAINT [DF_CollectionAgent_CollectorsSequence]  DEFAULT (sysdatetime()) FOR [CollectorsSequence]
GO
ALTER TABLE [dbo].[CollectionAgent] ADD  CONSTRAINT [DF_CollectionAgent_LogCreatedWhen_1]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionAgent] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionAgent] ADD  CONSTRAINT [DF_CollectionAgent_LogUpdatedWhen_1]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionAgent] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionAgent] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionAgent_log] ADD  CONSTRAINT [DF_CollectionAgent_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionAgent_log] ADD  CONSTRAINT [DF_CollectionAgent_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionAgent_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionEvent] ADD  CONSTRAINT [DF_CollectionEvent_Version]  DEFAULT ((1)) FOR [Version]
GO
ALTER TABLE [dbo].[CollectionEvent] ADD  CONSTRAINT [DF_CollectionEvent_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionEvent] ADD  CONSTRAINT [DF__Collectio__LogCr__2B2BF7AC]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionEvent] ADD  CONSTRAINT [DF_CollectionEvent_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionEvent] ADD  CONSTRAINT [DF__Collectio__LogUp__2C201BE5]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionEvent] ADD  CONSTRAINT [DF__Collectio__RowGU__2F5BAFEC]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionEvent_log] ADD  CONSTRAINT [DF_CollectionEvent_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionEvent_log] ADD  CONSTRAINT [DF_CollectionEvent_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionEvent_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionEventImage] ADD  CONSTRAINT [DF_CollectionEventImage_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventImage] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionEventImage] ADD  CONSTRAINT [DF_CollectionEventImage_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventImage] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionEventImage] ADD  CONSTRAINT [DF__Collectio__RowGU__304FD425]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionEventImage_log] ADD  CONSTRAINT [DF_CollectionEventImage_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionEventImage_log] ADD  CONSTRAINT [DF_CollectionEventImage_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionEventImage_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionEventLocalisation] ADD  CONSTRAINT [DF_CollectionLocalisation_2_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventLocalisation] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionEventLocalisation] ADD  CONSTRAINT [DF_CollectionLocalisation_2_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventLocalisation] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionEventLocalisation] ADD  CONSTRAINT [DF__Collectio__RowGU__3143F85E]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionEventLocalisation_log] ADD  CONSTRAINT [DF_CollectionEventLocalisation_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionEventLocalisation_log] ADD  CONSTRAINT [DF_CollectionEventLocalisation_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionEventLocalisation_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionEventMethod] ADD  CONSTRAINT [DF__Collectio__Metho__5A70F67A]  DEFAULT ('1') FOR [MethodMarker]
GO
ALTER TABLE [dbo].[CollectionEventMethod] ADD  CONSTRAINT [DF_CollectionEventMethod_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventMethod] ADD  CONSTRAINT [DF__Collectio__LogCr__33C13DAD]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionEventMethod] ADD  CONSTRAINT [DF_CollectionEventMethod_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventMethod] ADD  CONSTRAINT [DF__Collectio__LogUp__34B561E6]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionEventMethod] ADD  CONSTRAINT [DF_CollectionEventMethod_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionEventMethod_log] ADD  CONSTRAINT [DF_CollectionEventMethod_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionEventMethod_log] ADD  CONSTRAINT [DF_CollectionEventMethod_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionEventMethod_log] ADD  CONSTRAINT [DF__Collectio__LogUs__35A9861F]  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionEventParameterValue] ADD  CONSTRAINT [DF__Collectio__Metho__5B651AB3]  DEFAULT ('1') FOR [MethodMarker]
GO
ALTER TABLE [dbo].[CollectionEventParameterValue] ADD  CONSTRAINT [Default_CollectionEventParameterValue_LogInsertedWhen]  DEFAULT (getdate()) FOR [LogInsertedWhen]
GO
ALTER TABLE [dbo].[CollectionEventParameterValue] ADD  CONSTRAINT [Default_CollectionEventParameterValue_LogInsertedBy]  DEFAULT (suser_sname()) FOR [LogInsertedBy]
GO
ALTER TABLE [dbo].[CollectionEventParameterValue] ADD  CONSTRAINT [Default_CollectionEventParameterValue_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventParameterValue] ADD  CONSTRAINT [Default_CollectionEventParameterValue_LogUpdatedBy]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionEventParameterValue] ADD  CONSTRAINT [DF_CollectionEventParameterValue_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionEventParameterValue_log] ADD  CONSTRAINT [DF_CollectionEventParameterValue_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionEventParameterValue_log] ADD  CONSTRAINT [DF_CollectionEventParameterValue_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionEventParameterValue_log] ADD  CONSTRAINT [DF__Collectio__LogUs__369DAA58]  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionEventProperty] ADD  CONSTRAINT [DF_CollectionEventCharacter_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventProperty] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionEventProperty] ADD  CONSTRAINT [DF_CollectionEventCharacter_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventProperty] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionEventProperty] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionEventProperty_log] ADD  CONSTRAINT [DF_CollectionEventProperty_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionEventProperty_log] ADD  CONSTRAINT [DF_CollectionEventProperty_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionEventProperty_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionEventRegulation] ADD  CONSTRAINT [DF_CollectionEventRegulation_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventRegulation] ADD  CONSTRAINT [DF__Collectio__LogCr__1394653D]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionEventRegulation] ADD  CONSTRAINT [DF_CollectionEventRegulation_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventRegulation] ADD  CONSTRAINT [DF__Collectio__LogUp__157CADAF]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionEventRegulation] ADD  CONSTRAINT [DF__Collectio__RowGU__1670D1E8]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionEventRegulation_log] ADD  CONSTRAINT [DF_CollectionEventRegulation_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionEventRegulation_log] ADD  CONSTRAINT [DF_CollectionEventRegulation_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionEventRegulation_log] ADD  CONSTRAINT [DF_CollectionEventRegulation_Log_LogUser]  DEFAULT (user_name()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionEventSeries] ADD  CONSTRAINT [DF_CollectionEventSeries_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventSeries] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionEventSeries] ADD  CONSTRAINT [DF_CollectionEventSeries_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventSeries] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionEventSeries] ADD  CONSTRAINT [DF__Collectio__RowGU__332C40D0]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionEventSeries_log] ADD  CONSTRAINT [DF_CollectionEventSeries_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionEventSeries_log] ADD  CONSTRAINT [DF_CollectionEventSeries_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionEventSeries_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage] ADD  CONSTRAINT [DF_CollectionEventSeriesImage_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage] ADD  CONSTRAINT [DF_CollectionEventSeriesImage_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage] ADD  CONSTRAINT [DF__Collectio__RowGU__34206509]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage_log] ADD  CONSTRAINT [DF_CollectionEventSeriesImage_log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage_log] ADD  CONSTRAINT [DF_CollectionEventSeriesImage_log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionExternalDatasource] ADD  CONSTRAINT [DF_CollectionExternalDatasource_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionExternalDatasource] ADD  CONSTRAINT [DF__Collectio__LogCr__40271492]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionExternalDatasource] ADD  CONSTRAINT [DF_CollectionExternalDatasource_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionExternalDatasource] ADD  CONSTRAINT [DF__Collectio__LogUp__411B38CB]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionExternalDatasource] ADD  CONSTRAINT [DF__Collectio__RowGU__35148942]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionExternalDatasource_log] ADD  CONSTRAINT [DF_CollectionExternalDatasource_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionExternalDatasource_log] ADD  CONSTRAINT [DF_CollectionExternalDatasource_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionExternalDatasource_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionImage] ADD  CONSTRAINT [DF_CollectionImage_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogInsertedWhen]
GO
ALTER TABLE [dbo].[CollectionImage] ADD  DEFAULT (suser_sname()) FOR [LogInsertedBy]
GO
ALTER TABLE [dbo].[CollectionImage] ADD  CONSTRAINT [DF_CollectionImage_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionImage] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionImage] ADD  CONSTRAINT [DF_CollectionImage_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionImage_log] ADD  CONSTRAINT [DF_CollectionImage_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionImage_log] ADD  CONSTRAINT [DF_CollectionImage_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionImage_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionManager] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionProject] ADD  CONSTRAINT [DF_CollectionProject_LogCreatedWhen_1]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionProject] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionProject] ADD  CONSTRAINT [DF_CollectionProject_LogUpdatedWhen_1]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionProject] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionProject] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionProject_log] ADD  CONSTRAINT [DF_CollectionProject_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionProject_log] ADD  CONSTRAINT [DF_CollectionProject_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionProject_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionRequester] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionSpecimen] ADD  CONSTRAINT [DF_CollectionSpecimen_Version]  DEFAULT ((1)) FOR [Version]
GO
ALTER TABLE [dbo].[CollectionSpecimen] ADD  CONSTRAINT [DF_CollectionSpecimen_DataWithholdingReason]  DEFAULT (N'Withhold by default') FOR [DataWithholdingReason]
GO
ALTER TABLE [dbo].[CollectionSpecimen] ADD  CONSTRAINT [DF_CollectionSpecimen_LogCreatedWhen_1]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimen] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimen] ADD  CONSTRAINT [DF_CollectionSpecimen_LogUpdatedWhen_1]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimen] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimen] ADD  CONSTRAINT [DF__Collectio__RowGU__38E51A26]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionSpecimen_log] ADD  CONSTRAINT [DF_CollectionSpecimen_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionSpecimen_log] ADD  CONSTRAINT [DF_CollectionSpecimen_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionSpecimen_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionSpecimenImage] ADD  CONSTRAINT [DF_CollectionSpecimenImage_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenImage] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenImage] ADD  CONSTRAINT [DF_CollectionSpecimenImage_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenImage] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenImage] ADD  CONSTRAINT [DF__Collectio__RowGU__39D93E5F]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionSpecimenImage_log] ADD  CONSTRAINT [DF_CollectionSpecimenImage_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionSpecimenImage_log] ADD  CONSTRAINT [DF_CollectionSpecimenImage_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionSpecimenImage_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionSpecimenImageProperty] ADD  CONSTRAINT [DF_CollectionSpecimenImageProperty_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenImageProperty] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenImageProperty] ADD  CONSTRAINT [DF_CollectionSpecimenImageProperty_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenImageProperty] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenImageProperty] ADD  CONSTRAINT [DF__Collectio__RowGU__206E72C7]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionSpecimenImageProperty_log] ADD  CONSTRAINT [DF_CollectionSpecimenImageProperty_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionSpecimenImageProperty_log] ADD  CONSTRAINT [DF_CollectionSpecimenImageProperty_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionSpecimenImageProperty_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionSpecimenPart] ADD  CONSTRAINT [DF_CollectionSpecimenPart_MaterialCategory]  DEFAULT (N'specimen') FOR [MaterialCategory]
GO
ALTER TABLE [dbo].[CollectionSpecimenPart] ADD  CONSTRAINT [DF_CollectionSpecimenPart_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenPart] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenPart] ADD  CONSTRAINT [DF_CollectionSpecimenPart_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenPart] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenPart] ADD  CONSTRAINT [DF__Collectio__RowGU__3ACD6298]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionSpecimenPart_log] ADD  CONSTRAINT [DF_CollectionSpecimenPart_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionSpecimenPart_log] ADD  CONSTRAINT [DF_CollectionSpecimenPart_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionSpecimenPart_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartDescription] ADD  CONSTRAINT [DF_CollectionSpecimenPartDescription_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartDescription] ADD  CONSTRAINT [DF_CollectionSpecimenPartDescription_LogCreatedBy]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartDescription] ADD  CONSTRAINT [DF_CollectionSpecimenPartDescription_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartDescription] ADD  CONSTRAINT [DF_CollectionSpecimenPartDescription_LogUpdatedBy]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartDescription] ADD  CONSTRAINT [DF_CollectionSpecimenPartDescription_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartDescription_log] ADD  CONSTRAINT [DF_CollectionSpecimenPartDescription_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartDescription_log] ADD  CONSTRAINT [DF_CollectionSpecimenPartDescription_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartDescription_log] ADD  CONSTRAINT [DF_CollectionSpecimenPartDescription_Log_LogUser]  DEFAULT (user_name()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation] ADD  CONSTRAINT [DF_CollectionSpecimenPartRegulation_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation] ADD  CONSTRAINT [DF_CollectionSpecimenPartRegulation_LogCreatedBy]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation] ADD  CONSTRAINT [DF_CollectionSpecimenPartRegulation_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation] ADD  CONSTRAINT [DF_CollectionSpecimenPartRegulation_LogUpdatedBy]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation] ADD  CONSTRAINT [DF_CollectionSpecimenPartRegulation_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation_log] ADD  CONSTRAINT [DF_CollectionSpecimenPartRegulation_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation_log] ADD  CONSTRAINT [DF_CollectionSpecimenPartRegulation_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation_log] ADD  CONSTRAINT [DF_CollectionSpecimenPartRegulation_Log_LogUser]  DEFAULT (user_name()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing] ADD  CONSTRAINT [DF_CollectionSpecimenProcessing_ProcessingID]  DEFAULT ((1)) FOR [ProcessingID]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing] ADD  CONSTRAINT [DF_CollectionSpecimenPreparation_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing] ADD  CONSTRAINT [DF__Collectio__LogCr__542E0D3F]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing] ADD  CONSTRAINT [DF_CollectionSpecimenPreparation_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing] ADD  CONSTRAINT [DF__Collectio__LogUp__55223178]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing] ADD  CONSTRAINT [DF__Collectio__RowGU__3BC186D1]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing_log] ADD  CONSTRAINT [DF_CollectionSpecimenProcessing_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing_log] ADD  CONSTRAINT [DF_CollectionSpecimenProcessing_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod] ADD  CONSTRAINT [DF__Collectio__Metho__52CFD4B2]  DEFAULT ('1') FOR [MethodMarker]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethod_ProcessingID]  DEFAULT ((1)) FOR [ProcessingID]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethod_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethod_LogCreatedBy]  DEFAULT (user_name()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethod_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethod_LogUpdatedBy]  DEFAULT (user_name()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethod_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod_log] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethod_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod_log] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethod_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod_log] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethod_Log_LogUser]  DEFAULT (user_name()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethodParameter_ProcessingID]  DEFAULT ((1)) FOR [ProcessingID]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter] ADD  CONSTRAINT [DF__Collectio__Metho__53C3F8EB]  DEFAULT ('1') FOR [MethodMarker]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethodParameter_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethodParameter_LogCreatedBy]  DEFAULT (user_name()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethodParameter_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethodParameter_LogUpdatedBy]  DEFAULT (user_name()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethodParameter_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter_log] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethodParameter_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter_log] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethodParameter_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter_log] ADD  CONSTRAINT [DF_CollectionSpecimenProcessingMethodParameter_Log_LogUser]  DEFAULT (user_name()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionSpecimenReference] ADD  CONSTRAINT [DF_CollectionSpecimenReference_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenReference] ADD  CONSTRAINT [DF__Collectio__LogCr__0F6ECE9E]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenReference] ADD  CONSTRAINT [DF_CollectionSpecimenReference_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenReference] ADD  CONSTRAINT [DF__Collectio__LogUp__11571710]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenReference] ADD  CONSTRAINT [DF__Collectio__RowGU__124B3B49]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionSpecimenReference_log] ADD  CONSTRAINT [DF_CollectionSpecimenReference_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionSpecimenReference_log] ADD  CONSTRAINT [DF_CollectionSpecimenReference_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionSpecimenReference_log] ADD  CONSTRAINT [DF_CollectionSpecimenReference_Log_LogUser]  DEFAULT (user_name()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] ADD  CONSTRAINT [DF_CollectionSpecimenRelation_IsInternalRelationCache]  DEFAULT ((1)) FOR [IsInternalRelationCache]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] ADD  CONSTRAINT [DF_CollectionSpecimenRelation_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] ADD  CONSTRAINT [DF_CollectionSpecimenRelation_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] ADD  CONSTRAINT [DF__Collectio__RowGU__3CB5AB0A]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation_log] ADD  CONSTRAINT [DF_CollectionSpecimenRelation_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation_log] ADD  CONSTRAINT [DF_CollectionSpecimenRelation_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction] ADD  CONSTRAINT [DF__Collectio__LogIn__59E6E695]  DEFAULT (suser_sname()) FOR [LogInsertedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction] ADD  CONSTRAINT [DF_CollectionSpecimenTransaction_LogInsertedWhen]  DEFAULT (getdate()) FOR [LogInsertedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction] ADD  CONSTRAINT [DF__Collectio__LogUp__5ADB0ACE]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction] ADD  CONSTRAINT [DF_CollectionSpecimenTransaction_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction] ADD  CONSTRAINT [DF__Collectio__RowGU__3DA9CF43]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction_log] ADD  CONSTRAINT [DF_CollectionSpecimenTransaction_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction_log] ADD  CONSTRAINT [DF_CollectionSpecimenTransaction_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[CollectionUser] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollEventDateCategory_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollEventImageType_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollEventSeriesImageType_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollExchangeType_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollIdentificationCategory_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollIdentificationDateCategory_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollIdentificationQualifier_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollLabelTranscriptionState_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollLabelType_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollMaterialCategory_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollRetrievalType_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollSpecimenImageType_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollSpecimenRelationType_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollTaxonomicGroup_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollTransactionType_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollTypeStatus_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[CollUnitRelationType_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Entity] ADD  CONSTRAINT [DF_Entity_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[Entity] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[Entity] ADD  CONSTRAINT [DF_Entity_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[Entity] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[Entity] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[EntityAccessibility_Enum] ADD  CONSTRAINT [DF_EntityAccessibility_Enum_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[EntityContext_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[EntityDetermination_Enum] ADD  CONSTRAINT [DF_EntityDetermination_Enum_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[EntityLanguageCode_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[EntityRepresentation] ADD  CONSTRAINT [DF_EntityRepresentation_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[EntityRepresentation] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[EntityRepresentation] ADD  CONSTRAINT [DF_EntityRepresentation_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[EntityRepresentation] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[EntityRepresentation] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[EntityUsage] ADD  CONSTRAINT [DF_EntityUsage_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[EntityUsage] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[EntityUsage] ADD  CONSTRAINT [DF_EntityUsage_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[EntityUsage] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[EntityUsage] ADD  CONSTRAINT [DF__EntityUsa__RowGU__2A61F0A5]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[EntityUsage_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[EntityVisibility_Enum] ADD  CONSTRAINT [DF_EntityVisibility_Enum_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[ExternalIdentifier] ADD  CONSTRAINT [DF_ExternalIdentifier_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[ExternalIdentifier] ADD  CONSTRAINT [DF_ExternalIdentifier_LogCreatedBy]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[ExternalIdentifier] ADD  CONSTRAINT [DF_ExternalIdentifier_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[ExternalIdentifier] ADD  CONSTRAINT [DF_ExternalIdentifier_LogUpdatedBy]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[ExternalIdentifier] ADD  CONSTRAINT [DF_ExternalIdentifier_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[ExternalIdentifier_log] ADD  CONSTRAINT [DF_ExternalIdentifier_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[ExternalIdentifier_log] ADD  CONSTRAINT [DF_ExternalIdentifier_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[ExternalIdentifier_log] ADD  CONSTRAINT [DF_ExternalIdentifier_Log_LogUser]  DEFAULT (user_name()) FOR [LogUser]
GO
ALTER TABLE [dbo].[ExternalIdentifierType] ADD  CONSTRAINT [DF_ExternalIdentifierType_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[ExternalIdentifierType] ADD  CONSTRAINT [DF_ExternalIdentifierType_LogCreatedBy]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[ExternalIdentifierType] ADD  CONSTRAINT [DF_ExternalIdentifierType_LogUpdatedWhen_1]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[ExternalIdentifierType] ADD  CONSTRAINT [DF_ExternalIdentifierType_LogUpdatedBy_1]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[ExternalIdentifierType] ADD  CONSTRAINT [DF_ExternalIdentifierType_RowGUID]  DEFAULT (newid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[ExternalIdentifierType_log] ADD  CONSTRAINT [DF_ExternalIdentifierType_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[ExternalIdentifierType_log] ADD  CONSTRAINT [DF_ExternalIdentifierType_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[ExternalIdentifierType_log] ADD  CONSTRAINT [DF_ExternalIdentifierType_Log_LogUser]  DEFAULT (user_name()) FOR [LogUser]
GO
ALTER TABLE [dbo].[ExternalRequestCredentials] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Identification] ADD  CONSTRAINT [DF_Identification_IdentificationSequ]  DEFAULT ((1)) FOR [IdentificationSequence]
GO
ALTER TABLE [dbo].[Identification] ADD  CONSTRAINT [DF_Identification_IdentificationSequence]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[Identification] ADD  CONSTRAINT [DF__Identific__LogCr__627C2C96]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[Identification] ADD  CONSTRAINT [DF_Identification_LogChangedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[Identification] ADD  CONSTRAINT [DF__Identific__LogUp__637050CF]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[Identification] ADD  CONSTRAINT [DF__Identific__RowGU__4ED45B45]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Identification_log] ADD  CONSTRAINT [DF_Identification_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[Identification_log] ADD  CONSTRAINT [DF_Identification_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[Identification_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[IdentificationUnit] ADD  CONSTRAINT [DF_IdentificationUnit_OnlyObserved]  DEFAULT ((0)) FOR [OnlyObserved]
GO
ALTER TABLE [dbo].[IdentificationUnit] ADD  CONSTRAINT [DF_IdentificationUnit_DisplayOrder]  DEFAULT ((1)) FOR [DisplayOrder]
GO
ALTER TABLE [dbo].[IdentificationUnit] ADD  CONSTRAINT [DF_IdentificationUnit_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[IdentificationUnit] ADD  CONSTRAINT [DF__Identific__LogCr__65589941]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[IdentificationUnit] ADD  CONSTRAINT [DF_IdentificationUnit_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[IdentificationUnit] ADD  CONSTRAINT [DF__Identific__LogUp__664CBD7A]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[IdentificationUnit] ADD  CONSTRAINT [DF__Identific__RowGU__4FC87F7E]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[IdentificationUnit_log] ADD  CONSTRAINT [DF_IdentificationUnit_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[IdentificationUnit_log] ADD  CONSTRAINT [DF_IdentificationUnit_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[IdentificationUnit_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis] ADD  CONSTRAINT [DF_IdentificationUnitAnalysis_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis] ADD  CONSTRAINT [DF_IdentificationUnitAnalysis_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis_log] ADD  CONSTRAINT [DF_IdentificationUnitAnalysis_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis_log] ADD  CONSTRAINT [DF_IdentificationUnitAnalysis_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod] ADD  CONSTRAINT [DF__Identific__Metho__4B2EB2EA]  DEFAULT ('1') FOR [MethodMarker]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethod_AnalysisID]  DEFAULT ((1)) FOR [AnalysisID]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethod_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod] ADD  CONSTRAINT [DF__Identific__LogCr__6B117297]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethod_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod] ADD  CONSTRAINT [DF__Identific__LogUp__6C0596D0]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethod_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod_log] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethod_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod_log] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethod_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod_log] ADD  CONSTRAINT [DF__Identific__LogUs__6CF9BB09]  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethodParameter_AnalysisID]  DEFAULT ((1)) FOR [AnalysisID]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter] ADD  CONSTRAINT [DF__Identific__Metho__4C22D723]  DEFAULT ('1') FOR [MethodMarker]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethodParameter_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethodParameter_LogCreatedBy]  DEFAULT (user_name()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethodParameter_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethodParameter_LogUpdatedBy]  DEFAULT (user_name()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethodParameter_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter_log] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethodParameter_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter_log] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethodParameter_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter_log] ADD  CONSTRAINT [DF_IdentificationUnitAnalysisMethodParameter_Log_LogUser]  DEFAULT (user_name()) FOR [LogUser]
GO
ALTER TABLE [dbo].[IdentificationUnitGeoAnalysis] ADD  CONSTRAINT [DF_IdentificationUnitGeoAnalysis_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[IdentificationUnitGeoAnalysis_log] ADD  CONSTRAINT [DF_IdentificationUnitGeoAnalysis_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[IdentificationUnitGeoAnalysis_log] ADD  CONSTRAINT [DF_IdentificationUnitGeoAnalysis_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[IdentificationUnitGeoAnalysis_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[IdentificationUnitInPart] ADD  CONSTRAINT [DF_IdentificationUnitInPart_DisplayOrder]  DEFAULT ((1)) FOR [DisplayOrder]
GO
ALTER TABLE [dbo].[IdentificationUnitInPart] ADD  DEFAULT (suser_sname()) FOR [LogInsertedBy]
GO
ALTER TABLE [dbo].[IdentificationUnitInPart] ADD  CONSTRAINT [DF_IdentificationUnitInPart_LogInsertedWhen]  DEFAULT (getdate()) FOR [LogInsertedWhen]
GO
ALTER TABLE [dbo].[IdentificationUnitInPart] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[IdentificationUnitInPart] ADD  CONSTRAINT [DF_IdentificationUnitInPart_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[IdentificationUnitInPart] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[IdentificationUnitInPart_log] ADD  CONSTRAINT [DF_IdentificationUnitInPart_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[IdentificationUnitInPart_log] ADD  CONSTRAINT [DF_IdentificationUnitInPart_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[IdentificationUnitInPart_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[LanguageCode_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[LocalisationSystem] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[MeasurementUnit_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Method] ADD  CONSTRAINT [DF_Method_OnlyHierarchy]  DEFAULT ((0)) FOR [OnlyHierarchy]
GO
ALTER TABLE [dbo].[Method] ADD  CONSTRAINT [DF_Method_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[Method] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[Method] ADD  CONSTRAINT [DF_Method_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[Method] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[Method] ADD  CONSTRAINT [DF_Method_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Method_log] ADD  CONSTRAINT [DF_Method_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[Method_log] ADD  CONSTRAINT [DF_Method_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[Method_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[MethodForAnalysis] ADD  CONSTRAINT [DF_MethodForAnalysis_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[MethodForAnalysis] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[MethodForAnalysis] ADD  CONSTRAINT [DF_MethodForAnalysis_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[MethodForAnalysis] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[MethodForAnalysis] ADD  CONSTRAINT [DF_MethodForAnalysis_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[MethodForProcessing] ADD  CONSTRAINT [DF_MethodForProcessing_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[MethodForProcessing] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[MethodForProcessing] ADD  CONSTRAINT [DF_MethodForProcessing_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[MethodForProcessing] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[MethodForProcessing] ADD  CONSTRAINT [DF_MethodForProcessing_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Parameter] ADD  CONSTRAINT [DF_Parameter_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[Parameter] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[Parameter] ADD  CONSTRAINT [DF_Parameter_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[Parameter] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[Parameter] ADD  CONSTRAINT [DF_Parameter_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Parameter_log] ADD  CONSTRAINT [DF_Parameter_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[Parameter_log] ADD  CONSTRAINT [DF_Parameter_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[Parameter_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[ParameterValue_Enum] ADD  CONSTRAINT [DF_ParameterValue_Enum_LogCreatedBy]  DEFAULT (user_name()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[ParameterValue_Enum] ADD  CONSTRAINT [DF_ParameterValue_Enum_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[ParameterValue_Enum] ADD  CONSTRAINT [DF_ParameterValue_Enum_LogUpdatedBy]  DEFAULT (user_name()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[ParameterValue_Enum] ADD  CONSTRAINT [DF_ParameterValue_Enum_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[ParameterValue_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[ParameterValue_Enum_log] ADD  CONSTRAINT [DF_ParameterValue_Enum_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[ParameterValue_Enum_log] ADD  CONSTRAINT [DF_ParameterValue_Enum_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[ParameterValue_Enum_log] ADD  CONSTRAINT [DF_ParameterValue_Enum_Log_LogUser]  DEFAULT (user_name()) FOR [LogUser]
GO
ALTER TABLE [dbo].[Processing] ADD  CONSTRAINT [DF_Processing_OnlyHierarchy]  DEFAULT ((0)) FOR [OnlyHierarchy]
GO
ALTER TABLE [dbo].[Processing] ADD  CONSTRAINT [DF_CollectionProcessing_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[Processing] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[Processing] ADD  CONSTRAINT [DF_CollectionProcessing_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[Processing] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[Processing] ADD  CONSTRAINT [DF__Processin__RowGU__558158D4]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Processing_log] ADD  CONSTRAINT [DF_Processing_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[Processing_log] ADD  CONSTRAINT [DF_Processing_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[Processing_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[ProcessingMaterialCategory] ADD  CONSTRAINT [DF_ProcessingMaterialCategory_ProcessingID]  DEFAULT ((1)) FOR [ProcessingID]
GO
ALTER TABLE [dbo].[ProcessingMaterialCategory] ADD  CONSTRAINT [DF_ProcessingMaterialCategory_MaterialCategory]  DEFAULT (N'specimen') FOR [MaterialCategory]
GO
ALTER TABLE [dbo].[ProcessingMaterialCategory] ADD  CONSTRAINT [DF_ProcessingMaterialCategory_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[ProcessingMaterialCategory] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[ProcessingMaterialCategory] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[ProjectAnalysis] ADD  CONSTRAINT [DF_ProjectAnalysis_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[ProjectAnalysis] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[ProjectAnalysis] ADD  CONSTRAINT [DF_ProjectAnalysis_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[ProjectAnalysis] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[ProjectAnalysis] ADD  CONSTRAINT [DF_ProjectAnalysis_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[ProjectProcessing] ADD  CONSTRAINT [DF_ProjectProcessing_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[ProjectProcessing] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[ProjectProcessing] ADD  CONSTRAINT [DF_ProjectProcessing_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[ProjectProcessing] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[ProjectProcessing] ADD  CONSTRAINT [DF_ProjectProcessing_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[ProjectProxy] ADD  CONSTRAINT [DF__ProjectPr__RowGU__5769A146]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[ProjectUser] ADD  CONSTRAINT [DF_ProjectUser_ReadOnly]  DEFAULT ((0)) FOR [ReadOnly]
GO
if (SELECT object_definition(default_object_id) AS definition FROM   sys.columns WHERE  name ='RowGUID' AND    object_id = object_id('dbo.ProjectUser')) IS NULL
BEGIN TRY
ALTER TABLE [dbo].[ProjectUser] ADD  CONSTRAINT [DF_ProjectUser_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
END TRY
BEGIN CATCH
END CATCH
GO
-- Verschoben - erst Default, dann insert
INSERT [dbo].[ProjectUser] ([LoginName], [ProjectID], [ReadOnly]) VALUES (N'dbo', 0, 0)
GO

ALTER TABLE [dbo].[Property] ADD  CONSTRAINT [DF_Property_DisplayEnabled]  DEFAULT ((1)) FOR [DisplayEnabled]
GO
ALTER TABLE [dbo].[Property] ADD  CONSTRAINT [DF__Property__RowGUI__5951E9B8]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Regulation] ADD  CONSTRAINT [DF__Regulatio__Hiera__2805723E]  DEFAULT ((0)) FOR [HierarchyOnly]
GO
ALTER TABLE [dbo].[Regulation] ADD  CONSTRAINT [DF_Regulation_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[Regulation] ADD  CONSTRAINT [DF_Regulation_LogCreatedBy]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[Regulation] ADD  CONSTRAINT [DF_Regulation_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[Regulation] ADD  CONSTRAINT [DF_Regulation_LogUpdatedBy]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[Regulation] ADD  CONSTRAINT [DF_Regulation_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Regulation_log] ADD  CONSTRAINT [DF_Regulation_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[Regulation_log] ADD  CONSTRAINT [DF_Regulation_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[Regulation_log] ADD  CONSTRAINT [DF_Regulation_Log_LogUser]  DEFAULT (user_name()) FOR [LogUser]
GO
ALTER TABLE [dbo].[RegulationType_Enum] ADD  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[ReplicationPublisher] ADD  CONSTRAINT [DF_ReplicationPublisher_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[ReplicationPublisher] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[ReplicationPublisher] ADD  CONSTRAINT [DF_ReplicationPublisher_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[ReplicationPublisher] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[Transaction] ADD  CONSTRAINT [DF_Table_1_ExchangeType]  DEFAULT (N'exchange') FOR [TransactionType]
GO
ALTER TABLE [dbo].[Transaction] ADD  CONSTRAINT [DF_Transaction_MaterialDescription]  DEFAULT ('') FOR [MaterialDescription]
GO
ALTER TABLE [dbo].[Transaction] ADD  CONSTRAINT [DF_Transaction_MaterialCategory]  DEFAULT (N'specimen') FOR [MaterialCategory]
GO
ALTER TABLE [dbo].[Transaction] ADD  CONSTRAINT [DF_Transaction_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[Transaction] ADD  CONSTRAINT [DF_Transaction_LogCreatedBy]  DEFAULT (user_name()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[Transaction] ADD  CONSTRAINT [DF_Transaction_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[Transaction] ADD  CONSTRAINT [DF_Transaction_LogUpdatedBy]  DEFAULT (user_name()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[Transaction] ADD  CONSTRAINT [DF__Transacti__RowGU__5A460DF1]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[Transaction_log] ADD  CONSTRAINT [DF_Transaction_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[Transaction_log] ADD  CONSTRAINT [DF_Transaction_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[Transaction_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[TransactionAgent] ADD  CONSTRAINT [DF_TransactionAgent_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[TransactionAgent] ADD  CONSTRAINT [DF_TransactionAgent_LogCreatedBy]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[TransactionAgent] ADD  CONSTRAINT [DF_TransactionAgent_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[TransactionAgent] ADD  CONSTRAINT [DF_TransactionAgent_LogUpdatedBy]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[TransactionAgent] ADD  CONSTRAINT [DF_TransactionAgent_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[TransactionAgent_log] ADD  CONSTRAINT [DF_TransactionAgent_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[TransactionAgent_log] ADD  CONSTRAINT [DF_TransactionAgent_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[TransactionAgent_log] ADD  CONSTRAINT [DF_TransactionAgent_Log_LogUser]  DEFAULT (user_name()) FOR [LogUser]
GO
ALTER TABLE [dbo].[TransactionComment] ADD  CONSTRAINT [DF_TransactionComment_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[TransactionComment] ADD  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[TransactionComment] ADD  CONSTRAINT [DF_TransactionComment_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[TransactionComment] ADD  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[TransactionComment] ADD  CONSTRAINT [DF_TransactionComment_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[TransactionDocument] ADD  CONSTRAINT [DF_TransactionDocuments_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[TransactionDocument] ADD  CONSTRAINT [DF__Transacti__LogCr__0E5AAED4]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[TransactionDocument] ADD  CONSTRAINT [DF_TransactionDocuments_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[TransactionDocument] ADD  CONSTRAINT [DF__Transacti__LogUp__0F4ED30D]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[TransactionDocument] ADD  CONSTRAINT [DF__Transacti__RowGU__5B3A322A]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[TransactionDocument_log] ADD  CONSTRAINT [DF_TransactionDocument_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[TransactionDocument_log] ADD  CONSTRAINT [DF_TransactionDocument_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[TransactionDocument_log] ADD  DEFAULT (suser_sname()) FOR [LogUser]
GO
ALTER TABLE [dbo].[TransactionPayment] ADD  CONSTRAINT [DF_TransactionPayment_LogCreatedWhen]  DEFAULT (getdate()) FOR [LogCreatedWhen]
GO
ALTER TABLE [dbo].[TransactionPayment] ADD  CONSTRAINT [DF_TransactionPayment_LogCreatedBy]  DEFAULT (suser_sname()) FOR [LogCreatedBy]
GO
ALTER TABLE [dbo].[TransactionPayment] ADD  CONSTRAINT [DF_TransactionPayment_LogUpdatedWhen]  DEFAULT (getdate()) FOR [LogUpdatedWhen]
GO
ALTER TABLE [dbo].[TransactionPayment] ADD  CONSTRAINT [DF_TransactionPayment_LogUpdatedBy]  DEFAULT (suser_sname()) FOR [LogUpdatedBy]
GO
ALTER TABLE [dbo].[TransactionPayment] ADD  CONSTRAINT [DF_TransactionPayment_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO
ALTER TABLE [dbo].[TransactionPayment_log] ADD  CONSTRAINT [DF_TransactionPayment_Log_LogState]  DEFAULT ('U') FOR [LogState]
GO
ALTER TABLE [dbo].[TransactionPayment_log] ADD  CONSTRAINT [DF_TransactionPayment_Log_LogDate]  DEFAULT (getdate()) FOR [LogDate]
GO
ALTER TABLE [dbo].[TransactionPayment_log] ADD  CONSTRAINT [DF_TransactionPayment_Log_LogUser]  DEFAULT (user_name()) FOR [LogUser]
GO
ALTER TABLE [dbo].[UserProxy] ADD  CONSTRAINT [DF_UserProxy_InheritedName]  DEFAULT (NULL) FOR [CombinedNameCache]
GO
ALTER TABLE [dbo].[UserProxy] ADD  CONSTRAINT [DF_UserProxy_RowGUID]  DEFAULT (newsequentialid()) FOR [RowGUID]
GO

--erst nach Eintrag des defaults
SET IDENTITY_INSERT [dbo].[UserProxy] ON 
;
INSERT [dbo].[UserProxy] ([LoginName], [CombinedNameCache], [CurrentProjectID], [ID]) VALUES (N'dbo', N'Owner of database', 0, 1)
;
SET IDENTITY_INSERT [dbo].[UserProxy] OFF
GO

ALTER TABLE [dbo].[Analysis]  WITH NOCHECK ADD  CONSTRAINT [FK_IdentificationAnalysis_IdentificationAnalysis] FOREIGN KEY([AnalysisParentID])
REFERENCES [dbo].[Analysis] ([AnalysisID])
GO
ALTER TABLE [dbo].[Analysis] CHECK CONSTRAINT [FK_IdentificationAnalysis_IdentificationAnalysis]
GO
ALTER TABLE [dbo].[AnalysisResult]  WITH CHECK ADD  CONSTRAINT [FK_AnalysisResult_Analysis] FOREIGN KEY([AnalysisID])
REFERENCES [dbo].[Analysis] ([AnalysisID])
GO
ALTER TABLE [dbo].[AnalysisResult] CHECK CONSTRAINT [FK_AnalysisResult_Analysis]
GO
ALTER TABLE [dbo].[AnalysisTaxonomicGroup]  WITH CHECK ADD  CONSTRAINT [FK_AnalysisTaxonomicGroup_Analysis] FOREIGN KEY([AnalysisID])
REFERENCES [dbo].[Analysis] ([AnalysisID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AnalysisTaxonomicGroup] CHECK CONSTRAINT [FK_AnalysisTaxonomicGroup_Analysis]
GO
ALTER TABLE [dbo].[Annotation]  WITH CHECK ADD  CONSTRAINT [FK_Annotation_Annotation] FOREIGN KEY([ReferencedAnnotationID])
REFERENCES [dbo].[Annotation] ([AnnotationID])
GO
ALTER TABLE [dbo].[Annotation] CHECK CONSTRAINT [FK_Annotation_Annotation]
GO
ALTER TABLE [dbo].[Annotation]  WITH CHECK ADD  CONSTRAINT [FK_Annotation_AnnotationType_Enum] FOREIGN KEY([AnnotationType])
REFERENCES [dbo].[AnnotationType_Enum] ([Code])
GO
ALTER TABLE [dbo].[Annotation] CHECK CONSTRAINT [FK_Annotation_AnnotationType_Enum]
GO
ALTER TABLE [dbo].[CollCircumstances_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollCircumstances_Enum_CollCircumstances_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollCircumstances_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollCircumstances_Enum] CHECK CONSTRAINT [FK_CollCircumstances_Enum_CollCircumstances_Enum]
GO
ALTER TABLE [dbo].[CollCollectionType_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollCollectionType_Enum_CollCollectionType_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollCollectionType_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollCollectionType_Enum] CHECK CONSTRAINT [FK_CollCollectionType_Enum_CollCollectionType_Enum]
GO
ALTER TABLE [dbo].[CollDateCategory_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollDateCategory_Enum_CollDateCategory_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollDateCategory_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollDateCategory_Enum] CHECK CONSTRAINT [FK_CollDateCategory_Enum_CollDateCategory_Enum]
GO
ALTER TABLE [dbo].[Collection]  WITH CHECK ADD  CONSTRAINT [FK_Collection_CollCollectionType_Enum] FOREIGN KEY([Type])
REFERENCES [dbo].[CollCollectionType_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Collection] CHECK CONSTRAINT [FK_Collection_CollCollectionType_Enum]
GO
ALTER TABLE [dbo].[Collection]  WITH NOCHECK ADD  CONSTRAINT [FK_Collection_Collection] FOREIGN KEY([CollectionParentID])
REFERENCES [dbo].[Collection] ([CollectionID])
GO
ALTER TABLE [dbo].[Collection] CHECK CONSTRAINT [FK_Collection_Collection]
GO
ALTER TABLE [dbo].[CollectionAgent]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionAgent_CollectionSpecimen] FOREIGN KEY([CollectionSpecimenID])
REFERENCES [dbo].[CollectionSpecimen] ([CollectionSpecimenID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionAgent] CHECK CONSTRAINT [FK_CollectionAgent_CollectionSpecimen]
GO
ALTER TABLE [dbo].[CollectionEvent]  WITH CHECK ADD  CONSTRAINT [FK_CollectionEvent_CollectionEventSeries] FOREIGN KEY([SeriesID])
REFERENCES [dbo].[CollectionEventSeries] ([SeriesID])
GO
ALTER TABLE [dbo].[CollectionEvent] CHECK CONSTRAINT [FK_CollectionEvent_CollectionEventSeries]
GO
ALTER TABLE [dbo].[CollectionEvent]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionEvent_CollEventDateCategory_Enum] FOREIGN KEY([CollectionDateCategory])
REFERENCES [dbo].[CollEventDateCategory_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CollectionEvent] CHECK CONSTRAINT [FK_CollectionEvent_CollEventDateCategory_Enum]
GO
ALTER TABLE [dbo].[CollectionEventImage]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionEventImage_CollectionEvent] FOREIGN KEY([CollectionEventID])
REFERENCES [dbo].[CollectionEvent] ([CollectionEventID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionEventImage] CHECK CONSTRAINT [FK_CollectionEventImage_CollectionEvent]
GO
ALTER TABLE [dbo].[CollectionEventImage]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionEventImage_CollEventImageType_Enum] FOREIGN KEY([ImageType])
REFERENCES [dbo].[CollEventImageType_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CollectionEventImage] CHECK CONSTRAINT [FK_CollectionEventImage_CollEventImageType_Enum]
GO
ALTER TABLE [dbo].[CollectionEventLocalisation]  WITH CHECK ADD  CONSTRAINT [FK_CollectionLocalisation_CollectionEvent] FOREIGN KEY([CollectionEventID])
REFERENCES [dbo].[CollectionEvent] ([CollectionEventID])
GO
ALTER TABLE [dbo].[CollectionEventLocalisation] CHECK CONSTRAINT [FK_CollectionLocalisation_CollectionEvent]
GO
ALTER TABLE [dbo].[CollectionEventLocalisation]  WITH CHECK ADD  CONSTRAINT [FK_CollectionLocalisation_LocalisationSystem] FOREIGN KEY([LocalisationSystemID])
REFERENCES [dbo].[LocalisationSystem] ([LocalisationSystemID])
GO
ALTER TABLE [dbo].[CollectionEventLocalisation] CHECK CONSTRAINT [FK_CollectionLocalisation_LocalisationSystem]
GO
ALTER TABLE [dbo].[CollectionEventMethod]  WITH CHECK ADD  CONSTRAINT [FK_CollectionEventMethod_CollectionEvent] FOREIGN KEY([CollectionEventID])
REFERENCES [dbo].[CollectionEvent] ([CollectionEventID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionEventMethod] CHECK CONSTRAINT [FK_CollectionEventMethod_CollectionEvent]
GO
ALTER TABLE [dbo].[CollectionEventMethod]  WITH CHECK ADD  CONSTRAINT [FK_CollectionEventMethod_Method] FOREIGN KEY([MethodID])
REFERENCES [dbo].[Method] ([MethodID])
GO
ALTER TABLE [dbo].[CollectionEventMethod] CHECK CONSTRAINT [FK_CollectionEventMethod_Method]
GO
ALTER TABLE [dbo].[CollectionEventParameterValue]  WITH CHECK ADD  CONSTRAINT [FK_CollectionEventParameterValue_CollectionEventMethod] FOREIGN KEY([CollectionEventID], [MethodID], [MethodMarker])
REFERENCES [dbo].[CollectionEventMethod] ([CollectionEventID], [MethodID], [MethodMarker])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionEventParameterValue] CHECK CONSTRAINT [FK_CollectionEventParameterValue_CollectionEventMethod]
GO
ALTER TABLE [dbo].[CollectionEventParameterValue]  WITH CHECK ADD  CONSTRAINT [FK_CollectionEventParameterValue_Parameter] FOREIGN KEY([ParameterID], [MethodID])
REFERENCES [dbo].[Parameter] ([ParameterID], [MethodID])
GO
ALTER TABLE [dbo].[CollectionEventParameterValue] CHECK CONSTRAINT [FK_CollectionEventParameterValue_Parameter]
GO
ALTER TABLE [dbo].[CollectionEventProperty]  WITH CHECK ADD  CONSTRAINT [FK_CollectionEventDescriptor_Descriptor] FOREIGN KEY([PropertyID])
REFERENCES [dbo].[Property] ([PropertyID])
GO
ALTER TABLE [dbo].[CollectionEventProperty] CHECK CONSTRAINT [FK_CollectionEventDescriptor_Descriptor]
GO
ALTER TABLE [dbo].[CollectionEventProperty]  WITH CHECK ADD  CONSTRAINT [FK_CollectionEventProperty_CollectionEvent] FOREIGN KEY([CollectionEventID])
REFERENCES [dbo].[CollectionEvent] ([CollectionEventID])
GO
ALTER TABLE [dbo].[CollectionEventProperty] CHECK CONSTRAINT [FK_CollectionEventProperty_CollectionEvent]
GO
ALTER TABLE [dbo].[CollectionEventRegulation]  WITH CHECK ADD  CONSTRAINT [FK_CollectionEventRegulation_CollectionEvent] FOREIGN KEY([CollectionEventID])
REFERENCES [dbo].[CollectionEvent] ([CollectionEventID])
GO
ALTER TABLE [dbo].[CollectionEventRegulation] CHECK CONSTRAINT [FK_CollectionEventRegulation_CollectionEvent]
GO
ALTER TABLE [dbo].[CollectionEventSeries]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionEventSeries_CollectionEventSeries] FOREIGN KEY([SeriesParentID])
REFERENCES [dbo].[CollectionEventSeries] ([SeriesID])
GO
ALTER TABLE [dbo].[CollectionEventSeries] CHECK CONSTRAINT [FK_CollectionEventSeries_CollectionEventSeries]
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage]  WITH CHECK ADD  CONSTRAINT [FK_CollectionEventSeriesImage_CollectionEventSeries] FOREIGN KEY([SeriesID])
REFERENCES [dbo].[CollectionEventSeries] ([SeriesID])
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage] CHECK CONSTRAINT [FK_CollectionEventSeriesImage_CollectionEventSeries]
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage]  WITH CHECK ADD  CONSTRAINT [FK_CollectionEventSeriesImage_CollEventSeriesImageType_Enum] FOREIGN KEY([ImageType])
REFERENCES [dbo].[CollEventSeriesImageType_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage] CHECK CONSTRAINT [FK_CollectionEventSeriesImage_CollEventSeriesImageType_Enum]
GO
ALTER TABLE [dbo].[CollectionImage]  WITH CHECK ADD  CONSTRAINT [FK_CollectionImage_Collection] FOREIGN KEY([CollectionID])
REFERENCES [dbo].[Collection] ([CollectionID])
GO
ALTER TABLE [dbo].[CollectionImage] CHECK CONSTRAINT [FK_CollectionImage_Collection]
GO
ALTER TABLE [dbo].[CollectionManager]  WITH CHECK ADD  CONSTRAINT [FK_CollectionManager_Collection] FOREIGN KEY([AdministratingCollectionID])
REFERENCES [dbo].[Collection] ([CollectionID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionManager] CHECK CONSTRAINT [FK_CollectionManager_Collection]
GO
ALTER TABLE [dbo].[CollectionProject]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionProject_CollectionSpecimen] FOREIGN KEY([CollectionSpecimenID])
REFERENCES [dbo].[CollectionSpecimen] ([CollectionSpecimenID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionProject] CHECK CONSTRAINT [FK_CollectionProject_CollectionSpecimen]
GO
ALTER TABLE [dbo].[CollectionProject]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionProject_DiversityProjectProxy] FOREIGN KEY([ProjectID])
REFERENCES [dbo].[ProjectProxy] ([ProjectID])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CollectionProject] CHECK CONSTRAINT [FK_CollectionProject_DiversityProjectProxy]
GO
ALTER TABLE [dbo].[CollectionRequester]  WITH CHECK ADD  CONSTRAINT [FK_CollectionRequester_Collection] FOREIGN KEY([AdministratingCollectionID])
REFERENCES [dbo].[Collection] ([CollectionID])
GO
ALTER TABLE [dbo].[CollectionRequester] CHECK CONSTRAINT [FK_CollectionRequester_Collection]
GO
ALTER TABLE [dbo].[CollectionSpecimen]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionSpecimen_CollDateCategory_Enum] FOREIGN KEY([AccessionDateCategory])
REFERENCES [dbo].[CollDateCategory_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimen] CHECK CONSTRAINT [FK_CollectionSpecimen_CollDateCategory_Enum]
GO
ALTER TABLE [dbo].[CollectionSpecimen]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimen_Collection] FOREIGN KEY([CollectionID])
REFERENCES [dbo].[Collection] ([CollectionID])
GO
ALTER TABLE [dbo].[CollectionSpecimen] CHECK CONSTRAINT [FK_CollectionSpecimen_Collection]
GO
ALTER TABLE [dbo].[CollectionSpecimen]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionSpecimen_CollectionEvent] FOREIGN KEY([CollectionEventID])
REFERENCES [dbo].[CollectionEvent] ([CollectionEventID])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimen] CHECK CONSTRAINT [FK_CollectionSpecimen_CollectionEvent]
GO
ALTER TABLE [dbo].[CollectionSpecimen]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimen_CollectionExternalDatasource] FOREIGN KEY([ExternalDatasourceID])
REFERENCES [dbo].[CollectionExternalDatasource] ([ExternalDatasourceID])
GO
ALTER TABLE [dbo].[CollectionSpecimen] CHECK CONSTRAINT [FK_CollectionSpecimen_CollectionExternalDatasource]
GO
ALTER TABLE [dbo].[CollectionSpecimen]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionSpecimen_CollLabelTranscritionState_Enum] FOREIGN KEY([LabelTranscriptionState])
REFERENCES [dbo].[CollLabelTranscriptionState_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimen] CHECK CONSTRAINT [FK_CollectionSpecimen_CollLabelTranscritionState_Enum]
GO
ALTER TABLE [dbo].[CollectionSpecimen]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionSpecimen_CollLabelType_Enum] FOREIGN KEY([LabelType])
REFERENCES [dbo].[CollLabelType_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimen] CHECK CONSTRAINT [FK_CollectionSpecimen_CollLabelType_Enum]
GO
ALTER TABLE [dbo].[CollectionSpecimenImage]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionSpecimenImage_CollectionSpecimen] FOREIGN KEY([CollectionSpecimenID])
REFERENCES [dbo].[CollectionSpecimen] ([CollectionSpecimenID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimenImage] CHECK CONSTRAINT [FK_CollectionSpecimenImage_CollectionSpecimen]
GO
ALTER TABLE [dbo].[CollectionSpecimenImage]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionSpecimenImage_CollectionSpecimenPart] FOREIGN KEY([CollectionSpecimenID], [SpecimenPartID])
REFERENCES [dbo].[CollectionSpecimenPart] ([CollectionSpecimenID], [SpecimenPartID])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimenImage] NOCHECK CONSTRAINT [FK_CollectionSpecimenImage_CollectionSpecimenPart]
GO
ALTER TABLE [dbo].[CollectionSpecimenImage]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionSpecimenImage_CollSpecimenImageType_Enum] FOREIGN KEY([ImageType])
REFERENCES [dbo].[CollSpecimenImageType_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimenImage] CHECK CONSTRAINT [FK_CollectionSpecimenImage_CollSpecimenImageType_Enum]
GO
ALTER TABLE [dbo].[CollectionSpecimenImage]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionSpecimenImage_IdentificationUnit] FOREIGN KEY([CollectionSpecimenID], [IdentificationUnitID])
REFERENCES [dbo].[IdentificationUnit] ([CollectionSpecimenID], [IdentificationUnitID])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[CollectionSpecimenImage] NOCHECK CONSTRAINT [FK_CollectionSpecimenImage_IdentificationUnit]
GO
ALTER TABLE [dbo].[CollectionSpecimenImageProperty]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenImageProperty_CollectionSpecimenImage] FOREIGN KEY([CollectionSpecimenID], [URI])
REFERENCES [dbo].[CollectionSpecimenImage] ([CollectionSpecimenID], [URI])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimenImageProperty] CHECK CONSTRAINT [FK_CollectionSpecimenImageProperty_CollectionSpecimenImage]
GO
ALTER TABLE [dbo].[CollectionSpecimenPart]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenPart_CollectionSpecimenPart1] FOREIGN KEY([CollectionSpecimenID], [DerivedFromSpecimenPartID])
REFERENCES [dbo].[CollectionSpecimenPart] ([CollectionSpecimenID], [SpecimenPartID])
GO
ALTER TABLE [dbo].[CollectionSpecimenPart] CHECK CONSTRAINT [FK_CollectionSpecimenPart_CollectionSpecimenPart1]
GO
ALTER TABLE [dbo].[CollectionSpecimenPart]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenPart_CollMaterialCategory_Enum] FOREIGN KEY([MaterialCategory])
REFERENCES [dbo].[CollMaterialCategory_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimenPart] CHECK CONSTRAINT [FK_CollectionSpecimenPart_CollMaterialCategory_Enum]
GO
ALTER TABLE [dbo].[CollectionSpecimenPart]  WITH CHECK ADD  CONSTRAINT [FK_CollectionStorage_Collection] FOREIGN KEY([CollectionID])
REFERENCES [dbo].[Collection] ([CollectionID])
GO
ALTER TABLE [dbo].[CollectionSpecimenPart] CHECK CONSTRAINT [FK_CollectionStorage_Collection]
GO
ALTER TABLE [dbo].[CollectionSpecimenPart]  WITH CHECK ADD  CONSTRAINT [FK_CollectionStorage_CollectionSpecimen] FOREIGN KEY([CollectionSpecimenID])
REFERENCES [dbo].[CollectionSpecimen] ([CollectionSpecimenID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimenPart] CHECK CONSTRAINT [FK_CollectionStorage_CollectionSpecimen]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartDescription]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenPartDescription_CollectionSpecimenPart] FOREIGN KEY([CollectionSpecimenID], [SpecimenPartID])
REFERENCES [dbo].[CollectionSpecimenPart] ([CollectionSpecimenID], [SpecimenPartID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimenPartDescription] CHECK CONSTRAINT [FK_CollectionSpecimenPartDescription_CollectionSpecimenPart]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenPartRegulation_CollectionEventRegulation] FOREIGN KEY([CollectionEventID], [Regulation])
REFERENCES [dbo].[CollectionEventRegulation] ([CollectionEventID], [Regulation])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation] CHECK CONSTRAINT [FK_CollectionSpecimenPartRegulation_CollectionEventRegulation]
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenPartRegulation_CollectionSpecimenPart] FOREIGN KEY([CollectionSpecimenID], [SpecimenPartID])
REFERENCES [dbo].[CollectionSpecimenPart] ([CollectionSpecimenID], [SpecimenPartID])
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation] CHECK CONSTRAINT [FK_CollectionSpecimenPartRegulation_CollectionSpecimenPart]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenProcessing_CollectionSpecimen] FOREIGN KEY([CollectionSpecimenID])
REFERENCES [dbo].[CollectionSpecimen] ([CollectionSpecimenID])
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing] CHECK CONSTRAINT [FK_CollectionSpecimenProcessing_CollectionSpecimen]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenProcessing_CollectionSpecimenPart] FOREIGN KEY([CollectionSpecimenID], [SpecimenPartID])
REFERENCES [dbo].[CollectionSpecimenPart] ([CollectionSpecimenID], [SpecimenPartID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing] CHECK CONSTRAINT [FK_CollectionSpecimenProcessing_CollectionSpecimenPart]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionSpecimenProcessing_Processing] FOREIGN KEY([ProcessingID])
REFERENCES [dbo].[Processing] ([ProcessingID])
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing] CHECK CONSTRAINT [FK_CollectionSpecimenProcessing_Processing]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenProcessingMethod_CollectionSpecimenProcessing] FOREIGN KEY([CollectionSpecimenID], [SpecimenProcessingID])
REFERENCES [dbo].[CollectionSpecimenProcessing] ([CollectionSpecimenID], [SpecimenProcessingID])
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod] CHECK CONSTRAINT [FK_CollectionSpecimenProcessingMethod_CollectionSpecimenProcessing]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenProcessingMethod_MethodForProcessing] FOREIGN KEY([ProcessingID], [MethodID])
REFERENCES [dbo].[MethodForProcessing] ([ProcessingID], [MethodID])
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod] CHECK CONSTRAINT [FK_CollectionSpecimenProcessingMethod_MethodForProcessing]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenProcessingMethodParameter_CollectionSpecimenProcessingMethod] FOREIGN KEY([CollectionSpecimenID], [SpecimenProcessingID], [MethodID], [ProcessingID], [MethodMarker])
REFERENCES [dbo].[CollectionSpecimenProcessingMethod] ([CollectionSpecimenID], [SpecimenProcessingID], [MethodID], [ProcessingID], [MethodMarker])
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter] CHECK CONSTRAINT [FK_CollectionSpecimenProcessingMethodParameter_CollectionSpecimenProcessingMethod]
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenProcessingMethodParameter_Parameter] FOREIGN KEY([ParameterID], [MethodID])
REFERENCES [dbo].[Parameter] ([ParameterID], [MethodID])
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter] CHECK CONSTRAINT [FK_CollectionSpecimenProcessingMethodParameter_Parameter]
GO
ALTER TABLE [dbo].[CollectionSpecimenReference]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenReference_CollectionSpecimen] FOREIGN KEY([CollectionSpecimenID])
REFERENCES [dbo].[CollectionSpecimen] ([CollectionSpecimenID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimenReference] CHECK CONSTRAINT [FK_CollectionSpecimenReference_CollectionSpecimen]
GO
ALTER TABLE [dbo].[CollectionSpecimenReference]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenReference_CollectionSpecimenPart] FOREIGN KEY([CollectionSpecimenID], [SpecimenPartID])
REFERENCES [dbo].[CollectionSpecimenPart] ([CollectionSpecimenID], [SpecimenPartID])
GO
ALTER TABLE [dbo].[CollectionSpecimenReference] CHECK CONSTRAINT [FK_CollectionSpecimenReference_CollectionSpecimenPart]
GO
ALTER TABLE [dbo].[CollectionSpecimenReference]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenReference_IdentificationUnit] FOREIGN KEY([CollectionSpecimenID], [IdentificationUnitID])
REFERENCES [dbo].[IdentificationUnit] ([CollectionSpecimenID], [IdentificationUnitID])
GO
ALTER TABLE [dbo].[CollectionSpecimenReference] CHECK CONSTRAINT [FK_CollectionSpecimenReference_IdentificationUnit]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenRelation_Collection] FOREIGN KEY([RelatedSpecimenCollectionID])
REFERENCES [dbo].[Collection] ([CollectionID])
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] CHECK CONSTRAINT [FK_CollectionSpecimenRelation_Collection]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionSpecimenRelation_CollectionSpecimen] FOREIGN KEY([CollectionSpecimenID])
REFERENCES [dbo].[CollectionSpecimen] ([CollectionSpecimenID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] CHECK CONSTRAINT [FK_CollectionSpecimenRelation_CollectionSpecimen]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionSpecimenRelation_CollectionSpecimenPart] FOREIGN KEY([CollectionSpecimenID], [SpecimenPartID])
REFERENCES [dbo].[CollectionSpecimenPart] ([CollectionSpecimenID], [SpecimenPartID])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] NOCHECK CONSTRAINT [FK_CollectionSpecimenRelation_CollectionSpecimenPart]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenRelation_CollSpecimenRelationType_Enum] FOREIGN KEY([RelationType])
REFERENCES [dbo].[CollSpecimenRelationType_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] CHECK CONSTRAINT [FK_CollectionSpecimenRelation_CollSpecimenRelationType_Enum]
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionSpecimenRelation_IdentificationUnit] FOREIGN KEY([CollectionSpecimenID], [IdentificationUnitID])
REFERENCES [dbo].[IdentificationUnit] ([CollectionSpecimenID], [IdentificationUnitID])
NOT FOR REPLICATION 
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] NOCHECK CONSTRAINT [FK_CollectionSpecimenRelation_IdentificationUnit]
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenTransaction_CollectionSpecimenPart] FOREIGN KEY([CollectionSpecimenID], [SpecimenPartID])
REFERENCES [dbo].[CollectionSpecimenPart] ([CollectionSpecimenID], [SpecimenPartID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction] CHECK CONSTRAINT [FK_CollectionSpecimenTransaction_CollectionSpecimenPart]
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction]  WITH CHECK ADD  CONSTRAINT [FK_CollectionSpecimenTransaction_Transaction] FOREIGN KEY([TransactionID])
REFERENCES [dbo].[Transaction] ([TransactionID])
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction] CHECK CONSTRAINT [FK_CollectionSpecimenTransaction_Transaction]
GO
ALTER TABLE [dbo].[CollectionUser]  WITH CHECK ADD  CONSTRAINT [FK_CollectionUser_Collection] FOREIGN KEY([CollectionID])
REFERENCES [dbo].[Collection] ([CollectionID])
GO
ALTER TABLE [dbo].[CollectionUser] CHECK CONSTRAINT [FK_CollectionUser_Collection]
GO
ALTER TABLE [dbo].[CollEventDateCategory_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollEventDateCategory_Enum_CollEventDateCategory_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollEventDateCategory_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollEventDateCategory_Enum] CHECK CONSTRAINT [FK_CollEventDateCategory_Enum_CollEventDateCategory_Enum]
GO
ALTER TABLE [dbo].[CollEventImageType_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollEventImageType_Enum_CollEventImageType_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollEventImageType_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollEventImageType_Enum] CHECK CONSTRAINT [FK_CollEventImageType_Enum_CollEventImageType_Enum]
GO
ALTER TABLE [dbo].[CollEventSeriesImageType_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollEventSeriesImageType_Enum_CollEventSeriesImageType_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollEventSeriesImageType_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollEventSeriesImageType_Enum] CHECK CONSTRAINT [FK_CollEventSeriesImageType_Enum_CollEventSeriesImageType_Enum]
GO
ALTER TABLE [dbo].[CollExchangeType_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollExchangeType_Enum_CollExchangeType_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollExchangeType_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollExchangeType_Enum] CHECK CONSTRAINT [FK_CollExchangeType_Enum_CollExchangeType_Enum]
GO
ALTER TABLE [dbo].[CollIdentificationCategory_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollIdentificationCategory_Enum_CollIdentificationCategory_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollIdentificationCategory_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollIdentificationCategory_Enum] CHECK CONSTRAINT [FK_CollIdentificationCategory_Enum_CollIdentificationCategory_Enum]
GO
ALTER TABLE [dbo].[CollIdentificationDateCategory_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollIdentificationDateCategory_Enum_CollIdentificationDateCategory_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollIdentificationDateCategory_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollIdentificationDateCategory_Enum] CHECK CONSTRAINT [FK_CollIdentificationDateCategory_Enum_CollIdentificationDateCategory_Enum]
GO
ALTER TABLE [dbo].[CollIdentificationQualifier_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollIdentificationQualifier_Enum_CollIdentificationQualifier_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollIdentificationQualifier_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollIdentificationQualifier_Enum] CHECK CONSTRAINT [FK_CollIdentificationQualifier_Enum_CollIdentificationQualifier_Enum]
GO
ALTER TABLE [dbo].[CollLabelTranscriptionState_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollLabelTranscriptionState_Enum_CollLabelTranscriptionState_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollLabelTranscriptionState_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollLabelTranscriptionState_Enum] CHECK CONSTRAINT [FK_CollLabelTranscriptionState_Enum_CollLabelTranscriptionState_Enum]
GO
ALTER TABLE [dbo].[CollLabelType_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollLabelType_Enum_CollLabelType_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollLabelType_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollLabelType_Enum] CHECK CONSTRAINT [FK_CollLabelType_Enum_CollLabelType_Enum]
GO
ALTER TABLE [dbo].[CollMaterialCategory_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollMaterialCategory_Enum_CollMaterialCategory_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollMaterialCategory_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollMaterialCategory_Enum] CHECK CONSTRAINT [FK_CollMaterialCategory_Enum_CollMaterialCategory_Enum]
GO
ALTER TABLE [dbo].[CollRetrievalType_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollRetrievalType_Enum_CollRetrievalType_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollRetrievalType_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollRetrievalType_Enum] CHECK CONSTRAINT [FK_CollRetrievalType_Enum_CollRetrievalType_Enum]
GO
ALTER TABLE [dbo].[CollSpecimenImageType_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollSpecimenImageType_Enum_CollSpecimenImageType_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollSpecimenImageType_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollSpecimenImageType_Enum] CHECK CONSTRAINT [FK_CollSpecimenImageType_Enum_CollSpecimenImageType_Enum]
GO
ALTER TABLE [dbo].[CollSpecimenRelationType_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollSpecimenRelationType_Enum_CollSpecimenRelationType_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollSpecimenRelationType_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollSpecimenRelationType_Enum] CHECK CONSTRAINT [FK_CollSpecimenRelationType_Enum_CollSpecimenRelationType_Enum]
GO
ALTER TABLE [dbo].[CollTaxonomicGroup_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollTaxonomicGroup_Enum_CollTaxonomicGroup_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollTaxonomicGroup_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollTaxonomicGroup_Enum] CHECK CONSTRAINT [FK_CollTaxonomicGroup_Enum_CollTaxonomicGroup_Enum]
GO
ALTER TABLE [dbo].[CollTransactionType_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollTransactionType_Enum_CollTransactionType_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollTransactionType_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollTransactionType_Enum] CHECK CONSTRAINT [FK_CollTransactionType_Enum_CollTransactionType_Enum]
GO
ALTER TABLE [dbo].[CollTypeStatus_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollTypeStatus_Enum_CollTypeStatus_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollTypeStatus_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollTypeStatus_Enum] CHECK CONSTRAINT [FK_CollTypeStatus_Enum_CollTypeStatus_Enum]
GO
ALTER TABLE [dbo].[CollUnitRelationType_Enum]  WITH CHECK ADD  CONSTRAINT [FK_CollUnitRelationType_Enum_CollUnitRelationType_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[CollUnitRelationType_Enum] ([Code])
GO
ALTER TABLE [dbo].[CollUnitRelationType_Enum] CHECK CONSTRAINT [FK_CollUnitRelationType_Enum_CollUnitRelationType_Enum]
GO
ALTER TABLE [dbo].[EntityRepresentation]  WITH CHECK ADD  CONSTRAINT [FK_EntityRepresentation_Entity] FOREIGN KEY([Entity])
REFERENCES [dbo].[Entity] ([Entity])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[EntityRepresentation] CHECK CONSTRAINT [FK_EntityRepresentation_Entity]
GO
ALTER TABLE [dbo].[EntityRepresentation]  WITH CHECK ADD  CONSTRAINT [FK_EntityRepresentation_EntityContext_Enum] FOREIGN KEY([EntityContext])
REFERENCES [dbo].[EntityContext_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[EntityRepresentation] CHECK CONSTRAINT [FK_EntityRepresentation_EntityContext_Enum]
GO
ALTER TABLE [dbo].[EntityRepresentation]  WITH CHECK ADD  CONSTRAINT [FK_EntityRepresentation_EntityLanguageCode_Enum] FOREIGN KEY([LanguageCode])
REFERENCES [dbo].[EntityLanguageCode_Enum] ([Code])
GO
ALTER TABLE [dbo].[EntityRepresentation] CHECK CONSTRAINT [FK_EntityRepresentation_EntityLanguageCode_Enum]
GO
ALTER TABLE [dbo].[EntityUsage]  WITH CHECK ADD  CONSTRAINT [FK_EntityUsage_Entity] FOREIGN KEY([Entity])
REFERENCES [dbo].[Entity] ([Entity])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[EntityUsage] CHECK CONSTRAINT [FK_EntityUsage_Entity]
GO
ALTER TABLE [dbo].[EntityUsage]  WITH CHECK ADD  CONSTRAINT [FK_EntityUsage_EntityAccessibility_Enum] FOREIGN KEY([Accessibility])
REFERENCES [dbo].[EntityAccessibility_Enum] ([Code])
GO
ALTER TABLE [dbo].[EntityUsage] CHECK CONSTRAINT [FK_EntityUsage_EntityAccessibility_Enum]
GO
ALTER TABLE [dbo].[EntityUsage]  WITH CHECK ADD  CONSTRAINT [FK_EntityUsage_EntityContext_Enum] FOREIGN KEY([EntityContext])
REFERENCES [dbo].[EntityContext_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[EntityUsage] CHECK CONSTRAINT [FK_EntityUsage_EntityContext_Enum]
GO
ALTER TABLE [dbo].[EntityUsage]  WITH CHECK ADD  CONSTRAINT [FK_EntityUsage_EntityDetermination_Enum] FOREIGN KEY([Determination])
REFERENCES [dbo].[EntityDetermination_Enum] ([Code])
GO
ALTER TABLE [dbo].[EntityUsage] CHECK CONSTRAINT [FK_EntityUsage_EntityDetermination_Enum]
GO
ALTER TABLE [dbo].[EntityUsage]  WITH CHECK ADD  CONSTRAINT [FK_EntityUsage_EntityVisibility_Enum] FOREIGN KEY([Visibility])
REFERENCES [dbo].[EntityVisibility_Enum] ([Code])
GO
ALTER TABLE [dbo].[EntityUsage] CHECK CONSTRAINT [FK_EntityUsage_EntityVisibility_Enum]
GO
ALTER TABLE [dbo].[ExternalIdentifier]  WITH CHECK ADD  CONSTRAINT [FK_ExternalIdentifier_ExternalIdentifierType] FOREIGN KEY([Type])
REFERENCES [dbo].[ExternalIdentifierType] ([Type])
GO
ALTER TABLE [dbo].[ExternalIdentifier] CHECK CONSTRAINT [FK_ExternalIdentifier_ExternalIdentifierType]
GO
ALTER TABLE [dbo].[ExternalRequestCredentials]  WITH CHECK ADD  CONSTRAINT [FK_CollectionRequestor_Collection] FOREIGN KEY([AdministratingCollectionID])
REFERENCES [dbo].[Collection] ([CollectionID])
GO
ALTER TABLE [dbo].[ExternalRequestCredentials] CHECK CONSTRAINT [FK_CollectionRequestor_Collection]
GO
ALTER TABLE [dbo].[ExternalRequestCredentials]  WITH CHECK ADD  CONSTRAINT [FK_CollectionRequestor_Collection1] FOREIGN KEY([RequestingCollectionID])
REFERENCES [dbo].[Collection] ([CollectionID])
GO
ALTER TABLE [dbo].[ExternalRequestCredentials] CHECK CONSTRAINT [FK_CollectionRequestor_Collection1]
GO
ALTER TABLE [dbo].[Identification]  WITH NOCHECK ADD  CONSTRAINT [FK_Identification_CollIdentificationCategory_Enum] FOREIGN KEY([IdentificationCategory])
REFERENCES [dbo].[CollIdentificationCategory_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Identification] CHECK CONSTRAINT [FK_Identification_CollIdentificationCategory_Enum]
GO
ALTER TABLE [dbo].[Identification]  WITH NOCHECK ADD  CONSTRAINT [FK_Identification_CollIdentificationDateCategory_Enum] FOREIGN KEY([IdentificationDateCategory])
REFERENCES [dbo].[CollIdentificationDateCategory_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Identification] CHECK CONSTRAINT [FK_Identification_CollIdentificationDateCategory_Enum]
GO
ALTER TABLE [dbo].[Identification]  WITH NOCHECK ADD  CONSTRAINT [FK_Identification_CollIdentificationQualifier_Enum] FOREIGN KEY([IdentificationQualifier])
REFERENCES [dbo].[CollIdentificationQualifier_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Identification] CHECK CONSTRAINT [FK_Identification_CollIdentificationQualifier_Enum]
GO
ALTER TABLE [dbo].[Identification]  WITH NOCHECK ADD  CONSTRAINT [FK_Identification_CollTypeStatus_Enum] FOREIGN KEY([TypeStatus])
REFERENCES [dbo].[CollTypeStatus_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Identification] CHECK CONSTRAINT [FK_Identification_CollTypeStatus_Enum]
GO
ALTER TABLE [dbo].[Identification]  WITH CHECK ADD  CONSTRAINT [FK_Identification_Identification] FOREIGN KEY([CollectionSpecimenID], [IdentificationUnitID], [DependsOnIdentificationSequence])
REFERENCES [dbo].[Identification] ([CollectionSpecimenID], [IdentificationUnitID], [IdentificationSequence])
GO
ALTER TABLE [dbo].[Identification] CHECK CONSTRAINT [FK_Identification_Identification]
GO
ALTER TABLE [dbo].[Identification]  WITH CHECK ADD  CONSTRAINT [FK_Identification_IdentificationUnit] FOREIGN KEY([CollectionSpecimenID], [IdentificationUnitID])
REFERENCES [dbo].[IdentificationUnit] ([CollectionSpecimenID], [IdentificationUnitID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Identification] CHECK CONSTRAINT [FK_Identification_IdentificationUnit]
GO
ALTER TABLE [dbo].[IdentificationUnit]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnit_CollCircumstances_Enum] FOREIGN KEY([Circumstances])
REFERENCES [dbo].[CollCircumstances_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[IdentificationUnit] CHECK CONSTRAINT [FK_IdentificationUnit_CollCircumstances_Enum]
GO
ALTER TABLE [dbo].[IdentificationUnit]  WITH NOCHECK ADD  CONSTRAINT [FK_IdentificationUnit_CollectionSpecimen] FOREIGN KEY([CollectionSpecimenID])
REFERENCES [dbo].[CollectionSpecimen] ([CollectionSpecimenID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[IdentificationUnit] CHECK CONSTRAINT [FK_IdentificationUnit_CollectionSpecimen]
GO
ALTER TABLE [dbo].[IdentificationUnit]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnit_CollRetrievalType_Enum] FOREIGN KEY([RetrievalType])
REFERENCES [dbo].[CollRetrievalType_Enum] ([Code])
GO
ALTER TABLE [dbo].[IdentificationUnit] CHECK CONSTRAINT [FK_IdentificationUnit_CollRetrievalType_Enum]
GO
ALTER TABLE [dbo].[IdentificationUnit]  WITH NOCHECK ADD  CONSTRAINT [FK_IdentificationUnit_CollTaxonomicGroup_Enum] FOREIGN KEY([TaxonomicGroup])
REFERENCES [dbo].[CollTaxonomicGroup_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[IdentificationUnit] CHECK CONSTRAINT [FK_IdentificationUnit_CollTaxonomicGroup_Enum]
GO
ALTER TABLE [dbo].[IdentificationUnit]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnit_CollUnitRelationType_Enum] FOREIGN KEY([RelationType])
REFERENCES [dbo].[CollUnitRelationType_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[IdentificationUnit] CHECK CONSTRAINT [FK_IdentificationUnit_CollUnitRelationType_Enum]
GO
ALTER TABLE [dbo].[IdentificationUnit]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnit_IdentificationUnit] FOREIGN KEY([CollectionSpecimenID], [RelatedUnitID])
REFERENCES [dbo].[IdentificationUnit] ([CollectionSpecimenID], [IdentificationUnitID])
GO
ALTER TABLE [dbo].[IdentificationUnit] CHECK CONSTRAINT [FK_IdentificationUnit_IdentificationUnit]
GO
ALTER TABLE [dbo].[IdentificationUnit]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnit_IdentificationUnit1] FOREIGN KEY([CollectionSpecimenID], [ParentUnitID])
REFERENCES [dbo].[IdentificationUnit] ([CollectionSpecimenID], [IdentificationUnitID])
GO
ALTER TABLE [dbo].[IdentificationUnit] CHECK CONSTRAINT [FK_IdentificationUnit_IdentificationUnit1]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis]  WITH NOCHECK ADD  CONSTRAINT [FK_IdentificationUnitAnalysis_IdentificationAnalysis] FOREIGN KEY([AnalysisID])
REFERENCES [dbo].[Analysis] ([AnalysisID])
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis] CHECK CONSTRAINT [FK_IdentificationUnitAnalysis_IdentificationAnalysis]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnitAnalysis_IdentificationUnit] FOREIGN KEY([CollectionSpecimenID], [IdentificationUnitID])
REFERENCES [dbo].[IdentificationUnit] ([CollectionSpecimenID], [IdentificationUnitID])
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis] CHECK CONSTRAINT [FK_IdentificationUnitAnalysis_IdentificationUnit]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnitAnalysis_IdentificationUnitInPart] FOREIGN KEY([CollectionSpecimenID], [IdentificationUnitID], [SpecimenPartID])
REFERENCES [dbo].[IdentificationUnitInPart] ([CollectionSpecimenID], [IdentificationUnitID], [SpecimenPartID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis] CHECK CONSTRAINT [FK_IdentificationUnitAnalysis_IdentificationUnitInPart]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnitAnalysisMethod_IdentificationUnitAnalysis] FOREIGN KEY([CollectionSpecimenID], [IdentificationUnitID], [AnalysisID], [AnalysisNumber])
REFERENCES [dbo].[IdentificationUnitAnalysis] ([CollectionSpecimenID], [IdentificationUnitID], [AnalysisID], [AnalysisNumber])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod] CHECK CONSTRAINT [FK_IdentificationUnitAnalysisMethod_IdentificationUnitAnalysis]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnitAnalysisMethod_MethodForAnalysis] FOREIGN KEY([AnalysisID], [MethodID])
REFERENCES [dbo].[MethodForAnalysis] ([AnalysisID], [MethodID])
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod] CHECK CONSTRAINT [FK_IdentificationUnitAnalysisMethod_MethodForAnalysis]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnitAnalysisMethodParameter_IdentificationUnitAnalysisMethod] FOREIGN KEY([CollectionSpecimenID], [IdentificationUnitID], [MethodID], [AnalysisID], [AnalysisNumber], [MethodMarker])
REFERENCES [dbo].[IdentificationUnitAnalysisMethod] ([CollectionSpecimenID], [IdentificationUnitID], [MethodID], [AnalysisID], [AnalysisNumber], [MethodMarker])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter] CHECK CONSTRAINT [FK_IdentificationUnitAnalysisMethodParameter_IdentificationUnitAnalysisMethod]
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnitAnalysisMethodParameter_Parameter] FOREIGN KEY([ParameterID], [MethodID])
REFERENCES [dbo].[Parameter] ([ParameterID], [MethodID])
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter] CHECK CONSTRAINT [FK_IdentificationUnitAnalysisMethodParameter_Parameter]
GO
ALTER TABLE [dbo].[IdentificationUnitGeoAnalysis]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnitGeoAnalysis_IdentificationUnit] FOREIGN KEY([CollectionSpecimenID], [IdentificationUnitID])
REFERENCES [dbo].[IdentificationUnit] ([CollectionSpecimenID], [IdentificationUnitID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[IdentificationUnitGeoAnalysis] CHECK CONSTRAINT [FK_IdentificationUnitGeoAnalysis_IdentificationUnit]
GO
ALTER TABLE [dbo].[IdentificationUnitInPart]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnitInPart_IdentificationUnit1] FOREIGN KEY([CollectionSpecimenID], [IdentificationUnitID])
REFERENCES [dbo].[IdentificationUnit] ([CollectionSpecimenID], [IdentificationUnitID])
GO
ALTER TABLE [dbo].[IdentificationUnitInPart] CHECK CONSTRAINT [FK_IdentificationUnitInPart_IdentificationUnit1]
GO
ALTER TABLE [dbo].[IdentificationUnitInPart]  WITH CHECK ADD  CONSTRAINT [FK_IdentificationUnitOnPart_CollectionSpecimenPart] FOREIGN KEY([CollectionSpecimenID], [SpecimenPartID])
REFERENCES [dbo].[CollectionSpecimenPart] ([CollectionSpecimenID], [SpecimenPartID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[IdentificationUnitInPart] CHECK CONSTRAINT [FK_IdentificationUnitOnPart_CollectionSpecimenPart]
GO
ALTER TABLE [dbo].[LanguageCode_Enum]  WITH CHECK ADD  CONSTRAINT [FK_LanguageCode_Enum_LanguageCode_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[LanguageCode_Enum] ([Code])
GO
ALTER TABLE [dbo].[LanguageCode_Enum] CHECK CONSTRAINT [FK_LanguageCode_Enum_LanguageCode_Enum]
GO
ALTER TABLE [dbo].[LocalisationSystem]  WITH CHECK ADD  CONSTRAINT [FK_LocalisationSystem_LocalisationSystem] FOREIGN KEY([LocalisationSystemParentID])
REFERENCES [dbo].[LocalisationSystem] ([LocalisationSystemID])
GO
ALTER TABLE [dbo].[LocalisationSystem] CHECK CONSTRAINT [FK_LocalisationSystem_LocalisationSystem]
GO
ALTER TABLE [dbo].[MeasurementUnit_Enum]  WITH CHECK ADD  CONSTRAINT [FK_MeasurementUnit_Enum_MeasurementUnit_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[MeasurementUnit_Enum] ([Code])
GO
ALTER TABLE [dbo].[MeasurementUnit_Enum] CHECK CONSTRAINT [FK_MeasurementUnit_Enum_MeasurementUnit_Enum]
GO
ALTER TABLE [dbo].[Method]  WITH NOCHECK ADD  CONSTRAINT [FK_Method_Method] FOREIGN KEY([MethodParentID])
REFERENCES [dbo].[Method] ([MethodID])
GO
ALTER TABLE [dbo].[Method] CHECK CONSTRAINT [FK_Method_Method]
GO
ALTER TABLE [dbo].[MethodForAnalysis]  WITH CHECK ADD  CONSTRAINT [FK_MethodForAnalysis_Analysis] FOREIGN KEY([AnalysisID])
REFERENCES [dbo].[Analysis] ([AnalysisID])
GO
ALTER TABLE [dbo].[MethodForAnalysis] CHECK CONSTRAINT [FK_MethodForAnalysis_Analysis]
GO
ALTER TABLE [dbo].[MethodForAnalysis]  WITH CHECK ADD  CONSTRAINT [FK_MethodForAnalysis_Method] FOREIGN KEY([MethodID])
REFERENCES [dbo].[Method] ([MethodID])
GO
ALTER TABLE [dbo].[MethodForAnalysis] CHECK CONSTRAINT [FK_MethodForAnalysis_Method]
GO
ALTER TABLE [dbo].[MethodForProcessing]  WITH CHECK ADD  CONSTRAINT [FK_MethodForProcessing_Method] FOREIGN KEY([MethodID])
REFERENCES [dbo].[Method] ([MethodID])
GO
ALTER TABLE [dbo].[MethodForProcessing] CHECK CONSTRAINT [FK_MethodForProcessing_Method]
GO
ALTER TABLE [dbo].[MethodForProcessing]  WITH CHECK ADD  CONSTRAINT [FK_MethodForProcessing_Processing] FOREIGN KEY([ProcessingID])
REFERENCES [dbo].[Processing] ([ProcessingID])
GO
ALTER TABLE [dbo].[MethodForProcessing] CHECK CONSTRAINT [FK_MethodForProcessing_Processing]
GO
ALTER TABLE [dbo].[Parameter]  WITH CHECK ADD  CONSTRAINT [FK_Parameter_Method] FOREIGN KEY([MethodID])
REFERENCES [dbo].[Method] ([MethodID])
GO
ALTER TABLE [dbo].[Parameter] CHECK CONSTRAINT [FK_Parameter_Method]
GO
ALTER TABLE [dbo].[ParameterValue_Enum]  WITH CHECK ADD  CONSTRAINT [FK_ParameterValue_Enum_Parameter] FOREIGN KEY([ParameterID], [MethodID])
REFERENCES [dbo].[Parameter] ([ParameterID], [MethodID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ParameterValue_Enum] CHECK CONSTRAINT [FK_ParameterValue_Enum_Parameter]
GO
ALTER TABLE [dbo].[Processing]  WITH NOCHECK ADD  CONSTRAINT [FK_CollectionProcessing_CollectionProcessing] FOREIGN KEY([ProcessingParentID])
REFERENCES [dbo].[Processing] ([ProcessingID])
GO
ALTER TABLE [dbo].[Processing] CHECK CONSTRAINT [FK_CollectionProcessing_CollectionProcessing]
GO
ALTER TABLE [dbo].[ProcessingMaterialCategory]  WITH CHECK ADD  CONSTRAINT [FK_ProcessingMaterialCategory_Processing] FOREIGN KEY([ProcessingID])
REFERENCES [dbo].[Processing] ([ProcessingID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProcessingMaterialCategory] CHECK CONSTRAINT [FK_ProcessingMaterialCategory_Processing]
GO
ALTER TABLE [dbo].[ProjectAnalysis]  WITH CHECK ADD  CONSTRAINT [FK_ProjectAnalysis_Analysis] FOREIGN KEY([AnalysisID])
REFERENCES [dbo].[Analysis] ([AnalysisID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProjectAnalysis] CHECK CONSTRAINT [FK_ProjectAnalysis_Analysis]
GO
ALTER TABLE [dbo].[ProjectAnalysis]  WITH CHECK ADD  CONSTRAINT [FK_ProjectAnalysis_ProjectProxy] FOREIGN KEY([ProjectID])
REFERENCES [dbo].[ProjectProxy] ([ProjectID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProjectAnalysis] CHECK CONSTRAINT [FK_ProjectAnalysis_ProjectProxy]
GO
ALTER TABLE [dbo].[ProjectProcessing]  WITH CHECK ADD  CONSTRAINT [FK_ProjectProcessing_Processing] FOREIGN KEY([ProcessingID])
REFERENCES [dbo].[Processing] ([ProcessingID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProjectProcessing] CHECK CONSTRAINT [FK_ProjectProcessing_Processing]
GO
ALTER TABLE [dbo].[ProjectProcessing]  WITH CHECK ADD  CONSTRAINT [FK_ProjectProcessing_ProjectProxy] FOREIGN KEY([ProjectID])
REFERENCES [dbo].[ProjectProxy] ([ProjectID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProjectProcessing] CHECK CONSTRAINT [FK_ProjectProcessing_ProjectProxy]
GO
ALTER TABLE [dbo].[ProjectUser]  WITH CHECK ADD  CONSTRAINT [FK_DiversityProjectUser_DiversityProjectProxy] FOREIGN KEY([ProjectID])
REFERENCES [dbo].[ProjectProxy] ([ProjectID])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[ProjectUser] CHECK CONSTRAINT [FK_DiversityProjectUser_DiversityProjectProxy]
GO
ALTER TABLE [dbo].[ProjectUser]  WITH NOCHECK ADD  CONSTRAINT [FK_ProjectUser_UserProxy] FOREIGN KEY([LoginName])
REFERENCES [dbo].[UserProxy] ([LoginName])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProjectUser] CHECK CONSTRAINT [FK_ProjectUser_UserProxy]
GO
ALTER TABLE [dbo].[Property]  WITH CHECK ADD  CONSTRAINT [FK_Descriptor_Descriptor] FOREIGN KEY([PropertyParentID])
REFERENCES [dbo].[Property] ([PropertyID])
GO
ALTER TABLE [dbo].[Property] CHECK CONSTRAINT [FK_Descriptor_Descriptor]
GO
ALTER TABLE [dbo].[Regulation]  WITH CHECK ADD  CONSTRAINT [FK_Regulation_Regulation] FOREIGN KEY([ParentRegulation])
REFERENCES [dbo].[Regulation] ([Regulation])
GO
ALTER TABLE [dbo].[Regulation] CHECK CONSTRAINT [FK_Regulation_Regulation]
GO
ALTER TABLE [dbo].[Regulation]  WITH CHECK ADD  CONSTRAINT [FK_Regulation_RegulationType_Enum] FOREIGN KEY([Type])
REFERENCES [dbo].[RegulationType_Enum] ([Code])
GO
ALTER TABLE [dbo].[Regulation] CHECK CONSTRAINT [FK_Regulation_RegulationType_Enum]
GO
ALTER TABLE [dbo].[RegulationType_Enum]  WITH CHECK ADD  CONSTRAINT [FK_RegulationType_Enum_RegulationType_Enum] FOREIGN KEY([ParentCode])
REFERENCES [dbo].[RegulationType_Enum] ([Code])
GO
ALTER TABLE [dbo].[RegulationType_Enum] CHECK CONSTRAINT [FK_RegulationType_Enum_RegulationType_Enum]
GO
ALTER TABLE [dbo].[Transaction]  WITH CHECK ADD  CONSTRAINT [FK_Transaction_Collection] FOREIGN KEY([FromCollectionID])
REFERENCES [dbo].[Collection] ([CollectionID])
GO
ALTER TABLE [dbo].[Transaction] CHECK CONSTRAINT [FK_Transaction_Collection]
GO
ALTER TABLE [dbo].[Transaction]  WITH CHECK ADD  CONSTRAINT [FK_Transaction_Collection1] FOREIGN KEY([ToCollectionID])
REFERENCES [dbo].[Collection] ([CollectionID])
GO
ALTER TABLE [dbo].[Transaction] CHECK CONSTRAINT [FK_Transaction_Collection1]
GO
ALTER TABLE [dbo].[Transaction]  WITH CHECK ADD  CONSTRAINT [FK_Transaction_Collection2] FOREIGN KEY([AdministratingCollectionID])
REFERENCES [dbo].[Collection] ([CollectionID])
GO
ALTER TABLE [dbo].[Transaction] CHECK CONSTRAINT [FK_Transaction_Collection2]
GO
ALTER TABLE [dbo].[Transaction]  WITH CHECK ADD  CONSTRAINT [FK_Transaction_CollTransactionType_Enum] FOREIGN KEY([TransactionType])
REFERENCES [dbo].[CollTransactionType_Enum] ([Code])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Transaction] CHECK CONSTRAINT [FK_Transaction_CollTransactionType_Enum]
GO
ALTER TABLE [dbo].[Transaction]  WITH CHECK ADD  CONSTRAINT [FK_Transaction_Transaction] FOREIGN KEY([ParentTransactionID])
REFERENCES [dbo].[Transaction] ([TransactionID])
GO
ALTER TABLE [dbo].[Transaction] CHECK CONSTRAINT [FK_Transaction_Transaction]
GO
ALTER TABLE [dbo].[TransactionAgent]  WITH CHECK ADD  CONSTRAINT [FK_TransactionAgent_Transaction] FOREIGN KEY([TransactionID])
REFERENCES [dbo].[Transaction] ([TransactionID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[TransactionAgent] CHECK CONSTRAINT [FK_TransactionAgent_Transaction]
GO
ALTER TABLE [dbo].[TransactionDocument]  WITH CHECK ADD  CONSTRAINT [FK_TransactionDocuments_Transaction] FOREIGN KEY([TransactionID])
REFERENCES [dbo].[Transaction] ([TransactionID])
GO
ALTER TABLE [dbo].[TransactionDocument] CHECK CONSTRAINT [FK_TransactionDocuments_Transaction]
GO
ALTER TABLE [dbo].[TransactionPayment]  WITH CHECK ADD  CONSTRAINT [FK_TransactionPayment_Transaction] FOREIGN KEY([TransactionID])
REFERENCES [dbo].[Transaction] ([TransactionID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[TransactionPayment] CHECK CONSTRAINT [FK_TransactionPayment_Transaction]
GO
ALTER TABLE [dbo].[Identification]  WITH NOCHECK ADD  CONSTRAINT [CK_IdentificationName] CHECK  ((len([TaxonomicName])>(0) AND [TaxonomicName] IS NOT NULL OR len([VernacularTerm])>(0) AND [VernacularTerm] IS NOT NULL))
GO
ALTER TABLE [dbo].[Identification] CHECK CONSTRAINT [CK_IdentificationName]
GO
ALTER TABLE [dbo].[Identification]  WITH NOCHECK ADD  CONSTRAINT [CK_IdentificationResponsible] CHECK  (([ResponsibleAgentURI] IS NULL OR len([ResponsibleName])>(0) AND [ResponsibleAgentURI] IS NOT NULL AND [ResponsibleName] IS NOT NULL))
GO
ALTER TABLE [dbo].[Identification] CHECK CONSTRAINT [CK_IdentificationResponsible]
GO
ALTER TABLE [dbo].[Identification]  WITH NOCHECK ADD  CONSTRAINT [CK_TaxonmicName] CHECK  ((len([NameURI])=(0) OR [NameURI] IS NULL OR len([TaxonomicName])>(0) AND [NameURI] IS NOT NULL AND [TaxonomicName] IS NOT NULL))
GO
ALTER TABLE [dbo].[Identification] CHECK CONSTRAINT [CK_TaxonmicName]
GO
/****** Object:  StoredProcedure [dbo].[DeleteXmlAttribute]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--#####################################################################################################################
--######   DeleteXmlAttribute    ######################################################################################
--#####################################################################################################################

--if (select count(*) from INFORMATION_SCHEMA.ROUTINES R where R.ROUTINE_TYPE = 'PROCEDURE' and R.ROUTINE_NAME = 'DeleteXmlAttribute') = 0
--begin

	CREATE Procedure [dbo].[DeleteXmlAttribute] 
	@Table nvarchar(128), 
	@Column nvarchar(128), 
	@Path nvarchar(4000),  
	@Attribute nvarchar(128),
	@WhereClause nvarchar(4000)
	AS  
	/*
	Deleting a attribute of an XML node

	Test:
	EXEC dbo.DeleteXmlAttribute 'UserProxy', 'Settings', '/Settings/ModuleSource/Identification/TaxonomicGroup/fungus', 'Webservice', 'LoginName = USER_NAME()'
	SELECT [Settings] FROM [dbo].[UserProxy] WHERE LoginName = USER_NAME()

	*/
	BEGIN 
	declare @SQL nvarchar(max)
	-- try to insert the attribute
	set @SQL = (select 'SET ANSI_NULLS ON;
	DECLARE @Setting xml;
	SET @Setting = (SELECT T.'+ @Column + ' FROM ' + @Table + ' AS T WHERE ' + @WhereClause + ');
	set @Setting.modify(''delete (' + @Path + '/@' + @Attribute + ')[1]'');;
	update T set T.' + @Column + ' = @Setting 
	FROM ' + @Table + ' AS T  
	WHERE ' + @WhereClause)

	begin try
	exec sp_executesql @SQL
	end try
	begin catch
	end catch
	END
--end

GO
GRANT EXECUTE ON [dbo].[DeleteXmlAttribute] TO [User] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[DeleteXmlNode]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######   DeleteXmlNode    ###########################################################################################
--#####################################################################################################################

--if (select count(*) from INFORMATION_SCHEMA.ROUTINES R where R.ROUTINE_TYPE = 'PROCEDURE' and R.ROUTINE_NAME = 'DeleteXmlNode') = 0
--begin

	CREATE Procedure [dbo].[DeleteXmlNode] 
	@Table nvarchar(128), 
	@Column nvarchar(128), 
	@Path nvarchar(4000),  
	@WhereClause nvarchar(4000)
	AS  
	/*
	Deleting a XML node

	Test:
	EXEC dbo.DeleteXmlNode 'UserProxy', 'Settings', '/Settings/ModuleSource/Identification/TaxonomicGroup/fungus', 'LoginName = USER_NAME()'
	SELECT [Settings] FROM [dbo].[UserProxy] WHERE LoginName = USER_NAME()

	*/
	BEGIN 
	declare @SQL nvarchar(max)
	-- try to insert the attribute
	set @SQL = (select 'SET ANSI_NULLS ON;
	DECLARE @Setting xml;
	SET @Setting = (SELECT T.'+ @Column + ' FROM ' + @Table + ' AS T WHERE ' + @WhereClause + ');
	set @Setting.modify(''delete (' + @Path + ')[1]'');;
	update T set T.' + @Column + ' = @Setting 
	FROM ' + @Table + ' AS T  
	WHERE ' + @WhereClause)

	begin try
	exec sp_executesql @SQL
	end try
	begin catch
	end catch
	END
--end

GO
GRANT EXECUTE ON [dbo].[DeleteXmlNode] TO [User] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[procCopyCollectionSpecimen]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######   procCopyCollectionSpecimen   ######################################################################################
--######   Site properties were not copied ################################################################
--#####################################################################################################################


CREATE  PROCEDURE [dbo].[procCopyCollectionSpecimen] 
	(@CollectionSpecimenID int output ,
	@OriginalCollectionSpecimenID int ,
	@AccessionNumber  nvarchar(50),
	@EventCopyMode int,
	@CopyUnits int)
AS
declare @count int
declare @EventID int

/*
Copy a collection specimen
@EventCopyMode
-1: dont copy the event, leave the entry in table CollectionSpecimen empty
0:  take same event as original specimen
1:  create new event with the same data as the old specimen
*/

if (@EventCopyMode = 0) set @EventID = (SELECT CollectionEventID FROM CollectionSpecimen WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID)
if (@EventCopyMode < 0) set @EventID = null

if (@EventCopyMode > 0) 
begin
	DECLARE @RC int
	DECLARE @CollectionEventID int
	DECLARE @OriginalCollectionEventID int
	set @OriginalCollectionEventID = (SELECT CollectionEventID FROM CollectionSpecimen WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID)

	-- CollectionEvent
	INSERT INTO CollectionEvent
		  (SeriesID, CollectorsEventNumber, CollectionDate, CollectionDay, CollectionMonth, CollectionYear, CollectionDateSupplement, 
		  CollectionDateCategory, CollectionTime, CollectionTimeSpan, LocalityDescription, HabitatDescription, ReferenceTitle, ReferenceURI, CollectingMethod, 
		  Notes, CountryCache, DataWithholdingReason)
	SELECT SeriesID, CollectorsEventNumber, CollectionDate, CollectionDay, CollectionMonth, CollectionYear, CollectionDateSupplement, 
		  CollectionDateCategory, CollectionTime, CollectionTimeSpan, LocalityDescription, HabitatDescription, ReferenceTitle, ReferenceURI, CollectingMethod, 
		  Notes, CountryCache, DataWithholdingReason
	FROM  CollectionEvent
	WHERE CollectionEventID = @OriginalCollectionEventID

	SET @CollectionEventID = (SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY])

	-- CollectionEventImage
	INSERT INTO CollectionEventImage
		(CollectionEventID, URI, ResourceURI, ImageType, Notes)
	SELECT @CollectionEventID, URI, ResourceURI, ImageType, Notes
	FROM CollectionEventImage
	WHERE (CollectionEventID = @OriginalCollectionEventID)

	-- CollectionEventLocalisation
	INSERT INTO CollectionEventLocalisation
		(CollectionEventID, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, DeterminationDate, DistanceToLocation, 
		DirectionToLocation, ResponsibleName, ResponsibleAgentURI, AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache)
	SELECT @CollectionEventID, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, DeterminationDate, DistanceToLocation, 
		DirectionToLocation, ResponsibleName, ResponsibleAgentURI, AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache
	FROM CollectionEventLocalisation
	WHERE (CollectionEventID = @OriginalCollectionEventID)

	-- CollectionEventProperty
	INSERT INTO CollectionEventProperty
		(CollectionEventID, PropertyID, DisplayText, PropertyURI, PropertyHierarchyCache, PropertyValue,  
		ResponsibleName, ResponsibleAgentURI, Notes,AverageValueCache)
	SELECT @CollectionEventID, PropertyID, DisplayText, PropertyURI, PropertyHierarchyCache, PropertyValue,  
		ResponsibleName, ResponsibleAgentURI, Notes,AverageValueCache
	FROM CollectionEventProperty
	WHERE (CollectionEventID = @OriginalCollectionEventID)

	set @EventID = @CollectionEventID
end

-- CollectionSpecimen
INSERT INTO CollectionSpecimen (CollectionEventID, CollectionID, AccessionNumber, AccessionDate, AccessionDay, AccessionMonth, AccessionYear, 
	AccessionDateSupplement, AccessionDateCategory, DepositorsName, DepositorsAgentURI, DepositorsAccessionNumber, LabelTitle, LabelType, 
	LabelTranscriptionState, LabelTranscriptionNotes, ExsiccataURI, ExsiccataAbbreviation, OriginalNotes, AdditionalNotes, InternalNotes, ReferenceTitle, ReferenceURI, 
	Problems, DataWithholdingReason)
SELECT @EventID, CollectionID, @AccessionNumber, AccessionDate, AccessionDay, AccessionMonth, AccessionYear, 
	AccessionDateSupplement, AccessionDateCategory, DepositorsName, DepositorsAgentURI, DepositorsAccessionNumber, LabelTitle, LabelType, 
	LabelTranscriptionState, LabelTranscriptionNotes, ExsiccataURI, ExsiccataAbbreviation, OriginalNotes, AdditionalNotes, InternalNotes, ReferenceTitle, ReferenceURI, 
	Problems, DataWithholdingReason
FROM CollectionSpecimen
WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID

SET @CollectionSpecimenID = (SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY])

-- CollectionProject
INSERT INTO CollectionProject (CollectionSpecimenID, ProjectID)
SELECT @CollectionSpecimenID, ProjectID
FROM CollectionProject
WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID

-- CollectionAgent
INSERT INTO CollectionAgent ( CollectionSpecimenID, CollectorsName, CollectorsAgentURI, CollectorsSequence, CollectorsNumber, Notes, DataWithholdingReason)
SELECT   @CollectionSpecimenID, CollectorsName, CollectorsAgentURI, CollectorsSequence, CollectorsNumber, Notes, DataWithholdingReason
FROM CollectionAgent
WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID

-- CollectionRelation
INSERT INTO CollectionSpecimenRelation ( CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, 
	RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache)
SELECT @CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, 
	RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache
FROM CollectionSpecimenRelation
WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID


if @CopyUnits > 0
begin
	-- IdentificationUnit
	DECLARE @TempUnitTable TABLE (IdentificationUnitID int primary key,
	   OriginalIdentificationUnitID int NULL)
	DECLARE @IdentificationUnitID int
	DECLARE @OriginalIdentificationUnitID int

	DECLARE UnitCursor CURSOR FOR
	SELECT IdentificationUnitID FROM IdentificationUnit WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
	OPEN UnitCursor
	FETCH NEXT FROM UnitCursor INTO @OriginalIdentificationUnitID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- IdentificationUnit
		INSERT INTO IdentificationUnit (CollectionSpecimenID, LastIdentificationCache, FamilyCache, OrderCache, TaxonomicGroup, 
			OnlyObserved, RelationType, ColonisedSubstratePart, LifeStage, Gender, NumberOfUnits, ExsiccataNumber, ExsiccataIdentification, 
			Circumstances, DisplayOrder, Notes)
		SELECT @CollectionSpecimenID, LastIdentificationCache, FamilyCache, OrderCache, TaxonomicGroup, 
			OnlyObserved, RelationType, ColonisedSubstratePart, LifeStage, Gender, NumberOfUnits, ExsiccataNumber, ExsiccataIdentification, 
			Circumstances, DisplayOrder, Notes
		FROM IdentificationUnit
		WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
		AND IdentificationUnitID = @OriginalIdentificationUnitID

		SET @IdentificationUnitID = (SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY])
		INSERT INTO @TempUnitTable (IdentificationUnitID, OriginalIdentificationUnitID) VALUES (@IdentificationUnitID, @OriginalIdentificationUnitID)

		-- Identification
		INSERT INTO Identification (CollectionSpecimenID, IdentificationUnitID, IdentificationSequence, IdentificationDate, IdentificationDay, IdentificationMonth, IdentificationYear, 
			  IdentificationDateSupplement, IdentificationDateCategory, VernacularTerm, TaxonomicName, NameURI, IdentificationCategory, IdentificationQualifier, 
			  TypeStatus, TypeNotes, ReferenceTitle, ReferenceURI, Notes, ResponsibleName, ResponsibleAgentURI)
		SELECT @CollectionSpecimenID, @IdentificationUnitID, IdentificationSequence, IdentificationDate, IdentificationDay, IdentificationMonth, IdentificationYear, 
			  IdentificationDateSupplement, IdentificationDateCategory, VernacularTerm, TaxonomicName, NameURI, IdentificationCategory, IdentificationQualifier, 
			  TypeStatus, TypeNotes, ReferenceTitle, ReferenceURI, Notes, ResponsibleName, ResponsibleAgentURI
		FROM Identification
		WHERE Identification.CollectionSpecimenID = @OriginalCollectionSpecimenID
		and Identification.IdentificationUnitID = @OriginalIdentificationUnitID

   		FETCH NEXT FROM UnitCursor INTO @OriginalIdentificationUnitID
	END
	CLOSE UnitCursor
	DEALLOCATE UnitCursor

	DECLARE @I INT
	SET @I = (SELECT COUNT(*) FROM @TempUnitTable)
	IF @I > 0
	BEGIN
		UPDATE N SET N.RelatedUnitID = NH.IdentificationUnitID
		FROM IdentificationUnit N, IdentificationUnit NH, @TempUnitTable T, @TempUnitTable TH, IdentificationUnit O--, IdentificationUnit OH
		WHERE N.IdentificationUnitID = T.IdentificationUnitID
		AND O.IdentificationUnitID = T.OriginalIdentificationUnitID
		AND O.RelatedUnitID = TH.OriginalIdentificationUnitID
		AND TH.IdentificationUnitID = NH.IdentificationUnitID
	END
end

-- CollectionSpecimenPart
DECLARE @TempPartTable TABLE (SpecimenPartID int primary key,
   OriginalSpecimenPartID int NULL)
DECLARE @SpecimenPartID int
DECLARE @OriginalSpecimenPartID int

DECLARE PartCursor CURSOR FOR
SELECT SpecimenPartID FROM CollectionSpecimenPart WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
OPEN PartCursor
FETCH NEXT FROM PartCursor INTO @OriginalSpecimenPartID
WHILE @@FETCH_STATUS = 0
BEGIN
	-- CollectionSpecimenPart
	INSERT INTO CollectionSpecimenPart ( CollectionSpecimenID, PreparationMethod, PreparationDate, 
		AccessionNumber, PartSublabel, CollectionID, MaterialCategory, StorageLocation, Stock, Notes)
	SELECT @CollectionSpecimenID, PreparationMethod, PreparationDate, 
		AccessionNumber, PartSublabel, CollectionID, MaterialCategory, StorageLocation, Stock, Notes
	FROM CollectionSpecimenPart
	WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
	AND SpecimenPartID = @OriginalSpecimenPartID

	SET @SpecimenPartID = (SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY])
	INSERT INTO @TempPartTable (SpecimenPartID, OriginalSpecimenPartID) VALUES (@SpecimenPartID, @OriginalSpecimenPartID)

	-- CollectionSpecimenProcessing
	INSERT INTO CollectionSpecimenProcessing
		(CollectionSpecimenID, ProcessingDate, ProcessingID, Protocoll, SpecimenPartID, ProcessingDuration,  
		ResponsibleName, ResponsibleAgentURI,Notes)
	SELECT @CollectionSpecimenID, ProcessingDate, ProcessingID, Protocoll, SpecimenPartID, ProcessingDuration,  
		ResponsibleName, ResponsibleAgentURI,Notes
	FROM CollectionSpecimenProcessing
	WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
	AND SpecimenPartID = @OriginalSpecimenPartID

	FETCH NEXT FROM PartCursor INTO @OriginalSpecimenPartID
END
CLOSE PartCursor
DEALLOCATE PartCursor

DECLARE @P INT
SET @P = (SELECT COUNT(*) FROM @TempUnitTable)
IF @P > 0
BEGIN
	UPDATE N SET N.DerivedFromSpecimenPartID = NH.SpecimenPartID
	FROM CollectionSpecimenPart N, CollectionSpecimenPart NH, @TempPartTable T, @TempPartTable TH, CollectionSpecimenPart O--, IdentificationUnit OH
	WHERE N.SpecimenPartID = T.SpecimenPartID
	AND O.SpecimenPartID = T.OriginalSpecimenPartID
	AND O.DerivedFromSpecimenPartID = TH.OriginalSpecimenPartID
	AND TH.SpecimenPartID = NH.SpecimenPartID
END

INSERT INTO IdentificationUnitInPart (CollectionSpecimenID, IdentificationUnitID, SpecimenPartID, DisplayOrder)
SELECT @CollectionSpecimenID, U.IdentificationUnitID, P.SpecimenPartID, I.DisplayOrder
FROM IdentificationUnitInPart I, @TempPartTable P, @TempUnitTable U
WHERE I.IdentificationUnitID = U.OriginalIdentificationUnitID
AND I.SpecimenPartID = P.OriginalSpecimenPartID
AND I.CollectionSpecimenID = @OriginalCollectionSpecimenID

SELECT @CollectionSpecimenID

GO
GRANT EXECUTE ON [dbo].[procCopyCollectionSpecimen] TO [Editor] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[procCopyCollectionSpecimen2]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######  procCopyCollectionSpecimen2: Inclusion of unit identifier      ##############################################
--#################################### Inclusion of identification sequence in specimen reference   ###################
--#################################### Inclusion of CollectionSpecimenPartDescription   ###############################
--#################################### Inclusion of CollectionEventMethod   ###########################################
--#################################### Exclusion of specimen reference   ##############################################
--#################################### Exclusion of identification reference   ########################################
--#####################################################################################################################

CREATE  PROCEDURE [dbo].[procCopyCollectionSpecimen2] 
	(@CollectionSpecimenID int output ,
	@OriginalCollectionSpecimenID int ,
	@AccessionNumber  nvarchar(50),
	@EventCopyMode int,
	@IncludedTables nvarchar(4000))
AS
declare @count int
declare @EventID int

/*
Copy a collection specimen
@EventCopyMode
-1: dont copy the event, leave the entry in table CollectionSpecimen empty
0:  take same event as original specimen
1:  create new event with the same data as the old specimen

@IncludedTables contains list of tables that are copied according to the users choice
*/

if (@EventCopyMode = 0) set @EventID = (SELECT CollectionEventID FROM CollectionSpecimen WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID)
if (@EventCopyMode < 0) set @EventID = null

DECLARE @CollectionEventID int
DECLARE @OriginalCollectionEventID int

if (@EventCopyMode > 0) 
begin
	DECLARE @RC int
	set @OriginalCollectionEventID = (SELECT CollectionEventID FROM CollectionSpecimen WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID)

	-- CollectionEvent
	INSERT INTO CollectionEvent
		  (SeriesID, CollectorsEventNumber, CollectionDate, CollectionDay, CollectionMonth, CollectionYear, CollectionDateSupplement, CollectionEndDay, CollectionEndMonth, CollectionEndYear, 
		  CollectionDateCategory, CollectionTime, CollectionTimeSpan, LocalityDescription, HabitatDescription, ReferenceTitle, ReferenceURI, CollectingMethod, 
		  Notes, CountryCache, DataWithholdingReason, DataWithholdingReasonDate)
	SELECT SeriesID, CollectorsEventNumber, CollectionDate, CollectionDay, CollectionMonth, CollectionYear, CollectionDateSupplement, CollectionEndDay, CollectionEndMonth, CollectionEndYear, 
		  CollectionDateCategory, CollectionTime, CollectionTimeSpan, LocalityDescription, HabitatDescription, ReferenceTitle, ReferenceURI, CollectingMethod, 
		  Notes, CountryCache, DataWithholdingReason, DataWithholdingReasonDate
	FROM  CollectionEvent
	WHERE CollectionEventID = @OriginalCollectionEventID

	SET @CollectionEventID = (SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY])

	-- CollectionEventLocalisation
	INSERT INTO CollectionEventLocalisation
		(CollectionEventID, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, DeterminationDate, DistanceToLocation, 
		DirectionToLocation, ResponsibleName, ResponsibleAgentURI, AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache, [Geography])
	SELECT @CollectionEventID, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, DeterminationDate, DistanceToLocation, 
		DirectionToLocation, ResponsibleName, ResponsibleAgentURI, AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache, [Geography]
	FROM CollectionEventLocalisation
	WHERE (CollectionEventID = @OriginalCollectionEventID)

	-- CollectionEventProperty
	INSERT INTO CollectionEventProperty
		(CollectionEventID, PropertyID, DisplayText, PropertyURI, PropertyHierarchyCache, PropertyValue,  
		ResponsibleName, ResponsibleAgentURI, Notes,AverageValueCache)
	SELECT @CollectionEventID, PropertyID, DisplayText, PropertyURI, PropertyHierarchyCache, PropertyValue,  
		ResponsibleName, ResponsibleAgentURI, Notes,AverageValueCache
	FROM CollectionEventProperty
	WHERE (CollectionEventID = @OriginalCollectionEventID)

	-- CollectionEventImage
	IF (@IncludedTables LIKE '%|CollectionEventImage|%')
	BEGIN
		INSERT INTO CollectionEventImage
			(CollectionEventID, URI, ResourceURI, ImageType, Notes)
		SELECT @CollectionEventID, URI, ResourceURI, ImageType, Notes
		FROM CollectionEventImage
		WHERE (CollectionEventID = @OriginalCollectionEventID)
	END

		-- CollectionEventMethod
	IF (@IncludedTables LIKE '%|CollectionEventMethod|%')
	BEGIN
		INSERT INTO CollectionEventMethod 
					 (CollectionEventID, MethodID, MethodMarker)
		SELECT       @CollectionEventID, MethodID, MethodMarker
		FROM            CollectionEventMethod
		WHERE (CollectionEventID = @OriginalCollectionEventID)

		INSERT INTO CollectionEventParameterValue
                    (CollectionEventID, MethodID, MethodMarker, ParameterID, Value, Notes)
		SELECT      @CollectionEventID, MethodID, MethodMarker, ParameterID, Value, Notes
		FROM            CollectionEventParameterValue
		WHERE (CollectionEventID = @OriginalCollectionEventID)
	END

	set @EventID = @CollectionEventID

end

-- CollectionSpecimen
INSERT INTO CollectionSpecimen 
(CollectionEventID, CollectionID, AccessionNumber, AccessionDate, AccessionDay, AccessionMonth, AccessionYear, 
	AccessionDateSupplement, AccessionDateCategory, DepositorsName, DepositorsAgentURI, DepositorsAccessionNumber, LabelTitle, LabelType, 
	LabelTranscriptionState, LabelTranscriptionNotes, ExsiccataURI, ExsiccataAbbreviation, OriginalNotes, AdditionalNotes, InternalNotes, 
	Problems, DataWithholdingReason)
SELECT @EventID, CollectionID, @AccessionNumber, AccessionDate, AccessionDay, AccessionMonth, AccessionYear, 
	AccessionDateSupplement, AccessionDateCategory, DepositorsName, DepositorsAgentURI, DepositorsAccessionNumber, LabelTitle, LabelType, 
	LabelTranscriptionState, LabelTranscriptionNotes, ExsiccataURI, ExsiccataAbbreviation, OriginalNotes, AdditionalNotes, InternalNotes, 
	Problems, DataWithholdingReason
FROM CollectionSpecimen
WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID

SET @CollectionSpecimenID = (SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY])

-- CollectionProject
INSERT INTO CollectionProject (CollectionSpecimenID, ProjectID)
SELECT @CollectionSpecimenID, ProjectID
FROM CollectionProject
WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID

-- CollectionAgent
IF (@IncludedTables LIKE '%|CollectionAgent|%')
BEGIN
	INSERT INTO CollectionAgent ( CollectionSpecimenID, CollectorsName, CollectorsAgentURI, CollectorsSequence, CollectorsNumber, Notes, DataWithholdingReason)
	SELECT   @CollectionSpecimenID, CollectorsName, CollectorsAgentURI, CollectorsSequence, CollectorsNumber, Notes, DataWithholdingReason
	FROM CollectionAgent
	WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
END

-- IdentificationUnit
DECLARE @TempUnitTable TABLE (IdentificationUnitID int primary key,
	OriginalIdentificationUnitID int NULL)
DECLARE @IdentificationUnitID int
DECLARE @OriginalIdentificationUnitID int

DECLARE UnitCursor CURSOR FOR
SELECT IdentificationUnitID FROM IdentificationUnit WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
OPEN UnitCursor
FETCH NEXT FROM UnitCursor INTO @OriginalIdentificationUnitID
WHILE @@FETCH_STATUS = 0
BEGIN
	-- IdentificationUnit
	INSERT INTO IdentificationUnit 
	      (CollectionSpecimenID, LastIdentificationCache, FamilyCache, OrderCache, HierarchyCache, TaxonomicGroup, 
		OnlyObserved, RelationType, ColonisedSubstratePart, LifeStage, Gender, NumberOfUnits, ExsiccataNumber, ExsiccataIdentification, UnitIdentifier,
		Circumstances, DisplayOrder, Notes)
	SELECT @CollectionSpecimenID, LastIdentificationCache, FamilyCache, OrderCache, HierarchyCache, TaxonomicGroup, 
		OnlyObserved, RelationType, ColonisedSubstratePart, LifeStage, Gender, NumberOfUnits, ExsiccataNumber, ExsiccataIdentification, UnitIdentifier,
		Circumstances, DisplayOrder, Notes
	FROM IdentificationUnit
	WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
	AND IdentificationUnitID = @OriginalIdentificationUnitID

	SET @IdentificationUnitID = (SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY])
	INSERT INTO @TempUnitTable (IdentificationUnitID, OriginalIdentificationUnitID) VALUES (@IdentificationUnitID, @OriginalIdentificationUnitID)

	-- Identification
	IF (@IncludedTables LIKE '%|Identification|%')
	BEGIN
		INSERT INTO Identification 
		     (CollectionSpecimenID, IdentificationUnitID, IdentificationSequence, IdentificationDate, IdentificationDay, IdentificationMonth, IdentificationYear, 
			  IdentificationDateSupplement, IdentificationDateCategory, VernacularTerm, TermURI, TaxonomicName, NameURI, IdentificationCategory, IdentificationQualifier, 
			  TypeStatus, TypeNotes, Notes, ResponsibleName, ResponsibleAgentURI)
		SELECT @CollectionSpecimenID, @IdentificationUnitID, IdentificationSequence, IdentificationDate, IdentificationDay, IdentificationMonth, IdentificationYear, 
			  IdentificationDateSupplement, IdentificationDateCategory, VernacularTerm, TermUri, TaxonomicName, NameURI, IdentificationCategory, IdentificationQualifier, 
			  TypeStatus, TypeNotes, Notes, ResponsibleName, ResponsibleAgentURI
		FROM Identification
		WHERE Identification.CollectionSpecimenID = @OriginalCollectionSpecimenID
		and Identification.IdentificationUnitID = @OriginalIdentificationUnitID
	END

   	FETCH NEXT FROM UnitCursor INTO @OriginalIdentificationUnitID
END
CLOSE UnitCursor
DEALLOCATE UnitCursor

-- Fixing the relations between the units
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM @TempUnitTable)
IF @I > 0
BEGIN
	UPDATE N SET N.RelatedUnitID = NH.IdentificationUnitID
	FROM IdentificationUnit N, IdentificationUnit NH, @TempUnitTable T, @TempUnitTable TH, IdentificationUnit O--, IdentificationUnit OH
	WHERE N.IdentificationUnitID = T.IdentificationUnitID
	AND O.IdentificationUnitID = T.OriginalIdentificationUnitID
	AND O.RelatedUnitID = TH.OriginalIdentificationUnitID
	AND TH.IdentificationUnitID = NH.IdentificationUnitID

	UPDATE N SET N.ParentUnitID = NH.IdentificationUnitID
	FROM IdentificationUnit N, IdentificationUnit NH, @TempUnitTable T, @TempUnitTable TH, IdentificationUnit O--, IdentificationUnit OH
	WHERE N.IdentificationUnitID = T.IdentificationUnitID
	AND O.IdentificationUnitID = T.OriginalIdentificationUnitID
	AND O.ParentUnitID = TH.OriginalIdentificationUnitID
	AND TH.IdentificationUnitID = NH.IdentificationUnitID
END

-- CollectionSpecimenPart
DECLARE @TempPartTable TABLE (SpecimenPartID int primary key,
	OriginalSpecimenPartID int NULL)
DECLARE @SpecimenPartID int
DECLARE @OriginalSpecimenPartID int

DECLARE @FetchStatusPartCursor int
DECLARE @FetchStatusProcessingCursor int
DECLARE PartCursor CURSOR FOR
SELECT SpecimenPartID FROM CollectionSpecimenPart WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
OPEN PartCursor
FETCH NEXT FROM PartCursor INTO @OriginalSpecimenPartID
SET @FetchStatusPartCursor = @@FETCH_STATUS
WHILE @FetchStatusPartCursor = 0
BEGIN
	-- CollectionSpecimenPart
	INSERT INTO CollectionSpecimenPart 
	       (CollectionSpecimenID, PreparationMethod, PreparationDate, 
		AccessionNumber, PartSublabel, CollectionID, MaterialCategory, StorageLocation, Stock, Notes)
	SELECT @CollectionSpecimenID, PreparationMethod, PreparationDate, 
		AccessionNumber, PartSublabel, CollectionID, MaterialCategory, StorageLocation, Stock, Notes
	FROM CollectionSpecimenPart
	WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
	AND SpecimenPartID = @OriginalSpecimenPartID

	SET @SpecimenPartID = (SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY])
	INSERT INTO @TempPartTable (SpecimenPartID, OriginalSpecimenPartID) VALUES (@SpecimenPartID, @OriginalSpecimenPartID)



	--CollectionSpecimenProcessing
	--CollectionSpecimenProcessingMethod
	--CollectionSpecimenProcessingMethodParameter
	IF (@IncludedTables LIKE '%|CollectionSpecimenProcessing|%')
	BEGIN
		DECLARE @OriginalSpecimenProcessingID int
		DECLARE @SpecimenProcessingID int
		DECLARE ProcessingCursor CURSOR FOR
		SELECT SpecimenProcessingID FROM CollectionSpecimenProcessing WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID AND SpecimenPartID = @OriginalSpecimenPartID
		OPEN ProcessingCursor
		FETCH NEXT FROM ProcessingCursor INTO @OriginalSpecimenProcessingID
		SET @FetchStatusProcessingCursor = @@FETCH_STATUS
		WHILE @FetchStatusProcessingCursor = 0
		BEGIN
			-- CollectionSpecimenProcessing
			INSERT INTO CollectionSpecimenProcessing
				   (CollectionSpecimenID, ProcessingDate, ProcessingID, Protocoll, SpecimenPartID, ProcessingDuration,  
				ResponsibleName, ResponsibleAgentURI, Notes)
			SELECT @CollectionSpecimenID, ProcessingDate, ProcessingID, Protocoll, @SpecimenPartID, ProcessingDuration,  
				ResponsibleName, ResponsibleAgentURI, Notes
			FROM CollectionSpecimenProcessing P
			WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
			AND P.SpecimenPartID = @OriginalSpecimenPartID
			AND P.SpecimenProcessingID = @OriginalSpecimenProcessingID

			SET @SpecimenProcessingID = (SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY])

			IF (@IncludedTables LIKE '%|CollectionSpecimenProcessingMethod|%')
			BEGIN
				-- CollectionSpecimenProcessingMethod
				INSERT INTO CollectionSpecimenProcessingMethod
					   (CollectionSpecimenID, SpecimenProcessingID, MethodID, MethodMarker, ProcessingID)
				SELECT @CollectionSpecimenID, @SpecimenProcessingID, M.MethodID, M.MethodMarker, M.ProcessingID
				FROM CollectionSpecimenProcessingMethod M
				WHERE M.CollectionSpecimenID = @OriginalCollectionSpecimenID
				AND M.SpecimenProcessingID = @OriginalSpecimenProcessingID

				-- CollectionSpecimenProcessingMethodParameter
				INSERT INTO CollectionSpecimenProcessingMethodParameter
					  (CollectionSpecimenID, SpecimenProcessingID, ProcessingID, MethodID, MethodMarker, ParameterID, Value)
				SELECT @CollectionSpecimenID, @SpecimenProcessingID, M.ProcessingID, M.MethodID, M.MethodMarker, M.ParameterID, M.Value
				FROM CollectionSpecimenProcessingMethodParameter M
				WHERE M.CollectionSpecimenID = @OriginalCollectionSpecimenID
				AND M.SpecimenProcessingID = @OriginalSpecimenProcessingID
			END
			FETCH NEXT FROM ProcessingCursor INTO @OriginalSpecimenProcessingID
			SET @FetchStatusProcessingCursor = @@FETCH_STATUS
		END
		CLOSE ProcessingCursor
		DEALLOCATE ProcessingCursor
	END

	-- CollectionSpecimenPartDescription
	IF (@IncludedTables LIKE '%|CollectionSpecimenPartDescription|%')
	BEGIN
		INSERT INTO [dbo].[CollectionSpecimenPartDescription]
			  ([CollectionSpecimenID],[SpecimenPartID],[PartDescriptionID],[Description],[DescriptionTermURI],[Notes])
		SELECT @CollectionSpecimenID, @SpecimenPartID, [PartDescriptionID],[Description],[DescriptionTermURI],[Notes]
		  FROM [dbo].[CollectionSpecimenPartDescription]
	END

	FETCH NEXT FROM PartCursor INTO @OriginalSpecimenPartID
	SET @FetchStatusPartCursor = @@FETCH_STATUS
END
CLOSE PartCursor
DEALLOCATE PartCursor

-- Fixing the relations between the parts
DECLARE @P INT
SET @P = (SELECT COUNT(*) FROM @TempUnitTable)
IF @P > 0
BEGIN
	UPDATE N SET N.DerivedFromSpecimenPartID = NH.SpecimenPartID
	FROM CollectionSpecimenPart N, CollectionSpecimenPart NH, @TempPartTable T, @TempPartTable TH, CollectionSpecimenPart O--, IdentificationUnit OH
	WHERE N.SpecimenPartID = T.SpecimenPartID
	AND O.SpecimenPartID = T.OriginalSpecimenPartID
	AND O.DerivedFromSpecimenPartID = TH.OriginalSpecimenPartID
	AND TH.SpecimenPartID = NH.SpecimenPartID
END

--IdentificationUnitInPart
--IF (@IncludedTables LIKE '%|IdentificationUnit|%' AND @IncludedTables LIKE '%|CollectionSpecimenPart|%')
BEGIN
	INSERT INTO IdentificationUnitInPart 
	       (CollectionSpecimenID,   IdentificationUnitID,  SpecimenPartID,    DisplayOrder)
	SELECT @CollectionSpecimenID, U.IdentificationUnitID, P.SpecimenPartID, I.DisplayOrder
	FROM IdentificationUnitInPart I, @TempPartTable P, @TempUnitTable U
	WHERE I.IdentificationUnitID = U.OriginalIdentificationUnitID
	AND I.SpecimenPartID = P.OriginalSpecimenPartID
	AND I.CollectionSpecimenID = @OriginalCollectionSpecimenID
END


-- CollectionRelation
IF (@IncludedTables LIKE '%|CollectionSpecimenRelation|%')
BEGIN
	INSERT INTO CollectionSpecimenRelation 
	       (CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, 
		RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache)
	SELECT @CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, 
		RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache
	FROM CollectionSpecimenRelation
	WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
	AND [IdentificationUnitID] IS NULL
	AND [SpecimenPartID] IS NULL

	INSERT INTO CollectionSpecimenRelation 
	       (CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, 
		RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache, IdentificationUnitID)
	SELECT @CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, 
		RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache, U.IdentificationUnitID
	FROM CollectionSpecimenRelation R, @TempUnitTable U
	WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
	AND R.IdentificationUnitID = U.OriginalIdentificationUnitID
	AND [SpecimenPartID] IS NULL

	INSERT INTO CollectionSpecimenRelation 
	       (CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, 
		RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache, SpecimenPartID)
	SELECT @CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, 
		RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache, P.SpecimenPartID
	FROM CollectionSpecimenRelation R, @TempPartTable P
	WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
	AND [IdentificationUnitID] IS NULL
	AND R.[SpecimenPartID] = P.OriginalSpecimenPartID

	INSERT INTO CollectionSpecimenRelation 
	       (CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, 
		RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache, IdentificationUnitID, SpecimenPartID)
	SELECT @CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, 
		RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache, U.IdentificationUnitID, P.SpecimenPartID
	FROM CollectionSpecimenRelation R, @TempPartTable P, @TempUnitTable U
	WHERE CollectionSpecimenID = @OriginalCollectionSpecimenID
	AND R.IdentificationUnitID = U.OriginalIdentificationUnitID
	AND R.[SpecimenPartID] = P.OriginalSpecimenPartID

END


--IdentificationUnitAnalysis
--IdentificationUnitAnalysisMethod
--IdentificationUnitAnalysisMethodParameter
IF (@IncludedTables LIKE '%|IdentificationUnitAnalysis|%')
BEGIN
	-- for parts
	INSERT INTO [dbo].[IdentificationUnitAnalysis]
           ([CollectionSpecimenID],[IdentificationUnitID]
		   ,[AnalysisID],[AnalysisNumber],[AnalysisResult],[ExternalAnalysisURI],[ResponsibleName],[ResponsibleAgentURI],[AnalysisDate]
           ,[SpecimenPartID],[Notes])
	SELECT DISTINCT @CollectionSpecimenID, U.IdentificationUnitID
		, I.AnalysisID, I.AnalysisNumber, I.AnalysisResult, I.ExternalAnalysisURI, I.ResponsibleName, I.ResponsibleAgentURI, I.AnalysisDate
		, P.SpecimenPartID, I.Notes
	FROM IdentificationUnitAnalysis I, @TempPartTable P, @TempUnitTable U
	WHERE I.IdentificationUnitID = U.OriginalIdentificationUnitID
	AND I.SpecimenPartID = P.OriginalSpecimenPartID
	AND I.CollectionSpecimenID = @OriginalCollectionSpecimenID

	-- for non parts
	INSERT INTO [dbo].[IdentificationUnitAnalysis]
           ([CollectionSpecimenID],[IdentificationUnitID]
           ,[AnalysisID],[AnalysisNumber],[AnalysisResult],[ExternalAnalysisURI],[ResponsibleName],[ResponsibleAgentURI],[AnalysisDate]
           ,[SpecimenPartID],[Notes])
	SELECT DISTINCT @CollectionSpecimenID, U.IdentificationUnitID
	, I.AnalysisID, I.AnalysisNumber, I.AnalysisResult, I.ExternalAnalysisURI, I.ResponsibleName, I.ResponsibleAgentURI, I.AnalysisDate
	, I.SpecimenPartID, I.Notes
	FROM IdentificationUnitAnalysis I, @TempUnitTable U
	WHERE I.IdentificationUnitID = U.OriginalIdentificationUnitID
	AND I.SpecimenPartID IS NULL
	AND I.CollectionSpecimenID = @OriginalCollectionSpecimenID

	IF (@IncludedTables LIKE '%|IdentificationUnitAnalysisMethod|%')
	BEGIN
		INSERT INTO [dbo].[IdentificationUnitAnalysisMethod]
			   ([CollectionSpecimenID],[IdentificationUnitID],[MethodID]
			   ,[AnalysisID],[AnalysisNumber],[MethodMarker])
		SELECT @CollectionSpecimenID, U.IdentificationUnitID, I.MethodID
		, I.AnalysisID, I.AnalysisNumber, I.MethodMarker
		FROM IdentificationUnitAnalysisMethod I, @TempUnitTable U
		WHERE I.IdentificationUnitID = U.OriginalIdentificationUnitID
		AND I.CollectionSpecimenID = @OriginalCollectionSpecimenID

		INSERT INTO [dbo].[IdentificationUnitAnalysisMethodParameter]
			   ([CollectionSpecimenID],[IdentificationUnitID],[AnalysisID],[AnalysisNumber],[MethodID]
			   ,[ParameterID],[Value],[MethodMarker])
		SELECT @CollectionSpecimenID, U.IdentificationUnitID, I.AnalysisID, I.AnalysisNumber, I.MethodID
		, I.ParameterID, I.Value, I.MethodMarker
		FROM IdentificationUnitAnalysisMethodParameter I, @TempUnitTable U
		WHERE I.IdentificationUnitID = U.OriginalIdentificationUnitID
		AND I.CollectionSpecimenID = @OriginalCollectionSpecimenID
	END
END

--IdentificationGoeUnitAnalysis
IF (@IncludedTables LIKE '%|IdentificationUnitGeoAnalysis|%')
BEGIN
	INSERT INTO [dbo].[IdentificationUnitGeoAnalysis]
		 ([CollectionSpecimenID],[IdentificationUnitID],[AnalysisDate],[Geography],[Geometry],[ResponsibleName],[ResponsibleAgentURI],[Notes])
	SELECT @CollectionSpecimenID,[IdentificationUnitID],[AnalysisDate],[Geography],[Geometry],[ResponsibleName],[ResponsibleAgentURI],[Notes]
	  FROM [dbo].[IdentificationUnitGeoAnalysis] I
	WHERE I.CollectionSpecimenID = @OriginalCollectionSpecimenID
END

--CollectionSpecimenImage
IF (@IncludedTables LIKE '%|CollectionSpecimenImage|%')
BEGIN
	INSERT INTO CollectionSpecimenImage
		      (CollectionSpecimenID, URI, ResourceURI, SpecimenPartID, IdentificationUnitID, ImageType, Notes, DataWithholdingReason, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, 
		LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, LicenseNotes, LicenseURI)
	SELECT @CollectionSpecimenID, URI, ResourceURI, P.SpecimenPartID, U.IdentificationUnitID, ImageType, Notes, DataWithholdingReason, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, 
		LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, LicenseNotes, LicenseURI
	FROM CollectionSpecimenImage I, @TempPartTable P, @TempUnitTable U
	WHERE I.IdentificationUnitID = U.OriginalIdentificationUnitID
	AND I.SpecimenPartID = P.OriginalSpecimenPartID
	AND I.CollectionSpecimenID = @OriginalCollectionSpecimenID

	INSERT INTO CollectionSpecimenImage
		   (CollectionSpecimenID, URI, ResourceURI, SpecimenPartID, IdentificationUnitID, ImageType, Notes, DataWithholdingReason, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, 
		LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, LicenseNotes, LicenseURI)
	SELECT @CollectionSpecimenID, URI, ResourceURI, P.SpecimenPartID, I.IdentificationUnitID, ImageType, Notes, DataWithholdingReason, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, 
		LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, LicenseNotes, LicenseURI
	FROM CollectionSpecimenImage I, @TempPartTable P
	WHERE I.IdentificationUnitID IS NULL
	AND I.SpecimenPartID = P.OriginalSpecimenPartID
	AND I.CollectionSpecimenID = @OriginalCollectionSpecimenID

	INSERT INTO CollectionSpecimenImage
		(CollectionSpecimenID, URI, ResourceURI, SpecimenPartID, IdentificationUnitID, ImageType, Notes, DataWithholdingReason, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, 
		LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, LicenseNotes, LicenseURI)
	SELECT @CollectionSpecimenID, URI, ResourceURI, I.SpecimenPartID, U.IdentificationUnitID, ImageType, Notes, DataWithholdingReason, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, 
		LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, LicenseNotes, LicenseURI
	FROM CollectionSpecimenImage I, @TempUnitTable U
	WHERE I.IdentificationUnitID = U.OriginalIdentificationUnitID
	AND I.SpecimenPartID IS NULL
	AND I.CollectionSpecimenID = @OriginalCollectionSpecimenID

	INSERT INTO CollectionSpecimenImage
		(CollectionSpecimenID, URI, ResourceURI, SpecimenPartID, IdentificationUnitID, ImageType, Notes, DataWithholdingReason, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, 
		LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, LicenseNotes, LicenseURI)
	SELECT @CollectionSpecimenID, URI, ResourceURI, I.SpecimenPartID, I.IdentificationUnitID, ImageType, Notes, DataWithholdingReason, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, 
		LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, LicenseNotes, LicenseURI
	FROM CollectionSpecimenImage I
	WHERE I.IdentificationUnitID IS NULL
	AND I.SpecimenPartID IS NULL
	AND I.CollectionSpecimenID = @OriginalCollectionSpecimenID

END


--CollectionSpecimenImageProperty
IF (@IncludedTables LIKE '%|CollectionSpecimenImageProperty|%')
BEGIN
	INSERT INTO CollectionSpecimenImageProperty
		   (CollectionSpecimenID, URI, Property, Description, ImageArea)
	SELECT @CollectionSpecimenID, URI, Property, Description, ImageArea
	FROM CollectionSpecimenImageProperty I
	WHERE I.CollectionSpecimenID = @OriginalCollectionSpecimenID
END


--CollectionSpecimenReference
IF (@IncludedTables LIKE '%|CollectionSpecimenReference|%')
BEGIN
	INSERT INTO CollectionSpecimenReference
		   (CollectionSpecimenID, ReferenceTitle,    ReferenceURI,   IdentificationUnitID,   SpecimenPartID,   ReferenceDetails,   Notes,   ResponsibleName, ResponsibleAgentURI, IdentificationSequence)
	SELECT @CollectionSpecimenID, R.ReferenceTitle, R.ReferenceURI, U.IdentificationUnitID, P.SpecimenPartID, R.ReferenceDetails, R.Notes, R.ResponsibleName, R.ResponsibleAgentURI, R.IdentificationSequence
	FROM CollectionSpecimenReference AS R, @TempPartTable P, @TempUnitTable U
	WHERE R.IdentificationUnitID = U.OriginalIdentificationUnitID
	AND R.SpecimenPartID = P.OriginalSpecimenPartID
	AND R.CollectionSpecimenID = @OriginalCollectionSpecimenID

	INSERT INTO CollectionSpecimenReference
		   (CollectionSpecimenID,   ReferenceTitle,   ReferenceURI,   IdentificationUnitID,   SpecimenPartID, ReferenceDetails, Notes, ResponsibleName, ResponsibleAgentURI)
	SELECT @CollectionSpecimenID, R.ReferenceTitle, R.ReferenceURI, R.IdentificationUnitID, P.SpecimenPartID, R.ReferenceDetails, R.Notes, R.ResponsibleName, R.ResponsibleAgentURI
	FROM CollectionSpecimenReference AS R, @TempPartTable P
	WHERE R.IdentificationUnitID IS NULL
	AND R.SpecimenPartID = P.OriginalSpecimenPartID
	AND R.CollectionSpecimenID = @OriginalCollectionSpecimenID

	INSERT INTO CollectionSpecimenReference
		   (CollectionSpecimenID,   ReferenceTitle,   ReferenceURI,   IdentificationUnitID,   SpecimenPartID,   ReferenceDetails, Notes, ResponsibleName, ResponsibleAgentURI)
	SELECT @CollectionSpecimenID, R.ReferenceTitle, R.ReferenceURI, U.IdentificationUnitID, R.SpecimenPartID, R.ReferenceDetails, R.Notes, R.ResponsibleName, R.ResponsibleAgentURI
	FROM CollectionSpecimenReference AS R, @TempUnitTable U
	WHERE R.IdentificationUnitID = U.OriginalIdentificationUnitID
	AND R.SpecimenPartID IS NULL
	AND R.CollectionSpecimenID = @OriginalCollectionSpecimenID

	INSERT INTO CollectionSpecimenReference
		   (CollectionSpecimenID,   ReferenceTitle,   ReferenceURI,   IdentificationUnitID,   SpecimenPartID, ReferenceDetails, Notes, ResponsibleName, ResponsibleAgentURI)
	SELECT @CollectionSpecimenID, R.ReferenceTitle, R.ReferenceURI, R.IdentificationUnitID, R.SpecimenPartID, R.ReferenceDetails, R.Notes, R.ResponsibleName, R.ResponsibleAgentURI
	FROM CollectionSpecimenReference AS R
	WHERE R.IdentificationUnitID IS NULL
	AND R.SpecimenPartID IS NULL
	AND R.CollectionSpecimenID = @OriginalCollectionSpecimenID

END

--CollectionSpecimenTransaction
IF (@IncludedTables LIKE '%|CollectionSpecimenTransaction|%')
BEGIN
	INSERT INTO CollectionSpecimenTransaction
		(CollectionSpecimenID, TransactionID, SpecimenPartID, AccessionNumber, TransactionReturnID)
	SELECT @CollectionSpecimenID, TransactionID, P.SpecimenPartID, AccessionNumber, TransactionReturnID
	FROM CollectionSpecimenTransaction T, @TempPartTable P
	WHERE T.SpecimenPartID = P.OriginalSpecimenPartID
	AND T.CollectionSpecimenID = @OriginalCollectionSpecimenID
END

--Annotation
IF (@IncludedTables LIKE '%|Annotation|%')
BEGIN
	INSERT INTO [dbo].[Annotation]
           ([AnnotationType],[Title],[Annotation],[URI],[ReferenceDisplayText],[ReferenceURI]
           ,[SourceDisplayText],[SourceURI],[IsInternal],[ReferencedID],[ReferencedTable])
	SELECT A.AnnotationType, A.Title, A.Annotation, A.URI, A.ReferenceDisplayText, A.ReferenceURI
	, A.SourceDisplayText, A.SourceURI, A.IsInternal, @CollectionSpecimenID, A.ReferencedTable
	FROM Annotation A
	WHERE A.ReferencedTable = 'CollectionSpecimen' AND A.ReferencedID = @OriginalCollectionSpecimenID

	INSERT INTO [dbo].[Annotation]
           ([AnnotationType],[Title],[Annotation] ,[URI] ,[ReferenceDisplayText]  ,[ReferenceURI]
           ,[SourceDisplayText]  ,[SourceURI] ,[IsInternal]   ,[ReferencedID]  ,[ReferencedTable])
	SELECT A.AnnotationType, A.Title, A.Annotation, A.URI, A.ReferenceDisplayText, A.ReferenceURI
		 , A.SourceDisplayText, A.SourceURI, A.IsInternal, U.IdentificationUnitID, A.ReferencedTable
	FROM Annotation A, @TempUnitTable U
	WHERE A.ReferencedTable = 'IdentificationUnit' AND A.ReferencedID = U.OriginalIdentificationUnitID

	INSERT INTO [dbo].[Annotation]
           ([AnnotationType] ,[Title]  ,[Annotation] ,[URI]  ,[ReferenceDisplayText] ,[ReferenceURI]
           ,[SourceDisplayText],[SourceURI] ,[IsInternal],[ReferencedID] ,[ReferencedTable])
	SELECT A.AnnotationType, A.Title, A.Annotation, A.URI, A.ReferenceDisplayText, A.ReferenceURI
		, A.SourceDisplayText, A.SourceURI, A.IsInternal, P.SpecimenPartID, A.ReferencedTable
	FROM Annotation A, @TempPartTable P
	WHERE A.ReferencedTable = 'CollectionSpecimenPart' AND A.ReferencedID = P.OriginalSpecimenPartID

	if @EventCopyMode = 1 AND NOT @CollectionEventID IS NULL
	BEGIN
		INSERT INTO [dbo].[Annotation]
			   ([AnnotationType],[Title],[Annotation]  ,[URI]  ,[ReferenceDisplayText]  ,[ReferenceURI]
			   ,[SourceDisplayText]  ,[SourceURI] ,[IsInternal] ,[ReferencedID] ,[ReferencedTable])
		SELECT A.AnnotationType, A.Title, A.Annotation, A.URI, A.ReferenceDisplayText, A.ReferenceURI
			, A.SourceDisplayText, A.SourceURI, A.IsInternal, @CollectionEventID, A.ReferencedTable
		FROM Annotation A
		WHERE A.ReferencedTable = 'CollectionEvent' AND A.ReferencedID = @OriginalCollectionEventID
	END

END

--ExternalIdentifier
IF (@IncludedTables LIKE '%|ExternalIdentifier|%')
BEGIN
	INSERT INTO [dbo].[ExternalIdentifier]
           ([ReferencedTable] ,[ReferencedID]  ,[Type]   ,[Identifier]  ,[URL]  ,[Notes])
	SELECT T.ReferencedTable, @CollectionSpecimenID, T.Type, T.Identifier, T.URL, T.Notes
	FROM ExternalIdentifier T
	WHERE T.ReferencedTable = 'CollectionSpecimen' AND T.ReferencedID = @OriginalCollectionSpecimenID

	INSERT INTO [dbo].[ExternalIdentifier]
           ([ReferencedTable] ,[ReferencedID]    ,[Type]  ,[Identifier]  ,[URL] ,[Notes])
	SELECT T.ReferencedTable, U.IdentificationUnitID, T.Type, T.Identifier, T.URL, T.Notes
	FROM ExternalIdentifier T, @TempUnitTable U
	WHERE T.ReferencedTable = 'IdentificationUnit' AND T.ReferencedID = U.OriginalIdentificationUnitID

	INSERT INTO [dbo].[ExternalIdentifier]
           ([ReferencedTable]  ,[ReferencedID] ,[Type]  ,[Identifier]  ,[URL] ,[Notes])
	SELECT T.ReferencedTable, P.SpecimenPartID, T.Type, T.Identifier, T.URL, T.Notes
	FROM ExternalIdentifier T, @TempPartTable P
	WHERE T.ReferencedTable = 'CollectionSpecimenPart' AND T.ReferencedID = P.OriginalSpecimenPartID

	if @EventCopyMode = 1 AND NOT @CollectionEventID IS NULL
	BEGIN
		INSERT INTO [dbo].[ExternalIdentifier]
			   ([ReferencedTable] ,[ReferencedID] ,[Type]   ,[Identifier]  ,[URL]  ,[Notes])
		SELECT T.ReferencedTable, @CollectionEventID, T.Type, T.Identifier, T.URL, T.Notes
		FROM ExternalIdentifier T
		WHERE T.ReferencedTable = 'CollectionEvent' AND T.ReferencedID = @OriginalCollectionEventID
	END

END

SELECT @CollectionSpecimenID

GO
GRANT EXECUTE ON [dbo].[procCopyCollectionSpecimen2] TO [Editor] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[procCopyCollectionSpecimenPart]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######  procCopyCollectionSpecimenPart  #############################################################################
--#####################################################################################################################


CREATE  PROCEDURE [dbo].[procCopyCollectionSpecimenPart] 
	(@SpecimenPartID int output ,
	@OriginalSpecimenPartID int ,
	@AccessionNumber  nvarchar(50),
	@PartSublabel  nvarchar(50),
	@StorageLocation  nvarchar(255),
	@IncludedTables nvarchar(4000))
AS
declare @count int

/*
Copy a collection specimen part

@IncludedTables contains list of tables that are copied according to the users choice
*/

-- CollectionSpecimenPart

INSERT INTO CollectionSpecimenPart ( CollectionSpecimenID, PreparationMethod, PreparationDate, 
	AccessionNumber, PartSublabel, CollectionID, MaterialCategory, StorageLocation, Stock, Notes, DerivedFromSpecimenPartID)
SELECT CollectionSpecimenID, PreparationMethod, PreparationDate, 
	@AccessionNumber, @PartSublabel, CollectionID, MaterialCategory, @StorageLocation, Stock, Notes, DerivedFromSpecimenPartID
FROM CollectionSpecimenPart
WHERE SpecimenPartID = @OriginalSpecimenPartID

SET @SpecimenPartID = (SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY])


--IdentificationUnitInPart
IF (@IncludedTables LIKE '%|IdentificationUnitInPart|%')
BEGIN
	INSERT INTO IdentificationUnitInPart (CollectionSpecimenID, IdentificationUnitID, SpecimenPartID, DisplayOrder)
	SELECT I.CollectionSpecimenID, I.IdentificationUnitID, @SpecimenPartID, I.DisplayOrder
	FROM IdentificationUnitInPart I
	WHERE I.SpecimenPartID = @OriginalSpecimenPartID
END


-- CollectionRelation
IF (@IncludedTables LIKE '%|CollectionSpecimenRelation|%')
BEGIN

	INSERT INTO CollectionSpecimenRelation ( CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, 
		RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache, SpecimenPartID)
	SELECT CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, 
		RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache, @SpecimenPartID
	FROM CollectionSpecimenRelation R
	WHERE R.[SpecimenPartID] = @OriginalSpecimenPartID
END

--CollectionSpecimenProcessing
--CollectionSpecimenProcessingMethod
--CollectionSpecimenProcessingMethodParameter
IF (@IncludedTables LIKE '%|CollectionSpecimenProcessing|%')
BEGIN
	-- CollectionSpecimenProcessing
	INSERT INTO CollectionSpecimenProcessing
		(CollectionSpecimenID, ProcessingDate, ProcessingID, Protocoll, SpecimenPartID, ProcessingDuration,  
		ResponsibleName, ResponsibleAgentURI, Notes)
	SELECT CollectionSpecimenID, ProcessingDate, ProcessingID, Protocoll, @SpecimenPartID, ProcessingDuration,  
		ResponsibleName, ResponsibleAgentURI, Notes
	FROM CollectionSpecimenProcessing P
	WHERE P.SpecimenPartID = @OriginalSpecimenPartID

	IF (@IncludedTables LIKE '%|CollectionSpecimenProcessingMethod|%')
	BEGIN
		-- CollectionSpecimenProcessingMethod
		INSERT INTO CollectionSpecimenProcessingMethod
			(CollectionSpecimenID, SpecimenProcessingID, MethodID, MethodMarker, ProcessingID)
		SELECT M.CollectionSpecimenID, P.SpecimenProcessingID, M.MethodID, M.MethodMarker, M.ProcessingID
		FROM CollectionSpecimenProcessingMethod M, CollectionSpecimenProcessing P
		WHERE P.SpecimenPartID = @OriginalSpecimenPartID

		-- CollectionSpecimenProcessingMethodParameter
		INSERT INTO CollectionSpecimenProcessingMethodParameter
			(CollectionSpecimenID, SpecimenProcessingID, ProcessingID, MethodID, MethodMarker, ParameterID, Value)
		SELECT M.CollectionSpecimenID, P.SpecimenProcessingID, P.ProcessingID, M.MethodID, M.MethodMarker, M.ParameterID, M.Value
		FROM CollectionSpecimenProcessingMethodParameter M, CollectionSpecimenProcessing P
		WHERE P.SpecimenPartID = @OriginalSpecimenPartID
	END
END


--CollectionSpecimenPartDescription
IF (@IncludedTables LIKE '%|CollectionSpecimenPartDescription|%')
BEGIN
	INSERT INTO CollectionSpecimenPartDescription
							 (CollectionSpecimenID, SpecimenPartID, [Description], DescriptionTermURI, Notes)
	SELECT        CollectionSpecimenID, @SpecimenPartID, [Description], DescriptionTermURI, Notes
	FROM            CollectionSpecimenPartDescription	R
	WHERE R.SpecimenPartID = @OriginalSpecimenPartID
END


--CollectionSpecimenReference
IF (@IncludedTables LIKE '%|CollectionSpecimenReference|%')
BEGIN
	INSERT INTO CollectionSpecimenReference
		(CollectionSpecimenID, ReferenceTitle, ReferenceURI, IdentificationUnitID, SpecimenPartID, ReferenceDetails, Notes, ResponsibleName, ResponsibleAgentURI)
	SELECT CollectionSpecimenID, R.ReferenceTitle, R.ReferenceURI, R.IdentificationUnitID, @SpecimenPartID, R.ReferenceDetails, R.Notes, R.ResponsibleName, R.ResponsibleAgentURI
	FROM CollectionSpecimenReference AS R
	WHERE R.SpecimenPartID = @OriginalSpecimenPartID

END


--CollectionSpecimenPartRegulation
IF (@IncludedTables LIKE '%|CollectionSpecimenPartRegulation|%')
BEGIN
	INSERT INTO CollectionSpecimenPartRegulation
							 (CollectionSpecimenID, SpecimenPartID, RegulationID)
	SELECT        CollectionSpecimenID, @SpecimenPartID, RegulationID
	FROM            CollectionSpecimenPartRegulation R
	WHERE R.SpecimenPartID = @OriginalSpecimenPartID

END


--CollectionSpecimenTransaction
IF (@IncludedTables LIKE '%|CollectionSpecimenTransaction|%')
BEGIN
	INSERT INTO CollectionSpecimenTransaction
		(CollectionSpecimenID, TransactionID, SpecimenPartID, AccessionNumber, TransactionReturnID)
	SELECT T.CollectionSpecimenID, TransactionID, @SpecimenPartID, AccessionNumber, TransactionReturnID
	FROM CollectionSpecimenTransaction T
	WHERE T.SpecimenPartID = @OriginalSpecimenPartID
END

--Annotation
IF (@IncludedTables LIKE '%|Annotation|%')
BEGIN
	INSERT INTO [dbo].[Annotation]
           ([ReferencedAnnotationID]
           ,[AnnotationType]
           ,[Title]
           ,[Annotation]
           ,[URI]
           ,[ReferenceDisplayText]
           ,[ReferenceURI]
           ,[SourceDisplayText]
           ,[SourceURI]
           ,[IsInternal]
           ,[ReferencedID]
           ,[ReferencedTable])
	SELECT A.ReferencedAnnotationID, A.AnnotationType, A.Title, A.Annotation, A.URI, A.ReferenceDisplayText, A.ReferenceURI
	, A.SourceDisplayText, A.SourceURI, A.IsInternal, @SpecimenPartID, A.ReferencedTable
	FROM Annotation A
	WHERE A.ReferencedTable = 'CollectionSpecimenPart' AND A.ReferencedID = @OriginalSpecimenPartID
END

--ExternalIdentifier
IF (@IncludedTables LIKE '%|ExternalIdentifier|%')
BEGIN

	INSERT INTO [dbo].[ExternalIdentifier]
           ([ReferencedTable]
           ,[ReferencedID]
           ,[Type]
           ,[Identifier]
           ,[URL]
           ,[Notes])
	SELECT T.ReferencedTable, @SpecimenPartID, T.Type, T.Identifier, T.URL, T.Notes
	FROM ExternalIdentifier T
	WHERE T.ReferencedTable = 'CollectionSpecimenPart' AND T.ReferencedID = @OriginalSpecimenPartID


END

SELECT @SpecimenPartID

GO
GRANT EXECUTE ON [dbo].[procCopyCollectionSpecimenPart] TO [Editor] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[procInsertCollectionEventCopy]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
   CREATE  PROCEDURE [dbo].[procInsertCollectionEventCopy]  	(@CollectionEventID int output , 	@OriginalCollectionEventID int) AS declare @count int  INSERT INTO CollectionEvent       (SeriesID, CollectorsEventNumber, CollectionDate, CollectionDay, CollectionMonth, CollectionYear, CollectionDateSupplement,        CollectionDateCategory, CollectionTime, CollectionTimeSpan, LocalityDescription, HabitatDescription, ReferenceTitle, ReferenceURI, ReferenceDetails, CollectingMethod,        Notes, CountryCache, DataWithholdingReason) SELECT SeriesID, CollectorsEventNumber, CollectionDate, CollectionDay, CollectionMonth, CollectionYear, CollectionDateSupplement,        CollectionDateCategory, CollectionTime, CollectionTimeSpan, LocalityDescription, HabitatDescription, ReferenceTitle, ReferenceURI, ReferenceDetails, CollectingMethod,        Notes, CountryCache, DataWithholdingReason FROM  CollectionEvent WHERE CollectionEventID = @OriginalCollectionEventID  SELECT @CollectionEventID = (SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY])  INSERT INTO CollectionEventImage 	(CollectionEventID, URI, ResourceURI, ImageType, Notes) SELECT @CollectionEventID, URI, ResourceURI, ImageType, Notes FROM CollectionEventImage WHERE (CollectionEventID = @OriginalCollectionEventID)  INSERT INTO CollectionEventLocalisation 	(CollectionEventID, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, DeterminationDate, DistanceToLocation,  	DirectionToLocation, ResponsibleName, ResponsibleAgentURI, [Geography], AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache) SELECT @CollectionEventID, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, DeterminationDate, DistanceToLocation,  	DirectionToLocation, ResponsibleName, ResponsibleAgentURI, [Geography], AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache FROM CollectionEventLocalisation WHERE (CollectionEventID = @OriginalCollectionEventID)  INSERT INTO CollectionEventProperty 	(CollectionEventID, PropertyID, DisplayText, PropertyURI, PropertyHierarchyCache, PropertyValue,   	ResponsibleName, ResponsibleAgentURI, Notes,AverageValueCache) SELECT CollectionEventID, PropertyID, DisplayText, PropertyURI, PropertyHierarchyCache, PropertyValue,   	ResponsibleName, ResponsibleAgentURI, Notes,AverageValueCache FROM CollectionEventProperty WHERE (CollectionEventID = @OriginalCollectionEventID)  SELECT @CollectionEventID  ; 
GO
/****** Object:  StoredProcedure [dbo].[procInsertCollectionSpecimenCopy]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   [procInsertCollectionSpecimenCopy]   ######################################################################################
--#####################################################################################################################


CREATE  PROCEDURE [dbo].[procInsertCollectionSpecimenCopy] 
	(@CollectionSpecimenID int output ,
	@OriginalCollectionSpecimenID int ,
	@AccessionNumber  nvarchar(50))
AS

execute dbo.procCopyCollectionSpecimen @CollectionSpecimenID, @OriginalCollectionSpecimenID, @AccessionNumber, 0, 1

SELECT @CollectionSpecimenID
GO
GRANT EXECUTE ON [dbo].[procInsertCollectionSpecimenCopy] TO [Editor] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[procInsertCollectionSpecimenEventCopy]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   [procInsertCollectionSpecimenEventCopy]   ######################################################################################
--#####################################################################################################################

CREATE  PROCEDURE [dbo].[procInsertCollectionSpecimenEventCopy]  	
(@CollectionSpecimenID int output , 	
@OriginalCollectionSpecimenID int , 	
@AccessionNumber  nvarchar(50), 	
@EventCopyMode int) 
AS  
/* 
Copy a collection specimen @EventCopyMode 
-1: dont copy the event, leave the entry in table CollectionSpecimen empty 
0:  take same event as original specimen 
1:  create new event with the same data as the old specimen 
*/ 

execute dbo.procCopyCollectionSpecimen @CollectionSpecimenID, @OriginalCollectionSpecimenID, @AccessionNumber, @EventCopyMode, 1

SELECT @CollectionSpecimenID  ; 
GO
GRANT EXECUTE ON [dbo].[procInsertCollectionSpecimenEventCopy] TO [Typist] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[procSetVersionCollectionEvent]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   procSetVersionCollectionEvent - writing date into LastChanges in ProjectProxy   ############################
--#####################################################################################################################

CREATE  PROCEDURE [dbo].[procSetVersionCollectionEvent]  (@ID int)
AS 
/*  Setting the version of a dataset.  */ 
/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 

DECLARE @NextVersion int 
DECLARE @CurrentVersion int 
DECLARE @LastUser nvarchar(500) 
DECLARE @LastUpdate datetime 
DECLARE @UpdatePeriod int 

set @LastUpdate = (SELECT LogUpdatedWhen FROM CollectionEvent WHERE CollectionEventID = @ID) 
set @UpdatePeriod = (SELECT DateDiff(hour, @LastUpdate, getdate())) 
set @LastUser = (SELECT LogUpdatedBy FROM CollectionEvent WHERE CollectionEventID = @ID) 
set @CurrentVersion = (select Version from CollectionEvent where CollectionEventID = @ID) 
 if @CurrentVersion is null begin set @CurrentVersion = 0 end 
set @NextVersion = @CurrentVersion

if not @ID is null and ((@LastUser <> User_name() and @LastUser <> SUSER_SNAME()) or @UpdatePeriod > 24)
begin  
    set @NextVersion = @CurrentVersion + 1 
    update CollectionEvent set Version = @NextVersion 
    where CollectionEventID = @ID 

/* setting the date in ProjectProxy */ 
Update P 
set P.LastChanges = getdate()
FROM CollectionProject C, CollectionSpecimen S, ProjectProxy P
where S.CollectionEventID = @ID
AND C.CollectionSpecimenID = S.CollectionSpecimenID
AND C.ProjectID = P.ProjectID
AND (S.DataWithholdingReason IS NULL OR S.DataWithholdingReason = '')

select @NextVersion  
END
GO
GRANT EXECUTE ON [dbo].[procSetVersionCollectionEvent] TO [Editor] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[procSetVersionCollectionSpecimen]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   procSetVersionCollectionSpecimen - writing date into LastChanges in ProjectProxy   #########################
--#####################################################################################################################

CREATE PROCEDURE [dbo].[procSetVersionCollectionSpecimen]  (@ID int) 
AS 
/*  Setting the version of a dataset.  */ 
/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 

DECLARE @NextVersion int 
DECLARE @CurrentVersion int 
DECLARE @LastUser nvarchar(500) 
DECLARE @LastUpdate datetime 
DECLARE @UpdatePeriod int 

set @LastUpdate = (SELECT LogUpdatedWhen FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID) 
set @UpdatePeriod = (SELECT DateDiff(hour, @LastUpdate, getdate())) 
set @LastUser = (SELECT LogUpdatedBy FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID) 

if not @ID is null and (@LastUser <> User_name() or @UpdatePeriod > 24) 
begin  
    set @CurrentVersion = (select Version from CollectionSpecimen where CollectionSpecimenID = @ID) 
    if @CurrentVersion is null begin set @CurrentVersion = 0 end 
    set @NextVersion = @CurrentVersion + 1 
    update CollectionSpecimen set Version = @NextVersion 
    where CollectionSpecimenID = @ID 

/* setting the date in ProjectProxy */ 
Update P 
set P.LastChanges = getdate()
FROM CollectionProject C, ProjectProxy P, CollectionSpecimen S 
where C.CollectionSpecimenID = @ID
AND C.ProjectID = P.ProjectID
AND C.CollectionSpecimenID = S.CollectionSpecimenID
AND (S.DataWithholdingReason IS NULL OR S.DataWithholdingReason = '')

select @NextVersion  
END
GO
GRANT EXECUTE ON [dbo].[procSetVersionCollectionSpecimen] TO [Editor] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[SetXmlAttribute]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   SetXmlAttribute    #########################################################################################
--#####################################################################################################################

CREATE Procedure [dbo].[SetXmlAttribute] 
@Table nvarchar(128), 
@Column nvarchar(128), 
@Path nvarchar(4000),  
@Attribute nvarchar(128),
@Value nvarchar(4000),
@WhereClause nvarchar(4000)
AS  
/*
Setting a value of an XML node

Test:
EXEC dbo.SetXmlAttribute 'UserProxy', 'Settings', '/Settings/ModuleSource/Identification/TaxonomicGroup/insect', 'reponse', 'terse', 'LoginName = USER_NAME()'
SELECT [Settings] FROM [dbo].[UserProxy] WHERE LoginName = USER_NAME()

declare @Table nvarchar(128), 
@Column nvarchar(128), 
@Path nvarchar(4000),  
@Attribute nvarchar(128),
@Value nvarchar(4000),
@WhereClause nvarchar(4000)
set @Table = 'UserProxy'
set @Column = 'Settings'
set @Path = '/Settings/ModuleSource/Identification/TaxonomicGroup/insect'
set @Attribute = 'reponse'
set @Value = 'full'
set @WhereClause = 'LoginName = USER_NAME()'

declare @SQL nvarchar(max)
set @SQL = (select 'DECLARE @Setting xml;
SET @Setting = (SELECT T.'+ @Column + ' FROM ' + @Table + ' AS T WHERE ' + @WhereClause + ');
set @Setting.modify(''insert attribute ' + @Attribute + '{"' + @Value + '"} into (' + @Path + ')[1];
update T set T.' + @Column + ' = @Setting 
FROM ' + @Table + ' AS T  
WHERE ' + @WhereClause)

*/
BEGIN 
declare @SQL nvarchar(max)
if len(@Value) = 0 begin set @Value = ' ' end
-- try to insert the attribute
set @SQL = (select 'SET ANSI_NULLS ON;
DECLARE @Setting xml;
SET @Setting = (SELECT T.'+ @Column + ' FROM ' + @Table + ' AS T WHERE ' + @WhereClause + ');
set @Setting.modify(''insert attribute ' + @Attribute + '{"' + @Value + '"} into (' + @Path + ')[1]'');
update T set T.' + @Column + ' = @Setting 
FROM ' + @Table + ' AS T  
WHERE ' + @WhereClause)

begin try
exec sp_executesql @SQL
end try
begin catch
end catch
	-- if insert failed try to update the attribute
	set @SQL = (select 'SET ANSI_NULLS ON;
	DECLARE @Setting xml;
	SET @Setting = (SELECT T.'+ @Column + ' FROM ' + @Table + ' AS T WHERE ' + @WhereClause + ');
	set @Setting.modify(''replace value of (' + @Path + '/@' + @Attribute + ')[1] with "' + @Value + '"'');
	update T set T.' + @Column + ' = @Setting 
	FROM ' + @Table + ' AS T  
	WHERE ' + @WhereClause)
	begin try
	exec sp_executesql @SQL
	end try
	begin catch
	end catch
END

GO
GRANT EXECUTE ON [dbo].[SetXmlAttribute] TO [User] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[SetXmlValue]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   SetXmlValue    #############################################################################################
--#####################################################################################################################

CREATE Procedure [dbo].[SetXmlValue] 
@Table nvarchar(128), 
@Column nvarchar(128), 
@Path nvarchar(4000),  
@Value nvarchar(4000),
@WhereClause nvarchar(4000)
AS  
/*
Setting a value of an XML node
if the value is empty, the value will be set to ' ' for otherwise an update is not possible any more

Test:
EXEC dbo.SetXmlValue 'UserProxy', 'Settings', '/Settings/ModuleSource/Identification/fungus', '[TNT.DIVERSITYWORKBENCH.DE,5432].DiversityTaxonNames_Animalia', 'LoginName = USER_NAME()'

*/
BEGIN 
declare @SQL nvarchar(max)
if len(@Value) = 0 begin set @Value = ' ' end
set @SQL = (select 'SET ANSI_NULLS ON;
DECLARE @Setting xml;
SET @Setting = (SELECT T.'+ @Column + ' FROM ' + @Table + ' AS T WHERE ' + @WhereClause + ');
set @Setting.modify(''replace value of (' + @Path + '/text())[1] with "' + @Value + '"'');
update T set T.' + @Column + ' = @Setting 
FROM ' + @Table + ' AS T  
WHERE ' + @WhereClause)

begin try
exec sp_executesql @SQL
end try
begin catch
end catch

END

GO
GRANT EXECUTE ON [dbo].[SetXmlValue] TO [User] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[sp_ApplicationSearchMenu]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ApplicationSearchMenu] AS
/* creating the temporary table for the menu */
create table #ApplicationSearchMenu (
TableName varchar(50) not null,
ColumnName varchar(50) not null,
DataType varchar(50) not null,
ColumnLength int null,
ColumnDescription nvarchar(1000) null,
ForeignKeyTable varchar(50) null,
ForeignKeyColumn varchar(50) null,
MenuTab varchar(50) null)
/* inserting the Data into the table */
insert into #ApplicationSearchMenu (TableName, ColumnName, DataType, ColumnLength, MenuTab)
SELECT     TOP 100 PERCENT dbo.sysobjects.name AS TableName, dbo.syscolumns.name AS ColumnName, dbo.systypes.name AS DataType, 
                      	dbo.syscolumns.length, case when dbo.sysobjects.name like 'Collection%' and len(dbo.sysobjects.name) > 10 and NOT dbo.sysobjects.name like '%Agent%' then RTRIM( substring(dbo.sysobjects.name, 11, 50)) else 
		case when dbo.sysobjects.name like 'Identification%' then  RTRIM( 'Identification ' + lower(substring(dbo.sysobjects.name, 15, 50)))  else dbo.sysobjects.name end end
FROM         dbo.syscolumns INNER JOIN
                      dbo.sysobjects ON dbo.syscolumns.id = dbo.sysobjects.id INNER JOIN
                      dbo.systypes ON dbo.syscolumns.xtype = dbo.systypes.xtype
WHERE     (dbo.sysobjects.xtype = 'U') AND (dbo.systypes.name <> N'sysname') AND (NOT (dbo.syscolumns.name LIKE N'%ID')) AND 
                      (NOT (dbo.syscolumns.name LIKE N'%Sequence')) AND (dbo.sysobjects.name IN (SELECT Tablename FROM ApplicationCollSearchMenuTables))
		AND dbo.systypes.name IN ('char', 'nchar', 'varchar', 'nvarchar', 'text', 'ntext','bit', 'tinyint', 'smallint', 'int', 'bigint', 'real', 'float', 'money','smallmoney','decimal', 'numeric', 'datetime', 'smalldatetime')
ORDER BY dbo.sysobjects.name, dbo.syscolumns.name
/* update of the descriptions */
DECLARE @Table as varchar(50)
DECLARE @OldTable as varchar(50)
DECLARE @Column as varchar(50)
DECLARE @Description as nvarchar(1000)
DECLARE @fktable_name nvarchar(257) /* 2*128 + 1 */
DECLARE @fktable_id	int
DECLARE @fkfull_table_name	nvarchar(257) /* 2*128 + 1 */
DECLARE DescriptionCursor  CURSOR for
select TableName, ColumnName from #ApplicationSearchMenu
open DescriptionCursor
FETCH next from DescriptionCursor into @Table, @Column
SET @OldTable = (select @Table)
WHILE @@FETCH_STATUS = 0
BEGIN
   -- This is executed as long as the previous fetch succeeds.
	set @Description = (SELECT     max(CONVERT(nvarchar(1000), [value]))
	FROM         ::fn_listextendedproperty(NULL, 'user', 'dbo', 'table', @Table, 'column', @Column) [::fn_listextendedproperty_1]) 
	update #ApplicationSearchMenu set ColumnDescription = @Description where TableName = @Table and ColumnName = @Column
	/* setting the foreign-key values for lookup tables */
	IF  @OldTable <>  @Table
	BEGIN
		SET @fkfull_table_name = (SELECT quotename(@Table))
		SET @fktable_id = (SELECT object_id(@fkfull_table_name))
		UPDATE #ApplicationSearchMenu SET ForeignKeyTable = convert(sysname,o1.name), ForeignKeyColumn = convert(sysname,c1.name)
		from #ApplicationSearchMenu a, sysreferences r,  sysindexes i,
			sysobjects o1, sysobjects o2,
			syscolumns c1, syscolumns c2
		where	r.rkeyindid = i.indid
			AND r.rkeyid = i.id
			AND r.fkeyid = @fktable_id
			AND o1.id = r.rkeyid
			AND o2.id = r.fkeyid
			AND c1.id = r.rkeyid
			AND c2.id = r.fkeyid
			AND c1.colid = r.rkey1
			AND c2.colid = r.fkey1
			and o1.name like '%_Enum'
			AND convert(sysname,c2.name) = a.ColumnName
		/*print @Table
		print @OldTable
		print @Column*/
	END
	set @OldTable = (select @Table)
	
   	FETCH NEXT FROM DescriptionCursor into @Table, @Column
END
CLOSE DescriptionCursor
DEALLOCATE DescriptionCursor
/* selecting the data */
select * from #ApplicationSearchMenu
/* transferring data to permanent table */
delete from ApplicationCollSearchMenu
insert into ApplicationCollSearchMenu (TableName, ColumnName, Columnlength, DataType, ColumnDescription, ForeignKeyTable, ForeignKeyColumn, MenuTab)
SELECT     TableName, ColumnName, Columnlength, DataType, ColumnDescription, ForeignKeyTable, ForeignKeyColumn, MenuTab FROM #ApplicationSearchMenu
drop table #ApplicationSearchMenu
GO
GRANT EXECUTE ON [dbo].[sp_ApplicationSearchMenu] TO [User] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[sp_ApplicationSearchMenuForeignKey]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_ApplicationSearchMenuForeignKey] AS
/* creating the temporary table for the foreign keys */
create table #ApplicationSearchMenuForeignKey (
TableName varchar(50) not null,
ColumnName varchar(50) not null,
ForeignKeyTable varchar(50) null,
ForeignKeyColumn varchar(50) null)
/* inserting the Data into the table */
insert into #ApplicationSearchMenuForeignKey (TableName, ColumnName)
SELECT     TOP 100 PERCENT dbo.sysobjects.name AS TableName, dbo.syscolumns.name AS ColumnName
FROM         dbo.syscolumns INNER JOIN
                      dbo.sysobjects ON dbo.syscolumns.id = dbo.sysobjects.id INNER JOIN
                      dbo.systypes ON dbo.syscolumns.xtype = dbo.systypes.xtype
WHERE     (dbo.sysobjects.xtype = 'U') AND (dbo.systypes.name <> N'sysname') AND 
                      (NOT (dbo.syscolumns.name LIKE N'%Sequence')) AND (dbo.sysobjects.name IN (SELECT Tablename FROM ApplicationCollSearchMenuTables))
ORDER BY dbo.sysobjects.name, dbo.syscolumns.name
/* update of the descriptions */
DECLARE @Table as varchar(50)
DECLARE @OldTable as varchar(50)
DECLARE @Column as varchar(50)
DECLARE @Description as nvarchar(1000)
DECLARE @fktable_name nvarchar(257) /* 2*128 + 1 */
DECLARE @fktable_id	int
DECLARE @fkfull_table_name	nvarchar(257) /* 2*128 + 1 */
DECLARE DescriptionCursor  CURSOR for
select TableName, ColumnName from #ApplicationSearchMenuForeignKey
open DescriptionCursor
FETCH next from DescriptionCursor into @Table, @Column
SET @OldTable = (select @Table)
WHILE @@FETCH_STATUS = 0
BEGIN
   -- This is executed as long as the previous fetch succeeds.
	/* setting the foreign-key values for lookup tables */
	IF  @OldTable <>  @Table
	BEGIN
		SET @fkfull_table_name = (SELECT quotename(@Table))
		SET @fktable_id = (SELECT object_id(@fkfull_table_name))
		UPDATE #ApplicationSearchMenuForeignKey SET ForeignKeyTable = convert(sysname,o1.name), ForeignKeyColumn = convert(sysname,c1.name)
		from #ApplicationSearchMenuForeignKey a, sysreferences r,  sysindexes i,
			sysobjects o1, sysobjects o2,
			syscolumns c1, syscolumns c2
		where	r.rkeyindid = i.indid
			AND r.rkeyid = i.id
			AND r.fkeyid = @fktable_id
			AND o1.id = r.rkeyid
			AND o2.id = r.fkeyid
			AND c1.id = r.rkeyid
			AND c2.id = r.fkeyid
			AND c1.colid = r.rkey1
			AND c2.colid = r.fkey1
			and o1.name not like '%_Enum'
			AND convert(sysname,c2.name) = a.ColumnName
		/*print @Table
		print @OldTable
		print @Column*/
	END
	set @OldTable = (select @Table)
	
   	FETCH NEXT FROM DescriptionCursor into @Table, @Column
END
CLOSE DescriptionCursor
DEALLOCATE DescriptionCursor
/* selecting the data */
DELETE FROM #ApplicationSearchMenuForeignKey  WHERE ForeignKeyTable IS NULL
select * from #ApplicationSearchMenuForeignKey
/* transferring data to permanent table */
delete from ApplicationCollSearchMenuForeignKey
insert into ApplicationCollSearchMenuForeignKey (TableName, ColumnName,  ForeignKeyTable, ForeignKeyColumn)
SELECT     TableName, ColumnName,  ForeignKeyTable, ForeignKeyColumn FROM #ApplicationSearchMenuForeignKey
WHERE ForeignKeyTable IN  (N'CollectionSpecimen', 'CollectionAgent', 'IdentificationUnit', 
                      'Identification', 'CollectionStorage', 'Collection', 'CollectionEvent', 'CollectionExchange', 'CollectionImage', 'CollectionProject')
AND ForeignKeyTable <> TableName
drop table #ApplicationSearchMenuForeignKey
GO
GRANT EXECUTE ON [dbo].[sp_ApplicationSearchMenuForeignKey] TO [User] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[sp_SetTempFeldbeschreibung]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_SetTempFeldbeschreibung] AS
declare @Beschreibung as nvarchar(500)
declare @xTabelle as nvarchar(50)
declare @xFeld as nvarchar(50)
/*  Löschen alter Datensätze  */
delete from TempFeldBeschreibungen
/*  Einfügen aktueller Datensätze  */
Insert into TempFeldBeschreibungen (Tabelle, Feld, Datentyp, Laenge, PK) 
select Tabelle, Feld, Datentyp, Laenge, PK
from v_DatenTypenFelder
/*  Eintrag der Beschreibungen*/
DECLARE Beschreibung_cursor CURSOR FOR
SELECT Tabelle, Feld FROM TempFeldBeschreibungen
OPEN Beschreibung_cursor
-- Perform the first fetch.
FETCH NEXT FROM Beschreibung_cursor into @xTabelle, @xFeld
-- Check @@FETCH_STATUS to see if there are any more rows to fetch.
WHILE @@FETCH_STATUS = 0
BEGIN
	-- This is executed as long as the previous fetch succeeds
	select @Beschreibung =(select VersuchsFlaechen.dbo.GetBeschreibung (@xTabelle, @xFeld))
	update TempFeldBeschreibungen set Beschreibung = @Beschreibung where Tabelle = @xTabelle and Feld = @xFeld
	FETCH NEXT FROM Beschreibung_cursor  into @xTabelle, @xFeld
END
CLOSE Beschreibung_cursor
DEALLOCATE Beschreibung_cursor
GO
GRANT EXECUTE ON [dbo].[sp_SetTempFeldbeschreibung] TO [Editor] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[sp_TransactionHierarchyAll]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   sp_TransactionHierarchyAll   ###############################################################################
--######   replaces function TransactionHierarchyAll ##################################################################
--#####################################################################################################################


CREATE  PROCEDURE [dbo].[sp_TransactionHierarchyAll] (@Mode int)
AS
/*
Returns a table that lists all the transactions items related to the given analysis.
MW 29.12.2016
@Mode 0: Only content of original table
@Mode 1: Including a NULL value
TEST:
exec DBO.sp_TransactionHierarchyAll 0
exec DBO.sp_TransactionHierarchyAll 1
*/

begin try
CREATE TABLE #TransactionList ([TransactionID] [int] Primary key ,
	[ParentTransactionID] [int] NULL,
	[DisplayText] [nvarchar](500))

	INSERT #TransactionList (
	TransactionID, ParentTransactionID, DisplayText)
	SELECT 
	TransactionID, ParentTransactionID, TransactionTitle
	FROM [Transaction]
	CREATE NONCLUSTERED INDEX [IdxTransactionList_ParentTransactionID] ON #TransactionList
	(
		[ParentTransactionID] ASC
	)
	while (select count(*) from #TransactionList L where not L.ParentTransactionID is null) > 0
	begin
		update L set L.DisplayText = T.TransactionTitle + ' | ' + L.DisplayText, L.ParentTransactionID = T.ParentTransactionID
		from #TransactionList L, [Transaction] T
		where L.ParentTransactionID = T.TransactionID
	end
end try
begin catch
end catch
if @Mode = 0
begin
	select T.TransactionID, T.ParentTransactionID, T.TransactionType, T.TransactionTitle, T.ReportingCategory, T.AdministratingCollectionID, T.MaterialDescription, T.MaterialSource, T.MaterialCategory, 
	T.MaterialCollectors, T.FromCollectionID, T.FromTransactionPartnerName, T.FromTransactionPartnerAgentURI, T.FromTransactionNumber, T.ToCollectionID, 
	T.ToTransactionPartnerName, T.ToTransactionPartnerAgentURI, T.ToRecipient, T.ToTransactionNumber, T.NumberOfUnits, T.Investigator, T.TransactionComment, T.BeginDate, T.AgreedEndDate, 
	T.ActualEndDate, T.InternalNotes, T.ResponsibleName, T.ResponsibleAgentURI, L.DisplayText
	from #TransactionList L, [Transaction] T 
	where L.TransactionID = T.TransactionID
end
else if @Mode = 1
begin
	select NULL AS TransactionID, NULL AS ParentTransactionID, NULL AS TransactionType, NULL AS TransactionTitle, NULL AS ReportingCategory, NULL AS AdministratingCollectionID, NULL AS MaterialDescription, NULL AS MaterialSource, NULL AS MaterialCategory, 
	NULL AS MaterialCollectors, NULL AS FromCollectionID, NULL AS FromTransactionPartnerName, NULL AS FromTransactionPartnerAgentURI, NULL AS FromTransactionNumber, NULL AS ToCollectionID, 
	NULL AS ToTransactionPartnerName, NULL AS ToTransactionPartnerAgentURI, NULL AS ToRecipient, NULL AS ToTransactionNumber, NULL AS NumberOfUnits, NULL AS Investigator, NULL AS TransactionComment, NULL AS BeginDate, NULL AS AgreedEndDate, 
	NULL AS ActualEndDate, NULL AS InternalNotes, NULL AS ResponsibleName, NULL AS ResponsibleAgentURI, NULL AS DisplayText
	union
	select T.TransactionID, T.ParentTransactionID, T.TransactionType, T.TransactionTitle, T.ReportingCategory, T.AdministratingCollectionID, T.MaterialDescription, T.MaterialSource, T.MaterialCategory, 
	T.MaterialCollectors, T.FromCollectionID, T.FromTransactionPartnerName, T.FromTransactionPartnerAgentURI, T.FromTransactionNumber, T.ToCollectionID, 
	T.ToTransactionPartnerName, T.ToTransactionPartnerAgentURI, T.ToRecipient, T.ToTransactionNumber, T.NumberOfUnits, T.Investigator, T.TransactionComment, T.BeginDate, T.AgreedEndDate, 
	T.ActualEndDate, T.InternalNotes, T.ResponsibleName, T.ResponsibleAgentURI, L.DisplayText
	from #TransactionList L, [Transaction] T 
	where L.TransactionID = T.TransactionID
end

drop index [IdxTransactionList_ParentTransactionID] ON #TransactionList;
drop table #TransactionList;

GO
GRANT EXECUTE ON [dbo].[sp_TransactionHierarchyAll] TO [User] AS [dbo]
GO
/****** Object:  StoredProcedure [dbo].[sp_UpdateFieldDescription]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Objekt:  Gespeicherte Prozedur dbo.sp_UpdateFieldDescription    Skriptdatum: 27.06.2003 12:35:40 ******/
CREATE PROCEDURE [dbo].[sp_UpdateFieldDescription] AS
declare @Beschreibung as nvarchar(500)
declare @xTabelle as nvarchar(50)
declare @xFeld as nvarchar(50)
/*  Löschen alter Datensätze  */
delete from Collection.dbo.FieldDescription
/*  Einfügen aktueller Datensätze  */
Insert into Collection.dbo.FieldDescription (UserTable, Field, DataType, Length, PK, DataTypeGroup) 
select UserTable, Field, DataType, Length, PK, DataTypeGroup
from v_TableFieldDataType
/*  Eintrag der Beschreibungen*/
DECLARE Beschreibung_cursor CURSOR FOR
SELECT UserTable, Field FROM Collection.dbo.FieldDescription
OPEN Beschreibung_cursor
-- Perform the first fetch.
FETCH NEXT FROM Beschreibung_cursor into @xTabelle, @xFeld
-- Check @@FETCH_STATUS to see if there are any more rows to fetch.
WHILE @@FETCH_STATUS = 0
BEGIN
	-- This is executed as long as the previous fetch succeeds
	select @Beschreibung =(select Collection.dbo.GetFieldDescription (@xTabelle, @xFeld))
	update Collection.dbo.FieldDescription set Description = @Beschreibung where UserTable = @xTabelle and Field = @xFeld
	FETCH NEXT FROM Beschreibung_cursor  into @xTabelle, @xFeld
END
CLOSE Beschreibung_cursor
DEALLOCATE Beschreibung_cursor
GO
GRANT EXECUTE ON [dbo].[sp_UpdateFieldDescription] TO [Administrator] AS [dbo]
GO
/****** Object:  Trigger [dbo].[trgDelAnalysis]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE TRIGGER [dbo].[trgDelAnalysis] ON [dbo].[Analysis] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityMaintenance  3.0.0.1 */ 
/*  Date: 02.04.2012  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO Analysis_Log (AnalysisID, AnalysisParentID, DisplayText, Description, MeasurementUnit, Notes, AnalysisURI, OnlyHierarchy, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.AnalysisID, deleted.AnalysisParentID, deleted.DisplayText, deleted.Description, deleted.MeasurementUnit, deleted.Notes, deleted.AnalysisURI, deleted.OnlyHierarchy, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[Analysis] ENABLE TRIGGER [trgDelAnalysis]
GO
/****** Object:  Trigger [dbo].[trgUpdAnalysis]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[trgUpdAnalysis] ON [dbo].[Analysis] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityMaintenance  3.0.0.1 */ 
/*  Date: 02.04.2012  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO Analysis_Log (AnalysisID, AnalysisParentID, DisplayText, Description, MeasurementUnit, Notes, AnalysisURI, OnlyHierarchy, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.AnalysisID, deleted.AnalysisParentID, deleted.DisplayText, deleted.Description, deleted.MeasurementUnit, deleted.Notes, deleted.AnalysisURI, deleted.OnlyHierarchy, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
FROM DELETED


/* updating the logging columns */
Update Analysis
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM Analysis, deleted 
where 1 = 1 
AND Analysis.AnalysisID = deleted.AnalysisID
GO
ALTER TABLE [dbo].[Analysis] ENABLE TRIGGER [trgUpdAnalysis]
GO
/****** Object:  Trigger [dbo].[trgDelAnnotation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgDelAnnotation] ON [dbo].[Annotation] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.3 */ 
/*  Date: 12/23/2015  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO Annotation_Log (AnnotationID, ReferencedAnnotationID, AnnotationType, Title, Annotation, URI, ReferenceDisplayText, ReferenceURI, SourceDisplayText, SourceURI, IsInternal, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID, ReferencedTable, ReferencedID,  LogState) 
SELECT deleted.AnnotationID, deleted.ReferencedAnnotationID, deleted.AnnotationType, deleted.Title, deleted.Annotation, deleted.URI, deleted.ReferenceDisplayText, deleted.ReferenceURI, deleted.SourceDisplayText, deleted.SourceURI, deleted.IsInternal, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, deleted.ReferencedTable, deleted.ReferencedID,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[Annotation] ENABLE TRIGGER [trgDelAnnotation]
GO
/****** Object:  Trigger [dbo].[trgInsAnnotation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE TRIGGER [dbo].[trgInsAnnotation] ON [dbo].[Annotation] 
FOR INSERT AS

/* updating the logging columns */
Update Annotation
set LogCreatedWhen = case when inserted.LogCreatedWhen IS NULL THEN getdate() else inserted.LogCreatedWhen end
, LogUpdatedWhen = case when inserted.LogUpdatedWhen IS NULL THEN getdate() else inserted.LogUpdatedWhen end
, LogCreatedBy = case when inserted.LogCreatedBy IS NULL THEN current_user else inserted.LogCreatedBy end
, LogUpdatedBy = case when inserted.LogUpdatedBy IS NULL THEN current_user else inserted.LogUpdatedBy end
FROM Annotation, inserted 
where Annotation.AnnotationID = inserted.AnnotationID

GO
ALTER TABLE [dbo].[Annotation] ENABLE TRIGGER [trgInsAnnotation]
GO
/****** Object:  Trigger [dbo].[trgUpdAnnotation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdAnnotation] ON [dbo].[Annotation] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.3 */ 
/*  Date: 12/23/2015  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO Annotation_Log (AnnotationID, ReferencedAnnotationID, AnnotationType, Title, Annotation, URI, ReferenceDisplayText, ReferenceURI, SourceDisplayText, SourceURI, IsInternal, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID, ReferencedTable, ReferencedID,  LogState) 
SELECT deleted.AnnotationID, deleted.ReferencedAnnotationID, deleted.AnnotationType, deleted.Title, deleted.Annotation, deleted.URI, deleted.ReferenceDisplayText, deleted.ReferenceURI, deleted.SourceDisplayText, deleted.SourceURI, deleted.IsInternal, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, deleted.ReferencedTable, deleted.ReferencedID,  'U'
FROM DELETED


/* updating the logging columns */
Update Annotation
set LogUpdatedWhen = getdate(), LogUpdatedBy = SUSER_NAME()
FROM Annotation, deleted 
where 1 = 1 
AND Annotation.AnnotationID = deleted.AnnotationID
GO
ALTER TABLE [dbo].[Annotation] ENABLE TRIGGER [trgUpdAnnotation]
GO
/****** Object:  Trigger [dbo].[trgUpdApplicationSearchSelectionStrings]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdApplicationSearchSelectionStrings] ON [dbo].[ApplicationSearchSelectionStrings] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 

/* updating the logging columns */
Update ApplicationSearchSelectionStrings
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM ApplicationSearchSelectionStrings, deleted 
where 1 = 1 
AND ApplicationSearchSelectionStrings.SQLStringIdentifier = deleted.SQLStringIdentifier
AND ApplicationSearchSelectionStrings.UserName = deleted.UserName
GO
ALTER TABLE [dbo].[ApplicationSearchSelectionStrings] ENABLE TRIGGER [trgUpdApplicationSearchSelectionStrings]
GO
/****** Object:  Trigger [dbo].[trgDelCollection]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgDelCollection] ON [dbo].[Collection] 
FOR DELETE AS 
/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 
/* saving the original dataset in the logging table */ 
INSERT INTO Collection_Log (CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type], RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogState) 
SELECT deleted.CollectionID, deleted.CollectionParentID, deleted.CollectionName, deleted.CollectionAcronym, deleted.AdministrativeContactName, deleted.AdministrativeContactAgentURI, deleted.Description, deleted.Location, deleted.CollectionOwner, deleted.DisplayOrder, deleted.[Type], deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[Collection] ENABLE TRIGGER [trgDelCollection]
GO
/****** Object:  Trigger [dbo].[trgUpdCollection]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdCollection] ON [dbo].[Collection] 
FOR UPDATE AS
/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 
/* updating the logging columns */
Update Collection
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM Collection, deleted 
where 1 = 1 
AND Collection.CollectionID = deleted.CollectionID
/* saving the original dataset in the logging table */ 
INSERT INTO Collection_Log (CollectionID, CollectionParentID, CollectionName, CollectionAcronym, AdministrativeContactName, AdministrativeContactAgentURI, Description, Location, CollectionOwner, DisplayOrder, [Type], RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogState) 
SELECT deleted.CollectionID, deleted.CollectionParentID, deleted.CollectionName, deleted.CollectionAcronym, deleted.AdministrativeContactName, deleted.AdministrativeContactAgentURI, deleted.Description, deleted.Location, deleted.CollectionOwner, deleted.DisplayOrder, deleted.[Type], deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  'U'
FROM DELETED
GO
ALTER TABLE [dbo].[Collection] ENABLE TRIGGER [trgUpdCollection]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionAgent]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--#####################################################################################################################
--######  Delete trigger - ensure transfer in logtables for cascading deletes   #######################################
--#####################################################################################################################
--#####################################################################################################################

--#####################################################################################################################
--######  trgDelCollectionAgent     ###################################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelCollectionAgent] ON [dbo].[CollectionAgent] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionAgent_Log (CollectionSpecimenID, CollectorsName, CollectorsAgentURI, CollectorsSequence, CollectorsNumber, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.CollectorsName, deleted.CollectorsAgentURI, deleted.CollectorsSequence, deleted.CollectorsNumber, deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO CollectionAgent_Log (CollectionSpecimenID, CollectorsName, CollectorsAgentURI, CollectorsSequence, CollectorsNumber, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.CollectorsName, deleted.CollectorsAgentURI, deleted.CollectorsSequence, deleted.CollectorsNumber, deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO CollectionAgent_Log (CollectionSpecimenID, CollectorsName, CollectorsAgentURI, CollectorsSequence, CollectorsNumber, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.CollectorsName, deleted.CollectorsAgentURI, deleted.CollectorsSequence, deleted.CollectorsNumber, deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[CollectionAgent] ENABLE TRIGGER [trgDelCollectionAgent]
GO
/****** Object:  Trigger [dbo].[trgInsCollectionAgent]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgInsCollectionAgent] ON [dbo].[CollectionAgent] 
FOR INSERT AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 

/* setting the version in the main table */ 
declare @i int 
set @i = (select count(*) from inserted) 
if @i = 1 
begin 
DECLARE @ID int
SET  @ID = (SELECT CollectionSpecimenID FROM inserted)
EXECUTE procSetVersionCollectionSpecimen @ID
end
GO
ALTER TABLE [dbo].[CollectionAgent] ENABLE TRIGGER [trgInsCollectionAgent]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionAgent]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE TRIGGER [dbo].[trgUpdCollectionAgent] ON [dbo].[CollectionAgent] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 

/* setting the version in the main table */ 
DECLARE @Version int
declare @i int 
set @i = (select count(*) from deleted) 
if @i = 1 
begin 
DECLARE @ID int
SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
EXECUTE procSetVersionCollectionSpecimen @ID
end 

/* updating the logging columns */
Update CollectionAgent
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionAgent, deleted 
where 1 = 1 
AND CollectionAgent.CollectionSpecimenID = deleted.CollectionSpecimenID
AND CollectionAgent.CollectorsName = deleted.CollectorsName

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionAgent_Log (CollectionSpecimenID, CollectorsName, CollectorsAgentURI, CollectorsSequence, CollectorsNumber, Notes, DataWithholdingReason, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.CollectorsName, deleted.CollectorsAgentURI, deleted.CollectorsSequence, deleted.CollectorsNumber, deleted.Notes, deleted.DataWithholdingReason, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  @Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO CollectionAgent_Log (CollectionSpecimenID, CollectorsName, CollectorsAgentURI, CollectorsSequence, CollectorsNumber, Notes, DataWithholdingReason, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.CollectorsName, deleted.CollectorsAgentURI, deleted.CollectorsSequence, deleted.CollectorsNumber, deleted.Notes, deleted.DataWithholdingReason, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, CollectionSpecimen.Version, 'U' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end

GO
ALTER TABLE [dbo].[CollectionAgent] ENABLE TRIGGER [trgUpdCollectionAgent]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionEvent]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgDelCollectionEvent]    Script Date: 27.05.2015 11:56:21 ******/
CREATE TRIGGER [dbo].[trgDelCollectionEvent] ON [dbo].[CollectionEvent] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityWorkbenchMaintenance  2.0.1.1 */ 
/*  Date: 11.01.2010  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO CollectionEvent_Log (CollectionEventID, Version, SeriesID, CollectorsEventNumber, CollectionDate, CollectionDay, 
CollectionMonth, CollectionYear, CollectionDateSupplement, CollectionDateCategory, CollectionTime, CollectionTimeSpan, 
LocalityDescription, HabitatDescription, ReferenceTitle, ReferenceURI, CollectingMethod, Notes, CountryCache, 
DataWithholdingReason, RowGUID, ReferenceDetails, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, 
 LogState, LocalityVerbatim, CollectionEndDay, CollectionEndMonth, CollectionEndYear, DataWithholdingReasonDate) 
SELECT D.CollectionEventID, D.Version, D.SeriesID, D.CollectorsEventNumber, D.CollectionDate, D.CollectionDay, 
D.CollectionMonth, D.CollectionYear, D.CollectionDateSupplement, D.CollectionDateCategory, D.CollectionTime, D.CollectionTimeSpan, 
D.LocalityDescription, D.HabitatDescription, D.ReferenceTitle, D.ReferenceURI, D.CollectingMethod, D.Notes, D.CountryCache, 
D.DataWithholdingReason, D.RowGUID, D.ReferenceDetails, D.LogCreatedWhen, D.LogCreatedBy, D.LogUpdatedWhen, D.LogUpdatedBy, 
 'D', D.LocalityVerbatim, D.CollectionEndDay, D.CollectionEndMonth, D.CollectionEndYear, D.DataWithholdingReasonDate
FROM DELETED D
GO
ALTER TABLE [dbo].[CollectionEvent] ENABLE TRIGGER [trgDelCollectionEvent]
GO
/****** Object:  Trigger [dbo].[trgInsCollectionEvent]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#################################################################################################################################
--######   trgInsCollectionEvent - Restricting the setting of the CollectionDate to valid dates retrieved from the parts   ########
--#################################################################################################################################

CREATE TRIGGER [dbo].[trgInsCollectionEvent] ON [dbo].[CollectionEvent] 
FOR INSERT AS

/*  Date: 06.11.2018  */ 

/* setting the date fields */ 
Update CollectionEvent set CollectionDate = 
case when E.CollectionMonth is null or E.CollectionDay is null or E.CollectionYear is null then null 
else case when ISDATE(convert(varchar(40), cast(E.CollectionYear as varchar) + '-' 
	+ case when I.CollectionMonth < 10 then '0' else '' end + cast(I.CollectionMonth as varchar)  + '-' 
	+ case when I.CollectionDay < 10 then '0' else '' end + cast(I.CollectionDay as varchar) + 'T00:00:00.000Z', 127)) = 1
	AND I.CollectionYear > 1760
	AND I.CollectionMonth between 1 and 12
	AND I.CollectionDay between 1 and 31
then cast(convert(varchar(40), cast(I.CollectionYear as varchar) + '-' 
	+ case when I.CollectionMonth < 10 then '0' else '' end + cast(I.CollectionMonth as varchar)  + '-' 
	+ case when I.CollectionDay < 10 then '0' else '' end + cast(I.CollectionDay as varchar) + 'T00:00:00.000Z', 127) as datetime)
else null end end 
FROM CollectionEvent E, inserted I  
where E.CollectionEventID = I.CollectionEventID   

GO
ALTER TABLE [dbo].[CollectionEvent] ENABLE TRIGGER [trgInsCollectionEvent]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionEvent]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   trgUpdCollectionEvent - Bugfix for setting date with missing parts   #######################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgUpdCollectionEvent] ON [dbo].[CollectionEvent]  
 FOR UPDATE AS 
 /*  Created by DiversityWorkbench Administration.  */  
 /*  DiversityWorkbenchMaintenance  2.0.0.3 */  
 /*  Date: 30.08.2007  */  
 /*  Changed: 06.11.2018 - Bugfix for setting date with missing parts */
 if not update(Version)  
 BEGIN  /* setting the version in the main table */  
	 DECLARE @i int  
	 DECLARE @ID int 
	 DECLARE @Version int  
	 set @i = (select count(*) from deleted)   
	 if @i = 1  
	 BEGIN     
		 SET  @ID = (SELECT CollectionEventID FROM deleted)    
		 EXECUTE procSetVersionCollectionEvent @ID 
	 END   

	 -- setting the column CollectionDate for valid dates derived from the columns CollectionDay, CollectionMonth and CollectionYear
	Update CollectionEvent set CollectionDate = case when E.CollectionMonth is null or E.CollectionDay is null or E.CollectionYear is null 
	then null 
	else 
	case when ISDATE(convert(varchar(40), cast(E.CollectionYear as varchar) + '-' 
		+ case when E.CollectionMonth < 10 then '0' else '' end + cast(E.CollectionMonth as varchar)  + '-' 
		+ case when E.CollectionDay < 10 then '0' else '' end + cast(E.CollectionDay as varchar) + 'T00:00:00.000Z', 127)) = 1
	then cast(convert(varchar(40), cast(D.CollectionYear as varchar) + '-' 
		+ case when E.CollectionMonth < 10 then '0' else '' end + cast(E.CollectionMonth as varchar)  + '-' 
		+ case when E.CollectionDay < 10 then '0' else '' end + cast(E.CollectionDay as varchar) + 'T00:00:00.000Z', 127) as datetime)	 
	else null end  
	end
	FROM CollectionEvent E, deleted D 
	where E.CollectionEventID = D.CollectionEventID   

	 /* saving the original dataset in the logging table */  
	 INSERT INTO CollectionEvent_Log (
	 CollectionEventID, Version, SeriesID, CollectorsEventNumber, CollectionDate, 
	 CollectionDay, CollectionMonth, CollectionYear, CollectionDateSupplement, CollectionDateCategory, CollectionTime, 
	 CollectionTimeSpan, LocalityDescription, HabitatDescription, ReferenceTitle, ReferenceURI, ReferenceDetails, 
	 CollectingMethod, Notes, CountryCache, DataWithholdingReason, RowGUID,  LogCreatedWhen, 
	 LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, LogState, LocalityVerbatim, CollectionEndDay, CollectionEndMonth, CollectionEndYear, DataWithholdingReasonDate)  
	 SELECT D.CollectionEventID, D.Version, D.SeriesID, D.CollectorsEventNumber, D.CollectionDate, 
	 D.CollectionDay, D.CollectionMonth, D.CollectionYear, D.CollectionDateSupplement, D.CollectionDateCategory, D.CollectionTime, 
	 D.CollectionTimeSpan, D.LocalityDescription, D.HabitatDescription, D.ReferenceTitle, D.ReferenceURI, D.ReferenceDetails, 
	 D.CollectingMethod, D.Notes, D.CountryCache, D.DataWithholdingReason, D.RowGUID,  D.LogCreatedWhen, 
	 D.LogCreatedBy, D.LogUpdatedWhen, D.LogUpdatedBy, 'U', D.LocalityVerbatim, D.CollectionEndDay, D.CollectionEndMonth, D.CollectionEndYear, D.DataWithholdingReasonDate
	 FROM DELETED  D
 END  
 
 Update CollectionEvent set LogUpdatedWhen = getdate(), LogUpdatedBy =  suser_sname()
 FROM CollectionEvent, deleted  
 where 1 = 1  AND CollectionEvent.CollectionEventID = deleted.CollectionEventID

GO
ALTER TABLE [dbo].[CollectionEvent] ENABLE TRIGGER [trgUpdCollectionEvent]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionEventImage]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  trgDelCollectionEventImage    ###############################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelCollectionEventImage] ON [dbo].[CollectionEventImage] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionEventID FROM deleted)
   EXECUTE procSetVersionCollectionEvent @ID
   SET @Version = (SELECT Version FROM CollectionEvent WHERE CollectionEventID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionEventImage_Log (CollectionEventID, CopyrightStatement, CreatorAgent, CreatorAgentURI, DataWithholdingReason, Description, ImageType, InternalNotes, IPR, LicenseHolder, LicenseHolderAgentURI, LicenseType, LicenseYear, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ResourceURI, RowGUID, Title, URI,  LogVersion,  LogState) 
SELECT deleted.CollectionEventID, deleted.CopyrightStatement, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.DataWithholdingReason, deleted.Description, deleted.ImageType, deleted.InternalNotes, deleted.IPR, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseType, deleted.LicenseYear, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.ResourceURI, deleted.RowGUID, deleted.Title, deleted.URI,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionEvent WHERE deleted.CollectionEventID = CollectionEvent.CollectionEventID) > 0 
begin
INSERT INTO CollectionEventImage_Log (CollectionEventID, CopyrightStatement, CreatorAgent, CreatorAgentURI, DataWithholdingReason, Description, ImageType, InternalNotes, IPR, LicenseHolder, LicenseHolderAgentURI, LicenseType, LicenseYear, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ResourceURI, RowGUID, Title, URI,  LogVersion, LogState) 
SELECT deleted.CollectionEventID, deleted.CopyrightStatement, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.DataWithholdingReason, deleted.Description, deleted.ImageType, deleted.InternalNotes, deleted.IPR, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseType, deleted.LicenseYear, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.ResourceURI, deleted.RowGUID, deleted.Title, deleted.URI, CollectionEvent.Version, 'D' 
FROM DELETED, CollectionEvent
WHERE deleted.CollectionEventID = CollectionEvent.CollectionEventID
end
else
begin
INSERT INTO CollectionEventImage_Log (CollectionEventID, CopyrightStatement, CreatorAgent, CreatorAgentURI, DataWithholdingReason, Description, ImageType, InternalNotes, IPR, LicenseHolder, LicenseHolderAgentURI, LicenseType, LicenseYear, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ResourceURI, RowGUID, Title, URI,  LogVersion, LogState) 
SELECT deleted.CollectionEventID, deleted.CopyrightStatement, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.DataWithholdingReason, deleted.Description, deleted.ImageType, deleted.InternalNotes, deleted.IPR, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseType, deleted.LicenseYear, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.ResourceURI, deleted.RowGUID, deleted.Title, deleted.URI, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[CollectionEventImage] ENABLE TRIGGER [trgDelCollectionEventImage]
GO
/****** Object:  Trigger [dbo].[trgInsCollectionEventImage]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgInsCollectionEventImage] ON [dbo].[CollectionEventImage] 
FOR INSERT AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 

/* setting the version in the main table */ 
declare @i int 
set @i = (select count(*) from inserted) 
if @i = 1 
begin 
DECLARE @ID int
SET  @ID = (SELECT CollectionEventID FROM inserted)
EXECUTE procSetVersionCollectionEvent @ID
end
GO
ALTER TABLE [dbo].[CollectionEventImage] ENABLE TRIGGER [trgInsCollectionEventImage]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionEventImage]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdCollectionEventImage] ON [dbo].[CollectionEventImage] 
FOR UPDATE AS
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int
set @i = (select count(*) from deleted) 
if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionEventID FROM deleted)
   EXECUTE procSetVersionCollectionEvent @ID
   SET @Version = (SELECT Version FROM CollectionEvent WHERE CollectionEventID = @ID)
END 
if (not @Version is null) 
begin
INSERT INTO CollectionEventImage_Log (CollectionEventID, URI, ResourceURI, ImageType, Description, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID, 
Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, LogVersion,  LogState) 
SELECT deleted.CollectionEventID, deleted.URI, deleted.ResourceURI, deleted.ImageType, deleted.Description, deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, 
deleted.Title, deleted.IPR, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.CopyrightStatement, deleted.LicenseType, deleted.InternalNotes, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseYear,  
@Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO CollectionEventImage_Log (CollectionEventID, URI, ResourceURI, ImageType, Description, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID, 
Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, LogVersion, LogState) 
SELECT deleted.CollectionEventID, deleted.URI, deleted.ResourceURI, deleted.ImageType, deleted.Description, deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, 
deleted.Title, deleted.IPR, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.CopyrightStatement, deleted.LicenseType, deleted.InternalNotes, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseYear, 
CollectionEvent.Version, 'U' 
FROM DELETED, CollectionEvent
WHERE deleted.CollectionEventID = CollectionEvent.CollectionEventID
end
Update CollectionEventImage
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionEventImage, deleted 
where 1 = 1 
AND CollectionEventImage.CollectionEventID = deleted.CollectionEventID
AND CollectionEventImage.URI = deleted.URI
GO
ALTER TABLE [dbo].[CollectionEventImage] ENABLE TRIGGER [trgUpdCollectionEventImage]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionEventLocalisation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######  trgDelCollectionEventLocalisation    ########################################################################
--#####################################################################################################################


CREATE TRIGGER [dbo].[trgDelCollectionEventLocalisation] ON [dbo].[CollectionEventLocalisation] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionEventID FROM deleted)
   EXECUTE procSetVersionCollectionEvent @ID
   SET @Version = (SELECT Version FROM CollectionEvent WHERE CollectionEventID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionEventLocalisation_Log (AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache, CollectionEventID, DeterminationDate, DirectionToLocation, DistanceToLocation, Geography, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, RecordingMethod, ResponsibleAgentURI, ResponsibleName, RowGUID,  LogVersion,  LogState) 
SELECT deleted.AverageAltitudeCache, deleted.AverageLatitudeCache, deleted.AverageLongitudeCache, deleted.CollectionEventID, deleted.DeterminationDate, deleted.DirectionToLocation, deleted.DistanceToLocation, deleted.Geography, deleted.LocalisationSystemID, deleted.Location1, deleted.Location2, deleted.LocationAccuracy, deleted.LocationNotes, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.RecordingMethod, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionEvent WHERE deleted.CollectionEventID = CollectionEvent.CollectionEventID) > 0 
begin
INSERT INTO CollectionEventLocalisation_Log (AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache, CollectionEventID, DeterminationDate, DirectionToLocation, DistanceToLocation, Geography, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, RecordingMethod, ResponsibleAgentURI, ResponsibleName, RowGUID,  LogVersion, LogState) 
SELECT deleted.AverageAltitudeCache, deleted.AverageLatitudeCache, deleted.AverageLongitudeCache, deleted.CollectionEventID, deleted.DeterminationDate, deleted.DirectionToLocation, deleted.DistanceToLocation, deleted.Geography, deleted.LocalisationSystemID, deleted.Location1, deleted.Location2, deleted.LocationAccuracy, deleted.LocationNotes, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.RecordingMethod, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, CollectionEvent.Version, 'D' 
FROM DELETED, CollectionEvent
WHERE deleted.CollectionEventID = CollectionEvent.CollectionEventID
end
else
begin
INSERT INTO CollectionEventLocalisation_Log (AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache, CollectionEventID, DeterminationDate, DirectionToLocation, DistanceToLocation, Geography, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, RecordingMethod, ResponsibleAgentURI, ResponsibleName, RowGUID,  LogVersion, LogState) 
SELECT deleted.AverageAltitudeCache, deleted.AverageLatitudeCache, deleted.AverageLongitudeCache, deleted.CollectionEventID, deleted.DeterminationDate, deleted.DirectionToLocation, deleted.DistanceToLocation, deleted.Geography, deleted.LocalisationSystemID, deleted.Location1, deleted.Location2, deleted.LocationAccuracy, deleted.LocationNotes, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.RecordingMethod, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[CollectionEventLocalisation] ENABLE TRIGGER [trgDelCollectionEventLocalisation]
GO
/****** Object:  Trigger [dbo].[trgInsCollectionEventLocalisation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   trgInsCollectionEventLocalisation: Round WGS84 to 6 digits   ###############################################
--#####################################################################################################################


CREATE TRIGGER [dbo].[trgInsCollectionEventLocalisation] ON [dbo].[CollectionEventLocalisation] 
FOR INSERT AS
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int
set @i = (select count(*) from inserted) 
if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionEventID FROM inserted)
	DECLARE @Altitude float
	DECLARE @Latitude float
	DECLARE @Longitude float
	DECLARE @Geography geography
	DECLARE @ParsingMethod nvarchar(50)
	DECLARE @LocalisationSystemName nvarchar(100)
	SET @ParsingMethod = (SELECT LocalisationSystem.ParsingMethodName
	FROM inserted ,LocalisationSystem 
	WHERE inserted.LocalisationSystemID = LocalisationSystem.LocalisationSystemID
	AND inserted.CollectionEventID = @ID) 
	SET @LocalisationSystemName = (SELECT LocalisationSystem.LocalisationSystemName
	FROM inserted ,LocalisationSystem 
	WHERE inserted.LocalisationSystemID = LocalisationSystem.LocalisationSystemID
	AND inserted.CollectionEventID = @ID) 
	IF @ParsingMethod = 'Altitude'
	BEGIN TRY
		SET @Altitude = (SELECT CAST(REPLACE(Location1, ',', '.') AS FLOAT) FROM inserted WHERE NOT Location1 IS NULL AND ISNUMERIC(Location1) =  1 AND AverageAltitudeCache IS NULL)
		DECLARE @Alt2 float
		SET @Alt2 = (SELECT CAST(REPLACE(Location2, ',', '.') AS FLOAT) FROM inserted WHERE NOT Location2 IS NULL AND ISNUMERIC(Location2) =  1 AND AverageAltitudeCache IS NULL)
		IF (NOT @Alt2 IS NULL)
			BEGIN
			SET @Altitude = ((SELECT @Altitude + @Alt2) / 2)
			END
		IF (NOT @Altitude IS NULL)
			BEGIN 
			UPDATE CollectionEventLocalisation SET CollectionEventLocalisation.AverageAltitudeCache = @Altitude
			FROM CollectionEventLocalisation, inserted
			WHERE inserted.LocalisationSystemID = CollectionEventLocalisation.LocalisationSystemID
			AND CollectionEventLocalisation.CollectionEventID = @ID
			AND inserted.CollectionEventID = @ID
			END 
	END TRY
	BEGIN CATCH
	END CATCH
	IF @ParsingMethod = 'Coordinates'
	BEGIN TRY
		SET @Latitude = (SELECT CAST(CAST(REPLACE(Location2, ',', '.') AS decimal(10,6)) AS FLOAT) FROM inserted WHERE NOT Location2 IS NULL AND ISNUMERIC(Location2) =  1 AND AverageLatitudeCache IS NULL)
		SET @Longitude = (SELECT CAST(CAST(REPLACE(Location1, ',', '.') AS decimal(10,6)) AS FLOAT) FROM inserted WHERE NOT Location1 IS NULL AND ISNUMERIC(Location1) =  1 AND AverageLongitudeCache IS NULL)
		IF (NOT @Longitude IS NULL AND NOT @Latitude IS NULL)
			BEGIN
			UPDATE CollectionEventLocalisation SET 
			CollectionEventLocalisation.AverageLatitudeCache = @Latitude,
			CollectionEventLocalisation.AverageLongitudeCache = @Longitude
			FROM CollectionEventLocalisation, inserted
			WHERE inserted.LocalisationSystemID = CollectionEventLocalisation.LocalisationSystemID
			AND CollectionEventLocalisation.CollectionEventID = @ID
			AND inserted.CollectionEventID = @ID
			END
	END TRY
	BEGIN CATCH
	END CATCH
	IF @LocalisationSystemName = 'Coordinates WGS84'
	BEGIN TRY
		SET @Latitude = (SELECT CAST(CAST(REPLACE(Location2, ',', '.') AS decimal(10,6)) AS FLOAT) FROM inserted WHERE NOT Location2 IS NULL AND ISNUMERIC(Location2) =  1 AND AverageLatitudeCache IS NULL)
		SET @Longitude = (SELECT CAST(CAST(REPLACE(Location1, ',', '.') AS decimal(10,6)) AS FLOAT) FROM inserted WHERE NOT Location1 IS NULL AND ISNUMERIC(Location1) =  1 AND AverageLongitudeCache IS NULL)
		SET @Geography = geography::STPointFromText('POINT(' + CAST(@Longitude AS VARCHAR) + ' ' + CAST(@Latitude AS VARCHAR) + ')', 4326);
		IF (NOT @Geography IS NULL)
			BEGIN
			UPDATE CollectionEventLocalisation SET 
			CollectionEventLocalisation.Geography = @Geography
			FROM CollectionEventLocalisation, inserted
			WHERE inserted.LocalisationSystemID = CollectionEventLocalisation.LocalisationSystemID
			AND CollectionEventLocalisation.CollectionEventID = @ID
			AND inserted.CollectionEventID = @ID
			AND inserted.Geography IS NULL
			END
		SET @Latitude = (SELECT inserted.Geography.EnvelopeCenter().Lat FROM inserted WHERE Location2 IS NULL AND NOT inserted.Geography IS NULL AND AverageLatitudeCache IS NULL)
		SET @Longitude = (SELECT inserted.Geography.EnvelopeCenter().Long FROM inserted WHERE Location1 IS NULL AND NOT inserted.Geography IS NULL AND AverageLongitudeCache IS NULL)
		SET @Geography = (SELECT inserted.Geography FROM inserted);
		IF (NOT @Geography IS NULL 
		AND NOT @Latitude IS NULL
		AND NOT @Longitude IS NULL)
		BEGIN
			UPDATE CollectionEventLocalisation SET 
			CollectionEventLocalisation.Location1 = @Longitude,
			CollectionEventLocalisation.Location2 = @Latitude,
			CollectionEventLocalisation.AverageLongitudeCache = @Longitude,
			CollectionEventLocalisation.AverageLatitudeCache = @Latitude
			FROM CollectionEventLocalisation, inserted
			WHERE inserted.LocalisationSystemID = CollectionEventLocalisation.LocalisationSystemID
			AND CollectionEventLocalisation.CollectionEventID = @ID
			AND inserted.CollectionEventID = @ID
			AND NOT inserted.Geography IS NULL
		END
	END TRY
	BEGIN CATCH
	END CATCH
   EXECUTE procSetVersionCollectionEvent @ID
END
GO
ALTER TABLE [dbo].[CollectionEventLocalisation] ENABLE TRIGGER [trgInsCollectionEventLocalisation]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionEventLocalisation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--#####################################################################################################################
--######   trgUpdCollectionEventLocalisation      #####################################################################
--#####################################################################################################################
 
CREATE TRIGGER [dbo].[trgUpdCollectionEventLocalisation] ON [dbo].[CollectionEventLocalisation] 
FOR UPDATE AS
 /*  
 Changed: 01.12.2015 - sysuser instead of user and DoUpdate for check if there are real changes 
 Changed: 29.12.2016 - U for LogState (was D)
 */
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int
DECLARE @DoUpdate int
set @DoUpdate = 0

SET @DoUpdate = (SELECT count(*)
FROM DELETED D, INSERTED I
WHERE D.CollectionEventID = I.CollectionEventID AND I.LocalisationSystemID = D.LocalisationSystemID
AND (
(I.Location1 <> D.Location1 OR I.Location1 IS NULL AND NOT D.Location1 IS NULL OR NOT I.Location1 IS NULL AND D.Location1 IS NULL)
OR (I.Location2 <> D.Location2 OR I.Location2 IS NULL AND NOT D.Location2 IS NULL OR NOT I.Location2 IS NULL AND D.Location2 IS NULL)
OR (I.LocationAccuracy <> D.LocationAccuracy OR I.LocationAccuracy IS NULL AND NOT D.LocationAccuracy IS NULL OR NOT I.LocationAccuracy IS NULL AND D.LocationAccuracy IS NULL)
OR (I.LocationNotes <> D.LocationNotes OR I.LocationNotes IS NULL AND NOT D.LocationNotes IS NULL OR NOT I.LocationNotes IS NULL AND D.LocationNotes IS NULL)
OR (I.DeterminationDate <> D.DeterminationDate OR I.DeterminationDate IS NULL AND NOT D.DeterminationDate IS NULL OR NOT I.DeterminationDate IS NULL AND D.DeterminationDate IS NULL)
OR (I.DistanceToLocation <> D.DistanceToLocation OR I.DistanceToLocation IS NULL AND NOT D.DistanceToLocation IS NULL OR NOT I.DistanceToLocation IS NULL AND D.DistanceToLocation IS NULL)
OR (I.DirectionToLocation <> D.DirectionToLocation OR I.DirectionToLocation IS NULL AND NOT D.DirectionToLocation IS NULL OR NOT I.DirectionToLocation IS NULL AND D.DirectionToLocation IS NULL)
OR (I.ResponsibleName <> D.ResponsibleName OR I.ResponsibleName IS NULL AND NOT D.ResponsibleName IS NULL OR NOT I.ResponsibleName IS NULL AND D.ResponsibleName IS NULL)
OR (I.ResponsibleAgentURI <> D.ResponsibleAgentURI OR I.ResponsibleAgentURI IS NULL AND NOT D.ResponsibleAgentURI IS NULL OR NOT I.ResponsibleAgentURI IS NULL AND D.ResponsibleAgentURI IS NULL)
OR (I.RecordingMethod <> D.RecordingMethod OR I.RecordingMethod IS NULL AND NOT D.RecordingMethod IS NULL OR NOT I.RecordingMethod IS NULL AND D.RecordingMethod IS NULL)
OR (I.Geography.ToString() <> D.Geography.ToString() OR I.Geography IS NULL AND NOT D.Geography IS NULL OR NOT I.Geography IS NULL AND D.Geography IS NULL)
OR (I.AverageAltitudeCache <> D.AverageAltitudeCache OR I.AverageAltitudeCache IS NULL AND NOT D.AverageAltitudeCache IS NULL OR NOT I.AverageAltitudeCache IS NULL AND D.AverageAltitudeCache IS NULL)
OR (I.AverageLatitudeCache <> D.AverageLatitudeCache OR I.AverageLatitudeCache IS NULL AND NOT D.AverageLatitudeCache IS NULL OR NOT I.AverageLatitudeCache IS NULL AND D.AverageLatitudeCache IS NULL)
OR (I.AverageLongitudeCache <> D.AverageLongitudeCache OR I.AverageLongitudeCache IS NULL AND NOT D.AverageLongitudeCache IS NULL OR NOT I.AverageLongitudeCache IS NULL AND D.AverageLongitudeCache IS NULL)
))

set @i = (select count(*) from deleted) 
if @i = 1 AND @DoUpdate > 0
BEGIN 
   SET  @ID = (SELECT CollectionEventID FROM deleted)
   EXECUTE procSetVersionCollectionEvent @ID
   SET @Version = (SELECT Version FROM CollectionEvent WHERE CollectionEventID = @ID)
END 
if (not @Version is null) 
begin
INSERT INTO CollectionEventLocalisation_Log (CollectionEventID, LocalisationSystemID, Location1, Location2, 
LocationAccuracy, LocationNotes, DeterminationDate, DistanceToLocation, DirectionToLocation, ResponsibleName, 
ResponsibleAgentURI, RecordingMethod, Geography, AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  
LogVersion,  LogState) 
SELECT D.CollectionEventID, D.LocalisationSystemID, D.Location1, D.Location2, D.LocationAccuracy, D.LocationNotes, 
D.DeterminationDate, D.DistanceToLocation, D.DirectionToLocation, D.ResponsibleName, D.ResponsibleAgentURI, D.RecordingMethod, 
D.Geography, D.AverageAltitudeCache, D.AverageLatitudeCache, D.AverageLongitudeCache, D.RowGUID, D.LogCreatedWhen, D.LogCreatedBy, 
D.LogUpdatedWhen, D.LogUpdatedBy,  @Version,  'U'
FROM DELETED D, INSERTED I
WHERE D.CollectionEventID = I.CollectionEventID AND I.LocalisationSystemID = D.LocalisationSystemID
AND (
(I.Location1 <> D.Location1 OR I.Location1 IS NULL AND NOT D.Location1 IS NULL OR NOT I.Location1 IS NULL AND D.Location1 IS NULL)
OR (I.Location2 <> D.Location2 OR I.Location2 IS NULL AND NOT D.Location2 IS NULL OR NOT I.Location2 IS NULL AND D.Location2 IS NULL)
OR (I.LocationAccuracy <> D.LocationAccuracy OR I.LocationAccuracy IS NULL AND NOT D.LocationAccuracy IS NULL OR NOT I.LocationAccuracy IS NULL AND D.LocationAccuracy IS NULL)
OR (I.LocationNotes <> D.LocationNotes OR I.LocationNotes IS NULL AND NOT D.LocationNotes IS NULL OR NOT I.LocationNotes IS NULL AND D.LocationNotes IS NULL)
OR (I.DeterminationDate <> D.DeterminationDate OR I.DeterminationDate IS NULL AND NOT D.DeterminationDate IS NULL OR NOT I.DeterminationDate IS NULL AND D.DeterminationDate IS NULL)
OR (I.DistanceToLocation <> D.DistanceToLocation OR I.DistanceToLocation IS NULL AND NOT D.DistanceToLocation IS NULL OR NOT I.DistanceToLocation IS NULL AND D.DistanceToLocation IS NULL)
OR (I.DirectionToLocation <> D.DirectionToLocation OR I.DirectionToLocation IS NULL AND NOT D.DirectionToLocation IS NULL OR NOT I.DirectionToLocation IS NULL AND D.DirectionToLocation IS NULL)
OR (I.ResponsibleName <> D.ResponsibleName OR I.ResponsibleName IS NULL AND NOT D.ResponsibleName IS NULL OR NOT I.ResponsibleName IS NULL AND D.ResponsibleName IS NULL)
OR (I.ResponsibleAgentURI <> D.ResponsibleAgentURI OR I.ResponsibleAgentURI IS NULL AND NOT D.ResponsibleAgentURI IS NULL OR NOT I.ResponsibleAgentURI IS NULL AND D.ResponsibleAgentURI IS NULL)
OR (I.RecordingMethod <> D.RecordingMethod OR I.RecordingMethod IS NULL AND NOT D.RecordingMethod IS NULL OR NOT I.RecordingMethod IS NULL AND D.RecordingMethod IS NULL)
OR (I.Geography.ToString() <> D.Geography.ToString() OR I.Geography IS NULL AND NOT D.Geography IS NULL OR NOT I.Geography IS NULL AND D.Geography IS NULL)
OR (I.AverageAltitudeCache <> D.AverageAltitudeCache OR I.AverageAltitudeCache IS NULL AND NOT D.AverageAltitudeCache IS NULL OR NOT I.AverageAltitudeCache IS NULL AND D.AverageAltitudeCache IS NULL)
OR (I.AverageLatitudeCache <> D.AverageLatitudeCache OR I.AverageLatitudeCache IS NULL AND NOT D.AverageLatitudeCache IS NULL OR NOT I.AverageLatitudeCache IS NULL AND D.AverageLatitudeCache IS NULL)
OR (I.AverageLongitudeCache <> D.AverageLongitudeCache OR I.AverageLongitudeCache IS NULL AND NOT D.AverageLongitudeCache IS NULL OR NOT I.AverageLongitudeCache IS NULL AND D.AverageLongitudeCache IS NULL)
)
end
else
begin
INSERT INTO CollectionEventLocalisation_Log (CollectionEventID, LocalisationSystemID, Location1, Location2, LocationAccuracy, LocationNotes, 
DeterminationDate, DistanceToLocation, DirectionToLocation, ResponsibleName, ResponsibleAgentURI, RecordingMethod, 
Geography, AverageAltitudeCache, AverageLatitudeCache, AverageLongitudeCache, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  
LogVersion, LogState) 
SELECT D.CollectionEventID, D.LocalisationSystemID, D.Location1, D.Location2, D.LocationAccuracy, D.LocationNotes, 
D.DeterminationDate, D.DistanceToLocation, D.DirectionToLocation, D.ResponsibleName, D.ResponsibleAgentURI, D.RecordingMethod, 
D.Geography, D.AverageAltitudeCache, D.AverageLatitudeCache, D.AverageLongitudeCache, D.RowGUID, D.LogCreatedWhen, D.LogCreatedBy, 
D.LogUpdatedWhen, D.LogUpdatedBy, E.Version, 'U' 
FROM DELETED D, CollectionEvent E
WHERE D.CollectionEventID = E.CollectionEventID
end

if (@DoUpdate > 0)
begin

	Update L
	set LogUpdatedWhen = getdate(), LogUpdatedBy = suser_sname()
	FROM CollectionEventLocalisation L, deleted D
	where 1 = 1 
	AND L.CollectionEventID = D.CollectionEventID
	AND L.LocalisationSystemID = D.LocalisationSystemID

	Update L
	set Geography = 
	case when I.Geography IS null then 
		geography::STPointFromText('POINT(' + replace(cast(cast(I.[AverageLongitudeCache] as decimal(20,10)) as varchar(20)), ',', '.')+' ' +replace(cast(cast(I.[AverageLatitudeCache] as decimal(20,10)) as varchar(20)), ',', '.')+')', 4326)
	else I.Geography end
	FROM CollectionEventLocalisation L, inserted I
	where 1 = 1 
	AND L.CollectionEventID = I.CollectionEventID
	AND L.LocalisationSystemID = I.LocalisationSystemID
	AND I.AverageLatitudeCache between -90 and 90
	AND I.AverageLongitudeCache between -180 and 180
	AND (L.Geography.ToString() <> I.Geography.ToString()
	OR L.Geography IS NULL)

	Update L
	set AverageLatitudeCache = I.Geography.EnvelopeCenter().Lat,
	AverageLongitudeCache = I.Geography.EnvelopeCenter().Long
	FROM CollectionEventLocalisation L, inserted I
	where 1 = 1 
	AND L.CollectionEventID = I.CollectionEventID
	AND L.LocalisationSystemID = I.LocalisationSystemID
	AND I.AverageLatitudeCache IS NULL
	AND I.AverageLongitudeCache IS NULL
	AND L.AverageLatitudeCache IS NULL
	AND L.AverageLongitudeCache IS NULL
	AND NOT I.Geography IS NULL


	Update L
	set Geography = geography::STPointFromText('POINT(' + replace(cast(cast(I.[AverageLongitudeCache] as decimal(20,10)) as varchar(20)), ',', '.')+' ' +replace(cast(cast(I.[AverageLatitudeCache] as decimal(20,10)) as varchar(20)), ',', '.')+')', 4326)
	FROM CollectionEventLocalisation L, inserted I
	where 1 = 1 
	AND L.CollectionEventID = I.CollectionEventID
	AND L.LocalisationSystemID = I.LocalisationSystemID
	AND I.AverageLatitudeCache between -90 and 90
	AND I.AverageLongitudeCache between -180 and 360
	AND (L.Geography.ToString() LIKE 'POINT%')
	AND @i = 1
end

GO
ALTER TABLE [dbo].[CollectionEventLocalisation] ENABLE TRIGGER [trgUpdCollectionEventLocalisation]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionEventMethod]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######  trgDelCollectionEventMethod    ##############################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelCollectionEventMethod] ON [dbo].[CollectionEventMethod] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionEventID FROM deleted)
   EXECUTE procSetVersionCollectionEvent @ID
   SET @Version = (SELECT Version FROM CollectionEvent WHERE CollectionEventID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionEventMethod_Log (CollectionEventID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, RowGUID,  LogVersion,  LogState) 
SELECT deleted.CollectionEventID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.RowGUID,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionEvent WHERE deleted.CollectionEventID = CollectionEvent.CollectionEventID) > 0 
begin
INSERT INTO CollectionEventMethod_Log (CollectionEventID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, RowGUID,  LogVersion, LogState) 
SELECT deleted.CollectionEventID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.RowGUID, CollectionEvent.Version, 'D' 
FROM DELETED, CollectionEvent
WHERE deleted.CollectionEventID = CollectionEvent.CollectionEventID
end
else
begin
INSERT INTO CollectionEventMethod_Log (CollectionEventID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, RowGUID,  LogVersion, LogState) 
SELECT deleted.CollectionEventID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.RowGUID, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[CollectionEventMethod] ENABLE TRIGGER [trgDelCollectionEventMethod]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionEventMethod]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionEventMethod]    Script Date: 28.12.2015 14:37:28 ******/
CREATE TRIGGER [dbo].[trgUpdCollectionEventMethod] ON [dbo].[CollectionEventMethod] 
FOR UPDATE AS
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int
set @i = (select count(*) from deleted) 
if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionEventID FROM deleted)
   EXECUTE procSetVersionCollectionEvent @ID
   SET @Version = (SELECT Version FROM CollectionEvent WHERE CollectionEventID = @ID)
END 
if (not @Version is null) 
begin
INSERT INTO CollectionEventMethod_Log (CollectionEventID, MethodID, MethodMarker, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion,  LogState) 
SELECT deleted.CollectionEventID, deleted.MethodID, deleted.MethodMarker, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  @Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO CollectionEventMethod_Log (CollectionEventID, MethodID, MethodMarker, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion, LogState) 
SELECT deleted.CollectionEventID, deleted.MethodID, deleted.MethodMarker, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, CollectionEvent.Version, 'U' 
FROM DELETED, CollectionEvent
WHERE deleted.CollectionEventID = CollectionEvent.CollectionEventID
end
Update CollectionEventMethod
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionEventMethod, deleted 
where 1 = 1 
AND CollectionEventMethod.CollectionEventID = deleted.CollectionEventID
AND CollectionEventMethod.MethodID = deleted.MethodID
AND CollectionEventMethod.MethodMarker = deleted.MethodMarker
GO
ALTER TABLE [dbo].[CollectionEventMethod] ENABLE TRIGGER [trgUpdCollectionEventMethod]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionEventParameterValue]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--Trigger for CollectionEventParameterValue
CREATE TRIGGER [dbo].[trgDelCollectionEventParameterValue] ON [dbo].[CollectionEventParameterValue] 
FOR DELETE AS 
INSERT INTO CollectionEventParameterValue_Log (CollectionEventID, MethodID, ParameterID, Value, MethodMarker, Notes, LogInsertedWhen, LogInsertedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.CollectionEventID, deleted.MethodID, deleted.ParameterID, deleted.Value, deleted.MethodMarker, deleted.Notes, deleted.LogInsertedWhen, deleted.LogInsertedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[CollectionEventParameterValue] ENABLE TRIGGER [trgDelCollectionEventParameterValue]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionEventParameterValue]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdCollectionEventParameterValue] ON [dbo].[CollectionEventParameterValue] 
FOR UPDATE AS
INSERT INTO CollectionEventParameterValue_Log (CollectionEventID, MethodID, ParameterID, Value, MethodMarker, Notes, LogInsertedWhen, LogInsertedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.CollectionEventID, deleted.MethodID, deleted.ParameterID, deleted.Value, deleted.MethodMarker, deleted.Notes, deleted.LogInsertedWhen, deleted.LogInsertedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
FROM DELETED
Update CollectionEventParameterValue
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionEventParameterValue, deleted 
where 1 = 1 
AND CollectionEventParameterValue.CollectionEventID = deleted.CollectionEventID
AND CollectionEventParameterValue.MethodID = deleted.MethodID
AND CollectionEventParameterValue.ParameterID = deleted.ParameterID
AND CollectionEventParameterValue.MethodMarker = deleted.MethodMarker
GO
ALTER TABLE [dbo].[CollectionEventParameterValue] ENABLE TRIGGER [trgUpdCollectionEventParameterValue]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionEventProperty]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######  trgDelCollectionEventProperty    ############################################################################
--#####################################################################################################################


CREATE TRIGGER [dbo].[trgDelCollectionEventProperty] ON [dbo].[CollectionEventProperty] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionEventID FROM deleted)
   EXECUTE procSetVersionCollectionEvent @ID
   SET @Version = (SELECT Version FROM CollectionEvent WHERE CollectionEventID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionEventProperty_Log (AverageValueCache, CollectionEventID, DisplayText, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, PropertyHierarchyCache, PropertyID, PropertyURI, PropertyValue, ResponsibleAgentURI, ResponsibleName, RowGUID,  LogVersion,  LogState) 
SELECT deleted.AverageValueCache, deleted.CollectionEventID, deleted.DisplayText, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.PropertyHierarchyCache, deleted.PropertyID, deleted.PropertyURI, deleted.PropertyValue, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionEvent WHERE deleted.CollectionEventID = CollectionEvent.CollectionEventID) > 0 
begin
INSERT INTO CollectionEventProperty_Log (AverageValueCache, CollectionEventID, DisplayText, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, PropertyHierarchyCache, PropertyID, PropertyURI, PropertyValue, ResponsibleAgentURI, ResponsibleName, RowGUID,  LogVersion, LogState) 
SELECT deleted.AverageValueCache, deleted.CollectionEventID, deleted.DisplayText, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.PropertyHierarchyCache, deleted.PropertyID, deleted.PropertyURI, deleted.PropertyValue, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, CollectionEvent.Version, 'D' 
FROM DELETED, CollectionEvent
WHERE deleted.CollectionEventID = CollectionEvent.CollectionEventID
end
else
begin
INSERT INTO CollectionEventProperty_Log (AverageValueCache, CollectionEventID, DisplayText, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, PropertyHierarchyCache, PropertyID, PropertyURI, PropertyValue, ResponsibleAgentURI, ResponsibleName, RowGUID,  LogVersion, LogState) 
SELECT deleted.AverageValueCache, deleted.CollectionEventID, deleted.DisplayText, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.PropertyHierarchyCache, deleted.PropertyID, deleted.PropertyURI, deleted.PropertyValue, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[CollectionEventProperty] ENABLE TRIGGER [trgDelCollectionEventProperty]
GO
/****** Object:  Trigger [dbo].[trgInsCollectionEventProperty]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgInsCollectionEventProperty] ON [dbo].[CollectionEventProperty] 
FOR INSERT AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityWorkbenchMaintenance  2.0.0.3 */ 
/*  Date: 28.08.2007  */ 

/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from inserted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionEventID FROM inserted)
   EXECUTE procSetVersionCollectionEvent @ID
END 
GO
ALTER TABLE [dbo].[CollectionEventProperty] ENABLE TRIGGER [trgInsCollectionEventProperty]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionEventProperty]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE TRIGGER [dbo].[trgUpdCollectionEventProperty] ON [dbo].[CollectionEventProperty] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityWorkbenchMaintenance  2.0.0.3 */ 
/*  Date: 28.08.2007  */ 

/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionEventID FROM deleted)
   EXECUTE procSetVersionCollectionEvent @ID
   SET @Version = (SELECT Version FROM CollectionEvent WHERE CollectionEventID = @ID)
END 


/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionEventProperty_Log (CollectionEventID, PropertyID, DisplayText, PropertyURI, PropertyHierarchyCache, PropertyValue, ResponsibleName, ResponsibleAgentURI, Notes, AverageValueCache, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogVersion,  LogState) 
SELECT deleted.CollectionEventID, deleted.PropertyID, deleted.DisplayText, deleted.PropertyURI, deleted.PropertyHierarchyCache, deleted.PropertyValue, deleted.ResponsibleName, deleted.ResponsibleAgentURI, deleted.Notes, deleted.AverageValueCache, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  @Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO CollectionEventProperty_Log (CollectionEventID, PropertyID, DisplayText, PropertyURI, PropertyHierarchyCache, PropertyValue, ResponsibleName, ResponsibleAgentURI, Notes, AverageValueCache, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogVersion, LogState) 
SELECT deleted.CollectionEventID, deleted.PropertyID, deleted.DisplayText, deleted.PropertyURI, deleted.PropertyHierarchyCache, deleted.PropertyValue, deleted.ResponsibleName, deleted.ResponsibleAgentURI, deleted.Notes, deleted.AverageValueCache, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, CollectionEvent.Version, 'U' 
FROM DELETED, CollectionEvent
WHERE deleted.CollectionEventID = CollectionEvent.CollectionEventID
end

/* updating the logging columns */
Update CollectionEventProperty
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionEventProperty, deleted 
where 1 = 1 
AND CollectionEventProperty.CollectionEventID = deleted.CollectionEventID
AND CollectionEventProperty.PropertyID = deleted.PropertyID
GO
ALTER TABLE [dbo].[CollectionEventProperty] ENABLE TRIGGER [trgUpdCollectionEventProperty]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionEventRegulation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--#####################################################################################################################
--######   trgDelCollectionEventRegulation    #########################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelCollectionEventRegulation] ON [dbo].[CollectionEventRegulation] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 2/8/2017  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO CollectionEventRegulation_Log (CollectionEventID, Regulation, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.CollectionEventID, deleted.Regulation, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[CollectionEventRegulation] ENABLE TRIGGER [trgDelCollectionEventRegulation]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionEventRegulation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--#####################################################################################################################
--######   trgUpdCollectionEventRegulation    #########################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgUpdCollectionEventRegulation] ON [dbo].[CollectionEventRegulation] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 2/8/2017  */ 


DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
		/* saving the original dataset in the logging table */ 
		INSERT INTO CollectionEventRegulation_Log (CollectionEventID, Regulation, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
		SELECT deleted.CollectionEventID, deleted.Regulation, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
		FROM DELETED

		/* updating the logging columns */
		Update CollectionEventRegulation
		set LogUpdatedWhen = getdate(), LogUpdatedBy = SUSER_NAME()
		FROM CollectionEventRegulation, deleted 
		where 1 = 1 
		AND CollectionEventRegulation.CollectionEventID = deleted.CollectionEventID
		AND CollectionEventRegulation.Regulation = deleted.Regulation
	 END
GO
ALTER TABLE [dbo].[CollectionEventRegulation] ENABLE TRIGGER [trgUpdCollectionEventRegulation]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionEventSeries]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[trgDelCollectionEventSeries] ON [dbo].[CollectionEventSeries] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityMaintenance  3.0.0.1 */ 
/*  Date: 05.04.2012  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO CollectionEventSeries_Log (SeriesID, SeriesParentID, Description, SeriesCode, Notes, Geography, DateStart, DateEnd, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.SeriesID, deleted.SeriesParentID, deleted.Description, deleted.SeriesCode, deleted.Notes, deleted.Geography, deleted.DateStart, deleted.DateEnd, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[CollectionEventSeries] ENABLE TRIGGER [trgDelCollectionEventSeries]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionEventSeries]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE TRIGGER [dbo].[trgUpdCollectionEventSeries] ON [dbo].[CollectionEventSeries] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityMaintenance  3.0.0.1 */ 
/*  Date: 05.04.2012  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO CollectionEventSeries_Log (SeriesID, SeriesParentID, Description, SeriesCode, Notes, Geography, DateStart, DateEnd, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.SeriesID, deleted.SeriesParentID, deleted.Description, deleted.SeriesCode, deleted.Notes, deleted.Geography, deleted.DateStart, deleted.DateEnd, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
FROM DELETED


/* updating the logging columns */
Update CollectionEventSeries
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionEventSeries, deleted 
where 1 = 1 
AND CollectionEventSeries.SeriesID = deleted.SeriesID
GO
ALTER TABLE [dbo].[CollectionEventSeries] ENABLE TRIGGER [trgUpdCollectionEventSeries]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionEventSeriesImage]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgDelCollectionEventSeriesImage] ON [dbo].[CollectionEventSeriesImage] 
FOR DELETE AS 
INSERT INTO CollectionEventSeriesImage_Log (SeriesID, URI, ResourceURI, ImageType, Description, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID, 
Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear,  LogState) 
SELECT deleted.SeriesID, deleted.URI, deleted.ResourceURI, deleted.ImageType, deleted.Description, deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, 
deleted.Title, deleted.IPR, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.CopyrightStatement, deleted.LicenseType, deleted.InternalNotes, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseYear,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage] ENABLE TRIGGER [trgDelCollectionEventSeriesImage]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionEventSeriesImage]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdCollectionEventSeriesImage] ON [dbo].[CollectionEventSeriesImage] 
FOR UPDATE AS
INSERT INTO CollectionEventSeriesImage_Log (SeriesID, URI, ResourceURI, ImageType, Description, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID, 
Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear,  LogState) 
SELECT deleted.SeriesID, deleted.URI, deleted.ResourceURI, deleted.ImageType, deleted.Description, deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, 
deleted.Title, deleted.IPR, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.CopyrightStatement, deleted.LicenseType, deleted.InternalNotes, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseYear,  'U'
FROM DELETED
Update CollectionEventSeriesImage
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionEventSeriesImage, deleted 
where 1 = 1 
AND CollectionEventSeriesImage.SeriesID = deleted.SeriesID
AND CollectionEventSeriesImage.URI = deleted.URI
GO
ALTER TABLE [dbo].[CollectionEventSeriesImage] ENABLE TRIGGER [trgUpdCollectionEventSeriesImage]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionExternalDatasource]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgDelCollectionExternalDatasource] ON [dbo].[CollectionExternalDatasource] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityMaintenance  3.0.0.1 */ 
/*  Date: 03.04.2012  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO CollectionExternalDatasource_Log (ExternalDatasourceID, ExternalDatasourceName, ExternalDatasourceVersion, Rights, ExternalDatasourceAuthors, ExternalDatasourceURI, ExternalDatasourceInstitution, InternalNotes, ExternalAttribute_NameID, PreferredSequence, Disabled, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogState) 
SELECT deleted.ExternalDatasourceID, deleted.ExternalDatasourceName, deleted.ExternalDatasourceVersion, deleted.Rights, deleted.ExternalDatasourceAuthors, deleted.ExternalDatasourceURI, deleted.ExternalDatasourceInstitution, deleted.InternalNotes, deleted.ExternalAttribute_NameID, deleted.PreferredSequence, deleted.Disabled, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[CollectionExternalDatasource] ENABLE TRIGGER [trgDelCollectionExternalDatasource]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionExternalDatasource]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdCollectionExternalDatasource] ON [dbo].[CollectionExternalDatasource] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityMaintenance  3.0.0.1 */ 
/*  Date: 03.04.2012  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO CollectionExternalDatasource_Log (ExternalDatasourceID, ExternalDatasourceName, ExternalDatasourceVersion, Rights, ExternalDatasourceAuthors, ExternalDatasourceURI, ExternalDatasourceInstitution, InternalNotes, ExternalAttribute_NameID, PreferredSequence, Disabled, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogState) 
SELECT deleted.ExternalDatasourceID, deleted.ExternalDatasourceName, deleted.ExternalDatasourceVersion, deleted.Rights, deleted.ExternalDatasourceAuthors, deleted.ExternalDatasourceURI, deleted.ExternalDatasourceInstitution, deleted.InternalNotes, deleted.ExternalAttribute_NameID, deleted.PreferredSequence, deleted.Disabled, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  'U'
FROM DELETED


/* updating the logging columns */
Update CollectionExternalDatasource
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionExternalDatasource, deleted 
where 1 = 1 
AND CollectionExternalDatasource.ExternalDatasourceID = deleted.ExternalDatasourceID
GO
ALTER TABLE [dbo].[CollectionExternalDatasource] ENABLE TRIGGER [trgUpdCollectionExternalDatasource]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionImage]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgDelCollectionImage] ON [dbo].[CollectionImage] 
FOR DELETE AS 
INSERT INTO CollectionImage_Log (CollectionID, URI, ImageType, Notes, DataWithholdingReason, LogInsertedWhen, LogInsertedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID, Description, 
Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear,  LogState) 
SELECT deleted.CollectionID, deleted.URI, deleted.ImageType, deleted.Notes, deleted.DataWithholdingReason, deleted.LogInsertedWhen, deleted.LogInsertedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, deleted.Description, 
deleted.Title, deleted.IPR, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.CopyrightStatement, deleted.LicenseType, deleted.InternalNotes, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseYear,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[CollectionImage] ENABLE TRIGGER [trgDelCollectionImage]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionImage]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdCollectionImage] ON [dbo].[CollectionImage] 
FOR UPDATE AS
INSERT INTO CollectionImage_Log (CollectionID, URI, ImageType, Notes, DataWithholdingReason, LogInsertedWhen, LogInsertedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID, Description, 
Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear,  LogState) 
SELECT deleted.CollectionID, deleted.URI, deleted.ImageType, deleted.Notes, deleted.DataWithholdingReason, deleted.LogInsertedWhen, deleted.LogInsertedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, deleted.Description, 
deleted.Title, deleted.IPR, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.CopyrightStatement, deleted.LicenseType, deleted.InternalNotes, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseYear,  'U'
FROM DELETED
Update CollectionImage
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionImage, deleted 
where 1 = 1 
AND CollectionImage.CollectionID = deleted.CollectionID
AND CollectionImage.URI = deleted.URI
GO
ALTER TABLE [dbo].[CollectionImage] ENABLE TRIGGER [trgUpdCollectionImage]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionProject]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   trgDelCollectionProject - writing date into LastChanges in ProjectProxy   ##################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelCollectionProject] ON [dbo].[CollectionProject] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityMaintenance  3.0.0.0 */ 
/*  Date: 24.11.2011  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO CollectionProject_Log (CollectionSpecimenID, ProjectID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.ProjectID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED

/* setting the date in ProjectProxy */ 
/* setting the date in ProjectProxy */ 
Update P 
set P.LastChanges = getdate()
FROM deleted D, ProjectProxy P, CollectionSpecimen S
where D.CollectionSpecimenID = S.CollectionSpecimenID
AND P.ProjectID = D.ProjectID
AND (S.DataWithholdingReason IS NULL OR S.DataWithholdingReason = '')
GO
ALTER TABLE [dbo].[CollectionProject] ENABLE TRIGGER [trgDelCollectionProject]
GO
/****** Object:  Trigger [dbo].[trgInsCollectionProject]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   trgInsCollectionProject - writing date into LastChanges in ProjectProxy   ##################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgInsCollectionProject] ON [dbo].[CollectionProject] 
FOR INSERT AS

/*  By: M. Weiss */ 
/*  Date: 08.06.2018  */ 

/* setting the date in ProjectProxy */ 
Update P 
set P.LastChanges = getdate()
FROM inserted I, ProjectProxy P, CollectionSpecimen S
where S.CollectionSpecimenID = I.CollectionSpecimenID
AND P.ProjectID = I.ProjectID
AND (S.DataWithholdingReason IS NULL OR S.DataWithholdingReason = '')

GO
ALTER TABLE [dbo].[CollectionProject] ENABLE TRIGGER [trgInsCollectionProject]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionProject]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/****** Object:  Trigger [dbo].[trgUpdCollectionProject]    Script Date: 11/24/2011 12:03:29 ******/

CREATE TRIGGER [dbo].[trgUpdCollectionProject] ON [dbo].[CollectionProject] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityMaintenance  3.0.0.0 */ 
/*  Date: 24.11.2011  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO CollectionProject_Log (CollectionSpecimenID, ProjectID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.ProjectID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
FROM DELETED


/* updating the logging columns */
Update CollectionProject
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionProject, deleted 
where 1 = 1 
AND CollectionProject.CollectionSpecimenID = deleted.CollectionSpecimenID
AND CollectionProject.ProjectID = deleted.ProjectID
GO
ALTER TABLE [dbo].[CollectionProject] ENABLE TRIGGER [trgUpdCollectionProject]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionSpecimen]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE TRIGGER [dbo].[trgDelCollectionSpecimen] ON [dbo].[CollectionSpecimen] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityMaintenance  3.0.0.1 */ 
/*  Date: 03.04.2012  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO CollectionSpecimen_Log (CollectionSpecimenID, Version, CollectionEventID, CollectionID, AccessionNumber, AccessionDate, AccessionDay, 
AccessionMonth, AccessionYear, AccessionDateSupplement, AccessionDateCategory, DepositorsName, DepositorsAgentURI, DepositorsAccessionNumber, 
LabelTitle, LabelType, LabelTranscriptionState, LabelTranscriptionNotes, ExsiccataURI, ExsiccataAbbreviation, OriginalNotes, AdditionalNotes, 
ReferenceTitle, ReferenceURI, Problems, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, InternalNotes, 
ExternalDatasourceID, ExternalIdentifier, RowGUID, ReferenceDetails,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.Version, deleted.CollectionEventID, deleted.CollectionID, deleted.AccessionNumber, deleted.AccessionDate, 
deleted.AccessionDay, deleted.AccessionMonth, deleted.AccessionYear, deleted.AccessionDateSupplement, deleted.AccessionDateCategory, deleted.DepositorsName, 
deleted.DepositorsAgentURI, deleted.DepositorsAccessionNumber, deleted.LabelTitle, deleted.LabelType, deleted.LabelTranscriptionState, 
deleted.LabelTranscriptionNotes, deleted.ExsiccataURI, deleted.ExsiccataAbbreviation, deleted.OriginalNotes, deleted.AdditionalNotes, deleted.ReferenceTitle, 
deleted.ReferenceURI, deleted.Problems, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, 
deleted.InternalNotes, deleted.ExternalDatasourceID, deleted.ExternalIdentifier, deleted.RowGUID, deleted.ReferenceDetails,  'D'
FROM DELETED

GO
ALTER TABLE [dbo].[CollectionSpecimen] ENABLE TRIGGER [trgDelCollectionSpecimen]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimen]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   trgUpdCollectionSpecimen - writing date into LastChanges in ProjectProxy   #################################
--#####################################################################################################################
CREATE TRIGGER [dbo].[trgUpdCollectionSpecimen] ON [dbo].[CollectionSpecimen] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityMaintenance  3.0.0.1 */ 
/*  Date: 03.04.2012  */ 

if not update(Version) 
BEGIN

/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
END 


/* saving the original dataset in the logging table */ 
INSERT INTO CollectionSpecimen_Log (CollectionSpecimenID, Version, CollectionEventID, CollectionID, AccessionNumber, AccessionDate, AccessionDay, AccessionMonth, AccessionYear, AccessionDateSupplement, AccessionDateCategory, DepositorsName, DepositorsAgentURI, DepositorsAccessionNumber, LabelTitle, LabelType, LabelTranscriptionState, LabelTranscriptionNotes, ExsiccataURI, ExsiccataAbbreviation, OriginalNotes, AdditionalNotes, ReferenceTitle, ReferenceURI, Problems, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, InternalNotes, ExternalDatasourceID, ExternalIdentifier, RowGUID, ReferenceDetails,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.Version, deleted.CollectionEventID, deleted.CollectionID, deleted.AccessionNumber, deleted.AccessionDate, deleted.AccessionDay, deleted.AccessionMonth, deleted.AccessionYear, deleted.AccessionDateSupplement, deleted.AccessionDateCategory, deleted.DepositorsName, deleted.DepositorsAgentURI, deleted.DepositorsAccessionNumber, deleted.LabelTitle, deleted.LabelType, deleted.LabelTranscriptionState, deleted.LabelTranscriptionNotes, deleted.ExsiccataURI, deleted.ExsiccataAbbreviation, deleted.OriginalNotes, deleted.AdditionalNotes, deleted.ReferenceTitle, deleted.ReferenceURI, deleted.Problems, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.InternalNotes, deleted.ExternalDatasourceID, deleted.ExternalIdentifier, deleted.RowGUID, deleted.ReferenceDetails,  'U'
FROM DELETED

END

/* updating the logging columns */
Update CollectionSpecimen
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionSpecimen, deleted 
where 1 = 1 
AND CollectionSpecimen.CollectionSpecimenID = deleted.CollectionSpecimenID

/* setting the date in ProjectProxy if the DataWithholdingReason is not filled or kept filled */ 
Update P 
set P.LastChanges = getdate()
FROM CollectionProject C, ProjectProxy P, deleted D, inserted I
where C.CollectionSpecimenID = @ID
AND C.ProjectID = P.ProjectID
AND C.CollectionSpecimenID = D.CollectionSpecimenID
AND (
((I.DataWithholdingReason IS NULL OR I.DataWithholdingReason = '') AND D.DataWithholdingReason <> '') 
OR
((D.DataWithholdingReason IS NULL OR D.DataWithholdingReason = '') AND I.DataWithholdingReason <> '') 
OR
((D.DataWithholdingReason IS NULL OR D.DataWithholdingReason = '') AND (I.DataWithholdingReason IS NULL OR I.DataWithholdingReason = '')) 
)


--#####################################################################################################################
--######   ApplicationSearchSelectionStrings - adaption to DSGVO   ####################################################
--#####################################################################################################################

update a set [UserName] = u.ID
  FROM [ApplicationSearchSelectionStrings] a, UserProxy U
  where U.LoginName = A.UserName
GO
ALTER TABLE [dbo].[CollectionSpecimen] ENABLE TRIGGER [trgUpdCollectionSpecimen]
GO
/****** Object:  Trigger [dbo].[CollectionSpecimenImage_URI]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[CollectionSpecimenImage_URI] ON [dbo].[CollectionSpecimenImage] 
FOR INSERT, UPDATE
AS
declare @i int
/*
update CollectionSpecimenImage
set CollectionSpecimenImage.URI_Cache =
(SELECT     REPLACE(DiversityImages.dbo.ImageCollection.URI_Part1 + DiversityImages.dbo.ImageItem.URI_Part3, '\', '/') AS Path
FROM         DiversityImages.dbo.ImageItem INNER JOIN
                      DiversityImages.dbo.ImageCollection ON DiversityImages.dbo.ImageItem.ResourceCollectionID = DiversityImages.dbo.ImageCollection.ResourceCollectionID, inserted
where DiversityImages.dbo.ImageItem.ResourceID = inserted.ResourceID)
from CollectionSpecimenImage, inserted
where CollectionSpecimenImage.CollectionSpecimenID = inserted.CollectionSpecimenID
and CollectionSpecimenImage.ResourceID = inserted.ResourceID
*/
GO
ALTER TABLE [dbo].[CollectionSpecimenImage] ENABLE TRIGGER [CollectionSpecimenImage_URI]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionSpecimenImage]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  trgDelCollectionSpecimenImage    ############################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelCollectionSpecimenImage] ON [dbo].[CollectionSpecimenImage] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenImage_Log (CollectionSpecimenID, URI, ResourceURI, SpecimenPartID, IdentificationUnitID, ImageType, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, LicenseNotes, LicenseURI,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.URI, deleted.ResourceURI, deleted.SpecimenPartID, deleted.IdentificationUnitID, deleted.ImageType, deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, deleted.Description, deleted.Title, deleted.IPR, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.CopyrightStatement, deleted.LicenseType, deleted.InternalNotes, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseYear, deleted.DisplayOrder, deleted.LicenseNotes, deleted.LicenseURI,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO CollectionSpecimenImage_Log (CollectionSpecimenID, URI, ResourceURI, SpecimenPartID, IdentificationUnitID, ImageType, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, LicenseNotes, LicenseURI,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.URI, deleted.ResourceURI, deleted.SpecimenPartID, deleted.IdentificationUnitID, deleted.ImageType, deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, deleted.Description, deleted.Title, deleted.IPR, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.CopyrightStatement, deleted.LicenseType, deleted.InternalNotes, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseYear, deleted.DisplayOrder, deleted.LicenseNotes, deleted.LicenseURI, CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO CollectionSpecimenImage_Log (CollectionSpecimenID, URI, ResourceURI, SpecimenPartID, IdentificationUnitID, ImageType, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID, Description, Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, DisplayOrder, LicenseNotes, LicenseURI,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.URI, deleted.ResourceURI, deleted.SpecimenPartID, deleted.IdentificationUnitID, deleted.ImageType, deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, deleted.Description, deleted.Title, deleted.IPR, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.CopyrightStatement, deleted.LicenseType, deleted.InternalNotes, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseYear, deleted.DisplayOrder, deleted.LicenseNotes, deleted.LicenseURI, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[CollectionSpecimenImage] ENABLE TRIGGER [trgDelCollectionSpecimenImage]
GO
/****** Object:  Trigger [dbo].[trgInsCollectionSpecimenImage]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgInsCollectionSpecimenImage] ON [dbo].[CollectionSpecimenImage] 
FOR INSERT AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 

/* setting the version in the main table */ 
declare @i int 
set @i = (select count(*) from inserted) 
if @i = 1 
begin 
DECLARE @ID int
SET  @ID = (SELECT CollectionSpecimenID FROM inserted)
EXECUTE procSetVersionCollectionSpecimen @ID
end
GO
ALTER TABLE [dbo].[CollectionSpecimenImage] ENABLE TRIGGER [trgInsCollectionSpecimenImage]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenImage]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenImage]    Script Date: 22.05.2015 14:44:50 ******/
CREATE TRIGGER [dbo].[trgUpdCollectionSpecimenImage] ON [dbo].[CollectionSpecimenImage] 
FOR UPDATE AS
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int
set @i = (select count(*) from deleted) 
if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenImage_Log (CollectionSpecimenID, URI, ResourceURI, SpecimenPartID, IdentificationUnitID, ImageType, Description, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID, 
Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, LicenseNotes, LicenseURI,  LogVersion,  LogState, DisplayOrder) 
SELECT deleted.CollectionSpecimenID, deleted.URI, deleted.ResourceURI, deleted.SpecimenPartID, deleted.IdentificationUnitID, deleted.ImageType, deleted.Description, deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, 
deleted.Title, deleted.IPR, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.CopyrightStatement, deleted.LicenseType, deleted.InternalNotes, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseYear, deleted.LicenseNotes, deleted.LicenseURI,  @Version,  'U', deleted.DisplayOrder
FROM DELETED
end
else
begin
INSERT INTO CollectionSpecimenImage_Log (CollectionSpecimenID, URI, ResourceURI, SpecimenPartID, IdentificationUnitID, ImageType, Description, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID, 
Title, IPR, CreatorAgent, CreatorAgentURI, CopyrightStatement, LicenseType, InternalNotes, LicenseHolder, LicenseHolderAgentURI, LicenseYear, LicenseNotes, LicenseURI,  LogVersion, LogState, DisplayOrder) 
SELECT deleted.CollectionSpecimenID, deleted.URI, deleted.ResourceURI, deleted.SpecimenPartID, deleted.IdentificationUnitID, deleted.ImageType, deleted.Description, deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, 
deleted.Title, deleted.IPR, deleted.CreatorAgent, deleted.CreatorAgentURI, deleted.CopyrightStatement, deleted.LicenseType, deleted.InternalNotes, deleted.LicenseHolder, deleted.LicenseHolderAgentURI, deleted.LicenseYear, deleted.LicenseNotes, deleted.LicenseURI, CollectionSpecimen.Version, 'U', deleted.DisplayOrder 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
Update CollectionSpecimenImage
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionSpecimenImage, deleted 
where 1 = 1 
AND CollectionSpecimenImage.CollectionSpecimenID = deleted.CollectionSpecimenID
AND CollectionSpecimenImage.URI = deleted.URI
GO
ALTER TABLE [dbo].[CollectionSpecimenImage] ENABLE TRIGGER [trgUpdCollectionSpecimenImage]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionSpecimenImageProperty]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgDelCollectionSpecimenImageProperty] ON [dbo].[CollectionSpecimenImageProperty] 
FOR DELETE AS 
INSERT INTO CollectionSpecimenImageProperty_Log (CollectionSpecimenID, URI, Property, Description, ImageArea, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.URI, deleted.Property, deleted.Description, deleted.ImageArea, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[CollectionSpecimenImageProperty] ENABLE TRIGGER [trgDelCollectionSpecimenImageProperty]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenImageProperty]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdCollectionSpecimenImageProperty] ON [dbo].[CollectionSpecimenImageProperty] 
FOR UPDATE AS
INSERT INTO CollectionSpecimenImageProperty_Log (CollectionSpecimenID, URI, Property, Description, ImageArea, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.URI, deleted.Property, deleted.Description, deleted.ImageArea, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
FROM DELETED
Update CollectionSpecimenImageProperty
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionSpecimenImageProperty, deleted 
where 1 = 1 
AND CollectionSpecimenImageProperty.CollectionSpecimenID = deleted.CollectionSpecimenID
AND CollectionSpecimenImageProperty.Property = deleted.Property
AND CollectionSpecimenImageProperty.URI = deleted.URI
GO
ALTER TABLE [dbo].[CollectionSpecimenImageProperty] ENABLE TRIGGER [trgUpdCollectionSpecimenImageProperty]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionSpecimenPart]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######  trgDelCollectionSpecimenPart    #############################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelCollectionSpecimenPart] ON [dbo].[CollectionSpecimenPart] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenPart_Log (AccessionNumber, CollectionID, CollectionSpecimenID, DataWithholdingReason, DerivedFromSpecimenPartID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MaterialCategory, Notes, PartSublabel, PreparationDate, PreparationMethod, ResponsibleAgentURI, ResponsibleName, RowGUID, SpecimenPartID, Stock, StockUnit, StorageContainer, StorageLocation,  LogVersion,  LogState) 
SELECT deleted.AccessionNumber, deleted.CollectionID, deleted.CollectionSpecimenID, deleted.DataWithholdingReason, deleted.DerivedFromSpecimenPartID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MaterialCategory, deleted.Notes, deleted.PartSublabel, deleted.PreparationDate, deleted.PreparationMethod, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, deleted.SpecimenPartID, deleted.Stock, deleted.StockUnit, deleted.StorageContainer, deleted.StorageLocation,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO CollectionSpecimenPart_Log (AccessionNumber, CollectionID, CollectionSpecimenID, DataWithholdingReason, DerivedFromSpecimenPartID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MaterialCategory, Notes, PartSublabel, PreparationDate, PreparationMethod, ResponsibleAgentURI, ResponsibleName, RowGUID, SpecimenPartID, Stock, StockUnit, StorageContainer, StorageLocation,  LogVersion, LogState) 
SELECT deleted.AccessionNumber, deleted.CollectionID, deleted.CollectionSpecimenID, deleted.DataWithholdingReason, deleted.DerivedFromSpecimenPartID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MaterialCategory, deleted.Notes, deleted.PartSublabel, deleted.PreparationDate, deleted.PreparationMethod, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, deleted.SpecimenPartID, deleted.Stock, deleted.StockUnit, deleted.StorageContainer, deleted.StorageLocation, CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO CollectionSpecimenPart_Log (AccessionNumber, CollectionID, CollectionSpecimenID, DataWithholdingReason, DerivedFromSpecimenPartID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MaterialCategory, Notes, PartSublabel, PreparationDate, PreparationMethod, ResponsibleAgentURI, ResponsibleName, RowGUID, SpecimenPartID, Stock, StockUnit, StorageContainer, StorageLocation,  LogVersion, LogState) 
SELECT deleted.AccessionNumber, deleted.CollectionID, deleted.CollectionSpecimenID, deleted.DataWithholdingReason, deleted.DerivedFromSpecimenPartID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MaterialCategory, deleted.Notes, deleted.PartSublabel, deleted.PreparationDate, deleted.PreparationMethod, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, deleted.SpecimenPartID, deleted.Stock, deleted.StockUnit, deleted.StorageContainer, deleted.StorageLocation, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[CollectionSpecimenPart] ENABLE TRIGGER [trgDelCollectionSpecimenPart]
GO
/****** Object:  Trigger [dbo].[trgInsCollectionSpecimenPart]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgInsCollectionSpecimenPart] ON [dbo].[CollectionSpecimenPart] 
FOR INSERT AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityWorkbenchMaintenance  2.0.0.3 */ 
/*  Date: 28.08.2007  */ 

/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from inserted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM inserted)
   EXECUTE procSetVersionCollectionSpecimen @ID
END
GO
ALTER TABLE [dbo].[CollectionSpecimenPart] ENABLE TRIGGER [trgInsCollectionSpecimenPart]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenPart]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdCollectionSpecimenPart] ON [dbo].[CollectionSpecimenPart] 
FOR UPDATE AS
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int
set @i = (select count(*) from deleted) 
if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenPart_Log (CollectionSpecimenID, SpecimenPartID, DerivedFromSpecimenPartID, PreparationMethod, 
PreparationDate, AccessionNumber, PartSublabel, CollectionID, MaterialCategory, StorageLocation, StorageContainer, 
Stock, StockUnit, ResponsibleName, ResponsibleAgentURI, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, 
LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.SpecimenPartID, deleted.DerivedFromSpecimenPartID, deleted.PreparationMethod, 
deleted.PreparationDate, deleted.AccessionNumber, deleted.PartSublabel, deleted.CollectionID, deleted.MaterialCategory, 
deleted.StorageLocation, deleted.StorageContainer, deleted.Stock, deleted.StockUnit, deleted.ResponsibleName, 
deleted.ResponsibleAgentURI, deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, 
deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  @Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO CollectionSpecimenPart_Log (CollectionSpecimenID, SpecimenPartID, DerivedFromSpecimenPartID, PreparationMethod, 
PreparationDate, AccessionNumber, PartSublabel, CollectionID, MaterialCategory, StorageLocation, StorageContainer, 
Stock, StockUnit, ResponsibleName, ResponsibleAgentURI, Notes, DataWithholdingReason, LogCreatedWhen, LogCreatedBy, 
LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.SpecimenPartID, deleted.DerivedFromSpecimenPartID, deleted.PreparationMethod, 
deleted.PreparationDate, deleted.AccessionNumber, deleted.PartSublabel, deleted.CollectionID, deleted.MaterialCategory, 
deleted.StorageLocation, deleted.StorageContainer, deleted.Stock, deleted.StockUnit, deleted.ResponsibleName, deleted.ResponsibleAgentURI, 
deleted.Notes, deleted.DataWithholdingReason, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, 
deleted.LogUpdatedBy, deleted.RowGUID, CollectionSpecimen.Version, 'U'
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
Update CollectionSpecimenPart
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionSpecimenPart, deleted 
where 1 = 1 
AND CollectionSpecimenPart.CollectionSpecimenID = deleted.CollectionSpecimenID
AND CollectionSpecimenPart.SpecimenPartID = deleted.SpecimenPartID
GO
ALTER TABLE [dbo].[CollectionSpecimenPart] ENABLE TRIGGER [trgUpdCollectionSpecimenPart]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionSpecimenPartDescription]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  trgDelCollectionSpecimenPartDescription   ###################################################################
--#####################################################################################################################


CREATE TRIGGER [dbo].[trgDelCollectionSpecimenPartDescription] ON [dbo].[CollectionSpecimenPartDescription] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenPartDescription_Log (CollectionSpecimenID, Description, DescriptionTermURI, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, PartDescriptionID, RowGUID, SpecimenPartID, IdentificationUnitID,  LogVersion,  LogState) 
SELECT d.CollectionSpecimenID, d.Description, d.DescriptionTermURI, d.LogCreatedBy, d.LogCreatedWhen, d.LogUpdatedBy, d.LogUpdatedWhen, d.Notes, d.PartDescriptionID, d.RowGUID, d.SpecimenPartID, d.IdentificationUnitID,  @Version,  'D'
FROM DELETED D
end
else
begin
if (select count(*) FROM DELETED D, CollectionSpecimen S WHERE d.CollectionSpecimenID = S.CollectionSpecimenID) > 0 
begin
INSERT INTO CollectionSpecimenPartDescription_Log (CollectionSpecimenID, Description, DescriptionTermURI, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, PartDescriptionID, RowGUID, SpecimenPartID, IdentificationUnitID,  LogVersion, LogState) 
SELECT d.CollectionSpecimenID, d.Description, d.DescriptionTermURI, d.LogCreatedBy, d.LogCreatedWhen, d.LogUpdatedBy, d.LogUpdatedWhen, d.Notes, d.PartDescriptionID, d.RowGUID, d.SpecimenPartID, d.IdentificationUnitID, CollectionSpecimen.Version, 'D' 
FROM DELETED D, CollectionSpecimen
WHERE d.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO CollectionSpecimenPartDescription_Log (CollectionSpecimenID, Description, DescriptionTermURI, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, PartDescriptionID, RowGUID, SpecimenPartID, IdentificationUnitID,  LogVersion, LogState) 
SELECT d.CollectionSpecimenID, d.Description, d.DescriptionTermURI, d.LogCreatedBy, d.LogCreatedWhen, d.LogUpdatedBy, d.LogUpdatedWhen, d.Notes, d.PartDescriptionID, d.RowGUID, d.SpecimenPartID, d.IdentificationUnitID, -1, 'D' 
FROM DELETED D
end
end
GO
ALTER TABLE [dbo].[CollectionSpecimenPartDescription] ENABLE TRIGGER [trgDelCollectionSpecimenPartDescription]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenPartDescription]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   trgUpdCollectionSpecimenPartDescription    #################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgUpdCollectionSpecimenPartDescription] ON [dbo].[CollectionSpecimenPartDescription] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.7 */ 
/*  Date: 7/25/2016  */ 

/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 


/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenPartDescription_Log (CollectionSpecimenID, SpecimenPartID, PartDescriptionID, Description, DescriptionTermURI, Notes, IdentificationUnitID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion,  LogState) 
SELECT d.CollectionSpecimenID, d.SpecimenPartID, d.PartDescriptionID, d.Description, d.DescriptionTermURI, d.Notes, d.IdentificationUnitID, d.LogCreatedWhen, d.LogCreatedBy, d.LogUpdatedWhen, d.LogUpdatedBy, d.RowGUID,  @Version,  'U'
FROM DELETED D
end
else
begin
INSERT INTO CollectionSpecimenPartDescription_Log (CollectionSpecimenID, SpecimenPartID, PartDescriptionID, Description, DescriptionTermURI, Notes, IdentificationUnitID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion, LogState) 
SELECT d.CollectionSpecimenID, d.SpecimenPartID, d.PartDescriptionID, d.Description, d.DescriptionTermURI, d.Notes, d.IdentificationUnitID, d.LogCreatedWhen, d.LogCreatedBy, d.LogUpdatedWhen, d.LogUpdatedBy, d.RowGUID, CollectionSpecimen.Version, 'U' 
FROM DELETED D, CollectionSpecimen
WHERE d.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end

/* updating the logging columns */
Update CollectionSpecimenPartDescription
set LogUpdatedWhen = getdate(), LogUpdatedBy = cast([dbo].[UserID]() as varchar)
FROM CollectionSpecimenPartDescription, deleted D
where 1 = 1 
AND CollectionSpecimenPartDescription.CollectionSpecimenID = d.CollectionSpecimenID
AND CollectionSpecimenPartDescription.PartDescriptionID = d.PartDescriptionID
AND CollectionSpecimenPartDescription.SpecimenPartID = d.SpecimenPartID
GO
ALTER TABLE [dbo].[CollectionSpecimenPartDescription] ENABLE TRIGGER [trgUpdCollectionSpecimenPartDescription]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionSpecimenPartRegulation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--#####################################################################################################################
--######   trgDelCollectionSpecimenPartRegulation    ##################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelCollectionSpecimenPartRegulation] ON [dbo].[CollectionSpecimenPartRegulation] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 2/8/2017  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO CollectionSpecimenPartRegulation_Log (CollectionSpecimenID, SpecimenPartID, CollectionEventID, Regulation, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.SpecimenPartID, deleted.CollectionEventID, deleted.Regulation, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation] ENABLE TRIGGER [trgDelCollectionSpecimenPartRegulation]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenPartRegulation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--#####################################################################################################################
--######   trgUpdCollectionSpecimenPartRegulation    ##################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgUpdCollectionSpecimenPartRegulation] ON [dbo].[CollectionSpecimenPartRegulation] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 2/8/2017  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO CollectionSpecimenPartRegulation_Log (CollectionSpecimenID, SpecimenPartID, CollectionEventID, Regulation, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.SpecimenPartID, deleted.CollectionEventID, deleted.Regulation, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
FROM DELETED


/* updating the logging columns */
Update CollectionSpecimenPartRegulation
set LogUpdatedWhen = getdate(), LogUpdatedBy = SUSER_NAME()
FROM CollectionSpecimenPartRegulation, deleted 
where 1 = 1 
AND CollectionSpecimenPartRegulation.CollectionSpecimenID = deleted.CollectionSpecimenID
AND CollectionSpecimenPartRegulation.Regulation = deleted.Regulation
AND CollectionSpecimenPartRegulation.SpecimenPartID = deleted.SpecimenPartID
AND CollectionSpecimenPartRegulation.CollectionEventID = deleted.CollectionEventID
GO
ALTER TABLE [dbo].[CollectionSpecimenPartRegulation] ENABLE TRIGGER [trgUpdCollectionSpecimenPartRegulation]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionSpecimenProcessing]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######  trgDelCollectionSpecimenProcessing  #########################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelCollectionSpecimenProcessing] ON [dbo].[CollectionSpecimenProcessing] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenProcessing_Log (CollectionSpecimenID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ProcessingDate, ProcessingDuration, ProcessingID, Protocoll, ResponsibleAgentURI, ResponsibleName, RowGUID, SpecimenPartID, SpecimenProcessingID,   LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.ProcessingDate, deleted.ProcessingDuration, deleted.ProcessingID, deleted.Protocoll, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, deleted.SpecimenPartID, deleted.SpecimenProcessingID,   @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO CollectionSpecimenProcessing_Log (CollectionSpecimenID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ProcessingDate, ProcessingDuration, ProcessingID, Protocoll, ResponsibleAgentURI, ResponsibleName, RowGUID, SpecimenPartID, SpecimenProcessingID,   LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.ProcessingDate, deleted.ProcessingDuration, deleted.ProcessingID, deleted.Protocoll, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, deleted.SpecimenPartID, deleted.SpecimenProcessingID,  CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO CollectionSpecimenProcessing_Log (CollectionSpecimenID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ProcessingDate, ProcessingDuration, ProcessingID, Protocoll, ResponsibleAgentURI, ResponsibleName, RowGUID, SpecimenPartID, SpecimenProcessingID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.ProcessingDate, deleted.ProcessingDuration, deleted.ProcessingID, deleted.Protocoll, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, deleted.SpecimenPartID, deleted.SpecimenProcessingID,  -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing] ENABLE TRIGGER [trgDelCollectionSpecimenProcessing]
GO
/****** Object:  Trigger [dbo].[trgInsCollectionSpecimenProcessing]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgInsCollectionSpecimenProcessing] ON [dbo].[CollectionSpecimenProcessing] 
FOR INSERT AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityWorkbenchMaintenance  2.0.0.3 */ 
/*  Date: 30.08.2007  */ 

/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from inserted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM inserted)
   EXECUTE procSetVersionCollectionSpecimen @ID
END
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing] ENABLE TRIGGER [trgInsCollectionSpecimenProcessing]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenProcessing]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenProcessing]    Script Date: 10/22/2013 13:29:47 ******/

CREATE TRIGGER [dbo].[trgUpdCollectionSpecimenProcessing] ON [dbo].[CollectionSpecimenProcessing] 
FOR UPDATE AS
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int
set @i = (select count(*) from deleted) 
if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenProcessing_Log (CollectionSpecimenID, SpecimenProcessingID, ProcessingDate, ProcessingID, Protocoll, SpecimenPartID, ProcessingDuration, ResponsibleName, ResponsibleAgentURI, Notes,  RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.SpecimenProcessingID, deleted.ProcessingDate, deleted.ProcessingID, deleted.Protocoll, deleted.SpecimenPartID, deleted.ProcessingDuration, deleted.ResponsibleName, deleted.ResponsibleAgentURI, deleted.Notes,  deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  @Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO CollectionSpecimenProcessing_Log (CollectionSpecimenID, SpecimenProcessingID, ProcessingDate, ProcessingID, Protocoll, SpecimenPartID, ProcessingDuration, ResponsibleName, ResponsibleAgentURI, Notes,  RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.SpecimenProcessingID, deleted.ProcessingDate, deleted.ProcessingID, deleted.Protocoll, deleted.SpecimenPartID, deleted.ProcessingDuration, deleted.ResponsibleName, deleted.ResponsibleAgentURI, deleted.Notes,  deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, CollectionSpecimen.Version, 'U' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
Update CollectionSpecimenProcessing
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionSpecimenProcessing, deleted 
where 1 = 1 
AND CollectionSpecimenProcessing.CollectionSpecimenID = deleted.CollectionSpecimenID
AND CollectionSpecimenProcessing.ProcessingDate = deleted.ProcessingDate
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessing] ENABLE TRIGGER [trgUpdCollectionSpecimenProcessing]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionSpecimenProcessingMethod]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######  trgDelCollectionSpecimenProcessingMethod  ###################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelCollectionSpecimenProcessingMethod] ON [dbo].[CollectionSpecimenProcessingMethod] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenProcessingMethod_Log (CollectionSpecimenID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, ProcessingID, RowGUID, SpecimenProcessingID,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.ProcessingID, deleted.RowGUID, deleted.SpecimenProcessingID,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO CollectionSpecimenProcessingMethod_Log (CollectionSpecimenID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, ProcessingID, RowGUID, SpecimenProcessingID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.ProcessingID, deleted.RowGUID, deleted.SpecimenProcessingID, CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO CollectionSpecimenProcessingMethod_Log (CollectionSpecimenID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, ProcessingID, RowGUID, SpecimenProcessingID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.ProcessingID, deleted.RowGUID, deleted.SpecimenProcessingID, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod] ENABLE TRIGGER [trgDelCollectionSpecimenProcessingMethod]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenProcessingMethod]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenProcessingMethod]    Script Date: 03/05/2014 12:20:13 ******/

CREATE TRIGGER [dbo].[trgUpdCollectionSpecimenProcessingMethod] ON [dbo].[CollectionSpecimenProcessingMethod] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityMaintenance  3.0.0.1 */ 
/*  Date: 22.10.2013  */ 

/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 


/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenProcessingMethod_Log (CollectionSpecimenID, SpecimenProcessingID, MethodID, ProcessingID, MethodMarker, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.SpecimenProcessingID, deleted.MethodID, deleted.ProcessingID, deleted.MethodMarker, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  @Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO CollectionSpecimenProcessingMethod_Log (CollectionSpecimenID, SpecimenProcessingID, MethodID, ProcessingID, MethodMarker, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.SpecimenProcessingID, deleted.MethodID, deleted.ProcessingID, deleted.MethodMarker, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, CollectionSpecimen.Version, 'U' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end

/* updating the logging columns */
Update CollectionSpecimenProcessingMethod
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionSpecimenProcessingMethod, deleted 
where 1 = 1 
AND CollectionSpecimenProcessingMethod.CollectionSpecimenID = deleted.CollectionSpecimenID
AND CollectionSpecimenProcessingMethod.MethodID = deleted.MethodID
AND CollectionSpecimenProcessingMethod.ProcessingID = deleted.ProcessingID
AND CollectionSpecimenProcessingMethod.SpecimenProcessingID = deleted.SpecimenProcessingID
AND CollectionSpecimenProcessingMethod.MethodMarker = deleted.MethodMarker
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethod] ENABLE TRIGGER [trgUpdCollectionSpecimenProcessingMethod]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionSpecimenProcessingMethodParameter]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######  trgDelCollectionSpecimenProcessingMethodParameter  ##########################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelCollectionSpecimenProcessingMethodParameter] ON [dbo].[CollectionSpecimenProcessingMethodParameter] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenProcessingMethodParameter_Log (CollectionSpecimenID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, ParameterID, ProcessingID, RowGUID, SpecimenProcessingID, Value,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.ParameterID, deleted.ProcessingID, deleted.RowGUID, deleted.SpecimenProcessingID, deleted.Value,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO CollectionSpecimenProcessingMethodParameter_Log (CollectionSpecimenID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, ParameterID, ProcessingID, RowGUID, SpecimenProcessingID, Value,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.ParameterID, deleted.ProcessingID, deleted.RowGUID, deleted.SpecimenProcessingID, deleted.Value, CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO CollectionSpecimenProcessingMethodParameter_Log (CollectionSpecimenID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, ParameterID, ProcessingID, RowGUID, SpecimenProcessingID, Value,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.ParameterID, deleted.ProcessingID, deleted.RowGUID, deleted.SpecimenProcessingID, deleted.Value, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter] ENABLE TRIGGER [trgDelCollectionSpecimenProcessingMethodParameter]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenProcessingMethodParameter]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenProcessingMethodParameter]    Script Date: 03/05/2014 12:32:11 ******/
CREATE TRIGGER [dbo].[trgUpdCollectionSpecimenProcessingMethodParameter] ON [dbo].[CollectionSpecimenProcessingMethodParameter] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityMaintenance  3.0.0.1 */ 
/*  Date: 22.10.2013  */ 

/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 


/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenProcessingMethodParameter_Log (CollectionSpecimenID, SpecimenProcessingID, ProcessingID, MethodID, ParameterID, Value, MethodMarker, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.SpecimenProcessingID, deleted.ProcessingID, deleted.MethodID, deleted.ParameterID, deleted.Value, deleted.MethodMarker, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  @Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO CollectionSpecimenProcessingMethodParameter_Log (CollectionSpecimenID, SpecimenProcessingID, ProcessingID, MethodID, ParameterID, Value, MethodMarker, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.SpecimenProcessingID, deleted.ProcessingID, deleted.MethodID, deleted.ParameterID, deleted.Value, deleted.MethodMarker, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, CollectionSpecimen.Version, 'U' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end

/* updating the logging columns */
Update CollectionSpecimenProcessingMethodParameter
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionSpecimenProcessingMethodParameter, deleted 
where 1 = 1 
AND CollectionSpecimenProcessingMethodParameter.CollectionSpecimenID = deleted.CollectionSpecimenID
AND CollectionSpecimenProcessingMethodParameter.MethodID = deleted.MethodID
AND CollectionSpecimenProcessingMethodParameter.ParameterID = deleted.ParameterID
AND CollectionSpecimenProcessingMethodParameter.ProcessingID = deleted.ProcessingID
AND CollectionSpecimenProcessingMethodParameter.SpecimenProcessingID = deleted.SpecimenProcessingID
AND CollectionSpecimenProcessingMethodParameter.MethodMarker = deleted.MethodMarker

GO
ALTER TABLE [dbo].[CollectionSpecimenProcessingMethodParameter] ENABLE TRIGGER [trgUpdCollectionSpecimenProcessingMethodParameter]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionSpecimenReference]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######  trgDelCollectionSpecimenReference    ########################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelCollectionSpecimenReference] ON [dbo].[CollectionSpecimenReference] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenReference_Log (CollectionSpecimenID, IdentificationUnitID, IdentificationSequence, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ReferenceDetails, ReferenceID, ReferenceTitle, ReferenceURI, ResponsibleAgentURI, ResponsibleName, RowGUID, SpecimenPartID,  LogVersion,  LogState) 
SELECT d.CollectionSpecimenID, d.IdentificationUnitID, d.IdentificationSequence, d.LogCreatedBy, d.LogCreatedWhen, d.LogUpdatedBy, d.LogUpdatedWhen, d.Notes, d.ReferenceDetails, d.ReferenceID, d.ReferenceTitle, d.ReferenceURI, d.ResponsibleAgentURI, d.ResponsibleName, d.RowGUID, d.SpecimenPartID,  @Version,  'D'
FROM DELETED d
end
else
begin
if (select count(*) FROM DELETED D, CollectionSpecimen WHERE d.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO CollectionSpecimenReference_Log (CollectionSpecimenID, IdentificationUnitID, IdentificationSequence, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ReferenceDetails, ReferenceID, ReferenceTitle, ReferenceURI, ResponsibleAgentURI, ResponsibleName, RowGUID, SpecimenPartID,  LogVersion, LogState) 
SELECT d.CollectionSpecimenID, d.IdentificationUnitID, d.IdentificationSequence, d.LogCreatedBy, d.LogCreatedWhen, d.LogUpdatedBy, d.LogUpdatedWhen, d.Notes, d.ReferenceDetails, d.ReferenceID, d.ReferenceTitle, d.ReferenceURI, d.ResponsibleAgentURI, d.ResponsibleName, d.RowGUID, d.SpecimenPartID, CollectionSpecimen.Version, 'D' 
FROM DELETED d, CollectionSpecimen
WHERE d.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO CollectionSpecimenReference_Log (CollectionSpecimenID, IdentificationUnitID, IdentificationSequence, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ReferenceDetails, ReferenceID, ReferenceTitle, ReferenceURI, ResponsibleAgentURI, ResponsibleName, RowGUID, SpecimenPartID,  LogVersion, LogState) 
SELECT d.CollectionSpecimenID, d.IdentificationUnitID, d.IdentificationSequence, d.LogCreatedBy, d.LogCreatedWhen, d.LogUpdatedBy, d.LogUpdatedWhen, d.Notes, d.ReferenceDetails, d.ReferenceID, d.ReferenceTitle, d.ReferenceURI, d.ResponsibleAgentURI, d.ResponsibleName, d.RowGUID, d.SpecimenPartID, -1, 'D' 
FROM DELETED D
end
end
GO
ALTER TABLE [dbo].[CollectionSpecimenReference] ENABLE TRIGGER [trgDelCollectionSpecimenReference]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenReference]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######   trgUpdCollectionSpecimenReference   ########################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgUpdCollectionSpecimenReference] ON [dbo].[CollectionSpecimenReference] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.5 */ 
/*  Date: 5/20/2016  */ 

/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 


/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenReference_Log (CollectionSpecimenID, ReferenceID, ReferenceTitle, ReferenceURI, IdentificationUnitID, IdentificationSequence, SpecimenPartID, ReferenceDetails, Notes, ResponsibleName, ResponsibleAgentURI, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion,  LogState) 
SELECT d.CollectionSpecimenID, d.ReferenceID, d.ReferenceTitle, d.ReferenceURI, d.IdentificationUnitID, d.IdentificationSequence, d.SpecimenPartID, d.ReferenceDetails, d.Notes, d.ResponsibleName, d.ResponsibleAgentURI, d.LogCreatedWhen, d.LogCreatedBy, d.LogUpdatedWhen, d.LogUpdatedBy, d.RowGUID,  @Version,  'U'
FROM DELETED D
end
else
begin
INSERT INTO CollectionSpecimenReference_Log (CollectionSpecimenID, ReferenceID, ReferenceTitle, ReferenceURI, IdentificationUnitID, IdentificationSequence, SpecimenPartID, ReferenceDetails, Notes, ResponsibleName, ResponsibleAgentURI, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion, LogState) 
SELECT d.CollectionSpecimenID, d.ReferenceID, d.ReferenceTitle, d.ReferenceURI, d.IdentificationUnitID, d.IdentificationSequence, d.SpecimenPartID, d.ReferenceDetails, d.Notes, d.ResponsibleName, d.ResponsibleAgentURI, d.LogCreatedWhen, d.LogCreatedBy, d.LogUpdatedWhen, d.LogUpdatedBy, d.RowGUID, CollectionSpecimen.Version, 'U' 
FROM DELETED D, CollectionSpecimen
WHERE d.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end

/* updating the logging columns */
Update CollectionSpecimenReference
set LogUpdatedWhen = getdate(), LogUpdatedBy = SUSER_NAME()
FROM CollectionSpecimenReference R, deleted d
where 1 = 1 
AND R.CollectionSpecimenID = d.CollectionSpecimenID
AND R.ReferenceTitle = d.ReferenceTitle

GO
ALTER TABLE [dbo].[CollectionSpecimenReference] ENABLE TRIGGER [trgUpdCollectionSpecimenReference]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionSpecimenRelation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######  trgDelCollectionSpecimenRelation    #########################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelCollectionSpecimenRelation] ON [dbo].[CollectionSpecimenRelation] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenRelation_Log (CollectionSpecimenID, IdentificationUnitID, IsInternalRelationCache, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, RelatedSpecimenCollectionID, RelatedSpecimenDescription, RelatedSpecimenDisplayText, RelatedSpecimenURI, RelationType, RowGUID, SpecimenPartID,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.IsInternalRelationCache, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.RelatedSpecimenCollectionID, deleted.RelatedSpecimenDescription, deleted.RelatedSpecimenDisplayText, deleted.RelatedSpecimenURI, deleted.RelationType, deleted.RowGUID, deleted.SpecimenPartID,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO CollectionSpecimenRelation_Log (CollectionSpecimenID, IdentificationUnitID, IsInternalRelationCache, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, RelatedSpecimenCollectionID, RelatedSpecimenDescription, RelatedSpecimenDisplayText, RelatedSpecimenURI, RelationType, RowGUID, SpecimenPartID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.IsInternalRelationCache, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.RelatedSpecimenCollectionID, deleted.RelatedSpecimenDescription, deleted.RelatedSpecimenDisplayText, deleted.RelatedSpecimenURI, deleted.RelationType, deleted.RowGUID, deleted.SpecimenPartID, CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO CollectionSpecimenRelation_Log (CollectionSpecimenID, IdentificationUnitID, IsInternalRelationCache, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, RelatedSpecimenCollectionID, RelatedSpecimenDescription, RelatedSpecimenDisplayText, RelatedSpecimenURI, RelationType, RowGUID, SpecimenPartID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.IsInternalRelationCache, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.RelatedSpecimenCollectionID, deleted.RelatedSpecimenDescription, deleted.RelatedSpecimenDisplayText, deleted.RelatedSpecimenURI, deleted.RelationType, deleted.RowGUID, deleted.SpecimenPartID, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] ENABLE TRIGGER [trgDelCollectionSpecimenRelation]
GO
/****** Object:  Trigger [dbo].[trgInsCollectionSpecimenRelation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgInsCollectionSpecimenRelation] ON [dbo].[CollectionSpecimenRelation] 
FOR INSERT AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 

/* setting the version in the main table */ 
declare @i int 
set @i = (select count(*) from inserted) 
if @i = 1 
begin 
DECLARE @ID int
SET  @ID = (SELECT CollectionSpecimenID FROM inserted)
EXECUTE procSetVersionCollectionSpecimen @ID
end
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] ENABLE TRIGGER [trgInsCollectionSpecimenRelation]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenRelation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdCollectionSpecimenRelation] ON [dbo].[CollectionSpecimenRelation] 
FOR UPDATE AS
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int
set @i = (select count(*) from deleted) 
if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 
if (not @Version is null) 
begin
INSERT INTO CollectionSpecimenRelation_Log (CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache, IdentificationUnitID, SpecimenPartID, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.RelatedSpecimenURI, deleted.RelatedSpecimenDisplayText, deleted.RelationType, deleted.RelatedSpecimenCollectionID, deleted.RelatedSpecimenDescription, deleted.Notes, deleted.IsInternalRelationCache, deleted.IdentificationUnitID, deleted.SpecimenPartID, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  @Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO CollectionSpecimenRelation_Log (CollectionSpecimenID, RelatedSpecimenURI, RelatedSpecimenDisplayText, RelationType, RelatedSpecimenCollectionID, RelatedSpecimenDescription, Notes, IsInternalRelationCache, IdentificationUnitID, SpecimenPartID, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.RelatedSpecimenURI, deleted.RelatedSpecimenDisplayText, deleted.RelationType, deleted.RelatedSpecimenCollectionID, deleted.RelatedSpecimenDescription, deleted.Notes, deleted.IsInternalRelationCache, deleted.IdentificationUnitID, deleted.SpecimenPartID, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, CollectionSpecimen.Version, 'U' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
Update CollectionSpecimenRelation
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionSpecimenRelation, deleted 
where 1 = 1 
AND CollectionSpecimenRelation.CollectionSpecimenID = deleted.CollectionSpecimenID
AND CollectionSpecimenRelation.RelatedSpecimenURI = deleted.RelatedSpecimenURI
GO
ALTER TABLE [dbo].[CollectionSpecimenRelation] ENABLE TRIGGER [trgUpdCollectionSpecimenRelation]
GO
/****** Object:  Trigger [dbo].[trgDelCollectionSpecimenTransaction]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--#####################################################################################################################
--######   CollectionSpecimenTransaction: trgDelCollectionSpecimenTransaction  ########################################
--#####################################################################################################################


CREATE TRIGGER [dbo].[trgDelCollectionSpecimenTransaction] ON [dbo].[CollectionSpecimenTransaction] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  altered for inclusion of TransactionTitle */ 
/*  Date: 1/2/2019  */ 

/* saving the original dataset in the logging table */ 
INSERT INTO CollectionSpecimenTransaction_Log (AccessionNumber, TransactionTitle, CollectionSpecimenID, IsOnLoan, LogInsertedBy, LogInsertedWhen, LogUpdatedBy, LogUpdatedWhen, RowGUID, SpecimenPartID, TransactionID, TransactionReturnID,  LogState) 
SELECT deleted.AccessionNumber, deleted.TransactionTitle, deleted.CollectionSpecimenID, deleted.IsOnLoan, deleted.LogInsertedBy, deleted.LogInsertedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.RowGUID, deleted.SpecimenPartID, deleted.TransactionID, deleted.TransactionReturnID,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction] ENABLE TRIGGER [trgDelCollectionSpecimenTransaction]
GO
/****** Object:  Trigger [dbo].[trgInsCollectionSpecimenTransaction]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   CollectionSpecimenTransaction: trgInsCollectionSpecimenTransaction for validation  #########################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgInsCollectionSpecimenTransaction] ON [dbo].[CollectionSpecimenTransaction] 
FOR INSERT AS
if (select count(*) from inserted I, [Transaction] T 
where I.TransactionID = T.TransactionID 
and T.TransactionType = 'regulation') = 1
begin
	if (select count(*) from inserted I, [Transaction] T, CollectionSpecimen S, CollectionEventRegulation R 
	where I.TransactionID = T.TransactionID 
	and I.TransactionTitle = T.TransactionTitle
	and I.CollectionSpecimenID = S.CollectionSpecimenID
	and S.CollectionEventID = R.CollectionEventID
	and I.TransactionTitle = R.Regulation
	and T.TransactionType = 'regulation') = 0
	begin
		rollback tran
	end
end
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction] ENABLE TRIGGER [trgInsCollectionSpecimenTransaction]
GO
/****** Object:  Trigger [dbo].[trgUpdCollectionSpecimenTransaction]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--#####################################################################################################################
--######   CollectionSpecimenTransaction: trgDelCollectionSpecimenTransaction  ########################################
--#####################################################################################################################


CREATE TRIGGER [dbo].[trgUpdCollectionSpecimenTransaction] ON [dbo].[CollectionSpecimenTransaction] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  altered for inclusion of TransactionTitle */ 
/*  Date: 1/2/2019  */ 

/* saving the original dataset in the logging table */ 
INSERT INTO CollectionSpecimenTransaction_Log (CollectionSpecimenID, TransactionID, SpecimenPartID, IsOnLoan, AccessionNumber, TransactionTitle, RowGUID, LogInsertedBy, LogInsertedWhen, LogUpdatedBy, LogUpdatedWhen,  LogState, TransactionReturnID) 
SELECT deleted.CollectionSpecimenID, deleted.TransactionID, deleted.SpecimenPartID, deleted.IsOnLoan, deleted.AccessionNumber, deleted.TransactionTitle, deleted.RowGUID, deleted.LogInsertedBy, deleted.LogInsertedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen,  'U', deleted.TransactionReturnID
FROM DELETED
Update CollectionSpecimenTransaction
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM CollectionSpecimenTransaction, deleted 
where 1 = 1 
AND CollectionSpecimenTransaction.CollectionSpecimenID = deleted.CollectionSpecimenID
AND CollectionSpecimenTransaction.TransactionID = deleted.TransactionID
AND CollectionSpecimenTransaction.SpecimenPartID = deleted.SpecimenPartID
GO
ALTER TABLE [dbo].[CollectionSpecimenTransaction] ENABLE TRIGGER [trgUpdCollectionSpecimenTransaction]
GO
/****** Object:  Trigger [dbo].[trgUpdEntity]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE TRIGGER [dbo].[trgUpdEntity] ON [dbo].[Entity] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityWorkbenchMaintenance  2.0.1.2 */ 
/*  Date: 24.02.2010  */ 

/* updating the logging columns */
Update Entity
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM Entity, deleted 
where 1 = 1 
AND Entity.Entity = deleted.Entity
GO
ALTER TABLE [dbo].[Entity] ENABLE TRIGGER [trgUpdEntity]
GO
/****** Object:  Trigger [dbo].[trgUpdEntityRepresentation]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdEntityRepresentation] ON [dbo].[EntityRepresentation] 
FOR UPDATE AS
/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.9.3 */ 
/*  Date: 11/20/2018  */ 
/* updating the logging columns */
Update T 
set T.LogUpdatedWhen = getdate(),  T.LogUpdatedBy = U.ID 
FROM EntityRepresentation T, deleted D, UserProxy U 
where U.LoginName = SUSER_NAME() 
AND T.Entity = D.Entity
AND T.EntityContext = D.EntityContext
AND T.LanguageCode = D.LanguageCode
GO
ALTER TABLE [dbo].[EntityRepresentation] ENABLE TRIGGER [trgUpdEntityRepresentation]
GO
/****** Object:  Trigger [dbo].[trgUpdEntityUsage]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdEntityUsage] ON [dbo].[EntityUsage] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityWorkbenchMaintenance  2.0.1.2 */ 
/*  Date: 24.02.2010  */ 

/* updating the logging columns */
Update EntityUsage
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM EntityUsage, deleted 
where 1 = 1 
AND EntityUsage.Entity = deleted.Entity
AND EntityUsage.EntityContext = deleted.EntityContext
GO
ALTER TABLE [dbo].[EntityUsage] ENABLE TRIGGER [trgUpdEntityUsage]
GO
/****** Object:  Trigger [dbo].[trgDelExternalIdentifier]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--#####################################################################################################################
--######   trgDelExternalIdentifier                  ##################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelExternalIdentifier] ON [dbo].[ExternalIdentifier] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.5 */ 
/*  Date: 5/24/2016  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO ExternalIdentifier_Log (ID, ReferencedTable, ReferencedID, Type, Identifier, URL, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.ID, deleted.ReferencedTable, deleted.ReferencedID, deleted.Type, deleted.Identifier, deleted.URL, deleted.Notes, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED

GO
ALTER TABLE [dbo].[ExternalIdentifier] ENABLE TRIGGER [trgDelExternalIdentifier]
GO
/****** Object:  Trigger [dbo].[trgUpdExternalIdentifier]    Script Date: 06.04.2021 17:13:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   trgUpdExternalIdentifier                  ##################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgUpdExternalIdentifier] ON [dbo].[ExternalIdentifier] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.5 */ 
/*  Date: 5/24/2016  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO ExternalIdentifier_Log (ID, ReferencedTable, ReferencedID, Type, Identifier, URL, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.ID, deleted.ReferencedTable, deleted.ReferencedID, deleted.Type, deleted.Identifier, deleted.URL, deleted.Notes, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
FROM DELETED


/* updating the logging columns */
Update ExternalIdentifier
set LogUpdatedWhen = getdate(), LogUpdatedBy = SUSER_NAME()
FROM ExternalIdentifier, deleted 
where 1 = 1 
AND ExternalIdentifier.ID = deleted.ID
GO
ALTER TABLE [dbo].[ExternalIdentifier] ENABLE TRIGGER [trgUpdExternalIdentifier]
GO
/****** Object:  Trigger [dbo].[trgDelExternalIdentifierType]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   trgDelExternalIdentifierType              ##################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelExternalIdentifierType] ON [dbo].[ExternalIdentifierType] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.5 */ 
/*  Date: 5/24/2016  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO ExternalIdentifierType_Log (Type, ParentType, URL, Description, InternalNotes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.Type, deleted.ParentType, deleted.URL, deleted.Description, deleted.InternalNotes, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED

GO
ALTER TABLE [dbo].[ExternalIdentifierType] ENABLE TRIGGER [trgDelExternalIdentifierType]
GO
/****** Object:  Trigger [dbo].[trgUpdExternalIdentifierType]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######   trgUpdExternalIdentifierType              ##################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgUpdExternalIdentifierType] ON [dbo].[ExternalIdentifierType] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.5 */ 
/*  Date: 5/24/2016  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO ExternalIdentifierType_Log (Type, ParentType, URL, Description, InternalNotes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.Type, deleted.ParentType, deleted.URL, deleted.Description, deleted.InternalNotes, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
FROM DELETED


/* updating the logging columns */
Update ExternalIdentifierType
set LogUpdatedWhen = getdate(), LogUpdatedBy = SUSER_NAME()
FROM ExternalIdentifierType, deleted 
where 1 = 1 
AND ExternalIdentifierType.Type = deleted.Type
GO
ALTER TABLE [dbo].[ExternalIdentifierType] ENABLE TRIGGER [trgUpdExternalIdentifierType]
GO
/****** Object:  Trigger [dbo].[trgDelIdentification]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######   trgDelIdentification - Add DependsOnIdentificationSequence    ##############################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelIdentification] ON [dbo].[Identification] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO Identification_Log (CollectionSpecimenID, IdentificationCategory, IdentificationDate, IdentificationDateCategory, IdentificationDateSupplement, IdentificationDay, IdentificationMonth, IdentificationQualifier, IdentificationSequence, IdentificationUnitID, IdentificationYear, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, NameURI, Notes, ReferenceDetails, ReferenceTitle, ReferenceURI, ResponsibleAgentURI, ResponsibleName, RowGUID, TaxonomicName, TermUri, TypeNotes, TypeStatus, VernacularTerm, DependsOnIdentificationSequence,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationCategory, deleted.IdentificationDate, deleted.IdentificationDateCategory, deleted.IdentificationDateSupplement, deleted.IdentificationDay, deleted.IdentificationMonth, deleted.IdentificationQualifier, deleted.IdentificationSequence, deleted.IdentificationUnitID, deleted.IdentificationYear, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.NameURI, deleted.Notes, deleted.ReferenceDetails, deleted.ReferenceTitle, deleted.ReferenceURI, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, deleted.TaxonomicName, deleted.TermUri, deleted.TypeNotes, deleted.TypeStatus, deleted.VernacularTerm, deleted.DependsOnIdentificationSequence,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO Identification_Log (CollectionSpecimenID, IdentificationCategory, IdentificationDate, IdentificationDateCategory, IdentificationDateSupplement, IdentificationDay, IdentificationMonth, IdentificationQualifier, IdentificationSequence, IdentificationUnitID, IdentificationYear, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, NameURI, Notes, ReferenceDetails, ReferenceTitle, ReferenceURI, ResponsibleAgentURI, ResponsibleName, RowGUID, TaxonomicName, TermUri, TypeNotes, TypeStatus, VernacularTerm, DependsOnIdentificationSequence,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationCategory, deleted.IdentificationDate, deleted.IdentificationDateCategory, deleted.IdentificationDateSupplement, deleted.IdentificationDay, deleted.IdentificationMonth, deleted.IdentificationQualifier, deleted.IdentificationSequence, deleted.IdentificationUnitID, deleted.IdentificationYear, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.NameURI, deleted.Notes, deleted.ReferenceDetails, deleted.ReferenceTitle, deleted.ReferenceURI, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, deleted.TaxonomicName, deleted.TermUri, deleted.TypeNotes, deleted.TypeStatus, deleted.VernacularTerm, deleted.DependsOnIdentificationSequence, CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO Identification_Log (CollectionSpecimenID, IdentificationCategory, IdentificationDate, IdentificationDateCategory, IdentificationDateSupplement, IdentificationDay, IdentificationMonth, IdentificationQualifier, IdentificationSequence, IdentificationUnitID, IdentificationYear, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, NameURI, Notes, ReferenceDetails, ReferenceTitle, ReferenceURI, ResponsibleAgentURI, ResponsibleName, RowGUID, TaxonomicName, TermUri, TypeNotes, TypeStatus, VernacularTerm, DependsOnIdentificationSequence,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationCategory, deleted.IdentificationDate, deleted.IdentificationDateCategory, deleted.IdentificationDateSupplement, deleted.IdentificationDay, deleted.IdentificationMonth, deleted.IdentificationQualifier, deleted.IdentificationSequence, deleted.IdentificationUnitID, deleted.IdentificationYear, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.NameURI, deleted.Notes, deleted.ReferenceDetails, deleted.ReferenceTitle, deleted.ReferenceURI, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, deleted.TaxonomicName, deleted.TermUri, deleted.TypeNotes, deleted.TypeStatus, deleted.VernacularTerm, deleted.DependsOnIdentificationSequence, -1, 'D' 
FROM DELETED
end
end


/* setting the LastIdentificationCache if the deleted dataset was the last identification*/
update IdentificationUnit
set LastIdentificationCache = 
case 
when a.TaxonomicName is null or  a.TaxonomicName = '' 
then 
	case 
	when a.VernacularTerm is null or  a.VernacularTerm = '' 
	then IdentificationUnit.TaxonomicGroup + ' [ ' + cast(a.IdentificationUnitID as nvarchar) + ' ]'
	else a.VernacularTerm
	end
else a.TaxonomicName
end 
from IdentificationUnit, Identification a, deleted
where IdentificationUnit.CollectionSpecimenID = deleted.CollectionSpecimenID
and IdentificationUnit.IdentificationUnitID = deleted.IdentificationUnitID
and a.CollectionSpecimenID = deleted.CollectionSpecimenID
and a.IdentificationUnitID = deleted.IdentificationUnitID
and a.IdentificationSequence = 
(select max(b.IdentificationSequence) 
from Identification b
where b.CollectionSpecimenID = a.CollectionSpecimenID
and b.IdentificationUnitID = a.IdentificationUnitID
group by b.IdentificationUnitID, b.CollectionSpecimenID)
and LastIdentificationCache <> case 
when a.TaxonomicName is null or  a.TaxonomicName = '' 
then 
	case 
	when a.VernacularTerm is null or  a.VernacularTerm = '' 
	then IdentificationUnit.TaxonomicGroup + ' [ ' + cast(a.IdentificationUnitID as nvarchar) + ' ]'
	else a.VernacularTerm
	end
else a.TaxonomicName
end

GO
ALTER TABLE [dbo].[Identification] ENABLE TRIGGER [trgDelIdentification]
GO
/****** Object:  Trigger [dbo].[trgIdentificationInsert]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   trgIdentificationInsert: Do not include depending identifications  #########################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgIdentificationInsert] ON [dbo].[Identification] 
FOR INSERT
AS

/* MW 16.08.2005  */
/* updating the LastIdentificationCache in IdentificationUnit */
update IdentificationUnit
set LastIdentificationCache = 
case 
when a.TaxonomicName is null or  a.TaxonomicName = '' 
then 
	case 
	when a.VernacularTerm is null or  a.VernacularTerm = '' 
	then IdentificationUnit.TaxonomicGroup + ' [ ' + cast(a.IdentificationUnitID as nvarchar) + ' ]'
	else a.VernacularTerm
	end
else a.TaxonomicName
end 
from IdentificationUnit, Identification a, inserted
where IdentificationUnit.CollectionSpecimenID = inserted.CollectionSpecimenID
and IdentificationUnit.IdentificationUnitID = inserted.IdentificationUnitID
and a.CollectionSpecimenID = inserted.CollectionSpecimenID
and a.IdentificationUnitID = inserted.IdentificationUnitID
and a.IdentificationSequence = 
(select max(b.IdentificationSequence) 
from Identification b
where b.CollectionSpecimenID = a.CollectionSpecimenID
and b.IdentificationUnitID = a.IdentificationUnitID
and b.[DependsOnIdentificationSequence] is null
group by b.IdentificationUnitID, b.CollectionSpecimenID)

declare @Sequence tinyint

GO
ALTER TABLE [dbo].[Identification] ENABLE TRIGGER [trgIdentificationInsert]
GO
/****** Object:  Trigger [dbo].[trgInsIdentification]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgInsIdentification] ON [dbo].[Identification] 
FOR INSERT AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 

/* setting the version in the main table */ 
declare @i int 
set @i = (select count(*) from inserted) 
if @i = 1 
begin 

/* setting the date fields */ 
UPDATE Identification
SET IdentificationDay = DAY(inserted.IdentificationDate), 
IdentificationMonth = MONTH(inserted.IdentificationDate), 
IdentificationYear = YEAR(inserted.IdentificationDate)
FROM inserted, Identification
WHERE inserted.IdentificationUnitID = Identification.IdentificationUnitID
AND inserted.CollectionSpecimenID = Identification.CollectionSpecimenID
AND inserted.IdentificationSequence = Identification.IdentificationSequence
AND NOT inserted.IdentificationDate IS NULL
AND inserted.IdentificationDay IS NULL 
AND inserted.IdentificationMonth IS NULL 
AND inserted.IdentificationYear IS NULL

DECLARE @ID int
SET  @ID = (SELECT CollectionSpecimenID FROM inserted)
EXECUTE procSetVersionCollectionSpecimen @ID
end
GO
ALTER TABLE [dbo].[Identification] ENABLE TRIGGER [trgInsIdentification]
GO
/****** Object:  Trigger [dbo].[trgUpdIdentification]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######  trgUpdIdentification - Add DependsOnIdentificationSequence; Do not include depending identifications  #######
--#####################################################################################################################


CREATE TRIGGER [dbo].[trgUpdIdentification] ON [dbo].[Identification] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 19.11.2020  */ 

/* setting the version in the main table */ 
DECLARE @Version int
SET @Version = -1
declare @i int 
set @i = (select count(*) from deleted) 
if @i = 1 
begin 
	DECLARE @ID int
	SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
	EXECUTE procSetVersionCollectionSpecimen @ID
	SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
end 


/* updating the LastIdentificationCache in IdentificationUnit */
update IdentificationUnit
set LastIdentificationCache = 
case 
when a.TaxonomicName is null or  a.TaxonomicName = '' 
then 
	case 
	when a.VernacularTerm is null or  a.VernacularTerm = '' 
	then IdentificationUnit.TaxonomicGroup + ' [ ' + cast(a.IdentificationUnitID as nvarchar) + ' ]'
	else a.VernacularTerm
	end
else a.TaxonomicName
end 
from IdentificationUnit, Identification a, inserted
where IdentificationUnit.CollectionSpecimenID = inserted.CollectionSpecimenID
and IdentificationUnit.IdentificationUnitID = inserted.IdentificationUnitID
and a.CollectionSpecimenID = inserted.CollectionSpecimenID
and a.IdentificationUnitID = inserted.IdentificationUnitID
and a.IdentificationSequence = 
(select max(b.IdentificationSequence) 
from Identification b
where b.CollectionSpecimenID = a.CollectionSpecimenID
and b.IdentificationUnitID = a.IdentificationUnitID
and b.[DependsOnIdentificationSequence] is null
group by b.IdentificationUnitID, b.CollectionSpecimenID)
and (LastIdentificationCache is null or LastIdentificationCache <> case 
when a.TaxonomicName is null or  a.TaxonomicName = '' 
then 
	case 
	when a.VernacularTerm is null or  a.VernacularTerm = '' 
	then IdentificationUnit.TaxonomicGroup + ' [ ' + cast(a.IdentificationUnitID as nvarchar) + ' ]'
	else a.VernacularTerm
	end
else a.TaxonomicName
end )

/* updating the logging columns and the IdentificationDate */
Update Identification
set LogUpdatedWhen = getdate()
, LogUpdatedBy = SYSTEM_USER
, IdentificationDate = case when I.[IdentificationYear] is null or I.[IdentificationMonth] is null or I.[IdentificationDay] is null
	OR I.IdentificationDay not between 1 and 31 OR I.IdentificationMonth not between 1 and 12 or I.IdentificationYear not between 1754 and year(getdate()) + 1 then NULL 
	else convert(datetime, cast(I.[IdentificationYear] as varchar) + '-' + cast(I.[IdentificationMonth] as varchar) + '-' + cast(I.[IdentificationDay] as varchar), 120) end
FROM Identification I, deleted D
where 1 = 1 
AND I.CollectionSpecimenID = D.CollectionSpecimenID
AND I.IdentificationSequence = D.IdentificationSequence
AND I.IdentificationUnitID = D.IdentificationUnitID

/* saving the original dataset in the logging table */ 
INSERT INTO Identification_Log (CollectionSpecimenID, IdentificationUnitID, IdentificationSequence, IdentificationDate, IdentificationDay, IdentificationMonth, IdentificationYear, IdentificationDateSupplement, IdentificationDateCategory, VernacularTerm, TermUri, TaxonomicName, NameURI, IdentificationCategory, IdentificationQualifier, TypeStatus, TypeNotes, ReferenceTitle, ReferenceURI, ReferenceDetails, Notes, ResponsibleName, ResponsibleAgentURI, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogVersion, LogState) 
SELECT D.CollectionSpecimenID, D.IdentificationUnitID, D.IdentificationSequence, D.IdentificationDate, D.IdentificationDay, D.IdentificationMonth, D.IdentificationYear, D.IdentificationDateSupplement, D.IdentificationDateCategory, D.VernacularTerm, D.TermUri, D.TaxonomicName, D.NameURI, D.IdentificationCategory, D.IdentificationQualifier, D.TypeStatus, D.TypeNotes, D.ReferenceTitle, D.ReferenceURI, D.ReferenceDetails, D.Notes, D.ResponsibleName, D.ResponsibleAgentURI, D.RowGUID, D.LogCreatedWhen, D.LogCreatedBy, D.LogUpdatedWhen, D.LogUpdatedBy, @Version, 'U' 
FROM DELETED D

GO
ALTER TABLE [dbo].[Identification] ENABLE TRIGGER [trgUpdIdentification]
GO
/****** Object:  Trigger [dbo].[trgDelIdentificationUnit]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   trgDelIdentificationUnit    ################################################################################
--#####################################################################################################################


CREATE TRIGGER [dbo].[trgDelIdentificationUnit] ON [dbo].[IdentificationUnit] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO IdentificationUnit_Log (Circumstances, CollectionSpecimenID, ColonisedSubstratePart, DataWithholdingReason, DisplayOrder, ExsiccataIdentification, ExsiccataNumber, FamilyCache, Gender, HierarchyCache, IdentificationUnitID, LastIdentificationCache, LifeStage, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, NumberOfUnits, NumberOfUnitsModifier, OnlyObserved, OrderCache, ParentUnitID, RelatedUnitID, RelationType, RowGUID, TaxonomicGroup, UnitDescription, UnitIdentifier,  LogVersion,  LogState) 
SELECT deleted.Circumstances, deleted.CollectionSpecimenID, deleted.ColonisedSubstratePart, deleted.DataWithholdingReason, deleted.DisplayOrder, deleted.ExsiccataIdentification, deleted.ExsiccataNumber, deleted.FamilyCache, deleted.Gender, deleted.HierarchyCache, deleted.IdentificationUnitID, deleted.LastIdentificationCache, deleted.LifeStage, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.NumberOfUnits, deleted.NumberOfUnitsModifier, deleted.OnlyObserved, deleted.OrderCache, deleted.ParentUnitID, deleted.RelatedUnitID, deleted.RelationType, deleted.RowGUID, deleted.TaxonomicGroup, deleted.UnitDescription, deleted.UnitIdentifier,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO IdentificationUnit_Log (Circumstances, CollectionSpecimenID, ColonisedSubstratePart, DataWithholdingReason, DisplayOrder, ExsiccataIdentification, ExsiccataNumber, FamilyCache, Gender, HierarchyCache, IdentificationUnitID, LastIdentificationCache, LifeStage, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, NumberOfUnits, NumberOfUnitsModifier, OnlyObserved, OrderCache, ParentUnitID, RelatedUnitID, RelationType, RowGUID, TaxonomicGroup, UnitDescription, UnitIdentifier,  LogVersion, LogState) 
SELECT deleted.Circumstances, deleted.CollectionSpecimenID, deleted.ColonisedSubstratePart, deleted.DataWithholdingReason, deleted.DisplayOrder, deleted.ExsiccataIdentification, deleted.ExsiccataNumber, deleted.FamilyCache, deleted.Gender, deleted.HierarchyCache, deleted.IdentificationUnitID, deleted.LastIdentificationCache, deleted.LifeStage, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.NumberOfUnits, deleted.NumberOfUnitsModifier, deleted.OnlyObserved, deleted.OrderCache, deleted.ParentUnitID, deleted.RelatedUnitID, deleted.RelationType, deleted.RowGUID, deleted.TaxonomicGroup, deleted.UnitDescription, deleted.UnitIdentifier, CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO IdentificationUnit_Log (Circumstances, CollectionSpecimenID, ColonisedSubstratePart, DataWithholdingReason, DisplayOrder, ExsiccataIdentification, ExsiccataNumber, FamilyCache, Gender, HierarchyCache, IdentificationUnitID, LastIdentificationCache, LifeStage, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, NumberOfUnits, NumberOfUnitsModifier, OnlyObserved, OrderCache, ParentUnitID, RelatedUnitID, RelationType, RowGUID, TaxonomicGroup, UnitDescription, UnitIdentifier,  LogVersion, LogState) 
SELECT deleted.Circumstances, deleted.CollectionSpecimenID, deleted.ColonisedSubstratePart, deleted.DataWithholdingReason, deleted.DisplayOrder, deleted.ExsiccataIdentification, deleted.ExsiccataNumber, deleted.FamilyCache, deleted.Gender, deleted.HierarchyCache, deleted.IdentificationUnitID, deleted.LastIdentificationCache, deleted.LifeStage, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.NumberOfUnits, deleted.NumberOfUnitsModifier, deleted.OnlyObserved, deleted.OrderCache, deleted.ParentUnitID, deleted.RelatedUnitID, deleted.RelationType, deleted.RowGUID, deleted.TaxonomicGroup, deleted.UnitDescription, deleted.UnitIdentifier, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[IdentificationUnit] ENABLE TRIGGER [trgDelIdentificationUnit]
GO
/****** Object:  Trigger [dbo].[trgInsIdentificationUnit]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgInsIdentificationUnit] ON [dbo].[IdentificationUnit] 
FOR INSERT AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 

/* setting the version in the main table */ 
declare @ii int 
set @ii = (select count(*) from inserted) 
if @ii = 1 
begin 
DECLARE @ID int
SET  @ID = (SELECT CollectionSpecimenID FROM inserted)
EXECUTE procSetVersionCollectionSpecimen @ID
end 

/*
setting the display oder for the new unit to the next number if none or an already present on was given
MW 24.08.2005
*/
declare @i int
declare @DisplayOrder tinyint
declare @CountInserted int

set @CountInserted = (select count(*) from inserted)
if @CountInserted = 1
BEGIN
/*getting the DisplayOrder from the new dataset and if it is greater than 0 check if it is present */
set @DisplayOrder = (select DisplayOrder from inserted)
if @DisplayOrder is not null and @DisplayOrder > 0
begin
set @i = (select count(*) from IdentificationUnit, inserted
	where IdentificationUnit.CollectionSpecimenID = inserted.CollectionSpecimenID
	and IdentificationUnit.IdentificationUnitID = inserted.IdentificationUnitID
	and IdentificationUnit.DisplayOrder = @DisplayOrder)
if @i > 0 set @i = 0
end 
else
begin
set @i = (select count(*) from inserted)
end

if @i = 1
BEGIN

declare @Count int
set @Count = (select count(*) 
	from IdentificationUnit , inserted
	where IdentificationUnit.CollectionSpecimenID = inserted.CollectionSpecimenID
	and IdentificationUnit.IdentificationUnitID = inserted.IdentificationUnitID)
if (@Count > 0)
begin
	set @DisplayOrder = (select max(@DisplayOrder) + 1 from IdentificationUnit, inserted
	where IdentificationUnit.CollectionSpecimenID = inserted.CollectionSpecimenID
	and IdentificationUnit.IdentificationUnitID = inserted.IdentificationUnitID)
end
else
begin
	set @DisplayOrder = 1
end
if @DisplayOrder is not null
begin
update IdentificationUnit 
set DisplayOrder = @DisplayOrder, LastIdentificationCache = case when inserted.LastIdentificationCache is null then inserted.TaxonomicGroup else inserted.LastIdentificationCache end
from IdentificationUnit, inserted
where IdentificationUnit.CollectionSpecimenID = inserted.CollectionSpecimenID
and IdentificationUnit.IdentificationUnitID = inserted.IdentificationUnitID
end
END
END
GO
ALTER TABLE [dbo].[IdentificationUnit] ENABLE TRIGGER [trgInsIdentificationUnit]
GO
/****** Object:  Trigger [dbo].[trgUpdIdentificationUnit]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgUpdIdentificationUnit]    Script Date: 21.07.2015 17:30:50 ******/

CREATE TRIGGER [dbo].[trgUpdIdentificationUnit] ON [dbo].[IdentificationUnit] 
FOR UPDATE AS
declare @i int 
set @i = (select count(*) from deleted) 
if @i = 1 
begin 
DECLARE @ID int
SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
EXECUTE procSetVersionCollectionSpecimen @ID
end 
DECLARE @Version int
SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
Update IdentificationUnit
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM IdentificationUnit, deleted 
where 1 = 1 
AND IdentificationUnit.CollectionSpecimenID = deleted.CollectionSpecimenID
AND IdentificationUnit.IdentificationUnitID = deleted.IdentificationUnitID
if (not @Version is null) 
begin
INSERT INTO IdentificationUnit_Log (CollectionSpecimenID, IdentificationUnitID, LastIdentificationCache, FamilyCache, OrderCache, 
TaxonomicGroup, OnlyObserved, RelatedUnitID, RelationType, ColonisedSubstratePart, LifeStage, 
Gender, NumberOfUnits, NumberOfUnitsModifier, ExsiccataNumber, ExsiccataIdentification, UnitIdentifier, UnitDescription, Circumstances, DisplayOrder, 
Notes, RowGUID, HierarchyCache, ParentUnitID, DataWithholdingReason, 
LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.LastIdentificationCache, deleted.FamilyCache, deleted.OrderCache,
deleted.TaxonomicGroup, deleted.OnlyObserved, deleted.RelatedUnitID, deleted.RelationType, deleted.ColonisedSubstratePart, deleted.LifeStage, 
deleted.Gender, deleted.NumberOfUnits, deleted.NumberOfUnitsModifier, deleted.ExsiccataNumber, deleted.ExsiccataIdentification, deleted.UnitIdentifier, deleted.UnitDescription, deleted.Circumstances, deleted.DisplayOrder, 
deleted.Notes, deleted.RowGUID, deleted.HierarchyCache, deleted.ParentUnitID, deleted.DataWithholdingReason, 
deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  @Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO IdentificationUnit_Log (CollectionSpecimenID, IdentificationUnitID, LastIdentificationCache, FamilyCache, OrderCache, 
TaxonomicGroup, OnlyObserved, RelatedUnitID, RelationType, ColonisedSubstratePart, LifeStage, 
Gender, NumberOfUnits, NumberOfUnitsModifier, ExsiccataNumber, ExsiccataIdentification, UnitIdentifier, UnitDescription, Circumstances, DisplayOrder, 
Notes, RowGUID, HierarchyCache, ParentUnitID, DataWithholdingReason, 
LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogVersion,  LogState)  
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.LastIdentificationCache, deleted.FamilyCache, deleted.OrderCache,
deleted.TaxonomicGroup, deleted.OnlyObserved, deleted.RelatedUnitID, deleted.RelationType, deleted.ColonisedSubstratePart, deleted.LifeStage, 
deleted.Gender, deleted.NumberOfUnits, deleted.NumberOfUnitsModifier, deleted.ExsiccataNumber, deleted.ExsiccataIdentification, deleted.UnitIdentifier, deleted.UnitDescription, deleted.Circumstances, deleted.DisplayOrder, 
deleted.Notes, deleted.RowGUID, deleted.HierarchyCache, deleted.ParentUnitID, deleted.DataWithholdingReason, 
deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, CollectionSpecimen.Version, 'U' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
GO
ALTER TABLE [dbo].[IdentificationUnit] ENABLE TRIGGER [trgUpdIdentificationUnit]
GO
/****** Object:  Trigger [dbo].[trgDelIdentificationUnitAnalysis]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######   trgDelIdentificationUnitAnalysis    ########################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelIdentificationUnitAnalysis] ON [dbo].[IdentificationUnitAnalysis] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO IdentificationUnitAnalysis_Log (AnalysisDate, AnalysisID, AnalysisNumber, AnalysisResult, CollectionSpecimenID, ExternalAnalysisURI, IdentificationUnitID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ResponsibleAgentURI, ResponsibleName, RowGUID, SpecimenPartID,   LogVersion,  LogState) 
SELECT deleted.AnalysisDate, deleted.AnalysisID, deleted.AnalysisNumber, deleted.AnalysisResult, deleted.CollectionSpecimenID, deleted.ExternalAnalysisURI, deleted.IdentificationUnitID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, deleted.SpecimenPartID,   @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO IdentificationUnitAnalysis_Log (AnalysisDate, AnalysisID, AnalysisNumber, AnalysisResult, CollectionSpecimenID, ExternalAnalysisURI, IdentificationUnitID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ResponsibleAgentURI, ResponsibleName, RowGUID, SpecimenPartID,   LogVersion, LogState) 
SELECT deleted.AnalysisDate, deleted.AnalysisID, deleted.AnalysisNumber, deleted.AnalysisResult, deleted.CollectionSpecimenID, deleted.ExternalAnalysisURI, deleted.IdentificationUnitID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, deleted.SpecimenPartID,  CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO IdentificationUnitAnalysis_Log (AnalysisDate, AnalysisID, AnalysisNumber, AnalysisResult, CollectionSpecimenID, ExternalAnalysisURI, IdentificationUnitID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ResponsibleAgentURI, ResponsibleName, RowGUID, SpecimenPartID,   LogVersion, LogState) 
SELECT deleted.AnalysisDate, deleted.AnalysisID, deleted.AnalysisNumber, deleted.AnalysisResult, deleted.CollectionSpecimenID, deleted.ExternalAnalysisURI, deleted.IdentificationUnitID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, deleted.SpecimenPartID, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis] ENABLE TRIGGER [trgDelIdentificationUnitAnalysis]
GO
/****** Object:  Trigger [dbo].[trgInsIdentificationUnitAnalysis]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgInsIdentificationUnitAnalysis] ON [dbo].[IdentificationUnitAnalysis] 
FOR INSERT AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityWorkbenchMaintenance  2.0.0.3 */ 
/*  Date: 31.08.2007  */ 

/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from inserted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM inserted)
   EXECUTE procSetVersionCollectionSpecimen @ID
END
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis] ENABLE TRIGGER [trgInsIdentificationUnitAnalysis]
GO
/****** Object:  Trigger [dbo].[trgUpdIdentificationUnitAnalysis]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdIdentificationUnitAnalysis] ON [dbo].[IdentificationUnitAnalysis] 
FOR UPDATE AS
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int
set @i = (select count(*) from deleted) 
if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 
if (not @Version is null) 
begin
INSERT INTO IdentificationUnitAnalysis_Log (CollectionSpecimenID, IdentificationUnitID, AnalysisID, AnalysisNumber, AnalysisResult, ExternalAnalysisURI, ResponsibleName, ResponsibleAgentURI, AnalysisDate, SpecimenPartID, Notes,  RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.AnalysisID, deleted.AnalysisNumber, deleted.AnalysisResult, deleted.ExternalAnalysisURI, deleted.ResponsibleName, deleted.ResponsibleAgentURI, deleted.AnalysisDate, deleted.SpecimenPartID, deleted.Notes,  deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  @Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO IdentificationUnitAnalysis_Log (CollectionSpecimenID, IdentificationUnitID, AnalysisID, AnalysisNumber, AnalysisResult, ExternalAnalysisURI, ResponsibleName, ResponsibleAgentURI, AnalysisDate, SpecimenPartID, Notes,  RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.AnalysisID, deleted.AnalysisNumber, deleted.AnalysisResult, deleted.ExternalAnalysisURI, deleted.ResponsibleName, deleted.ResponsibleAgentURI, deleted.AnalysisDate, deleted.SpecimenPartID, deleted.Notes,  deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, CollectionSpecimen.Version, 'U' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
Update IdentificationUnitAnalysis
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM IdentificationUnitAnalysis, deleted 
where 1 = 1 
AND IdentificationUnitAnalysis.CollectionSpecimenID = deleted.CollectionSpecimenID
AND IdentificationUnitAnalysis.IdentificationUnitID = deleted.IdentificationUnitID
AND IdentificationUnitAnalysis.AnalysisID = deleted.AnalysisID
AND IdentificationUnitAnalysis.AnalysisNumber = deleted.AnalysisNumber
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysis] ENABLE TRIGGER [trgUpdIdentificationUnitAnalysis]
GO
/****** Object:  Trigger [dbo].[trgDelIdentificationUnitAnalysisMethod]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######   trgDelIdentificationUnitAnalysisMethod    ##################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelIdentificationUnitAnalysisMethod] ON [dbo].[IdentificationUnitAnalysisMethod] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO IdentificationUnitAnalysisMethod_Log (AnalysisID, AnalysisNumber, CollectionSpecimenID, IdentificationUnitID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, RowGUID,  LogVersion,  LogState) 
SELECT deleted.AnalysisID, deleted.AnalysisNumber, deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.RowGUID,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO IdentificationUnitAnalysisMethod_Log (AnalysisID, AnalysisNumber, CollectionSpecimenID, IdentificationUnitID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, RowGUID,  LogVersion, LogState) 
SELECT deleted.AnalysisID, deleted.AnalysisNumber, deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.RowGUID, CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO IdentificationUnitAnalysisMethod_Log (AnalysisID, AnalysisNumber, CollectionSpecimenID, IdentificationUnitID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, RowGUID,  LogVersion, LogState) 
SELECT deleted.AnalysisID, deleted.AnalysisNumber, deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.RowGUID, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod] ENABLE TRIGGER [trgDelIdentificationUnitAnalysisMethod]
GO
/****** Object:  Trigger [dbo].[trgUpdIdentificationUnitAnalysisMethod]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgUpdIdentificationUnitAnalysisMethod]    Script Date: 16.02.2016 15:46:37 ******/

CREATE TRIGGER [dbo].[trgUpdIdentificationUnitAnalysisMethod] ON [dbo].[IdentificationUnitAnalysisMethod] 
FOR UPDATE AS
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int
set @i = (select count(*) from deleted) 
if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 
if (not @Version is null) 
begin
INSERT INTO IdentificationUnitAnalysisMethod_Log (CollectionSpecimenID, IdentificationUnitID, MethodID, AnalysisID, AnalysisNumber, MethodMarker, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.MethodID, deleted.AnalysisID, deleted.AnalysisNumber, deleted.MethodMarker, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  @Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO IdentificationUnitAnalysisMethod_Log (CollectionSpecimenID, IdentificationUnitID, MethodID, AnalysisID, AnalysisNumber, MethodMarker, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.MethodID, deleted.AnalysisID, deleted.AnalysisNumber, deleted.MethodMarker, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, CollectionSpecimen.Version, 'U' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
Update IdentificationUnitAnalysisMethod
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM IdentificationUnitAnalysisMethod, deleted 
where 1 = 1 
AND IdentificationUnitAnalysisMethod.AnalysisID = deleted.AnalysisID
AND IdentificationUnitAnalysisMethod.AnalysisNumber = deleted.AnalysisNumber
AND IdentificationUnitAnalysisMethod.CollectionSpecimenID = deleted.CollectionSpecimenID
AND IdentificationUnitAnalysisMethod.IdentificationUnitID = deleted.IdentificationUnitID
AND IdentificationUnitAnalysisMethod.MethodID = deleted.MethodID
AND IdentificationUnitAnalysisMethod.MethodMarker = deleted.MethodMarker
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethod] ENABLE TRIGGER [trgUpdIdentificationUnitAnalysisMethod]
GO
/****** Object:  Trigger [dbo].[trgDelIdentificationUnitAnalysisMethodParameter]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   trgDelIdentificationUnitAnalysisMethodParameter    #########################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelIdentificationUnitAnalysisMethodParameter] ON [dbo].[IdentificationUnitAnalysisMethodParameter] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO IdentificationUnitAnalysisMethodParameter_Log (AnalysisID, AnalysisNumber, CollectionSpecimenID, IdentificationUnitID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, ParameterID, RowGUID, Value,  LogVersion,  LogState) 
SELECT deleted.AnalysisID, deleted.AnalysisNumber, deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.ParameterID, deleted.RowGUID, deleted.Value,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO IdentificationUnitAnalysisMethodParameter_Log (AnalysisID, AnalysisNumber, CollectionSpecimenID, IdentificationUnitID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, ParameterID, RowGUID, Value,  LogVersion, LogState) 
SELECT deleted.AnalysisID, deleted.AnalysisNumber, deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.ParameterID, deleted.RowGUID, deleted.Value, CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO IdentificationUnitAnalysisMethodParameter_Log (AnalysisID, AnalysisNumber, CollectionSpecimenID, IdentificationUnitID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, MethodID, MethodMarker, ParameterID, RowGUID, Value,  LogVersion, LogState) 
SELECT deleted.AnalysisID, deleted.AnalysisNumber, deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.MethodID, deleted.MethodMarker, deleted.ParameterID, deleted.RowGUID, deleted.Value, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter] ENABLE TRIGGER [trgDelIdentificationUnitAnalysisMethodParameter]
GO
/****** Object:  Trigger [dbo].[trgUpdIdentificationUnitAnalysisMethodParameter]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgUpdIdentificationUnitAnalysisMethodParameter]    Script Date: 16.02.2016 15:50:32 ******/

CREATE TRIGGER [dbo].[trgUpdIdentificationUnitAnalysisMethodParameter] ON [dbo].[IdentificationUnitAnalysisMethodParameter] 
FOR UPDATE AS
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int
set @i = (select count(*) from deleted) 
if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 
if (not @Version is null) 
begin
INSERT INTO IdentificationUnitAnalysisMethodParameter_Log (CollectionSpecimenID, IdentificationUnitID, AnalysisID, AnalysisNumber, MethodID, ParameterID, Value, MethodMarker, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.AnalysisID, deleted.AnalysisNumber, deleted.MethodID, deleted.ParameterID, deleted.Value, deleted.MethodMarker, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  @Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO IdentificationUnitAnalysisMethodParameter_Log (CollectionSpecimenID, IdentificationUnitID, AnalysisID, AnalysisNumber, MethodID, ParameterID, Value, MethodMarker, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.AnalysisID, deleted.AnalysisNumber, deleted.MethodID, deleted.ParameterID, deleted.Value, deleted.MethodMarker, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID, CollectionSpecimen.Version, 'U' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
Update IdentificationUnitAnalysisMethodParameter
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM IdentificationUnitAnalysisMethodParameter, deleted 
where 1 = 1 
AND IdentificationUnitAnalysisMethodParameter.AnalysisID = deleted.AnalysisID
AND IdentificationUnitAnalysisMethodParameter.AnalysisNumber = deleted.AnalysisNumber
AND IdentificationUnitAnalysisMethodParameter.CollectionSpecimenID = deleted.CollectionSpecimenID
AND IdentificationUnitAnalysisMethodParameter.IdentificationUnitID = deleted.IdentificationUnitID
AND IdentificationUnitAnalysisMethodParameter.MethodID = deleted.MethodID
AND IdentificationUnitAnalysisMethodParameter.ParameterID = deleted.ParameterID
AND IdentificationUnitAnalysisMethodParameter.MethodMarker = deleted.MethodMarker
GO
ALTER TABLE [dbo].[IdentificationUnitAnalysisMethodParameter] ENABLE TRIGGER [trgUpdIdentificationUnitAnalysisMethodParameter]
GO
/****** Object:  Trigger [dbo].[trgDelIdentificationUnitGeoAnalysis]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   trgDelIdentificationUnitGeoAnalysis    #####################################################################
--#####################################################################################################################


CREATE TRIGGER [dbo].[trgDelIdentificationUnitGeoAnalysis] ON [dbo].[IdentificationUnitGeoAnalysis] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO IdentificationUnitGeoAnalysis_Log (AnalysisDate, CollectionSpecimenID, Geography, Geometry, IdentificationUnitID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ResponsibleAgentURI, ResponsibleName, RowGUID,  LogVersion,  LogState) 
SELECT deleted.AnalysisDate, deleted.CollectionSpecimenID, deleted.Geography, deleted.Geometry, deleted.IdentificationUnitID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO IdentificationUnitGeoAnalysis_Log (AnalysisDate, CollectionSpecimenID, Geography, Geometry, IdentificationUnitID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ResponsibleAgentURI, ResponsibleName, RowGUID,  LogVersion, LogState) 
SELECT deleted.AnalysisDate, deleted.CollectionSpecimenID, deleted.Geography, deleted.Geometry, deleted.IdentificationUnitID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO IdentificationUnitGeoAnalysis_Log (AnalysisDate, CollectionSpecimenID, Geography, Geometry, IdentificationUnitID, LogCreatedBy, LogCreatedWhen, LogUpdatedBy, LogUpdatedWhen, Notes, ResponsibleAgentURI, ResponsibleName, RowGUID,  LogVersion, LogState) 
SELECT deleted.AnalysisDate, deleted.CollectionSpecimenID, deleted.Geography, deleted.Geometry, deleted.IdentificationUnitID, deleted.LogCreatedBy, deleted.LogCreatedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.Notes, deleted.ResponsibleAgentURI, deleted.ResponsibleName, deleted.RowGUID, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[IdentificationUnitGeoAnalysis] ENABLE TRIGGER [trgDelIdentificationUnitGeoAnalysis]
GO
/****** Object:  Trigger [dbo].[trgUpdIdentificationUnitGeoAnalysis]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE TRIGGER [dbo].[trgUpdIdentificationUnitGeoAnalysis] ON [dbo].[IdentificationUnitGeoAnalysis] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityWorkbenchMaintenance  2.0.1.1 */ 
/*  Date: 22.02.2010  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO IdentificationUnitGeoAnalysis_Log (CollectionSpecimenID, IdentificationUnitID, AnalysisDate, Geography, Geometry, ResponsibleName, ResponsibleAgentURI, Notes, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.AnalysisDate, deleted.Geography, deleted.Geometry, deleted.ResponsibleName, deleted.ResponsibleAgentURI, deleted.Notes, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, 'U'
FROM DELETED


/* updating the logging columns */
Update IdentificationUnitGeoAnalysis
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM IdentificationUnitGeoAnalysis, deleted 
where 1 = 1 
AND IdentificationUnitGeoAnalysis.AnalysisDate = deleted.AnalysisDate
AND IdentificationUnitGeoAnalysis.CollectionSpecimenID = deleted.CollectionSpecimenID
AND IdentificationUnitGeoAnalysis.IdentificationUnitID = deleted.IdentificationUnitID
GO
ALTER TABLE [dbo].[IdentificationUnitGeoAnalysis] ENABLE TRIGGER [trgUpdIdentificationUnitGeoAnalysis]
GO
/****** Object:  Trigger [dbo].[trgDelIdentificationUnitInPart]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   trgDelIdentificationUnitInPart    ##########################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelIdentificationUnitInPart] ON [dbo].[IdentificationUnitInPart] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 6/7/2017  */ 


/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 

/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO IdentificationUnitInPart_Log (CollectionSpecimenID, Description, DisplayOrder, IdentificationUnitID, LogInsertedBy, LogInsertedWhen, LogUpdatedBy, LogUpdatedWhen, RowGUID, SpecimenPartID,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.Description, deleted.DisplayOrder, deleted.IdentificationUnitID, deleted.LogInsertedBy, deleted.LogInsertedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.RowGUID, deleted.SpecimenPartID,  @Version,  'D'
FROM DELETED
end
else
begin
if (select count(*) FROM DELETED, CollectionSpecimen WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID) > 0 
begin
INSERT INTO IdentificationUnitInPart_Log (CollectionSpecimenID, Description, DisplayOrder, IdentificationUnitID, LogInsertedBy, LogInsertedWhen, LogUpdatedBy, LogUpdatedWhen, RowGUID, SpecimenPartID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.Description, deleted.DisplayOrder, deleted.IdentificationUnitID, deleted.LogInsertedBy, deleted.LogInsertedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.RowGUID, deleted.SpecimenPartID, CollectionSpecimen.Version, 'D' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end
else
begin
INSERT INTO IdentificationUnitInPart_Log (CollectionSpecimenID, Description, DisplayOrder, IdentificationUnitID, LogInsertedBy, LogInsertedWhen, LogUpdatedBy, LogUpdatedWhen, RowGUID, SpecimenPartID,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.Description, deleted.DisplayOrder, deleted.IdentificationUnitID, deleted.LogInsertedBy, deleted.LogInsertedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, deleted.RowGUID, deleted.SpecimenPartID, -1, 'D' 
FROM DELETED
end
end
GO
ALTER TABLE [dbo].[IdentificationUnitInPart] ENABLE TRIGGER [trgDelIdentificationUnitInPart]
GO
/****** Object:  Trigger [dbo].[trgInsIdentificationUnitInPart]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgInsIdentificationUnitInPart] ON [dbo].[IdentificationUnitInPart] 
FOR INSERT AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityWorkbenchMaintenance  2.0.0.3 */ 
/*  Date: 29.08.2007  */ 

/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from inserted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM inserted)
   EXECUTE procSetVersionCollectionSpecimen @ID
END
GO
ALTER TABLE [dbo].[IdentificationUnitInPart] ENABLE TRIGGER [trgInsIdentificationUnitInPart]
GO
/****** Object:  Trigger [dbo].[trgUpdIdentificationUnitInPart]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE TRIGGER [dbo].[trgUpdIdentificationUnitInPart] ON [dbo].[IdentificationUnitInPart] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityWorkbenchMaintenance  2.0.0.3 */ 
/*  Date: 29.08.2007  */ 

/* setting the version in the main table */ 
DECLARE @i int 
DECLARE @ID int
DECLARE @Version int

set @i = (select count(*) from deleted) 

if @i = 1 
BEGIN 
   SET  @ID = (SELECT CollectionSpecimenID FROM deleted)
   EXECUTE procSetVersionCollectionSpecimen @ID
   SET @Version = (SELECT Version FROM CollectionSpecimen WHERE CollectionSpecimenID = @ID)
END 


/* saving the original dataset in the logging table */ 
if (not @Version is null) 
begin
INSERT INTO IdentificationUnitInPart_Log (CollectionSpecimenID, IdentificationUnitID, SpecimenPartID, DisplayOrder, Description, RowGUID, LogInsertedBy, LogInsertedWhen, LogUpdatedBy, LogUpdatedWhen,  LogVersion,  LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.SpecimenPartID, deleted.DisplayOrder, deleted.Description, deleted.RowGUID, deleted.LogInsertedBy, deleted.LogInsertedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen,  @Version,  'U'
FROM DELETED
end
else
begin
INSERT INTO IdentificationUnitInPart_Log (CollectionSpecimenID, IdentificationUnitID, SpecimenPartID, DisplayOrder, Description, RowGUID, LogInsertedBy, LogInsertedWhen, LogUpdatedBy, LogUpdatedWhen,  LogVersion, LogState) 
SELECT deleted.CollectionSpecimenID, deleted.IdentificationUnitID, deleted.SpecimenPartID, deleted.DisplayOrder, deleted.Description, deleted.RowGUID, deleted.LogInsertedBy, deleted.LogInsertedWhen, deleted.LogUpdatedBy, deleted.LogUpdatedWhen, CollectionSpecimen.Version, 'U' 
FROM DELETED, CollectionSpecimen
WHERE deleted.CollectionSpecimenID = CollectionSpecimen.CollectionSpecimenID
end

/* updating the logging columns */
Update IdentificationUnitInPart
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM IdentificationUnitInPart, deleted 
where 1 = 1 
AND IdentificationUnitInPart.CollectionSpecimenID = deleted.CollectionSpecimenID
AND IdentificationUnitInPart.IdentificationUnitID = deleted.IdentificationUnitID
AND IdentificationUnitInPart.SpecimenPartID = deleted.SpecimenPartID

GO
ALTER TABLE [dbo].[IdentificationUnitInPart] ENABLE TRIGGER [trgUpdIdentificationUnitInPart]
GO
/****** Object:  Trigger [dbo].[trgDelMethod]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgDelMethod] ON [dbo].[Method] 
FOR DELETE AS 
INSERT INTO Method_Log (MethodID, MethodParentID, OnlyHierarchy, DisplayText, Description, MethodURI, ForCollectionEvent, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.MethodID, deleted.MethodParentID, deleted.OnlyHierarchy, deleted.DisplayText, deleted.Description, deleted.MethodURI, deleted.ForCollectionEvent, deleted.Notes, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[Method] ENABLE TRIGGER [trgDelMethod]
GO
/****** Object:  Trigger [dbo].[trgUpdMethod]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdMethod] ON [dbo].[Method] 
FOR UPDATE AS
INSERT INTO Method_Log (MethodID, MethodParentID, OnlyHierarchy, DisplayText, Description, MethodURI, ForCollectionEvent, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.MethodID, deleted.MethodParentID, deleted.OnlyHierarchy, deleted.DisplayText, deleted.Description, deleted.MethodURI, deleted.ForCollectionEvent, deleted.Notes, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
FROM DELETED
Update Method
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM Method, deleted 
where 1 = 1 
AND Method.MethodID = deleted.MethodID
GO
ALTER TABLE [dbo].[Method] ENABLE TRIGGER [trgUpdMethod]
GO
/****** Object:  Trigger [dbo].[trgDelParameter]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgDelParameter] ON [dbo].[Parameter] 
FOR DELETE AS 
INSERT INTO Parameter_Log (MethodID, ParameterID, DisplayText, Description, ParameterURI, DefaultValue, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.MethodID, deleted.ParameterID, deleted.DisplayText, deleted.Description, deleted.ParameterURI, deleted.DefaultValue, deleted.Notes, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[Parameter] ENABLE TRIGGER [trgDelParameter]
GO
/****** Object:  Trigger [dbo].[trgUpdParameter]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trgUpdParameter] ON [dbo].[Parameter] 
FOR UPDATE AS
INSERT INTO Parameter_Log (MethodID, ParameterID, DisplayText, Description, ParameterURI, DefaultValue, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.MethodID, deleted.ParameterID, deleted.DisplayText, deleted.Description, deleted.ParameterURI, deleted.DefaultValue, deleted.Notes, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
FROM DELETED
Update Parameter
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM Parameter, deleted 
where 1 = 1 
AND Parameter.MethodID = deleted.MethodID
AND Parameter.ParameterID = deleted.ParameterID
GO
ALTER TABLE [dbo].[Parameter] ENABLE TRIGGER [trgUpdParameter]
GO
/****** Object:  Trigger [dbo].[trgDelParameterValue_Enum]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- Create delete trigger

CREATE TRIGGER [dbo].[trgDelParameterValue_Enum] ON [dbo].[ParameterValue_Enum] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.5 */ 
/*  Date: 5/13/2016  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO ParameterValue_Enum_Log (MethodID, ParameterID, Value, DisplayText, Description, URI, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogState) 
SELECT deleted.MethodID, deleted.ParameterID, deleted.Value, deleted.DisplayText, deleted.Description, deleted.URI, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  'D'
FROM DELETED


GO
ALTER TABLE [dbo].[ParameterValue_Enum] ENABLE TRIGGER [trgDelParameterValue_Enum]
GO
/****** Object:  Trigger [dbo].[trgUpdParameterValue_Enum]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- Create update trigger

CREATE TRIGGER [dbo].[trgUpdParameterValue_Enum] ON [dbo].[ParameterValue_Enum] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.5 */ 
/*  Date: 5/13/2016  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO ParameterValue_Enum_Log (MethodID, ParameterID, Value, DisplayText, Description, URI, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogState) 
SELECT deleted.MethodID, deleted.ParameterID, deleted.Value, deleted.DisplayText, deleted.Description, deleted.URI, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  'U'
FROM DELETED


/* updating the logging columns */
Update ParameterValue_Enum
set LogUpdatedWhen = getdate(), LogUpdatedBy = SUSER_NAME() 
FROM ParameterValue_Enum, deleted 
where 1 = 1 
AND ParameterValue_Enum.MethodID = deleted.MethodID
AND ParameterValue_Enum.ParameterID = deleted.ParameterID
AND ParameterValue_Enum.Value = deleted.Value

GO
ALTER TABLE [dbo].[ParameterValue_Enum] ENABLE TRIGGER [trgUpdParameterValue_Enum]
GO
/****** Object:  Trigger [dbo].[trgDelProcessing]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE TRIGGER [dbo].[trgDelProcessing] ON [dbo].[Processing] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 

/* saving the original dataset in the logging table */ 
INSERT INTO Processing_Log (ProcessingID, ProcessingParentID, DisplayText, Description, Notes, ProcessingURI, OnlyHierarchy, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogState) 
SELECT deleted.ProcessingID, deleted.ProcessingParentID, deleted.DisplayText, deleted.Description, deleted.Notes, deleted.ProcessingURI, deleted.OnlyHierarchy, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  'D'
FROM DELETED

GO
ALTER TABLE [dbo].[Processing] ENABLE TRIGGER [trgDelProcessing]
GO
/****** Object:  Trigger [dbo].[trgUpdProcessing]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE TRIGGER [dbo].[trgUpdProcessing] ON [dbo].[Processing] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  Administration  1.0.0.0 */ 
/*  Date: 01.09.2006  */ 

/* updating the logging columns */
Update Processing
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM Processing, deleted 
where 1 = 1 
AND Processing.ProcessingID = deleted.ProcessingID

/* saving the original dataset in the logging table */ 
INSERT INTO Processing_Log (ProcessingID, ProcessingParentID, DisplayText, Description, Notes, ProcessingURI, OnlyHierarchy, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogState) 
SELECT deleted.ProcessingID, deleted.ProcessingParentID, deleted.DisplayText, deleted.Description, deleted.Notes, deleted.ProcessingURI, deleted.OnlyHierarchy, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  'U'
FROM DELETED

GO
ALTER TABLE [dbo].[Processing] ENABLE TRIGGER [trgUpdProcessing]
GO
/****** Object:  Trigger [dbo].[trgDelRegulation]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--#####################################################################################################################
--######  trgDelRegulation    #########################################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgDelRegulation] ON [dbo].[Regulation] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 2/8/2017  */ 

/* saving the original dataset in the logging table */ 
INSERT INTO Regulation_Log (Regulation, ParentRegulation, [Type], ProjectURI, Notes, [Status], HierarchyOnly, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.Regulation, deleted.ParentRegulation, deleted.[Type], deleted.ProjectURI, deleted.Notes, deleted.[Status], deleted.HierarchyOnly, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[Regulation] ENABLE TRIGGER [trgDelRegulation]
GO
/****** Object:  Trigger [dbo].[trgUpdRegulation]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--#####################################################################################################################
--######  trgUpdRegulation    #########################################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgUpdRegulation] ON [dbo].[Regulation] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.9 */ 
/*  Date: 2/8/2017  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO Regulation_Log (Regulation, ParentRegulation, [Type], ProjectURI, Notes, [Status], HierarchyOnly, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.Regulation, deleted.ParentRegulation, deleted.[Type], deleted.ProjectURI, deleted.Notes, deleted.[Status], deleted.HierarchyOnly, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
FROM DELETED


/* updating the logging columns */
Update Regulation
set LogUpdatedWhen = getdate(), LogUpdatedBy = SUSER_NAME()
FROM Regulation, deleted 
where 1 = 1 
AND Regulation.RegulationID = deleted.RegulationID
GO
ALTER TABLE [dbo].[Regulation] ENABLE TRIGGER [trgUpdRegulation]
GO
/****** Object:  Trigger [dbo].[trgDelTransaction]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgDelTransaction]    Script Date: 27.06.2016 11:23:51 ******/
CREATE TRIGGER [dbo].[trgDelTransaction] ON [dbo].[Transaction] 
FOR DELETE AS 
INSERT INTO Transaction_Log (TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, 
MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, ToCollectionID, 
ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, NumberOfUnits, Investigator, TransactionComment, BeginDate, AgreedEndDate, ActualEndDate, 
InternalNotes, ResponsibleName, ResponsibleAgentURI, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogState, ToRecipient, MaterialSource) 
SELECT deleted.TransactionID, deleted.ParentTransactionID, deleted.TransactionType, deleted.TransactionTitle, deleted.ReportingCategory, deleted.AdministratingCollectionID, 
deleted.MaterialDescription, deleted.MaterialCategory, deleted.MaterialCollectors, deleted.FromCollectionID, deleted.FromTransactionPartnerName, 
deleted.FromTransactionPartnerAgentURI, deleted.FromTransactionNumber, deleted.ToCollectionID, deleted.ToTransactionPartnerName, deleted.ToTransactionPartnerAgentURI, 
deleted.ToTransactionNumber, deleted.NumberOfUnits, deleted.Investigator, deleted.TransactionComment, deleted.BeginDate, deleted.AgreedEndDate, deleted.ActualEndDate, 
deleted.InternalNotes, deleted.ResponsibleName, deleted.ResponsibleAgentURI, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  'D', 
deleted.ToRecipient, deleted.MaterialSource
FROM DELETED
GO
ALTER TABLE [dbo].[Transaction] ENABLE TRIGGER [trgDelTransaction]
GO
/****** Object:  Trigger [dbo].[trgUpdTransaction]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgUpdTransaction]    Script Date: 27.06.2016 11:26:42 ******/
CREATE TRIGGER [dbo].[trgUpdTransaction] ON [dbo].[Transaction] 
FOR UPDATE AS
INSERT INTO Transaction_Log (TransactionID, ParentTransactionID, TransactionType, TransactionTitle, ReportingCategory, AdministratingCollectionID, MaterialDescription, 
MaterialCategory, MaterialCollectors, FromCollectionID, FromTransactionPartnerName, FromTransactionPartnerAgentURI, FromTransactionNumber, ToCollectionID, 
ToTransactionPartnerName, ToTransactionPartnerAgentURI, ToTransactionNumber, NumberOfUnits, Investigator, TransactionComment, BeginDate, AgreedEndDate, ActualEndDate, 
InternalNotes, ResponsibleName, ResponsibleAgentURI, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogState, ToRecipient, MaterialSource) 
SELECT deleted.TransactionID, deleted.ParentTransactionID, deleted.TransactionType, deleted.TransactionTitle, deleted.ReportingCategory, deleted.AdministratingCollectionID, 
deleted.MaterialDescription, deleted.MaterialCategory, deleted.MaterialCollectors, deleted.FromCollectionID, deleted.FromTransactionPartnerName, 
deleted.FromTransactionPartnerAgentURI, deleted.FromTransactionNumber, deleted.ToCollectionID, deleted.ToTransactionPartnerName, deleted.ToTransactionPartnerAgentURI, 
deleted.ToTransactionNumber, deleted.NumberOfUnits, deleted.Investigator, deleted.TransactionComment, deleted.BeginDate, deleted.AgreedEndDate, deleted.ActualEndDate, 
deleted.InternalNotes, deleted.ResponsibleName, deleted.ResponsibleAgentURI, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  'U', 
deleted.ToRecipient, deleted.MaterialSource
FROM DELETED
Update [Transaction]
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM [Transaction], deleted 
where 1 = 1 
AND [Transaction].TransactionID = deleted.TransactionID
GO
ALTER TABLE [dbo].[Transaction] ENABLE TRIGGER [trgUpdTransaction]
GO
/****** Object:  Trigger [dbo].[trgDelTransactionAgent]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--#####################################################################################################################
--######   trgDelTransactionAgent        ##############################################################################
--#####################################################################################################################


CREATE TRIGGER [dbo].[trgDelTransactionAgent] ON [dbo].[TransactionAgent] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.5 */ 
/*  Date: 4/28/2016  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO TransactionAgent_Log (TransactionID, TransactionAgentID, AgentName, AgentURI, AgentRole, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.TransactionID, deleted.TransactionAgentID, deleted.AgentName, deleted.AgentURI, deleted.AgentRole, deleted.Notes, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED

GO
ALTER TABLE [dbo].[TransactionAgent] ENABLE TRIGGER [trgDelTransactionAgent]
GO
/****** Object:  Trigger [dbo].[trgUpdTransactionAgent]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--#####################################################################################################################
--######   trgUpdTransactionAgent #####################################################################################
--#####################################################################################################################

CREATE TRIGGER [dbo].[trgUpdTransactionAgent] ON [dbo].[TransactionAgent] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.5 */ 
/*  Date: 4/28/2016  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO TransactionAgent_Log (TransactionID, TransactionAgentID, AgentName, AgentURI, AgentRole, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.TransactionID, deleted.TransactionAgentID, deleted.AgentName, deleted.AgentURI, deleted.AgentRole, deleted.Notes, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
FROM DELETED


/* updating the logging columns */
Update TransactionAgent
set LogUpdatedWhen = getdate(), LogUpdatedBy = SUSER_NAME()
FROM TransactionAgent, deleted 
where 1 = 1 
AND TransactionAgent.TransactionAgentID = deleted.TransactionAgentID
AND TransactionAgent.TransactionID = deleted.TransactionID
GO
ALTER TABLE [dbo].[TransactionAgent] ENABLE TRIGGER [trgUpdTransactionAgent]
GO
/****** Object:  Trigger [dbo].[trgDelTransactionDocument]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgDelTransactionDocument]    Script Date: 26.07.2016 13:56:17 ******/
CREATE TRIGGER [dbo].[trgDelTransactionDocument] ON [dbo].[TransactionDocument] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityWorkbenchMaintenance  2.0.0.3 */ 
/*  Date: 29.08.2007  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO TransactionDocument_Log (TransactionID, Date, TransactionText, DocumentURI, DocumentType, DisplayText, InternalNotes, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogState) 
SELECT deleted.TransactionID, deleted.Date, deleted.TransactionText, deleted.DocumentURI, deleted.DocumentType, deleted.DisplayText, deleted.InternalNotes, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[TransactionDocument] ENABLE TRIGGER [trgDelTransactionDocument]
GO
/****** Object:  Trigger [dbo].[trgUpdTransactionDocument]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgUpdTransactionDocument]    Script Date: 07/08/2014 11:58:35 ******/
CREATE TRIGGER [dbo].[trgUpdTransactionDocument] ON [dbo].[TransactionDocument] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityWorkbenchMaintenance  2.0.0.3 */ 
/*  Date: 29.08.2007  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO TransactionDocument_Log (TransactionID, Date, TransactionText, DocumentURI, DocumentType, DisplayText, InternalNotes, RowGUID, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy,  LogState) 
SELECT deleted.TransactionID, deleted.Date, deleted.TransactionText, deleted.DocumentURI, deleted.DocumentType, deleted.DisplayText, deleted.InternalNotes, deleted.RowGUID, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy,  'U'
FROM DELETED


/* updating the logging columns */
Update TransactionDocument
set LogUpdatedWhen = getdate(), LogUpdatedBy = SYSTEM_USER
FROM TransactionDocument, deleted 
where 1 = 1 
AND TransactionDocument.TransactionID = deleted.TransactionID
AND TransactionDocument.Date = deleted.Date
GO
ALTER TABLE [dbo].[TransactionDocument] ENABLE TRIGGER [trgUpdTransactionDocument]
GO
/****** Object:  Trigger [dbo].[trgDelTransactionPayment]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgDelTransactionPayment]    Script Date: 24.05.2016 14:59:35 ******/
CREATE TRIGGER [dbo].[trgDelTransactionPayment] ON [dbo].[TransactionPayment] 
FOR DELETE AS 

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.5 */ 
/*  Date: 4/14/2016  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO TransactionPayment_Log (TransactionID, PaymentID, Amount, ForeignAmount, ForeignCurrency, Identifier, PaymentURI, PayerName, PayerAgentURI, RecipientName, RecipientAgentURI, PaymentDate, PaymentDateSupplement, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.TransactionID, deleted.PaymentID, deleted.Amount, deleted.ForeignAmount, deleted.ForeignCurrency, deleted.Identifier, deleted.PaymentURI, deleted.PayerName, deleted.PayerAgentURI, deleted.RecipientName, deleted.RecipientAgentURI, deleted.PaymentDate, deleted.PaymentDateSupplement, deleted.Notes, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'D'
FROM DELETED
GO
ALTER TABLE [dbo].[TransactionPayment] ENABLE TRIGGER [trgDelTransactionPayment]
GO
/****** Object:  Trigger [dbo].[trgUpdTransactionPayment]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/****** Object:  Trigger [dbo].[trgUpdTransactionPayment]    Script Date: 24.05.2016 14:59:59 ******/
CREATE TRIGGER [dbo].[trgUpdTransactionPayment] ON [dbo].[TransactionPayment] 
FOR UPDATE AS

/*  Created by DiversityWorkbench Administration.  */ 
/*  DiversityCollection  3.0.8.5 */ 
/*  Date: 4/14/2016  */ 


/* saving the original dataset in the logging table */ 
INSERT INTO TransactionPayment_Log (TransactionID, PaymentID, Amount, ForeignAmount, ForeignCurrency, Identifier, PaymentURI, PayerName, PayerAgentURI, RecipientName, RecipientAgentURI, PaymentDate, PaymentDateSupplement, Notes, LogCreatedWhen, LogCreatedBy, LogUpdatedWhen, LogUpdatedBy, RowGUID,  LogState) 
SELECT deleted.TransactionID, deleted.PaymentID, deleted.Amount, deleted.ForeignAmount, deleted.ForeignCurrency, deleted.Identifier, deleted.PaymentURI, deleted.PayerName, deleted.PayerAgentURI, deleted.RecipientName, deleted.RecipientAgentURI, deleted.PaymentDate, deleted.PaymentDateSupplement, deleted.Notes, deleted.LogCreatedWhen, deleted.LogCreatedBy, deleted.LogUpdatedWhen, deleted.LogUpdatedBy, deleted.RowGUID,  'U'
FROM DELETED


/* updating the logging columns */
Update TransactionPayment
set LogUpdatedWhen = getdate(), LogUpdatedBy = SUSER_NAME()
FROM TransactionPayment, deleted 
where 1 = 1 
AND TransactionPayment.PaymentID = deleted.PaymentID
AND TransactionPayment.TransactionID = deleted.TransactionID
GO
ALTER TABLE [dbo].[TransactionPayment] ENABLE TRIGGER [trgUpdTransactionPayment]
GO
/****** Object:  Trigger [dbo].[trgUpdUserProxy]    Script Date: 06.04.2021 17:13:33 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--#####################################################################################################################
--######   UserProxy - Trigger for setting PrivacyConsentDate   #######################################################
--#####################################################################################################################
CREATE TRIGGER [dbo].[trgUpdUserProxy] ON [dbo].[UserProxy] 
FOR UPDATE AS 
declare @PC bit 
if (select count(*) from deleted) = 1 
begin 
  set @PC = (select case when I.PrivacyConsent <> D.PrivacyConsent 
    or (I.PrivacyConsent is null and not D.PrivacyConsent is null) 
    or (not I.PrivacyConsent is null and D.PrivacyConsent is null) 
    then 1 else 0 end from inserted I, deleted D) 
  if (@PC = 1) 
  begin 
    UPDATE U SET PrivacyConsentDate = GETDATE()  
    FROM UserProxy U, deleted D 
    WHERE U.ID = D.ID 
  end 
end 
GO
ALTER TABLE [dbo].[UserProxy] ENABLE TRIGGER [trgUpdUserProxy]
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'All child nodes of a given method related via the MethodParentID' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'FUNCTION',@level1name=N'MethodChildNodes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The hierarchy of a given method' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'FUNCTION',@level1name=N'MethodHierarchy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'All methods including a column displaying the hierarchy of the method' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'FUNCTION',@level1name=N'MethodHierarchyAll'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The next free accession number starting like parameter 1, optional inclusion of specimen (parameter 2) and parts (parameter 3)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'FUNCTION',@level1name=N'NextFreeAccNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Generates a valid name for a taxon using the taxonomic name and the identification qualifier' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'FUNCTION',@level1name=N'TaxonWithQualifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The default curreny for payments' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'FUNCTION',@level1name=N'TransactionCurrency'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the User as stored in table UserProxy' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'FUNCTION',@level1name=N'UserID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Administrator of the database. Read/write access to all objects' , @level0type=N'USER',@level0name=N'Administrator'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Read/write access to objects related to cache database' , @level0type=N'USER',@level0name=N'CacheAdmin'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reading access to objects related to the cache database' , @level0type=N'USER',@level0name=N'CacheUser'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Role for the administration of collections and References' , @level0type=N'USER',@level0name=N'CollectionManager'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Can delete data from tables CollectionReference and CollectionReference, otherwise same permissions as Editor' , @level0type=N'USER',@level0name=N'DataManager'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Role with write access to the tables for the desprition of the database objects' , @level0type=N'USER',@level0name=N'DescriptionEditor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Standard role for most users. Write permissions for most tables but can not delete data from tables CollectionReference and CollectionReference' , @level0type=N'USER',@level0name=N'Editor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Role with special rights needed for replication' , @level0type=N'USER',@level0name=N'Replicator'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Role for handling Reference References and related information' , @level0type=N'USER',@level0name=N'StorageManager'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Database Role with reading accesss to Transaction information.' , @level0type=N'USER',@level0name=N'TransactionUser'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Write access to most objects. Can not delete data and not insert data into tables CollectionReference and CollectionReference' , @level0type=N'USER',@level0name=N'Typist'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Restricted to read access to all tables. Can insert data into table Annotation' , @level0type=N'USER',@level0name=N'User'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the analysis (primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Analysis', @level2type=N'COLUMN',@level2name=N'AnalysisID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Analysis ID of the parent analysis, if it belongs to a certain type documented in this table' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Analysis', @level2type=N'COLUMN',@level2name=N'AnalysisParentID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the analysis as e.g. shown in user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Analysis', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Analysis', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The measurement unit used for the analysis, e.g. mm, µmol, kg' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Analysis', @level2type=N'COLUMN',@level2name=N'MeasurementUnit'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on this analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Analysis', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI referring to an external documentation of the analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Analysis', @level2type=N'COLUMN',@level2name=N'AnalysisURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the entry is only used for the hierarchical arrangement of the entries' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Analysis', @level2type=N'COLUMN',@level2name=N'OnlyHierarchy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Analysis', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Analysis', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Analysis', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Analysis', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Analysis types used within the database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Analysis'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the analysis (primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisResult', @level2type=N'COLUMN',@level2name=N'AnalysisID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The categorized value of the analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisResult', @level2type=N'COLUMN',@level2name=N'AnalysisResult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisResult', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisResult', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisResult', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisResult', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of user to first enter (typ or import) the data.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisResult', @level2type=N'COLUMN',@level2name=N'LogInsertedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when the data was first entered (typed or imported) into this database.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisResult', @level2type=N'COLUMN',@level2name=N'LogInsertedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data last.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisResult', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data was updated last.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisResult', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Value lists for analysis types with predefined values, e.g. "0, 1, 2, 3, ..." for Red list category. Includes description etc. for the values in the list.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisResult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Analysis ID, foreign key of table Analysis.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisTaxonomicGroup', @level2type=N'COLUMN',@level2name=N'AnalysisID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Taxonomic group the organism, identified by this unit, belongs to. Groups listed in table CollTaxonomicGroup_Enum  (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisTaxonomicGroup', @level2type=N'COLUMN',@level2name=N'TaxonomicGroup'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisTaxonomicGroup', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisTaxonomicGroup', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types of analysis which are available for a taxonomic group' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnalysisTaxonomicGroup'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the annotation (primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'AnnotationID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If an annotation refers to another annotation, the ID of the referred annotation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'ReferencedAnnotationID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the annotation as defined in AnnotationType_Enum, e.g. Reference' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'AnnotationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Title of the annotation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'Title'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The annotation entered by the user' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'Annotation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The complete URI address of a resource related to the annotation. May be link to a module, e.g. for the annotation type reference' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the reference. If the entry is linked to an external module like DiversityReferences, the cached display text of the referenced data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'ReferenceDisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the entry is linked to an external module like DiversityReferences, the link to the referenced data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'ReferenceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the source. If the entry is linked to an external module like DiversityAgents, the cached display text of the referenced data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'SourceDisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the entry is linked to an external module like DiversityAgents, the link to the referenced data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'SourceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If an annotation is restricted to authorized users of the database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'IsInternal'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the data set in the table the annotation refers to' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'ReferencedID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the table the annotation refers to' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'ReferencedTable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Annotations to datasets in the database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Annotation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code that uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnnotationType_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnnotationType_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnnotationType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnnotationType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnnotationType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes about usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnnotationType_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AnnotationType_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'UserName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'UserName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=-1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'UserName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the user who created this SQL string' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'UserName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'SQLStringIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'SQLStringIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=4545 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'SQLStringIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the selection string as shown in user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'SQLStringIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'ItemTable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'ItemTable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=-1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'ItemTable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The main table from which the datasets should be selected' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'ItemTable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'SQLString'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'SQLString'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=14610 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'SQLString'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'SQL string for selecting datasets from the database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'SQLString'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the resultset and the purpose of the query' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The time when this dataset was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Who created this dataset' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last time when this dataset was updated' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Who was the last to update this dataset' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DefaultView', @value=0x02 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Selection strings for customized queries for users' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Filter', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_OrderBy', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_OrderByOn', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Orientation', @value=0x00 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_TableMaxRecords', @value=10000 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ApplicationSearchSelectionStrings'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or IP of the server where the cache database is located' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CacheDatabase', @level2type=N'COLUMN',@level2name=N'Server'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the cache database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CacheDatabase', @level2type=N'COLUMN',@level2name=N'DatabaseName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The port of the server where the cache database is located' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CacheDatabase', @level2type=N'COLUMN',@level2name=N'Port'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version of the cache database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CacheDatabase', @level2type=N'COLUMN',@level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Table holding the cache databases connected to the database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CacheDatabase'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or IP of the server where the cache database is located' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CacheDatabase2', @level2type=N'COLUMN',@level2name=N'Server'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the cache database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CacheDatabase2', @level2type=N'COLUMN',@level2name=N'DatabaseName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The port of the server where the cache database is located' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CacheDatabase2', @level2type=N'COLUMN',@level2name=N'Port'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version of the cache database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CacheDatabase2', @level2type=N'COLUMN',@level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Table holding the cache databases connected to the database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CacheDatabase2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code that uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCircumstances_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCircumstances_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCircumstances_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCircumstances_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCircumstances_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes about usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCircumstances_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCircumstances_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Circumstances of the occurence of the organisms' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCircumstances_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCollectionType_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCollectionType_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCollectionType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCollectionType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCollectionType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCollectionType_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCollectionType_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A symbol representing this entry in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCollectionType_Enum', @level2type=N'COLUMN',@level2name=N'Icon'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types of a collection, e.g. cupboard, drawer, box, rack etc.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollCollectionType_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code that uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes about usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The categories for the collection date' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollDateCategory_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique reference ID for the collection (= primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'CollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For a subcollection within another collection: CollectionID of the collection to which the subcollection belongs. Empty for an independent collection' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'CollectionParentID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the collection (e.g. ''Herbarium Kew'') or subcollection (e.g. ''cone collection'', ''alcohol preservations''). This text should be kept relatively short. You may use Description for additional information' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'CollectionName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique code for the collection, e.g. the herbarium code from Index Herbariorum' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'CollectionAcronym'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the person or organisation responsible for this collection' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'AdministrativeContactName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the person or organisation responsible for the collection e.g. as provided by the module DiversityAgents' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'AdministrativeContactAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A short description of the collection' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Optional location of the collection, e.g. the number within a file system or a description of the room(s) housing the (sub)collection' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'Location'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The owner of the collection as e.g. printed on a label. Should be given if CollectionParentID is null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'CollectionOwner'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of the collection, e.g. cupboard, drawer etc.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'Type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'Definition of independent collections and a tree of subcollections (subcollections may contain subcollections).' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The collections where the specimen are stored' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Collection'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to ID of CollectionEvent (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the Collector' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent', @level2type=N'COLUMN',@level2name=N'CollectorsName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the Agent, e.g. as stored within the module DiversityAgents' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent', @level2type=N'COLUMN',@level2name=N'CollectorsAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order of collectors in a team. Automatically set by the database system' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent', @level2type=N'COLUMN',@level2name=N'CollectorsSequence'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number assigned to a specimen or a batch of specimens by the collector during the collection event (= ''field number'')' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent', @level2type=N'COLUMN',@level2name=N'CollectorsNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the collector, e.g. if the name is uncertain' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the data set is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'The collector(s) of specimens' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The collector(s) of CollectionSpecimens' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the dataset is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionAgent_log', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the table CollectionEvent (= primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectionEventID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version of the data set. Automatically set by the system.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the related expedition. Relates to the PK of the table CollectionExpedition (foreign key). ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'SeriesID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number assigned to a collection event by the collector (= ''field number'')' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectorsEventNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The cached date of the collection event calulated from the entries in CollectionDay, -Month and -Year.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectionDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The day of the date of the event or when the collection event started' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectionDay'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month of the date of the event or when the collection event started' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectionMonth'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year of the date of the event or when the collection event started' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectionYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The day of the date of the event or when the collection event ended' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectionEndDay'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month of the date of the event or when the collection event ended' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectionEndMonth'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year of the date of the event or when the collection event ended' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectionEndYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Verbal or additional collection date information, e.g. ''end of summer 1985'', ''first quarter'', ''1888-1892''. The end date, if the collection event comprises a period. The time of the event, if necessary.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectionDateSupplement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Category of the date of the identification e.g. "system", "estimated"  (= foreign key, see  in table CollEventDateCategory_Enum)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectionDateCategory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The time of the event or when the collection event started' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectionTime'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The time span e.g. in seconds of the collection event' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectionTimeSpan'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Locality description of the locality exactly as written on the original label (i.e. without corrections during data entry)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'LocalityDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Locality as given in historical context, documents and labels' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'LocalityVerbatim'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Geo-ecological description of the locality exactly as written on the original label (i.e. without corrections during data entry)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'HabitatDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the publication where the collection event was published. Note that this is only a cached value where ReferenceURI is present' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'ReferenceTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI (e.g. LSID) of the source publication where the collection event is published, may e.g. refer to the module DiversityReferences' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'ReferenceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The exact location within the reference, e.g. pages, plates' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'ReferenceDetails'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the method used for collecting the samples, e.g. traps, moist chambers, drag net' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CollectingMethod'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the collection event' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The country where the collection event took place. Cached value derived from an entry in CollectionEventLocalisation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'CountryCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the data set is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reason for withholding the collection date' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'DataWithholdingReasonDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The event where and when the specimen were collected' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the related expedition. Relates to the PK of the table CollectionExpedition (Foreign key). ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent_log', @level2type=N'COLUMN',@level2name=N'SeriesID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the dataset is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEvent_log', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Part of primay key, refers to unique ID for the table CollectionEvent (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'CollectionEventID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The complete URI address of the image. This is only a cached value, if ResourceID is available and referring to the module DiversityResources' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the resource (e.g. see module DiversityResources)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'ResourceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DisplayControl', @value=N'109' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'ResourceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of the image, e.g. map' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'ImageType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes to this image concerning the CollectionEvent' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the image' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Title of the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'Title'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Intellectual Property Rights; the rights given to persons for their intellectual property' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'IPR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Person or organization originally creating the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'CreatorAgent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Link to the module DiversityAgents' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'CreatorAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notice on rights held in and for the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'CopyrightStatement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of an official or legal permission to do or own a specified thing, e. g. Creative Common Licenses' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'LicenseType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal notes which should not be published e.g. on websites' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or institution holding the license' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'LicenseHolder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The link to a module containing futher information on the person or institution holding the license' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'LicenseHolderAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year of license declaration' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'LicenseYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the data set is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The images showing the collection site resp. place of the observations' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the dataset is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventImage_log', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of CollectionEvent (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'CollectionEventID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of LocalisationSystem (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'LocalisationSystemID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Either a named location selected from a thesaurus (e.g. ''Germany, Bavaria, Kleindingharting'') or altitude range or other values (e. g. 100-200 m)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'Location1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Corresponding value to Location1 e.g. ID or URI of gazetteer or thesaurus' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'Location2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The accuracy of the determination of this locality' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'LocationAccuracy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the location' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'LocationNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date of the determination of the geographical localisation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'DeterminationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Distance from the specified place to the real location of the collection site (m)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'DistanceToLocation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Direction from the specified place to the real location of the collection site (Degrees rel. to north)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'DirectionToLocation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent (person or organization) responsible for this entry.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'ResponsibleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI of the person or organisation responsible for the data (see e.g. module DiversityAgents)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'ResponsibleAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geography of the localisation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'Geography'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method or device used for the recording of the localisation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'RecordingMethod'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Calculated altitude as parsed from the location fields' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'AverageAltitudeCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Calculated latitude as parsed from the location fields' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'AverageLatitudeCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Calculated longitude as parsed from the location fields' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'AverageLongitudeCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic localisation of a CollectionEvent' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventLocalisation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to ID of CollectionSpecimen (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventMethod', @level2type=N'COLUMN',@level2name=N'CollectionEventID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the setting, part of primary key' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventMethod', @level2type=N'COLUMN',@level2name=N'MethodID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A marker for the method, part of primary key' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventMethod', @level2type=N'COLUMN',@level2name=N'MethodMarker'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventMethod', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventMethod', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventMethod', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventMethod', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The methods used during a collection event' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventMethod'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the table CollectionEvent (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventParameterValue', @level2type=N'COLUMN',@level2name=N'CollectionEventID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the method tool. Referes to table Method (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventParameterValue', @level2type=N'COLUMN',@level2name=N'MethodID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A marker for the method, part of primary key' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventParameterValue', @level2type=N'COLUMN',@level2name=N'MethodMarker'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the parameter tool. Referes to table Parameter (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventParameterValue', @level2type=N'COLUMN',@level2name=N'ParameterID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of the parameter, if different of the default value as documented in the table Parameter' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventParameterValue', @level2type=N'COLUMN',@level2name=N'Value'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes concerning the value of the parameter ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventParameterValue', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventParameterValue', @level2type=N'COLUMN',@level2name=N'LogInsertedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventParameterValue', @level2type=N'COLUMN',@level2name=N'LogInsertedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventParameterValue', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventParameterValue', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The values of the parameter of the methods used within a collection event' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventParameterValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of CollectionEvent (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'CollectionEventID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the property of the collection site, foreign key, see table Property' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'PropertyID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The text for the property as shown e.g. in a user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI referring to an external data source e.g. DiversityTerminology' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'PropertyURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A cached text of the complete name of the descriptor including superior categories, if present' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'PropertyHierarchyCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of a captured feature, e.g. temperature, pH, vegetation etc. If there is a range, this is the lower or first value' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'PropertyValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent (person or organization) responsible for this entry.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'ResponsibleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI of the person or organisation responsible for the data (see e.g. module DiversityAgents)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'ResponsibleAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the property of the colletion site.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For numeric values - a cached average value according to the' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'AverageValueCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A property of a collection site, e.g. exposition, slope, vegetation. May refer to Diversity Workbench module DiversityScientificTerms' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventProperty'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Part of primay key, refers to unique ID for the table CollectionEvent (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventRegulation', @level2type=N'COLUMN',@level2name=N'CollectionEventID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Regulation as defined in the table Regulation. Used to ensure, that user checked correct entry with authorized stuff' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventRegulation', @level2type=N'COLUMN',@level2name=N'Regulation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventRegulation', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventRegulation', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventRegulation', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventRegulation', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Regulation applied to a collection event' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventRegulation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Primary key. The ID for this series of collection events (= primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries', @level2type=N'COLUMN',@level2name=N'SeriesID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the superior series of collection events' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries', @level2type=N'COLUMN',@level2name=N'SeriesParentID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the series of collection events as it will be printed on e.g. the label' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The user defined code for a series of collection events' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries', @level2type=N'COLUMN',@level2name=N'SeriesCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on this series of collection events' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geography of the series of collection events' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries', @level2type=N'COLUMN',@level2name=N'Geography'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when the series of collection events started' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries', @level2type=N'COLUMN',@level2name=N'DateStart'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when the series of collection events ended' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries', @level2type=N'COLUMN',@level2name=N'DateEnd'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date of the depending events, used for sorting the expeditions [controlled by the database]' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries', @level2type=N'COLUMN',@level2name=N'DateCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The series whithin which collection events take place' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeries'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the table CollectionEventSeries (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'SeriesID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The complete URI address of the image. This is only a cached value, if ResourceID is available and referring to the module DiversityResources' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the resource (e.g. see module DiversityResources)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'ResourceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of the image, e.g. map' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'ImageType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes to this image of the collection site' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the image' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Title of the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'Title'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Intellectual Property Rights; the rights given to persons for their intellectual property' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'IPR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Person or organization originally creating the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'CreatorAgent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Link to the module DiversityAgents' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'CreatorAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notice on rights held in and for the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'CopyrightStatement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of an official or legal permission to do or own a specified thing, e.g. Creative Common licenses' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'LicenseType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal notes which should not be published e.g. on websites' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or institution holding the license' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'LicenseHolder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The link to a module containing futher information on the person or institution holding the license' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'LicenseHolderAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year of license declaration' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'LicenseYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the data set is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The images showing the sites of a series of collection events, e.g. an expedition' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the dataset is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionEventSeriesImage_log', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An ID to identify an external data collection of the collected specimen (primary key, the ID has no meaning outside of the DiversityWorkbench system)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'ExternalDatasourceID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the data collection which has been integrated or can be linked to for further analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'ExternalDatasourceName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version of this data collection (either official version number or dates when the collection was integrated)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'ExternalDatasourceVersion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of copyright agreements or permission to use data from the external database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'Rights'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The persons or institutions responsible for the external database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'ExternalDatasourceAuthors'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the database provider or the external database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'ExternalDatasourceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The institution responsible for the external database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'ExternalDatasourceInstitution'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Additional notes on this data collection' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The table and field name in the external data collection to which CollectionExternalID refers' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'ExternalAttribute_NameID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For selection in e.g. picklists: of several equal names only the name from the source with the lowest preferred sequence will be provided.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'PreferredSequence'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If this source should be disabled for selection of names e.g. in picklists' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'Disabled'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'The table of the database DiversityCollections containing source databases for taxonomic names' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'CollectionExternalDatasource document the sources of the names.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionExternalDatasource'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of Collection (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'CollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The complete URI address of the image. ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of the image, e.g. label' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'ImageType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the collection image' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the image' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Title of the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'Title'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Intellectual Property Rights; the rights given to persons for their intellectual property' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'IPR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Person or organization originally creating the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'CreatorAgent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Link to the module DiversityAgents' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'CreatorAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notice on rights held in and for the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'CopyrightStatement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of an official or legal permission to do or own a specified thing, e.g. Creative Common licenses' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'LicenseType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal notes which should not be published e.g. on websites' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or institution holding the license' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'LicenseHolder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The link to a module containing futher information on the person or institution holding the license' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'LicenseHolderAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year of license declaration' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'LicenseYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the data set is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'LogInsertedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'LogInsertedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The images showing the collection' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionImage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A login name which the user uses to access the DivesityWorkbench, Microsoft domains, etc..' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionManager', @level2type=N'COLUMN',@level2name=N'LoginName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID for the collection for which the Manager has the right to administrate the transaction. Corresponds to AdministratingCollectionID in table Transaction.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionManager', @level2type=N'COLUMN',@level2name=N'AdministratingCollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Collection managers within DiversityCollection responsible for specimen transactions' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionManager'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of CollectionSpecimen (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionProject', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the project to which the specimen belongs (Projects are defined in DiversityProjects)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionProject', @level2type=N'COLUMN',@level2name=N'ProjectID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionProject', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionProject', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionProject', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionProject', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The projects within which the collection specimen were placed' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionProject'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A login name which the user uses to access to the DivesityWorkbench, Microsoft domains, etc..' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionRequester', @level2type=N'COLUMN',@level2name=N'LoginName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID for the collection for which the requester has the right to request specimen. Corresponds to AdministratingCollectionID in table Transaction.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionRequester', @level2type=N'COLUMN',@level2name=N'AdministratingCollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the subcollections of the administrating collection are accessible for a request' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionRequester', @level2type=N'COLUMN',@level2name=N'IncludeSubcollections'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Requesters within DiversityCollection responsible for specimen transactions' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionRequester'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the table CollectionSpecimen (primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version of the data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of table CollectionEvent (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'CollectionEventID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the collection as stored in table Collection (= foreign key, see table Collection)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'CollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Accession number of the specimen within the collection, e.g. "M-29834752"' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'AccessionNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the accession calculated from the entries in AccessionDay, -Month and -Year' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'AccessionDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The day of the date when the specimen was acquired in the collection' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'AccessionDay'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month of the date when the specimen was acquired in the collection' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'AccessionMonth'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year of the date when the specimen was acquired in the collection' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'AccessionYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Verbal or additional accession date information, e.g. ''end of summer 1985'', ''first quarter'', ''1888-1892''' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'AccessionDateSupplement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Category of the date of the accession e.g. "system", "estimated"  (= foreign key, see  in table CollDateCategory_Enum)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'AccessionDateCategory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the depositor(s) (person or organization responsible for deposition). Where entire collections are deposited, this should also contain the collection name (e.g. ''Herbarium P. Döbbler'')' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'DepositorsName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the depositor(s) (person or organization responsible for deposition)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'DepositorsAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Accession number of the specimen within the previous or original collection, e.g. ''D-23948''' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'DepositorsAccessionNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the label e.g. for printing labels.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'LabelTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Printed, typewritten, typewritten with handwriting added, entirely in handwriting, etc.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'LabelType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The state of the transcription of a label into the database: ''Not started'', ''incomplete'', ''complete''' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'LabelTranscriptionState'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'User defined notes on the transcription of the label into the database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'LabelTranscriptionNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If specimen is an exsiccata: The URI of the exsiccata series, e.g. as stored within the DiversityExsiccata module' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'ExsiccataURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If specimen is an exsiccata: Standard abbreviation of the exsiccata (not necessarily a unique identifier; editors or publication places may change over time)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'ExsiccataAbbreviation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes found on the label of the specimen by the original collector or from a later revision' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'OriginalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Additional notes made by the editor of the specimen record, e.g. ''doubtful identification/locality''' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'AdditionalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of a problem which occurred during data editing. Typically these entries should be deleted after help has been obtained. Do not enter scientific problems here; use AdditionalNotes for such permanent problems!' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'Problems'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the data set is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal notes which should not be published e.g. on websites' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An ID to identify an external data collection of the collected specimen (primary key, the ID has no meaning outside of the DiversityWorkbench system)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'ExternalDatasourceID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier of the external specimen as defined in the external data source' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'ExternalIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Obsolete - please use table CollectionSpecimenReference instead' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'ReferenceTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Obsolete - please use table CollectionSpecimenReference instead' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'ReferenceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Obsolete - please use table CollectionSpecimenReference instead' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen', @level2type=N'COLUMN',@level2name=N'ReferenceDetails'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'A specimen (= collection unit) within a collection. This is the central object of the DiversityCollection database.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The data directly attributed to the collected specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the Collection as stored in table Collection (= foreign key, see table Collection)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen_log', @level2type=N'COLUMN',@level2name=N'CollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the dataset is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen_log', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal notes that should not be published e.g. on websites' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen_log', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An ID to identify an external data collection of collection specimen (primary key, the ID has no meaning outside of the DiversityWorkbench system)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen_log', @level2type=N'COLUMN',@level2name=N'ExternalDatasourceID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier of the external specimen as defined in the external datasource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimen_log', @level2type=N'COLUMN',@level2name=N'ExternalIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=-1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of CollectionSpecimen (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=4125 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The complete URI address of the image. This is only a cached value, if ResourceID is available and referring to the module DiversityResources' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'ResourceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'ResourceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=-1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'ResourceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the image, e.g. as stored in the module DiversityResources. ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'ResourceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DisplayControl', @value=N'109' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'ResourceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Optional: If the data set is not related to a part of a specimen, the ID of a related part (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'SpecimenPartID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=-1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If image refers to only one out of several IdentificationUnits for a specimen, refers to the ID of an IdentificationUnit for a collection specimen (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'ImageType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'ImageType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=-1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'ImageType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of the image, e.g. photograph' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'ImageType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the specimen image' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the image' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Title of the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'Title'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Intellectual Property Rights; the rights given to persons for their intellectual property' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'IPR'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Person or organization originally creating the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'CreatorAgent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Link to the module DiversityAgents' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'CreatorAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notice on rights held in and for the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'CopyrightStatement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of an official or legal permission to do or own a specified thing, e. g. Creative Common Licenses' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'LicenseType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the license for the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'LicenseURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or institution holding the license' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'LicenseHolder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The link to a module containing futher information on the person or institution holding the license' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'LicenseHolderAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year of license declaration' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'LicenseYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notice on license for the resource' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'LicenseNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the data set is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the images should be shown in a interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal notes which should not be published e.g. on websites' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DefaultView', @value=0x02 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The images of a collection specimen or of an organism (stored in table IdentificationUnit) within this specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Filter', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_OrderBy', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_OrderByOn', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Orientation', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_TableMaxRecords', @value=10000 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the dataset is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImage_log', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of CollectionSpecimen (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImageProperty', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The complete URI address of the image. This is only a cached value, if ResourceID is available and referring to the module DiversityResources' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImageProperty', @level2type=N'COLUMN',@level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The property of the image' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImageProperty', @level2type=N'COLUMN',@level2name=N'Property'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If description of the property of the image' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImageProperty', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The area in the image the property refers to' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImageProperty', @level2type=N'COLUMN',@level2name=N'ImageArea'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImageProperty', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImageProperty', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImageProperty', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImageProperty', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The properties of images of a collection specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenImageProperty'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of CollectionSpecimen (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID of the part of the collection specimen (= part of primary key). ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'SpecimenPartID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'SpecimenPartID of the specimen from which the current specimen is derived from' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'DerivedFromSpecimenPartID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method used for the preparation of the part of the specimen, e.g. the inoculation method for cultures' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'PreparationMethod'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when the part was preparated e.g when it was separated from the source object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'PreparationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Accession number of the part of the specimen within the collection, if it is different from the accession number of the specimen as stored in the table CollectionSpecimen, e.g. "M-29834752"' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'AccessionNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The label for a part of a specimen, e.g. "cone", or a number attached to a duplicate of a specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'PartSublabel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the collection as stored in table Collection (= foreign key, see table Collection)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'CollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Material category of specimen. Examples: ''herbarium sheets'', ''drawings'', ''microscopic slides'' etc. (= foreign key, see table CollMaterialCategory_Enum)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'MaterialCategory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code identifying the place where the specimen is stored within the collection. Frequently the accepted scientific name is used as storage location code.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'StorageLocation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number of stock units, if the specimen is stored in separated units e.g. several boxes or vessels (max. 255)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'Stock'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If empty, the stock is given as a count, else it contains the unit in which stock is expressed, e.g. µl, ml, kg etc.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'StockUnit'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The container in which the part is stored' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'StorageContainer'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person or institution responsible for the preparation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'ResponsibleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI of the person or institution responsible for the preparation (= foreign key) as stored in the module DiversityAgents' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'ResponsibleAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the storage of the sample' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the specimen part is withhold, the reason for withholding the data, otherwise null.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parts of a collected specimen. Includes a possible hierarchy of the parts' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPart'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of CollectionSpecimen (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartDescription', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID of the part of the collection specimen (= part of primary key). ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartDescription', @level2type=N'COLUMN',@level2name=N'SpecimenPartID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the description (Part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartDescription', @level2type=N'COLUMN',@level2name=N'PartDescriptionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of IdentficationUnit (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartDescription', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descrition of the part. Cached value if DescriptionTermURI is used' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartDescription', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Link to a external datasource like a webservice or the module DiversityScientificTerms where the description is documented' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartDescription', @level2type=N'COLUMN',@level2name=N'DescriptionTermURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes about this description' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartDescription', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartDescription', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartDescription', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartDescription', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartDescription', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the specimen part with a standardized vocabulary as defined in the module DiversityScientificTerms' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the collection event during which the objects where collected, refers to table CollectionEvent' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation', @level2type=N'COLUMN',@level2name=N'CollectionEventID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Part of primay key, refers to unique ID for the table CollectionSpecimen (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Part of primay key, refers to unique ID for the table CollectionSpecimenPart (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation', @level2type=N'COLUMN',@level2name=N'SpecimenPartID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the regulation, refers to table Regulation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation', @level2type=N'COLUMN',@level2name=N'Regulation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Part of primay key, refers to unique ID for the table Regulation (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation', @level2type=N'COLUMN',@level2name=N'RegulationID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Regulation', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Regulation', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Regulation', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Regulation', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Regulation applied to a collection specimen part' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenPartRegulation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to ID of CollectionSpecimen (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID of the processing of a specimen or part of a specimen, part of primary key' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'SpecimenProcessingID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time of the start of the processing' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'ProcessingDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the processing method. Refers to ProcessingID in table Processing (foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'ProcessingID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The label of the processing protocol' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'Protocoll'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Optional: If the data set is related to a part of a specimen, the ID of a related part (= foreign key, see table CollectionSpecimenPart)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'SpecimenPartID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The duration of the processing including the unit (e.g. 5 min) or the end of the processing starting at the processing date (e.g. 23.05.2008)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'ProcessingDuration'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person or institution responsible for the determination' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'ResponsibleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI of the person or institution responsible for the determination (= foreign key) as stored in the module DiversityAgents.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'ResponsibleAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the processing' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The processing which was applied to a collected specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessing'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to ID of CollectionSpecimen (= Foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethod', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of the specimen processing (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethod', @level2type=N'COLUMN',@level2name=N'SpecimenProcessingID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the method, part of primary key' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethod', @level2type=N'COLUMN',@level2name=N'MethodID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A marker for the method, part of primary key' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethod', @level2type=N'COLUMN',@level2name=N'MethodMarker'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the processing. Refers to ProcessingID in table Processing (foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethod', @level2type=N'COLUMN',@level2name=N'ProcessingID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The time when this dataset was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethod', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Who created this dataset' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethod', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last time when this dataset was updated' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethod', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Who was the last to update this dataset' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethod', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The methods used for a processing of a specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethod'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to ID of CollectionSpecimen (= Foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethodParameter', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to ID of CollectionSpecimenProcessing (= Foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethodParameter', @level2type=N'COLUMN',@level2name=N'SpecimenProcessingID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the processing. Refers to ProcessingID in table Processing  (= Foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethodParameter', @level2type=N'COLUMN',@level2name=N'ProcessingID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the method  (= Foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethodParameter', @level2type=N'COLUMN',@level2name=N'MethodID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A marker for the method, part of primary key' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethodParameter', @level2type=N'COLUMN',@level2name=N'MethodMarker'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the parameter. Referes to table Parameter  (= Foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethodParameter', @level2type=N'COLUMN',@level2name=N'ParameterID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of the parameter if different of the default value as documented in the table Parameter' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethodParameter', @level2type=N'COLUMN',@level2name=N'Value'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The time when this dataset was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethodParameter', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Who created this dataset' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethodParameter', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last time when this dataset was updated' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethodParameter', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Who was the last to update this dataset' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethodParameter', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The parameter values of a method used for the processing of a specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenProcessingMethodParameter'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to unique ID of collection specimen record (part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique reference ID for the reference record (part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'ReferenceID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the publication related to the specimen or parts of it. Note that this is only a cached value where ReferenceURI is present' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'ReferenceTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI of the reference, e.g. a connection to the module DiversityReferences' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'ReferenceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If relation refers to a certain organism within a specimen, the ID of an IdentificationUnit (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Referes to table Identification: The sequence of the identifications.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'IdentificationSequence'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the relation refers to a part of a specimen, the ID of a related part (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'SpecimenPartID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The exact location within the reference, e.g. pages, plates' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'ReferenceDetails'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes about the reference' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent (person or organization) responsible for this entry.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'ResponsibleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI of the person or organisation responsible for the data (see e.g. module DiversityAgents)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'ResponsibleAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A reference related to the collection specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenReference'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique reference ID for the collection specimen record (primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI of the related specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'RelatedSpecimenURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of a related specimen as shown e.g. in a user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'RelatedSpecimenDisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of the relation between the specimen (= foreign key, see table CollRelationType_Enum)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'RelationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the Collection as stored in table Collection (= foreign key, see table Collection)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'RelatedSpecimenCollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the related specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'RelatedSpecimenDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If relation refers to a certain organism within a specimen, the ID of an IdentificationUnit (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the relation refers to a part of a specimen, the ID of a related part (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'SpecimenPartID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the relation to the specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the relation represents a connection between specimen in this database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'IsInternalRelationCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The relations of a collection specimen to other collection specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of the relation between the specimen (= foreign key, see table CollRelationType_Enum)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation_log', @level2type=N'COLUMN',@level2name=N'RelationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the Collection as stored in table Collection (= foreign key, see table Collection)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenRelation_log', @level2type=N'COLUMN',@level2name=N'RelatedSpecimenCollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to ID of CollectionSpecimen (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenTransaction', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the table Transaction (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenTransaction', @level2type=N'COLUMN',@level2name=N'TransactionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Optional: If the data set is related to a part of a specimen, the ID of a related part (= foreign key, see table CollectionSpecimenPart)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenTransaction', @level2type=N'COLUMN',@level2name=N'SpecimenPartID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Accession number which has been assigen to the part of the specimen, e.g. in connection with a former inventory.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenTransaction', @level2type=N'COLUMN',@level2name=N'AccessionNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the table Transaction (= foreign key) for the return of a part that has been on loan' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenTransaction', @level2type=N'COLUMN',@level2name=N'TransactionReturnID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Title as in related table Transaction. Used for validation of correct entry of transaction with type regulation (see insert trigger)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenTransaction', @level2type=N'COLUMN',@level2name=N'TransactionTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of user to first enter (typ or import) the data.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenTransaction', @level2type=N'COLUMN',@level2name=N'LogInsertedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when the data was first entered (typed or imported) into this database.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenTransaction', @level2type=N'COLUMN',@level2name=N'LogInsertedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenTransaction', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenTransaction', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'True, if a specimen is on loan' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenTransaction', @level2type=N'COLUMN',@level2name=N'IsOnLoan'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The transactions in which a specimen was involved' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionSpecimenTransaction'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A login name which the user uses to access the DivesityWorkbench, Microsoft domains, etc..' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionUser', @level2type=N'COLUMN',@level2name=N'LoginName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID for the collection for the user has access to administrate the transaction.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionUser', @level2type=N'COLUMN',@level2name=N'CollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Users of collections within DiversityCollection' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollectionUser'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The categoies of the collection date' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventDateCategory_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventImageType_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventImageType_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventImageType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventImageType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventImageType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventImageType_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventImageType_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types of the images taken from a collection event' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventImageType_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventSeriesImageType_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventSeriesImageType_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventSeriesImageType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventSeriesImageType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventSeriesImageType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventSeriesImageType_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollEventSeriesImageType_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollExchangeType_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollExchangeType_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollExchangeType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollExchangeType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollExchangeType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollExchangeType_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollExchangeType_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationCategory_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationCategory_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationCategory_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationCategory_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The categories of an identification, e.g. determination, confirmation etc.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationCategory_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationDateCategory_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The categories of the identification date' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationDateCategory_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationQualifier_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationQualifier_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationQualifier_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationQualifier_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationQualifier_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationQualifier_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationQualifier_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identification qualifiers, e.g. cf. spec., s.l. etc.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollIdentificationQualifier_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelTranscriptionState_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelTranscriptionState_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelTranscriptionState_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelTranscriptionState_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelTranscriptionState_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelTranscriptionState_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelTranscriptionState_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The states of the transcription of a label' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelTranscriptionState_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelType_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelType_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelType_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelType_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types of a label, e.g. handwritten, typed etc.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollLabelType_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollMaterialCategory_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollMaterialCategory_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollMaterialCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollMaterialCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollMaterialCategory_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollMaterialCategory_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollMaterialCategory_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A symbol representing this entry in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollMaterialCategory_Enum', @level2type=N'COLUMN',@level2name=N'Icon'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The material categories of the specimen, e.g. slide, culture etc.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollMaterialCategory_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollRetrievalType_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollRetrievalType_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollRetrievalType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollRetrievalType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollRetrievalType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollRetrievalType_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollRetrievalType_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A symbol representing this entry in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollRetrievalType_Enum', @level2type=N'COLUMN',@level2name=N'Icon'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types data about organisms were retrieved' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollRetrievalType_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenImageType_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenImageType_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenImageType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenImageType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenImageType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenImageType_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenImageType_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of an image of a specimen, e.g. label' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenImageType_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenRelationType_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenRelationType_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenRelationType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenRelationType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenRelationType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenRelationType_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenRelationType_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Types of the relation between specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollSpecimenRelationType_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTaxonomicGroup_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTaxonomicGroup_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTaxonomicGroup_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTaxonomicGroup_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTaxonomicGroup_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTaxonomicGroup_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTaxonomicGroup_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A symbol representing this entry in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTaxonomicGroup_Enum', @level2type=N'COLUMN',@level2name=N'Icon'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The taxonomic groups of the organisms' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTaxonomicGroup_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTransactionType_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTransactionType_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTransactionType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTransactionType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTransactionType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTransactionType_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTransactionType_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types of the transactions of the specimen, e.g. loan, exchange' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTransactionType_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTypeStatus_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTypeStatus_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTypeStatus_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTypeStatus_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTypeStatus_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTypeStatus_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTypeStatus_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type statuses of the identifications, e.g. Isotype' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollTypeStatus_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollUnitRelationType_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollUnitRelationType_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollUnitRelationType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollUnitRelationType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollUnitRelationType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollUnitRelationType_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollUnitRelationType_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of relation between organisms within one specimen, e.g. growing on' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'CollUnitRelationType_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the entity, e.g. Table.Column.Content within the database or a unique string for e.g. a message within the DiversityWorkbench e.g. "DiversityWorkbench.Message.Connection.NoAccess", PK' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Entity', @level2type=N'COLUMN',@level2name=N'Entity'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If DiversityWorkbench entities should be displayed in a group, the name of the group' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Entity', @level2type=N'COLUMN',@level2name=N'DisplayGroup'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the entity' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Entity', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'True if an entity is obsolete. Obsolete entities may be kept to ensure compatibility with older modules' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Entity', @level2type=N'COLUMN',@level2name=N'Obsolete'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Entity', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Entity', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Entity', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Entity', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The entities in an application e.g. the tables and columns in a database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Entity'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the DiversityWorkbench may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityAccessibility_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityAccessibility_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityAccessibility_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityAccessibility_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityAccessibility_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityAccessibility_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityAccessibility_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the DiversityWorkbench may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityContext_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityContext_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityContext_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityContext_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityContext_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityContext_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityContext_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The context in which the application is used, e.g. collection - administration, field-mapping' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityContext_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the DiversityWorkbench may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityDetermination_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityDetermination_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityDetermination_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityDetermination_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityDetermination_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityDetermination_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityDetermination_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the DiversityWorkbench may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityLanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityLanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityLanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityLanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityLanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityLanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityLanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The codes for the languages used for the entities' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityLanguageCode_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the entity. Foreign key, relates to table Entity' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityRepresentation', @level2type=N'COLUMN',@level2name=N'Entity'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ISO 639: 2-letter codes for the language of the content' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityRepresentation', @level2type=N'COLUMN',@level2name=N'LanguageCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The context for the representation, e.g. "Exchange with ABCD", "collection management" or "observation" as defined in table EntityContext_Enum' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityRepresentation', @level2type=N'COLUMN',@level2name=N'EntityContext'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The text for the entity as shown e.g. in a user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityRepresentation', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The abbreviation for the entity as shown e.g. in a user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityRepresentation', @level2type=N'COLUMN',@level2name=N'Abbreviation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the entity' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityRepresentation', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the representation of the entity' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityRepresentation', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityRepresentation', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityRepresentation', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityRepresentation', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityRepresentation', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the entity in a certain context in different languages' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityRepresentation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the entity. Foreign key, relates to table Entity' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage', @level2type=N'COLUMN',@level2name=N'Entity'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The context for the representation, e.g. "Exchange with ABCD", "collection management" or "observation" as defined in table EntityContext_Enum' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage', @level2type=N'COLUMN',@level2name=N'EntityContext'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the access of entity is resticted to e.g. read only or it can be edited without restrictions' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage', @level2type=N'COLUMN',@level2name=N'Accessibility'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If a value is determined e.g. by the system or the user' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage', @level2type=N'COLUMN',@level2name=N'Determination'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the entity is visible or hidden from e.g. a user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage', @level2type=N'COLUMN',@level2name=N'Visibility'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If a value is preset, the value or SQL statement for the value, e.g. ''determination'' for identifications when using a mobile device during an expedition' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage', @level2type=N'COLUMN',@level2name=N'PresetValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the usage of the entity' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The usage of an entity in a certain context, e.g. hidden, readonly' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the DiversityWorkbench may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The usage of an entity, e.g. hidden, readonly' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityUsage_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the DiversityWorkbench may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityVisibility_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityVisibility_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityVisibility_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityVisibility_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityVisibility_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityVisibility_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'EntityVisibility_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the identifier (Primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifier', @level2type=N'COLUMN',@level2name=N'ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the table the external identifier refers to' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifier', @level2type=N'COLUMN',@level2name=N'ReferencedTable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the data set in the table the external identifier refers to' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifier', @level2type=N'COLUMN',@level2name=N'ReferencedID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the identifier as defined in table ExternalIdentifierType' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifier', @level2type=N'COLUMN',@level2name=N'Type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifier', @level2type=N'COLUMN',@level2name=N'Identifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A URL with further informations about the identifier' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifier', @level2type=N'COLUMN',@level2name=N'URL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes about the identifier' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifier', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifier', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifier', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifier', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifier', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An external identier related to a dataset, e.g. a DOI' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of external identifiers (primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifierType', @level2type=N'COLUMN',@level2name=N'Type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The superior type of this type' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifierType', @level2type=N'COLUMN',@level2name=N'ParentType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A URL providing further informations about this type' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifierType', @level2type=N'COLUMN',@level2name=N'URL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of this type' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifierType', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal notes about the type' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifierType', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifierType', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifierType', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifierType', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifierType', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of an external identier, e.g. DOI' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalIdentifierType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Login of the person responsible for the loan requests in the collection' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalRequestCredentials', @level2type=N'COLUMN',@level2name=N'RequesterLogin'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the collection which gets the request for a loan. Corresponds to the AdministratingCollectionID in table Transaction.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalRequestCredentials', @level2type=N'COLUMN',@level2name=N'AdministratingCollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the collection for which the requester has the permission to create a request' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalRequestCredentials', @level2type=N'COLUMN',@level2name=N'RequestingCollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'External requestors with the permission to create a request for a loan' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExternalRequestCredentials'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of CollectionSpecimen (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of IdentficationUnit (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The sequence of the identifications. The last identification (having the highest sequence) is regarded as valid' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'IdentificationSequence'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the identification calculated from the entries in IdentificationDay, -Month and -Year' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'IdentificationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The day of the identification' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'IdentificationDay'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month of the identification' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'IdentificationMonth'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year of the identification. The year may be empty if only the day or month are known.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'IdentificationYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Verbal or additional identification date information, e.g. ''end of summer 1985'', ''first quarter'', ''1888-1892''' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'IdentificationDateSupplement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Category of the date of the identification e.g. "system", "estimated"  (= foreign key, see  in table CollDateCategory_Enum)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'IdentificationDateCategory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name or term other than a taxonomic (= scientific) name, e.g. ''pine'', ''limestone'', ''conifer'', ''hardwood''' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'VernacularTerm'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the term, e.g. as provided by the module DiversityScientificTerms.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'TermURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Valid name of the species (including the taxonomic author where available). Example: ''Rosa canina L.''' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'TaxonomicName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the taxonomic name, e.g. as provided by the module DiversityTaxonNames.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'NameURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Category of the identification e.g. ''determination'', ''confirmation'', ''absence''  (= foreign key, see table CollIdentificationCategory_Enum)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'IdentificationCategory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Qualification of the identification e.g. "cf."," aff.", "sp. nov."  (= foreign key, see table CollIdentificationQualifier_Enum)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'IdentificationQualifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If identification unit is type of a taxonomic name: holotype, syntype, etc. (= foreign key, see table CollTypeStatus_Enum)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'TypeStatus'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the typification of this specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'TypeNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'User defined notes, e.g. the reason for a re-determination / change of the name, etc.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person or institution responsible for the determination' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'ResponsibleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI of the person or institution responsible for the determination (= foreign key) as stored in the module DiversityAgents.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'ResponsibleAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Obsolete; Publications or authoritative opinions of scientist used during the identification process. Example: enter ''Schmeil-Fitschen 1995'', if this field flora was used.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'ReferenceTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Obsolete; The URI of the reference e.g. as provided by the module DiversityReferences' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'ReferenceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Obsolete; The exact location within the reference, e.g. pages, plates' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'ReferenceDetails'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'if the identification depends on another identification, e.g. for rocks where several terms from a terminology should be included' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification', @level2type=N'COLUMN',@level2name=N'DependsOnIdentificationSequence'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'Identifications of the organisms resp. objects' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifications of the organisms within a specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Identification'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of CollectionSpecimen (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the IdentificationUnit (= part of primary key). Usually one of possibly several organisms present on the collected specimen. Example: parasite with hyperparasite on plant leaf = 3 units,' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last identification as entered in table Identification' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'LastIdentificationCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A cached value of the family of the taxon of the last identification. Can be set by the editor, if NameURI in table Identification is NULL, otherwise set by the system.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'FamilyCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A cached value of the order of the taxon of the last identification. Can be set by the editor, if NameURI in table Identification is NULL, otherwise set by the system.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'OrderCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A cached value fo the superior taxonomy of the last identification as derived from a taxonomic data provider' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'HierarchyCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Taxonomic group the organism, identified by this unit, belongs to. Groups listed in table CollTaxonomicGroup_Enum (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'TaxonomicGroup'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'True, if the organism was only observed rather than collected. It is therefore not present on the preserved specimen. Example: Tree under which the collected mycorrhizal fungus grew.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'OnlyObserved'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The IdentificationUnitID of the organism or substrate on which this organism is growing (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'RelatedUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The relation of a unit to its substrate, e.g. parasitism, symbiosis etc. as stored in CollRelationType_Enum (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'RelationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The IdentificationUnitID of a parent organism of which this organism is a child of (= foreign key).' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'ParentUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If a substrate association exists: part of the substrate which is affected in the interaction (e.g. ''leaves'', if a fungus is growing on the leaves of an infected plant)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'ColonisedSubstratePart'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Examples: ''II, III'' for spore generations of rusts or ''seed'', ''seedling'' etc. for higher plants' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'LifeStage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The sex of the organism, e.g. ''female''' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'Gender'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of units of this organism, e.g. 400 beetles in a bottle' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'NumberOfUnits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A modifier for the number of units of this organism, e.g. ca. 400 beetles in a bottle' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'NumberOfUnitsModifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If specimen is an exsiccata: Number of current specimen within the exsiccata series' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'ExsiccataNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the IdentificationSequence in Identification (= foreign key). The name under which the collectied specimen or this organism is published within an exsiccata.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'ExsiccataIdentification'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An identifier for the identification of the unit, e.g. a number painted on a tree within an experimental plot' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'UnitIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the unit, especially if not an organism but parts or remnants of it were present or observed, e.g. a nest of an insect or a song of a bird' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'UnitDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Circumstances of the occurence of the organism' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'Circumstances'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The way the data about the unit were retrieved, e.g. observation, literature' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'RetrievalType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The sequence in which the units within this specimen will appear on e.g. a label where the first unit may be printed in the header and others in the text below. 0 means the unit should not appear on a label.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the data set is withhold, the reason for withholding the data, otherwise null' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'DataWithholdingReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Further information on the organism or interaction, e.g. infection symptoms like ''producing galls''' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Organism which is present in or on a collectied specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A cached value of the family of the taxon of the last identification. Can be set by the editor if NameURI  in table Identification is NULL, otherwise set by the system.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit_log', @level2type=N'COLUMN',@level2name=N'FamilyCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A cached value of the order of the taxon of the last identification. Can be set by the editor if NameURI in table Identification is NULL, otherwise set by the system.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit_log', @level2type=N'COLUMN',@level2name=N'OrderCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The IdentificationUnitID of the organism or substrate, on which this organism is growing (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit_log', @level2type=N'COLUMN',@level2name=N'RelatedUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The relation of an unit to its substrate, e.g. parasitism, symbiosis etc. as stored in CollRelationType_Enum  (= foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnit_log', @level2type=N'COLUMN',@level2name=N'RelationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of CollectionSpecimen (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of IdentficationUnit (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Analysis ID, foreign key of table Analysis.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'AnalysisID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number of the analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'AnalysisNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The result of the analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'AnalysisResult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An URI for an analysis as defined in an external datasoure' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'ExternalAnalysisURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DisplayControl', @value=N'109' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'ExternalAnalysisURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person or institution responsible for the determination' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'ResponsibleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI of the person or institution responsible for the determination (= foreign key) as stored in the module DiversityAgents.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'ResponsibleAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'AnalysisDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the part of a specimen (optional, foreign key) if the analysis was done with a part of the specimen (see table CollectionSpecimenPart).' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'SpecimenPartID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on this analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The analysis values taken from an organism resp. object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis_log', @level2type=N'COLUMN',@level2name=N'AnalysisDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the part of a specimen (optional, Foreign key) if the analysis was done with a part of the specimen (see table CollectionSpecimenPart).' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysis_log', @level2type=N'COLUMN',@level2name=N'SpecimenPartID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to ID of CollectionSpecimen (= Foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethod', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of IdentficationUnit (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethod', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the method, part of primary key' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethod', @level2type=N'COLUMN',@level2name=N'MethodID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A marker for the method, part of primary key' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethod', @level2type=N'COLUMN',@level2name=N'MethodMarker'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the processing. Refers to AnalysisID in table Processing (foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethod', @level2type=N'COLUMN',@level2name=N'AnalysisID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number of the analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethod', @level2type=N'COLUMN',@level2name=N'AnalysisNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The time when this dataset was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethod', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Who created this dataset' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethod', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last time when this dataset was updated' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethod', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Who was the last to update this dataset' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethod', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The methods used for an analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethod'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to ID of CollectionSpecimen (= Foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethodParameter', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the identification unit  (= Foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethodParameter', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the analysis. Refers to AnalysisID in table Analysis  (= Foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethodParameter', @level2type=N'COLUMN',@level2name=N'AnalysisID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number of the analysis  (= Foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethodParameter', @level2type=N'COLUMN',@level2name=N'AnalysisNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the method  (= Foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethodParameter', @level2type=N'COLUMN',@level2name=N'MethodID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A marker for the method, part of primary key' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethodParameter', @level2type=N'COLUMN',@level2name=N'MethodMarker'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the parameter tool. Referes to table Parameter  (= Foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethodParameter', @level2type=N'COLUMN',@level2name=N'ParameterID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of the parameter if different of the default value as documented in the table Parameter' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethodParameter', @level2type=N'COLUMN',@level2name=N'Value'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The time when this dataset was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethodParameter', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Who created this dataset' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethodParameter', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last time when this dataset was updated' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethodParameter', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Who was the last to update this dataset' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethodParameter', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The parameter values of a method used for an analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitAnalysisMethodParameter'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of CollectionSpecimen (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitGeoAnalysis', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of IdentficationUnit (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitGeoAnalysis', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitGeoAnalysis', @level2type=N'COLUMN',@level2name=N'AnalysisDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geography where the organism resp. object was located according to WGS84, e.g. a point (latitide, longitude and altitude)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitGeoAnalysis', @level2type=N'COLUMN',@level2name=N'Geography'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geometry of the place the organism resp. object was observed, e.g. an area' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitGeoAnalysis', @level2type=N'COLUMN',@level2name=N'Geometry'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person or institution responsible for the determination' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitGeoAnalysis', @level2type=N'COLUMN',@level2name=N'ResponsibleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI of the person or institution responsible for the determination (= foreign key) as stored in the module DiversityAgents.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitGeoAnalysis', @level2type=N'COLUMN',@level2name=N'ResponsibleAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on this analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitGeoAnalysis', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitGeoAnalysis', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitGeoAnalysis', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitGeoAnalysis', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitGeoAnalysis', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographical position or region of an organism at a certain time' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitGeoAnalysis'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Refers to the ID of CollectionSpecimen (= foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitInPart', @level2type=N'COLUMN',@level2name=N'CollectionSpecimenID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the identification unit in table IdentificationUnit (= part of primary key). Usually one of possibly several organisms present on the collection specimen. Example: parasite with hyperparasite on plant leaf = 3 units,' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitInPart', @level2type=N'COLUMN',@level2name=N'IdentificationUnitID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the part of a specimen (optional, foreign key), if the identification unit is located on a part of the specimen (see table CollectionSpecimenPart).' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitInPart', @level2type=N'COLUMN',@level2name=N'SpecimenPartID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The sequence in which the units within this part will appear on e.g. a label where the first unit may be printed in the header and others in the text below. 0 means the unit should not appear on a label.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitInPart', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the user to first enter (typ or import) the data.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitInPart', @level2type=N'COLUMN',@level2name=N'LogInsertedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when the data was first entered (typed or imported) into this database.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitInPart', @level2type=N'COLUMN',@level2name=N'LogInsertedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data last.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitInPart', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data was updated last.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitInPart', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Obsolete - please use table CollectionSpecimenPartDescription instead' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitInPart', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The list of the organisms which are found in a part of the specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'IdentificationUnitInPart'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LanguageCode_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The codes for the languages' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LanguageCode_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'LocalisationSystemID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'LocalisationSystemID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=65535 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'LocalisationSystemID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the localisation system (= Primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'LocalisationSystemID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'LocalisationSystemParentID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'LocalisationSystemParentID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=65535 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'LocalisationSystemParentID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LocalisationSystemID of the superior LocalisationSystem' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'LocalisationSystemParentID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'LocalisationSystemName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'LocalisationSystemName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=65535 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'LocalisationSystemName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the system used for the determination of the place of the collection, e. g. Gauss-Krüger, MTB, GIS' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'LocalisationSystemName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DefaultAccuracyOfLocalisation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DefaultAccuracyOfLocalisation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=65535 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DefaultAccuracyOfLocalisation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The default for the accuracy of values which can be reached with this method' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DefaultAccuracyOfLocalisation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The default measurement unit for the localisation system, e.g. m, geograpic coordinates' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DefaultMeasurementUnit'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal value, specifying a programming method used for parsing text in fields Location1/Location2 in table CollectionLocalisation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'ParsingMethodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=65535 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the localisation system as displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=65535 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Specifies, if this item is enabled to be used within the database. Localisation systems can be disabled to avoid seeing them, but keep the definition for the future.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=65535 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=65535 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the localisation method' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayTextLocation1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayTextLocation1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=3915 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayTextLocation1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the attribute Location1 in the table CollectionGeography as displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayTextLocation1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DescriptionLocation1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DescriptionLocation1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=1620 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DescriptionLocation1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the attribute Location1 in the table CollectionGeography as displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DescriptionLocation1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayTextLocation2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayTextLocation2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=65535 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayTextLocation2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the attribute Location2 in the table CollectionGeography as displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DisplayTextLocation2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnHidden', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DescriptionLocation2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnOrder', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DescriptionLocation2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_ColumnWidth', @value=1485 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DescriptionLocation2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the attribute Location2 in the table CollectionGeography as displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem', @level2type=N'COLUMN',@level2name=N'DescriptionLocation2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DefaultView', @value=2 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic localisation systems, e.g. coordinates' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Filter', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_OrderBy', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_OrderByOn', @value=NULL , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Orientation', @value=0 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_TableMaxRecords', @value=10000 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LocalisationSystem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MeasurementUnit_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MeasurementUnit_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MeasurementUnit_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MeasurementUnit_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MeasurementUnit_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MeasurementUnit_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MeasurementUnit_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The measurement units, e.g. m' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MeasurementUnit_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the Method (Primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Method', @level2type=N'COLUMN',@level2name=N'MethodID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'MethodID of the parent Method, if it belongs to a certain type documented in this table' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Method', @level2type=N'COLUMN',@level2name=N'MethodParentID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the entry is only used for the hierarchical arrangement of the entries' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Method', @level2type=N'COLUMN',@level2name=N'OnlyHierarchy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the Method as e.g. shown in user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Method', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the Method' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Method', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI referring to an external documentation of the Method' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Method', @level2type=N'COLUMN',@level2name=N'MethodURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If a method may be used during a collection event' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Method', @level2type=N'COLUMN',@level2name=N'ForCollectionEvent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on this method' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Method', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Method', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Method', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Method', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Method', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Methods used within the database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Method'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the table Analysis (foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForAnalysis', @level2type=N'COLUMN',@level2name=N'AnalysisID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the table Method (foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForAnalysis', @level2type=N'COLUMN',@level2name=N'MethodID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForAnalysis', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForAnalysis', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForAnalysis', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForAnalysis', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Methods available for a Analysis' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForAnalysis'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the table Processing (foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForProcessing', @level2type=N'COLUMN',@level2name=N'ProcessingID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the table Method (foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForProcessing', @level2type=N'COLUMN',@level2name=N'MethodID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForProcessing', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForProcessing', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForProcessing', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForProcessing', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Methods available for a processing' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'MethodForProcessing'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the Method (foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Parameter', @level2type=N'COLUMN',@level2name=N'MethodID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the Parameter (part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Parameter', @level2type=N'COLUMN',@level2name=N'ParameterID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the parameter as e.g. shown in user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Parameter', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the parameter' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Parameter', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI referring to an external documentation of the Parameter' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Parameter', @level2type=N'COLUMN',@level2name=N'ParameterURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The default value of the parameter' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Parameter', @level2type=N'COLUMN',@level2name=N'DefaultValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on this parameter' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Parameter', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Parameter', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Parameter', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Parameter', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Parameter', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The variable parameters within a method' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Parameter'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the table Method (= part of primary key and foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ParameterValue_Enum', @level2type=N'COLUMN',@level2name=N'MethodID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the table Parameter (= part of primary key and foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ParameterValue_Enum', @level2type=N'COLUMN',@level2name=N'ParameterID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of the parameter (part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ParameterValue_Enum', @level2type=N'COLUMN',@level2name=N'Value'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The text as e.g. shown in user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ParameterValue_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the parameter value' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ParameterValue_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI referring to an external documentation of the parameter value' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ParameterValue_Enum', @level2type=N'COLUMN',@level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of user who first entered (typed or imported) the data.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ParameterValue_Enum', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date and time when the data were first entered (typed or imported) into this database.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ParameterValue_Enum', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of user who last updated the data.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ParameterValue_Enum', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date and time when the data were last updated.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ParameterValue_Enum', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Distinct values for a parameter of a method' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ParameterValue_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the processing (primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Processing', @level2type=N'COLUMN',@level2name=N'ProcessingID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the superior type of the processing' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Processing', @level2type=N'COLUMN',@level2name=N'ProcessingParentID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The display text of the processing as shown e.g. in a user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Processing', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the processing' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Processing', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes on the processing' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Processing', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A URI for a processing as defined in an external data source' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Processing', @level2type=N'COLUMN',@level2name=N'ProcessingURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the entry is only used for the hierarchical arrangement of the entries' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Processing', @level2type=N'COLUMN',@level2name=N'OnlyHierarchy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Processing', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Processing', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Processing', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Processing', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The processings of the specimen' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Processing'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the processing. Refers to ProcessingID in table Processing (foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProcessingMaterialCategory', @level2type=N'COLUMN',@level2name=N'ProcessingID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Material category of specimen. Examples: ''herbarium sheets'', ''drawings'', ''microscopic slides'' etc.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProcessingMaterialCategory', @level2type=N'COLUMN',@level2name=N'MaterialCategory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProcessingMaterialCategory', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProcessingMaterialCategory', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The processings which are possible for a certain material category' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProcessingMaterialCategory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the analysis (primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectAnalysis', @level2type=N'COLUMN',@level2name=N'AnalysisID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the project to which the specimen belongs (Projects are defined in DiversityProjects)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectAnalysis', @level2type=N'COLUMN',@level2name=N'ProjectID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectAnalysis', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectAnalysis', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectAnalysis', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectAnalysis', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types of the analysis which are available for a project' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectAnalysis'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the table Processing (foreign key and part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProcessing', @level2type=N'COLUMN',@level2name=N'ProcessingID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the project to which the specimen belongs (Projects are defined in DiversityProjects)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProcessing', @level2type=N'COLUMN',@level2name=N'ProjectID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProcessing', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProcessing', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProcessing', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProcessing', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types of processing available within a project' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProcessing'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the project to which the specimen belongs (Projects are defined in DiversityProjects)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProxy', @level2type=N'COLUMN',@level2name=N'ProjectID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or title of the project as shown in a user interface (Projects are defined in DiversityProjects)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProxy', @level2type=N'COLUMN',@level2name=N'Project'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Template for the description of images' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProxy', @level2type=N'COLUMN',@level2name=N'ImageDescriptionTemplate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the project, e.g. as provided by the module DiversityProjects.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProxy', @level2type=N'COLUMN',@level2name=N'ProjectURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If an archive e.g. by a task schedule should be created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProxy', @level2type=N'COLUMN',@level2name=N'CreateArchive'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The protocol created during the last archive' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProxy', @level2type=N'COLUMN',@level2name=N'ArchiveProtocol'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The initial string of the stable identifier for data of this project' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProxy', @level2type=N'COLUMN',@level2name=N'StableIdentifierBase'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the stable identifier for data of this project - evaluated in function StableIdentifier for the creation of stable identifiers' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProxy', @level2type=N'COLUMN',@level2name=N'StableIdentifierTypeID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The recent date when data within the project had been changed' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProxy', @level2type=N'COLUMN',@level2name=N'LastChanges'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The projects as stored in the module DiversityProjects' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectProxy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A login name which the user uses to access the DivesityWorkbench, Microsoft domains, etc..' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectUser', @level2type=N'COLUMN',@level2name=N'LoginName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the project to which the specimen belongs (Projects are defined in DiversityProjects)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectUser', @level2type=N'COLUMN',@level2name=N'ProjectID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the user has only read access to data of this project' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectUser', @level2type=N'COLUMN',@level2name=N'ReadOnly'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The projects which a user can access' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ProjectUser'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the localisation system (= primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Property', @level2type=N'COLUMN',@level2name=N'PropertyID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LocalisationSystemID of the superior LocalisationSystem' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Property', @level2type=N'COLUMN',@level2name=N'PropertyParentID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the system used for the determination of the place of the collection, e. g. Gauss-Krüger, MTB, GIS' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Property', @level2type=N'COLUMN',@level2name=N'PropertyName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The default for the accuracy of values which can be reached with this method' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Property', @level2type=N'COLUMN',@level2name=N'DefaultAccuracyOfProperty'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The default measurement unit for the characterisation system, e.g. pH' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Property', @level2type=N'COLUMN',@level2name=N'DefaultMeasurementUnit'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal value, specifying a programming method used for parsing text in fields Location1/Location2 in table CollectionLocalisation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Property', @level2type=N'COLUMN',@level2name=N'ParsingMethodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the localisation system as displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Property', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Specifies, if this item is enabled to be used within the database. Localisation systems can be disabled to avoid seeing them, but keep the definition for the future.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Property', @level2type=N'COLUMN',@level2name=N'DisplayEnabled'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Property', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the localisation method' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Property', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the property, e.g. as provided by the module DiversityScientificTerms.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Property', @level2type=N'COLUMN',@level2name=N'PropertyURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The list of the properties that can be specified for the collection site' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Property'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the regulation, e.g. the name of the file' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'Regulation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'PK, ID of the regulation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'RegulationID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the parent regulation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'ParentRegulation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the parent regulation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'ParentRegulationID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the regulation as defined in table RegulationType_Enum' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'Type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The status of the permit, i.e. E-mail notification, signed agreement, other (please specify)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'Status'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Link to the module DiversityProjects where further informations about the regulation are stored' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'ProjectURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date until which the regulation is vaild' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'ValidUntil'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes about the regulation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If this entry is not a regluation but for the organization of the hierarchy only' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'HierarchyOnly'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Regulations e.g. concerning the collection of specimens' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Regulation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A text code which uniquely identifies each object in the enumeration (primary key). This value may not be changed, because the application may depend upon it.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RegulationType_Enum', @level2type=N'COLUMN',@level2name=N'Code'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of enumerated object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RegulationType_Enum', @level2type=N'COLUMN',@level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Short abbreviated description of the object, displayed in the user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RegulationType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order in which the entries are displayed. The order may be changed at any time, but all values must be unique.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RegulationType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayOrder'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumerated objects can be hidden from the user interface, if this attribute is set to false (= unchecked check box)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RegulationType_Enum', @level2type=N'COLUMN',@level2name=N'DisplayEnable'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal development notes on usage, definition, etc. of an enumerated object' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RegulationType_Enum', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code of the superior entry, if a hierarchy within the entries is necessary' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RegulationType_Enum', @level2type=N'COLUMN',@level2name=N'ParentCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types of a Regulation, e.g. ABS' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'RegulationType_Enum'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the publishing database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ReplicationPublisher', @level2type=N'COLUMN',@level2name=N'DatabaseName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or address of the server where the publishing database is located' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ReplicationPublisher', @level2type=N'COLUMN',@level2name=N'Server'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The port used by the server' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ReplicationPublisher', @level2type=N'COLUMN',@level2name=N'Port'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ReplicationPublisher', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ReplicationPublisher', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ReplicationPublisher', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ReplicationPublisher', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the transaction (= primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'TransactionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of a preceeding transaction of a superior transaction, if transactions are organized in a hierarchy' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'ParentTransactionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of the transaction, e.g. gift in or out, exchange in or out, purchase in or out' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'TransactionType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the transaction as e.g. shown in an user interface' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'TransactionTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A group defined for the transaction, e.g. a taxonomic group as used for exchange balancing' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'ReportingCategory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the collection which is responsible for the administration of the transaction.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'AdministratingCollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Description of the material of this transaction' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'MaterialDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Material category of specimen. Examples: ''herbarium sheets'', ''drawings'', ''microscopic slides'' etc.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'MaterialCategory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The collectors of the material' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'MaterialCollectors'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The source of the material within a transaction, e.g. a excavation' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'MaterialSource'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the collection from which the specimen were transfered, e.g. the donating collection of a gift' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'FromCollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person or institution from which the specimen were transfered, e.g. the donator of a gift' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'FromTransactionPartnerName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the transaction partner (see e.g. module DiversityAgents)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'FromTransactionPartnerAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number or code by which a transaction may be recorded by the administration of the source of the specimen, e.g. the donating collection of a gift' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'FromTransactionNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the collection to which the specimen were transfered, e.g. the receiver of a gift' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'ToCollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person or institution to which the specimen were transfered, e.g. the receiver of a gift' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'ToTransactionPartnerName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the transaction partner (see e.g. module DiversityAgents)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'ToTransactionPartnerAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number or code by which a transaction may be recorded by the administration of the destination of the specimen, e.g. the receiving collection of a gift' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'ToTransactionNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of units which were (initially) included in the transaction' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'NumberOfUnits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The investigator for whose study a transacted material was sent' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'Investigator'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Comments on the exchanged material addressed to the transaction partner' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'TransactionComment'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date when the transaction started' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'End of the transaction period, e.g. if the time for borrowing the specimen is restricted' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'AgreedEndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Actual end of the transaction after a prolonation when e.g. the date of return for a loan was prolonged by the owner' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'ActualEndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Verbal or additional date information, e.g. ''end of summer 1985'', ''first quarter'', ''1888-1892''.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'DateSupplement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal notes on this transaction not to be published e.g. on a web page' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The recipient receiving the transaction e.g. if not derived from the link to DiversityAgents' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'ToRecipient'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person responsible for this transaction' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'ResponsibleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI of the person, team or organisation responsible for the data (see e.g. module DiversityAgents)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'ResponsibleAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Transactions like loan, borrow, gift, exchange etc. of specimen, if they are e.g. permanently or temporary transfered from one collection to another' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the project to which the transaction belongs (Projects are defined in DiversityProjects)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Transaction_log', @level2type=N'COLUMN',@level2name=N'AdministratingCollectionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the transaction, refers to table Transaction (= part of primary key and foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionAgent', @level2type=N'COLUMN',@level2name=N'TransactionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the Agent within the transaction  (= part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionAgent', @level2type=N'COLUMN',@level2name=N'TransactionAgentID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person or institution' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionAgent', @level2type=N'COLUMN',@level2name=N'AgentName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Link to the source for further informations about the agent, e.g in the module DiversityAgents' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionAgent', @level2type=N'COLUMN',@level2name=N'AgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Role of the agent within the transaction' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionAgent', @level2type=N'COLUMN',@level2name=N'AgentRole'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes about the agent' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionAgent', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionAgent', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionAgent', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionAgent', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionAgent', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Agents involved in the transaction' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionAgent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Text as transferred into the comment of a transaction' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionComment', @level2type=N'COLUMN',@level2name=N'Comment'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionComment', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionComment', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionComment', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionComment', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The standard text phrases for transactions' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionComment'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the transaction, refers to table Transaction (= part of primary key and foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionDocument', @level2type=N'COLUMN',@level2name=N'TransactionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the event of a transaction' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionDocument', @level2type=N'COLUMN',@level2name=N'Date'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The text of a transaction document' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionDocument', @level2type=N'COLUMN',@level2name=N'TransactionText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A scanned document connected to this transaction' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionDocument', @level2type=N'COLUMN',@level2name=N'TransactionDocument'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A display text as shown e.g. in a user interface to characterize the document' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionDocument', @level2type=N'COLUMN',@level2name=N'DisplayText'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A link to a web resource of the document the document' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionDocument', @level2type=N'COLUMN',@level2name=N'DocumentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the document' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionDocument', @level2type=N'COLUMN',@level2name=N'DocumentType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Internal notes on this transaction' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionDocument', @level2type=N'COLUMN',@level2name=N'InternalNotes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionDocument', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionDocument', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionDocument', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionDocument', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The history of transactions or the documents connected to the transactions' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionDocument'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the transaction, refers to table Transaction (= part of primary key and foreign key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'TransactionID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Unique ID for the payment  (= part of primary key)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'PaymentID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An identifer for the payment like a booking number or invoice number' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'Identifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Amount of the payment in the default currency as defined in TransactionCurrency' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'Amount'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the payment was not in the default curreny as defined in TransactionCurrency, the amount of the payment in foreign curreny' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'ForeignAmount'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the payment was not in the default curreny as defined in TransactionCurrency, the foreign currency of the payment' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'ForeignCurrency'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person or institution paying the amount' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'PayerName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Link to the source for further infomations about the payer, e.g in the module DiversityAgents' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'PayerAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Agent receiving the payment' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'RecipientName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Link to the source for further infomations about the recipient of the payment, e.g in the module DiversityAgents' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'RecipientAgentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date of the payment' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'PaymentDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Supplement to the date of the payment, e.g. if the original date is not a real date like ''summer 1920'' or ''1910 - 1912''' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'PaymentDateSupplement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A link to an external administration system for the payment' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'PaymentURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Notes about the payment' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'Notes'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was created' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'LogCreatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the creator of this data set' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'LogCreatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Point in time when this data set was updated last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'LogUpdatedWhen'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the person to update this data set last' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment', @level2type=N'COLUMN',@level2name=N'LogUpdatedBy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The payments within a transaction' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'TransactionPayment'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A login name which the user uses to access the DivesityWorkbench, Microsoft domains, etc.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserProxy', @level2type=N'COLUMN',@level2name=N'LoginName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DisplayControl', @value=N'109' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserProxy', @level2type=N'COLUMN',@level2name=N'LoginName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Format', @value=N'' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserProxy', @level2type=N'COLUMN',@level2name=N'LoginName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The short name of the user, e.g. P. Smith' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserProxy', @level2type=N'COLUMN',@level2name=N'CombinedNameCache'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'URI of a user in a remote module, e.g. refering to UserInfo.UserID in database DiversityUsers' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserProxy', @level2type=N'COLUMN',@level2name=N'UserURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Queries created by the user' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserProxy', @level2type=N'COLUMN',@level2name=N'Queries'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The settings for the user' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserProxy', @level2type=N'COLUMN',@level2name=N'Settings'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The current project selected by the user' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserProxy', @level2type=N'COLUMN',@level2name=N'CurrentProjectID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'ID of the user' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserProxy', @level2type=N'COLUMN',@level2name=N'ID'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the user consents the storage of his user name in the database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserProxy', @level2type=N'COLUMN',@level2name=N'PrivacyConsent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The time and date when the user consented or refused the storage of his user name in the database' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserProxy', @level2type=N'COLUMN',@level2name=N'PrivacyConsentDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The user as stored in the module DiversityUsers' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'UserProxy'
GO


/****** Object:  Index [IX_CollectionAgentSequence]    Script Date: 07.04.2021 12:30:04 ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_CollectionAgentSequence] ON [dbo].[CollectionAgent]
(
	[CollectionSpecimenID] ASC,
	[CollectorsSequence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CollectionEventID_log]    Script Date: 07.04.2021 12:30:04 ******/
CREATE NONCLUSTERED INDEX [IX_CollectionEventID_log] ON [dbo].[CollectionEvent_log]
(
	[CollectionEventID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_AccessionNumber]    Script Date: 07.04.2021 12:30:04 ******/
CREATE NONCLUSTERED INDEX [IX_AccessionNumber] ON [dbo].[CollectionSpecimen]
(
	[AccessionNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CollectionSpecimenID_log]    Script Date: 07.04.2021 12:30:04 ******/
CREATE NONCLUSTERED INDEX [IX_CollectionSpecimenID_log] ON [dbo].[CollectionSpecimen_log]
(
	[CollectionSpecimenID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_AccessionNumber]    Script Date: 07.04.2021 12:30:04 ******/
CREATE NONCLUSTERED INDEX [IX_AccessionNumber] ON [dbo].[CollectionSpecimenPart]
(
	[AccessionNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [IX_IdentificationUnitLastIdentificationCache]    Script Date: 07.04.2021 12:30:04 ******/
CREATE NONCLUSTERED INDEX [IX_IdentificationUnitLastIdentificationCache] ON [dbo].[IdentificationUnit]
(
	[LastIdentificationCache] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
SET ANSI_PADDING ON
GO
/****** Object:  Index [NonClusteredIndexIdentificationUnitDataWithholdingReason]    Script Date: 07.04.2021 12:30:04 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndexIdentificationUnitDataWithholdingReason] ON [dbo].[IdentificationUnit]
(
	[IdentificationUnitID] ASC,
	[DataWithholdingReason] ASC
)
INCLUDE([CollectionSpecimenID],[TaxonomicGroup]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndex_ParentTransactionID_AllColumns]    Script Date: 07.04.2021 12:30:04 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndex_ParentTransactionID_AllColumns] ON [dbo].[Transaction]
(
	[ParentTransactionID] ASC
)
INCLUDE([TransactionID],[TransactionType],[TransactionTitle],[ReportingCategory],[AdministratingCollectionID],[MaterialDescription],[MaterialCategory],[MaterialCollectors],[FromCollectionID],[FromTransactionPartnerName],[FromTransactionPartnerAgentURI],[FromTransactionNumber],[ToCollectionID],[ToTransactionPartnerName],[ToTransactionPartnerAgentURI],[ToTransactionNumber],[NumberOfUnits],[Investigator],[TransactionComment],[BeginDate],[AgreedEndDate],[ActualEndDate],[InternalNotes],[ToRecipient],[ResponsibleName],[ResponsibleAgentURI],[MaterialSource]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NonClusteredIndexParentTransactionID]    Script Date: 07.04.2021 12:30:04 ******/
CREATE NONCLUSTERED INDEX [NonClusteredIndexParentTransactionID] ON [dbo].[Transaction]
(
	[ParentTransactionID] ASC,
	[TransactionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO